function Invoke-ADCUpdateAppalgparam {
<#
    .SYNOPSIS
        Update Network configuration Object
    .DESCRIPTION
        Update Network configuration Object 
    .PARAMETER pptpgreidletimeout 
        Interval in sec, after which data sessions of PPTP GRE is cleared.  
        Default value: 9000  
        Minimum value = 1  
        Maximum value = 9000
    .EXAMPLE
        Invoke-ADCUpdateAppalgparam 
    .NOTES
        File Name : Invoke-ADCUpdateAppalgparam
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/appalgparam/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [ValidateRange(1, 9000)]
        [double]$pptpgreidletimeout 

    )
    begin {
        Write-Verbose "Invoke-ADCUpdateAppalgparam: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('pptpgreidletimeout')) { $Payload.Add('pptpgreidletimeout', $pptpgreidletimeout) }
 
            if ($PSCmdlet.ShouldProcess("appalgparam", "Update Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -NitroPath nitro/v1/config -Type appalgparam -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
            Write-Output $result

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUpdateAppalgparam: Finished"
    }
}

function Invoke-ADCUnsetAppalgparam {
<#
    .SYNOPSIS
        Unset Network configuration Object
    .DESCRIPTION
        Unset Network configuration Object 
   .PARAMETER pptpgreidletimeout 
       Interval in sec, after which data sessions of PPTP GRE is cleared.
    .EXAMPLE
        Invoke-ADCUnsetAppalgparam 
    .NOTES
        File Name : Invoke-ADCUnsetAppalgparam
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/appalgparam
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Boolean]$pptpgreidletimeout 
    )
    begin {
        Write-Verbose "Invoke-ADCUnsetAppalgparam: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('pptpgreidletimeout')) { $Payload.Add('pptpgreidletimeout', $pptpgreidletimeout) }
            if ($PSCmdlet.ShouldProcess("appalgparam", "Unset Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type appalgparam -NitroPath nitro/v1/config -Action unset -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUnsetAppalgparam: Finished"
    }
}

function Invoke-ADCGetAppalgparam {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER GetAll 
        Retreive all appalgparam object(s)
    .PARAMETER Count
        If specified, the count of the appalgparam object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetAppalgparam
    .EXAMPLE 
        Invoke-ADCGetAppalgparam -GetAll
    .EXAMPLE
        Invoke-ADCGetAppalgparam -name <string>
    .EXAMPLE
        Invoke-ADCGetAppalgparam -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetAppalgparam
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/appalgparam/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetAppalgparam: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all appalgparam objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type appalgparam -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for appalgparam objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type appalgparam -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving appalgparam objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type appalgparam -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving appalgparam configuration for property ''"

            } else {
                Write-Verbose "Retrieving appalgparam configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type appalgparam -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetAppalgparam: Ended"
    }
}

function Invoke-ADCAddArp {
<#
    .SYNOPSIS
        Add Network configuration Object
    .DESCRIPTION
        Add Network configuration Object 
    .PARAMETER ipaddress 
        IP address of the network device that you want to add to the ARP table.  
        Minimum length = 1 
    .PARAMETER td 
        Integer value that uniquely identifies the traffic domain in which you want to configure the entity. If you do not specify an ID, the entity becomes part of the default traffic domain, which has an ID of 0.  
        Minimum value = 0  
        Maximum value = 4094 
    .PARAMETER mac 
        MAC address of the network device. 
    .PARAMETER ifnum 
        Interface through which the network device is accessible. Specify the interface in (slot/port) notation. For example, 1/3. 
    .PARAMETER vxlan 
        ID of the VXLAN on which the IP address of this ARP entry is reachable.  
        Minimum value = 1  
        Maximum value = 16777215 
    .PARAMETER vtep 
        IP address of the VXLAN tunnel endpoint (VTEP) through which the IP address of this ARP entry is reachable.  
        Minimum length = 1 
    .PARAMETER vlan 
        The VLAN ID through which packets are to be sent after matching the ARP entry. This is a numeric value. 
    .PARAMETER ownernode 
        The owner node for the Arp entry.  
        Minimum value = 0  
        Maximum value = 31
    .EXAMPLE
        Invoke-ADCAddArp -ipaddress <string> -mac <string>
    .NOTES
        File Name : Invoke-ADCAddArp
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/arp/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$ipaddress ,

        [ValidateRange(0, 4094)]
        [double]$td ,

        [Parameter(Mandatory = $true)]
        [string]$mac ,

        [string]$ifnum ,

        [ValidateRange(1, 16777215)]
        [double]$vxlan ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$vtep ,

        [double]$vlan ,

        [ValidateRange(0, 31)]
        [double]$ownernode 

    )
    begin {
        Write-Verbose "Invoke-ADCAddArp: Starting"
    }
    process {
        try {
            $Payload = @{
                ipaddress = $ipaddress
                mac = $mac
            }
            if ($PSBoundParameters.ContainsKey('td')) { $Payload.Add('td', $td) }
            if ($PSBoundParameters.ContainsKey('ifnum')) { $Payload.Add('ifnum', $ifnum) }
            if ($PSBoundParameters.ContainsKey('vxlan')) { $Payload.Add('vxlan', $vxlan) }
            if ($PSBoundParameters.ContainsKey('vtep')) { $Payload.Add('vtep', $vtep) }
            if ($PSBoundParameters.ContainsKey('vlan')) { $Payload.Add('vlan', $vlan) }
            if ($PSBoundParameters.ContainsKey('ownernode')) { $Payload.Add('ownernode', $ownernode) }
 
            if ($PSCmdlet.ShouldProcess("arp", "Add Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -NitroPath nitro/v1/config -Type arp -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
            Write-Output $result

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddArp: Finished"
    }
}

function Invoke-ADCDeleteArp {
<#
    .SYNOPSIS
        Delete Network configuration Object
    .DESCRIPTION
        Delete Network configuration Object
    .PARAMETER ipaddress 
       IP address of the network device that you want to add to the ARP table.  
       Minimum length = 1    .PARAMETER td 
       Integer value that uniquely identifies the traffic domain in which you want to configure the entity. If you do not specify an ID, the entity becomes part of the default traffic domain, which has an ID of 0.  
       Minimum value = 0  
       Maximum value = 4094    .PARAMETER all 
       Remove all ARP entries from the ARP table of the Citrix ADC.    .PARAMETER ownernode 
       The owner node for the Arp entry.  
       Minimum value = 0  
       Maximum value = 31
    .EXAMPLE
        Invoke-ADCDeleteArp -ipaddress <string>
    .NOTES
        File Name : Invoke-ADCDeleteArp
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/arp/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$ipaddress ,

        [double]$td ,

        [boolean]$all ,

        [double]$ownernode 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteArp: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }
            if ($PSBoundParameters.ContainsKey('td')) { $Arguments.Add('td', $td) }
            if ($PSBoundParameters.ContainsKey('all')) { $Arguments.Add('all', $all) }
            if ($PSBoundParameters.ContainsKey('ownernode')) { $Arguments.Add('ownernode', $ownernode) }
            if ($PSCmdlet.ShouldProcess("$ipaddress", "Delete Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type arp -NitroPath nitro/v1/config -Resource $ipaddress -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteArp: Finished"
    }
}

function Invoke-ADCSendArp {
<#
    .SYNOPSIS
        Send Network configuration Object
    .DESCRIPTION
        Send Network configuration Object 
    .PARAMETER ipaddress 
        IP address of the network device that you want to add to the ARP table. 
    .PARAMETER td 
        Integer value that uniquely identifies the traffic domain in which you want to configure the entity. If you do not specify an ID, the entity becomes part of the default traffic domain, which has an ID of 0. 
    .PARAMETER all 
        Remove all ARP entries from the ARP table of the Citrix ADC.
    .EXAMPLE
        Invoke-ADCSendArp 
    .NOTES
        File Name : Invoke-ADCSendArp
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/arp/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$ipaddress ,

        [ValidateRange(0, 4094)]
        [double]$td ,

        [boolean]$all 

    )
    begin {
        Write-Verbose "Invoke-ADCSendArp: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('ipaddress')) { $Payload.Add('ipaddress', $ipaddress) }
            if ($PSBoundParameters.ContainsKey('td')) { $Payload.Add('td', $td) }
            if ($PSBoundParameters.ContainsKey('all')) { $Payload.Add('all', $all) }
            if ($PSCmdlet.ShouldProcess($Name, "Send Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -NitroPath nitro/v1/config -Type arp -Action send -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $result
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCSendArp: Finished"
    }
}

function Invoke-ADCGetArp {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER ipaddress 
       IP address of the network device that you want to add to the ARP table. 
    .PARAMETER td 
       Integer value that uniquely identifies the traffic domain in which you want to configure the entity. If you do not specify an ID, the entity becomes part of the default traffic domain, which has an ID of 0. 
    .PARAMETER ownernode 
       The owner node for the Arp entry. 
    .PARAMETER nodeid 
       Unique number that identifies the cluster node. 
    .PARAMETER GetAll 
        Retreive all arp object(s)
    .PARAMETER Count
        If specified, the count of the arp object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetArp
    .EXAMPLE 
        Invoke-ADCGetArp -GetAll 
    .EXAMPLE 
        Invoke-ADCGetArp -Count
    .EXAMPLE
        Invoke-ADCGetArp -name <string>
    .EXAMPLE
        Invoke-ADCGetArp -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetArp
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/arp/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByArgument')]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$ipaddress ,

        [Parameter(ParameterSetName = 'GetByArgument')]
        [ValidateRange(0, 4094)]
        [double]$td ,

        [Parameter(ParameterSetName = 'GetByArgument')]
        [ValidateRange(0, 31)]
        [double]$ownernode ,

        [Parameter(ParameterSetName = 'GetByArgument')]
        [ValidateRange(0, 31)]
        [double]$nodeid,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll,

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$ViewSummary

    )
    begin {
        Write-Verbose "Invoke-ADCGetArp: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all arp objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type arp -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for arp objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type arp -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving arp objects by arguments"
                $Arguments = @{ } 
                if ($PSBoundParameters.ContainsKey('ipaddress')) { $Arguments.Add('ipaddress', $ipaddress) } 
                if ($PSBoundParameters.ContainsKey('td')) { $Arguments.Add('td', $td) } 
                if ($PSBoundParameters.ContainsKey('ownernode')) { $Arguments.Add('ownernode', $ownernode) } 
                if ($PSBoundParameters.ContainsKey('nodeid')) { $Arguments.Add('nodeid', $nodeid) }
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type arp -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving arp configuration for property ''"

            } else {
                Write-Verbose "Retrieving arp configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type arp -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetArp: Ended"
    }
}

function Invoke-ADCUpdateArpparam {
<#
    .SYNOPSIS
        Update Network configuration Object
    .DESCRIPTION
        Update Network configuration Object 
    .PARAMETER timeout 
        Time-out value (aging time) for the dynamically learned ARP entries, in seconds. The new value applies only to ARP entries that are dynamically learned after the new value is set. Previously existing ARP entries expire after the previously configured aging time.  
        Default value: 1200  
        Minimum value = 5  
        Maximum value = 1200 
    .PARAMETER spoofvalidation 
        enable/disable arp spoofing validation.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED
    .EXAMPLE
        Invoke-ADCUpdateArpparam 
    .NOTES
        File Name : Invoke-ADCUpdateArpparam
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/arpparam/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [ValidateRange(5, 1200)]
        [double]$timeout ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$spoofvalidation 

    )
    begin {
        Write-Verbose "Invoke-ADCUpdateArpparam: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('timeout')) { $Payload.Add('timeout', $timeout) }
            if ($PSBoundParameters.ContainsKey('spoofvalidation')) { $Payload.Add('spoofvalidation', $spoofvalidation) }
 
            if ($PSCmdlet.ShouldProcess("arpparam", "Update Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -NitroPath nitro/v1/config -Type arpparam -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
            Write-Output $result

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUpdateArpparam: Finished"
    }
}

function Invoke-ADCUnsetArpparam {
<#
    .SYNOPSIS
        Unset Network configuration Object
    .DESCRIPTION
        Unset Network configuration Object 
   .PARAMETER timeout 
       Time-out value (aging time) for the dynamically learned ARP entries, in seconds. The new value applies only to ARP entries that are dynamically learned after the new value is set. Previously existing ARP entries expire after the previously configured aging time. 
   .PARAMETER spoofvalidation 
       enable/disable arp spoofing validation.  
       Possible values = ENABLED, DISABLED
    .EXAMPLE
        Invoke-ADCUnsetArpparam 
    .NOTES
        File Name : Invoke-ADCUnsetArpparam
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/arpparam
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Boolean]$timeout ,

        [Boolean]$spoofvalidation 
    )
    begin {
        Write-Verbose "Invoke-ADCUnsetArpparam: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('timeout')) { $Payload.Add('timeout', $timeout) }
            if ($PSBoundParameters.ContainsKey('spoofvalidation')) { $Payload.Add('spoofvalidation', $spoofvalidation) }
            if ($PSCmdlet.ShouldProcess("arpparam", "Unset Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type arpparam -NitroPath nitro/v1/config -Action unset -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUnsetArpparam: Finished"
    }
}

function Invoke-ADCGetArpparam {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER GetAll 
        Retreive all arpparam object(s)
    .PARAMETER Count
        If specified, the count of the arpparam object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetArpparam
    .EXAMPLE 
        Invoke-ADCGetArpparam -GetAll
    .EXAMPLE
        Invoke-ADCGetArpparam -name <string>
    .EXAMPLE
        Invoke-ADCGetArpparam -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetArpparam
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/arpparam/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetArpparam: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all arpparam objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type arpparam -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for arpparam objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type arpparam -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving arpparam objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type arpparam -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving arpparam configuration for property ''"

            } else {
                Write-Verbose "Retrieving arpparam configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type arpparam -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetArpparam: Ended"
    }
}

function Invoke-ADCAddBridgegroup {
<#
    .SYNOPSIS
        Add Network configuration Object
    .DESCRIPTION
        Add Network configuration Object 
    .PARAMETER id 
        An integer that uniquely identifies the bridge group.  
        Minimum value = 1  
        Maximum value = 1000 
    .PARAMETER dynamicrouting 
        Enable dynamic routing for this bridgegroup.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER ipv6dynamicrouting 
        Enable all IPv6 dynamic routing protocols on all VLANs bound to this bridgegroup. Note: For the ENABLED setting to work, you must configure IPv6 dynamic routing protocols from the VTYSH command line.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER PassThru 
        Return details about the created bridgegroup item.
    .EXAMPLE
        Invoke-ADCAddBridgegroup -id <double>
    .NOTES
        File Name : Invoke-ADCAddBridgegroup
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/bridgegroup/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateRange(1, 1000)]
        [double]$id ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$dynamicrouting = 'DISABLED' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$ipv6dynamicrouting = 'DISABLED' ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddBridgegroup: Starting"
    }
    process {
        try {
            $Payload = @{
                id = $id
            }
            if ($PSBoundParameters.ContainsKey('dynamicrouting')) { $Payload.Add('dynamicrouting', $dynamicrouting) }
            if ($PSBoundParameters.ContainsKey('ipv6dynamicrouting')) { $Payload.Add('ipv6dynamicrouting', $ipv6dynamicrouting) }
 
            if ($PSCmdlet.ShouldProcess("bridgegroup", "Add Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -NitroPath nitro/v1/config -Type bridgegroup -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetBridgegroup -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddBridgegroup: Finished"
    }
}

function Invoke-ADCDeleteBridgegroup {
<#
    .SYNOPSIS
        Delete Network configuration Object
    .DESCRIPTION
        Delete Network configuration Object
    .PARAMETER id 
       An integer that uniquely identifies the bridge group.  
       Minimum value = 1  
       Maximum value = 1000 
    .EXAMPLE
        Invoke-ADCDeleteBridgegroup -id <double>
    .NOTES
        File Name : Invoke-ADCDeleteBridgegroup
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/bridgegroup/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [double]$id 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteBridgegroup: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }

            if ($PSCmdlet.ShouldProcess("$id", "Delete Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type bridgegroup -NitroPath nitro/v1/config -Resource $id -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteBridgegroup: Finished"
    }
}

function Invoke-ADCUpdateBridgegroup {
<#
    .SYNOPSIS
        Update Network configuration Object
    .DESCRIPTION
        Update Network configuration Object 
    .PARAMETER id 
        An integer that uniquely identifies the bridge group.  
        Minimum value = 1  
        Maximum value = 1000 
    .PARAMETER dynamicrouting 
        Enable dynamic routing for this bridgegroup.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER ipv6dynamicrouting 
        Enable all IPv6 dynamic routing protocols on all VLANs bound to this bridgegroup. Note: For the ENABLED setting to work, you must configure IPv6 dynamic routing protocols from the VTYSH command line.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER PassThru 
        Return details about the created bridgegroup item.
    .EXAMPLE
        Invoke-ADCUpdateBridgegroup -id <double>
    .NOTES
        File Name : Invoke-ADCUpdateBridgegroup
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/bridgegroup/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateRange(1, 1000)]
        [double]$id ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$dynamicrouting ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$ipv6dynamicrouting ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCUpdateBridgegroup: Starting"
    }
    process {
        try {
            $Payload = @{
                id = $id
            }
            if ($PSBoundParameters.ContainsKey('dynamicrouting')) { $Payload.Add('dynamicrouting', $dynamicrouting) }
            if ($PSBoundParameters.ContainsKey('ipv6dynamicrouting')) { $Payload.Add('ipv6dynamicrouting', $ipv6dynamicrouting) }
 
            if ($PSCmdlet.ShouldProcess("bridgegroup", "Update Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -NitroPath nitro/v1/config -Type bridgegroup -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetBridgegroup -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUpdateBridgegroup: Finished"
    }
}

function Invoke-ADCUnsetBridgegroup {
<#
    .SYNOPSIS
        Unset Network configuration Object
    .DESCRIPTION
        Unset Network configuration Object 
   .PARAMETER id 
       An integer that uniquely identifies the bridge group. 
   .PARAMETER dynamicrouting 
       Enable dynamic routing for this bridgegroup.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER ipv6dynamicrouting 
       Enable all IPv6 dynamic routing protocols on all VLANs bound to this bridgegroup. Note: For the ENABLED setting to work, you must configure IPv6 dynamic routing protocols from the VTYSH command line.  
       Possible values = ENABLED, DISABLED
    .EXAMPLE
        Invoke-ADCUnsetBridgegroup -id <double>
    .NOTES
        File Name : Invoke-ADCUnsetBridgegroup
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/bridgegroup
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateRange(1, 1000)]
        [double]$id ,

        [Boolean]$dynamicrouting ,

        [Boolean]$ipv6dynamicrouting 
    )
    begin {
        Write-Verbose "Invoke-ADCUnsetBridgegroup: Starting"
    }
    process {
        try {
            $Payload = @{
                id = $id
            }
            if ($PSBoundParameters.ContainsKey('dynamicrouting')) { $Payload.Add('dynamicrouting', $dynamicrouting) }
            if ($PSBoundParameters.ContainsKey('ipv6dynamicrouting')) { $Payload.Add('ipv6dynamicrouting', $ipv6dynamicrouting) }
            if ($PSCmdlet.ShouldProcess("$id", "Unset Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type bridgegroup -NitroPath nitro/v1/config -Action unset -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUnsetBridgegroup: Finished"
    }
}

function Invoke-ADCGetBridgegroup {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER id 
       An integer that uniquely identifies the bridge group. 
    .PARAMETER GetAll 
        Retreive all bridgegroup object(s)
    .PARAMETER Count
        If specified, the count of the bridgegroup object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetBridgegroup
    .EXAMPLE 
        Invoke-ADCGetBridgegroup -GetAll 
    .EXAMPLE 
        Invoke-ADCGetBridgegroup -Count
    .EXAMPLE
        Invoke-ADCGetBridgegroup -name <string>
    .EXAMPLE
        Invoke-ADCGetBridgegroup -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetBridgegroup
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/bridgegroup/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateRange(1, 1000)]
        [double]$id,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll,

        [Parameter(ParameterSetName = 'GetAll')]
        [Parameter(ParameterSetName = 'Get')]
        [Switch]$ViewSummary

    )
    begin {
        Write-Verbose "Invoke-ADCGetBridgegroup: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all bridgegroup objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type bridgegroup -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for bridgegroup objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type bridgegroup -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving bridgegroup objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type bridgegroup -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving bridgegroup configuration for property 'id'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type bridgegroup -NitroPath nitro/v1/config -Resource $id -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving bridgegroup configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type bridgegroup -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetBridgegroup: Ended"
    }
}

function Invoke-ADCGetBridgegroupbinding {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER id 
       The name of the bridge group. 
    .PARAMETER GetAll 
        Retreive all bridgegroup_binding object(s)
    .PARAMETER Count
        If specified, the count of the bridgegroup_binding object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetBridgegroupbinding
    .EXAMPLE 
        Invoke-ADCGetBridgegroupbinding -GetAll
    .EXAMPLE
        Invoke-ADCGetBridgegroupbinding -name <string>
    .EXAMPLE
        Invoke-ADCGetBridgegroupbinding -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetBridgegroupbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/bridgegroup_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateRange(1, 1000)]
        [double]$id,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetBridgegroupbinding: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ 
                    bulkbindings = 'yes'
                }
                Write-Verbose "Retrieving all bridgegroup_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type bridgegroup_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for bridgegroup_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type bridgegroup_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving bridgegroup_binding objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type bridgegroup_binding -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving bridgegroup_binding configuration for property 'id'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type bridgegroup_binding -NitroPath nitro/v1/config -Resource $id -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving bridgegroup_binding configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type bridgegroup_binding -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetBridgegroupbinding: Ended"
    }
}

function Invoke-ADCAddBridgegroupnsip6binding {
<#
    .SYNOPSIS
        Add Network configuration Object
    .DESCRIPTION
        Add Network configuration Object 
    .PARAMETER id 
        The integer that uniquely identifies the bridge group.  
        Minimum value = 1  
        Maximum value = 1000 
    .PARAMETER ipaddress 
        The IP address assigned to the bridge group. 
    .PARAMETER netmask 
        A subnet mask associated with the network address.  
        Minimum length = 1 
    .PARAMETER td 
        Integer value that uniquely identifies the traffic domain in which you want to configure the entity. If you do not specify an ID, the entity becomes part of the default traffic domain, which has an ID of 0.  
        Minimum value = 0  
        Maximum value = 4094 
    .PARAMETER ownergroup 
        The owner node group in a Cluster for this vlan.  
        Default value: DEFAULT_NG  
        Minimum length = 1 
    .PARAMETER PassThru 
        Return details about the created bridgegroup_nsip6_binding item.
    .EXAMPLE
        Invoke-ADCAddBridgegroupnsip6binding -id <double>
    .NOTES
        File Name : Invoke-ADCAddBridgegroupnsip6binding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/bridgegroup_nsip6_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateRange(1, 1000)]
        [double]$id ,

        [string]$ipaddress ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$netmask ,

        [ValidateRange(0, 4094)]
        [double]$td ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$ownergroup = 'DEFAULT_NG' ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddBridgegroupnsip6binding: Starting"
    }
    process {
        try {
            $Payload = @{
                id = $id
            }
            if ($PSBoundParameters.ContainsKey('ipaddress')) { $Payload.Add('ipaddress', $ipaddress) }
            if ($PSBoundParameters.ContainsKey('netmask')) { $Payload.Add('netmask', $netmask) }
            if ($PSBoundParameters.ContainsKey('td')) { $Payload.Add('td', $td) }
            if ($PSBoundParameters.ContainsKey('ownergroup')) { $Payload.Add('ownergroup', $ownergroup) }
 
            if ($PSCmdlet.ShouldProcess("bridgegroup_nsip6_binding", "Add Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -NitroPath nitro/v1/config -Type bridgegroup_nsip6_binding -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetBridgegroupnsip6binding -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddBridgegroupnsip6binding: Finished"
    }
}

function Invoke-ADCDeleteBridgegroupnsip6binding {
<#
    .SYNOPSIS
        Delete Network configuration Object
    .DESCRIPTION
        Delete Network configuration Object
    .PARAMETER id 
       The integer that uniquely identifies the bridge group.  
       Minimum value = 1  
       Maximum value = 1000    .PARAMETER ipaddress 
       The IP address assigned to the bridge group.    .PARAMETER netmask 
       A subnet mask associated with the network address.  
       Minimum length = 1    .PARAMETER td 
       Integer value that uniquely identifies the traffic domain in which you want to configure the entity. If you do not specify an ID, the entity becomes part of the default traffic domain, which has an ID of 0.  
       Minimum value = 0  
       Maximum value = 4094    .PARAMETER ownergroup 
       The owner node group in a Cluster for this vlan.  
       Default value: DEFAULT_NG  
       Minimum length = 1
    .EXAMPLE
        Invoke-ADCDeleteBridgegroupnsip6binding -id <double>
    .NOTES
        File Name : Invoke-ADCDeleteBridgegroupnsip6binding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/bridgegroup_nsip6_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [double]$id ,

        [string]$ipaddress ,

        [string]$netmask ,

        [double]$td ,

        [string]$ownergroup 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteBridgegroupnsip6binding: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }
            if ($PSBoundParameters.ContainsKey('ipaddress')) { $Arguments.Add('ipaddress', $ipaddress) }
            if ($PSBoundParameters.ContainsKey('netmask')) { $Arguments.Add('netmask', $netmask) }
            if ($PSBoundParameters.ContainsKey('td')) { $Arguments.Add('td', $td) }
            if ($PSBoundParameters.ContainsKey('ownergroup')) { $Arguments.Add('ownergroup', $ownergroup) }
            if ($PSCmdlet.ShouldProcess("$id", "Delete Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type bridgegroup_nsip6_binding -NitroPath nitro/v1/config -Resource $id -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteBridgegroupnsip6binding: Finished"
    }
}

function Invoke-ADCGetBridgegroupnsip6binding {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER id 
       The integer that uniquely identifies the bridge group. 
    .PARAMETER GetAll 
        Retreive all bridgegroup_nsip6_binding object(s)
    .PARAMETER Count
        If specified, the count of the bridgegroup_nsip6_binding object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetBridgegroupnsip6binding
    .EXAMPLE 
        Invoke-ADCGetBridgegroupnsip6binding -GetAll 
    .EXAMPLE 
        Invoke-ADCGetBridgegroupnsip6binding -Count
    .EXAMPLE
        Invoke-ADCGetBridgegroupnsip6binding -name <string>
    .EXAMPLE
        Invoke-ADCGetBridgegroupnsip6binding -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetBridgegroupnsip6binding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/bridgegroup_nsip6_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateRange(1, 1000)]
        [double]$id,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetBridgegroupnsip6binding: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ 
                    bulkbindings = 'yes'
                }
                Write-Verbose "Retrieving all bridgegroup_nsip6_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type bridgegroup_nsip6_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for bridgegroup_nsip6_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type bridgegroup_nsip6_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving bridgegroup_nsip6_binding objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type bridgegroup_nsip6_binding -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving bridgegroup_nsip6_binding configuration for property 'id'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type bridgegroup_nsip6_binding -NitroPath nitro/v1/config -Resource $id -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving bridgegroup_nsip6_binding configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type bridgegroup_nsip6_binding -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetBridgegroupnsip6binding: Ended"
    }
}

function Invoke-ADCAddBridgegroupnsipbinding {
<#
    .SYNOPSIS
        Add Network configuration Object
    .DESCRIPTION
        Add Network configuration Object 
    .PARAMETER id 
        The integer that uniquely identifies the bridge group.  
        Minimum value = 1  
        Maximum value = 1000 
    .PARAMETER ipaddress 
        The IP address assigned to the bridge group. 
    .PARAMETER netmask 
        The network mask for the subnet defined for the bridge group. 
    .PARAMETER td 
        Integer value that uniquely identifies the traffic domain in which you want to configure the entity. If you do not specify an ID, the entity becomes part of the default traffic domain, which has an ID of 0.  
        Minimum value = 0  
        Maximum value = 4094 
    .PARAMETER ownergroup 
        The owner node group in a Cluster for this vlan.  
        Default value: DEFAULT_NG  
        Minimum length = 1 
    .PARAMETER PassThru 
        Return details about the created bridgegroup_nsip_binding item.
    .EXAMPLE
        Invoke-ADCAddBridgegroupnsipbinding -id <double>
    .NOTES
        File Name : Invoke-ADCAddBridgegroupnsipbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/bridgegroup_nsip_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateRange(1, 1000)]
        [double]$id ,

        [string]$ipaddress ,

        [string]$netmask ,

        [ValidateRange(0, 4094)]
        [double]$td ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$ownergroup = 'DEFAULT_NG' ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddBridgegroupnsipbinding: Starting"
    }
    process {
        try {
            $Payload = @{
                id = $id
            }
            if ($PSBoundParameters.ContainsKey('ipaddress')) { $Payload.Add('ipaddress', $ipaddress) }
            if ($PSBoundParameters.ContainsKey('netmask')) { $Payload.Add('netmask', $netmask) }
            if ($PSBoundParameters.ContainsKey('td')) { $Payload.Add('td', $td) }
            if ($PSBoundParameters.ContainsKey('ownergroup')) { $Payload.Add('ownergroup', $ownergroup) }
 
            if ($PSCmdlet.ShouldProcess("bridgegroup_nsip_binding", "Add Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -NitroPath nitro/v1/config -Type bridgegroup_nsip_binding -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetBridgegroupnsipbinding -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddBridgegroupnsipbinding: Finished"
    }
}

function Invoke-ADCDeleteBridgegroupnsipbinding {
<#
    .SYNOPSIS
        Delete Network configuration Object
    .DESCRIPTION
        Delete Network configuration Object
    .PARAMETER id 
       The integer that uniquely identifies the bridge group.  
       Minimum value = 1  
       Maximum value = 1000    .PARAMETER ipaddress 
       The IP address assigned to the bridge group.    .PARAMETER netmask 
       The network mask for the subnet defined for the bridge group.    .PARAMETER td 
       Integer value that uniquely identifies the traffic domain in which you want to configure the entity. If you do not specify an ID, the entity becomes part of the default traffic domain, which has an ID of 0.  
       Minimum value = 0  
       Maximum value = 4094    .PARAMETER ownergroup 
       The owner node group in a Cluster for this vlan.  
       Default value: DEFAULT_NG  
       Minimum length = 1
    .EXAMPLE
        Invoke-ADCDeleteBridgegroupnsipbinding -id <double>
    .NOTES
        File Name : Invoke-ADCDeleteBridgegroupnsipbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/bridgegroup_nsip_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [double]$id ,

        [string]$ipaddress ,

        [string]$netmask ,

        [double]$td ,

        [string]$ownergroup 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteBridgegroupnsipbinding: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }
            if ($PSBoundParameters.ContainsKey('ipaddress')) { $Arguments.Add('ipaddress', $ipaddress) }
            if ($PSBoundParameters.ContainsKey('netmask')) { $Arguments.Add('netmask', $netmask) }
            if ($PSBoundParameters.ContainsKey('td')) { $Arguments.Add('td', $td) }
            if ($PSBoundParameters.ContainsKey('ownergroup')) { $Arguments.Add('ownergroup', $ownergroup) }
            if ($PSCmdlet.ShouldProcess("$id", "Delete Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type bridgegroup_nsip_binding -NitroPath nitro/v1/config -Resource $id -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteBridgegroupnsipbinding: Finished"
    }
}

function Invoke-ADCGetBridgegroupnsipbinding {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER id 
       The integer that uniquely identifies the bridge group. 
    .PARAMETER GetAll 
        Retreive all bridgegroup_nsip_binding object(s)
    .PARAMETER Count
        If specified, the count of the bridgegroup_nsip_binding object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetBridgegroupnsipbinding
    .EXAMPLE 
        Invoke-ADCGetBridgegroupnsipbinding -GetAll 
    .EXAMPLE 
        Invoke-ADCGetBridgegroupnsipbinding -Count
    .EXAMPLE
        Invoke-ADCGetBridgegroupnsipbinding -name <string>
    .EXAMPLE
        Invoke-ADCGetBridgegroupnsipbinding -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetBridgegroupnsipbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/bridgegroup_nsip_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateRange(1, 1000)]
        [double]$id,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetBridgegroupnsipbinding: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ 
                    bulkbindings = 'yes'
                }
                Write-Verbose "Retrieving all bridgegroup_nsip_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type bridgegroup_nsip_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for bridgegroup_nsip_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type bridgegroup_nsip_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving bridgegroup_nsip_binding objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type bridgegroup_nsip_binding -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving bridgegroup_nsip_binding configuration for property 'id'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type bridgegroup_nsip_binding -NitroPath nitro/v1/config -Resource $id -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving bridgegroup_nsip_binding configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type bridgegroup_nsip_binding -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetBridgegroupnsipbinding: Ended"
    }
}

function Invoke-ADCAddBridgegroupvlanbinding {
<#
    .SYNOPSIS
        Add Network configuration Object
    .DESCRIPTION
        Add Network configuration Object 
    .PARAMETER id 
        The integer that uniquely identifies the bridge group.  
        Minimum value = 1  
        Maximum value = 1000 
    .PARAMETER vlan 
        Names of all member VLANs. 
    .PARAMETER PassThru 
        Return details about the created bridgegroup_vlan_binding item.
    .EXAMPLE
        Invoke-ADCAddBridgegroupvlanbinding -id <double>
    .NOTES
        File Name : Invoke-ADCAddBridgegroupvlanbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/bridgegroup_vlan_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateRange(1, 1000)]
        [double]$id ,

        [double]$vlan ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddBridgegroupvlanbinding: Starting"
    }
    process {
        try {
            $Payload = @{
                id = $id
            }
            if ($PSBoundParameters.ContainsKey('vlan')) { $Payload.Add('vlan', $vlan) }
 
            if ($PSCmdlet.ShouldProcess("bridgegroup_vlan_binding", "Add Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -NitroPath nitro/v1/config -Type bridgegroup_vlan_binding -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetBridgegroupvlanbinding -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddBridgegroupvlanbinding: Finished"
    }
}

function Invoke-ADCDeleteBridgegroupvlanbinding {
<#
    .SYNOPSIS
        Delete Network configuration Object
    .DESCRIPTION
        Delete Network configuration Object
    .PARAMETER id 
       The integer that uniquely identifies the bridge group.  
       Minimum value = 1  
       Maximum value = 1000    .PARAMETER vlan 
       Names of all member VLANs.
    .EXAMPLE
        Invoke-ADCDeleteBridgegroupvlanbinding -id <double>
    .NOTES
        File Name : Invoke-ADCDeleteBridgegroupvlanbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/bridgegroup_vlan_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [double]$id ,

        [double]$vlan 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteBridgegroupvlanbinding: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }
            if ($PSBoundParameters.ContainsKey('vlan')) { $Arguments.Add('vlan', $vlan) }
            if ($PSCmdlet.ShouldProcess("$id", "Delete Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type bridgegroup_vlan_binding -NitroPath nitro/v1/config -Resource $id -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteBridgegroupvlanbinding: Finished"
    }
}

function Invoke-ADCGetBridgegroupvlanbinding {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER id 
       The integer that uniquely identifies the bridge group. 
    .PARAMETER GetAll 
        Retreive all bridgegroup_vlan_binding object(s)
    .PARAMETER Count
        If specified, the count of the bridgegroup_vlan_binding object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetBridgegroupvlanbinding
    .EXAMPLE 
        Invoke-ADCGetBridgegroupvlanbinding -GetAll 
    .EXAMPLE 
        Invoke-ADCGetBridgegroupvlanbinding -Count
    .EXAMPLE
        Invoke-ADCGetBridgegroupvlanbinding -name <string>
    .EXAMPLE
        Invoke-ADCGetBridgegroupvlanbinding -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetBridgegroupvlanbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/bridgegroup_vlan_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateRange(1, 1000)]
        [double]$id,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetBridgegroupvlanbinding: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ 
                    bulkbindings = 'yes'
                }
                Write-Verbose "Retrieving all bridgegroup_vlan_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type bridgegroup_vlan_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for bridgegroup_vlan_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type bridgegroup_vlan_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving bridgegroup_vlan_binding objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type bridgegroup_vlan_binding -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving bridgegroup_vlan_binding configuration for property 'id'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type bridgegroup_vlan_binding -NitroPath nitro/v1/config -Resource $id -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving bridgegroup_vlan_binding configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type bridgegroup_vlan_binding -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetBridgegroupvlanbinding: Ended"
    }
}

function Invoke-ADCAddBridgetable {
<#
    .SYNOPSIS
        Add Network configuration Object
    .DESCRIPTION
        Add Network configuration Object 
    .PARAMETER mac 
        The MAC address of the target. 
    .PARAMETER vxlan 
        The VXLAN to which this address is associated.  
        Minimum value = 1  
        Maximum value = 16777215 
    .PARAMETER vtep 
        The IP address of the destination VXLAN tunnel endpoint where the Ethernet MAC ADDRESS resides.  
        Minimum length = 1 
    .PARAMETER vni 
        The VXLAN VNI Network Identifier (or VXLAN Segment ID) to use to connect to the remote VXLAN tunnel endpoint. If omitted the value specified as vxlan will be used.  
        Minimum value = 1  
        Maximum value = 16777215 
    .PARAMETER devicevlan 
        The vlan on which to send multicast packets when the VXLAN tunnel endpoint is a muticast group address.  
        Minimum value = 1  
        Maximum value = 4094
    .EXAMPLE
        Invoke-ADCAddBridgetable -mac <string> -vxlan <double> -vtep <string>
    .NOTES
        File Name : Invoke-ADCAddBridgetable
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/bridgetable/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$mac ,

        [Parameter(Mandatory = $true)]
        [ValidateRange(1, 16777215)]
        [double]$vxlan ,

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$vtep ,

        [ValidateRange(1, 16777215)]
        [double]$vni ,

        [ValidateRange(1, 4094)]
        [double]$devicevlan 

    )
    begin {
        Write-Verbose "Invoke-ADCAddBridgetable: Starting"
    }
    process {
        try {
            $Payload = @{
                mac = $mac
                vxlan = $vxlan
                vtep = $vtep
            }
            if ($PSBoundParameters.ContainsKey('vni')) { $Payload.Add('vni', $vni) }
            if ($PSBoundParameters.ContainsKey('devicevlan')) { $Payload.Add('devicevlan', $devicevlan) }
 
            if ($PSCmdlet.ShouldProcess("bridgetable", "Add Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -NitroPath nitro/v1/config -Type bridgetable -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
            Write-Output $result

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddBridgetable: Finished"
    }
}

function Invoke-ADCDeleteBridgetable {
<#
    .SYNOPSIS
        Delete Network configuration Object
    .DESCRIPTION
        Delete Network configuration Object
     .PARAMETER mac 
       The MAC address of the target.    .PARAMETER vxlan 
       The VXLAN to which this address is associated.  
       Minimum value = 1  
       Maximum value = 16777215    .PARAMETER vtep 
       The IP address of the destination VXLAN tunnel endpoint where the Ethernet MAC ADDRESS resides.  
       Minimum length = 1    .PARAMETER devicevlan 
       The vlan on which to send multicast packets when the VXLAN tunnel endpoint is a muticast group address.  
       Minimum value = 1  
       Maximum value = 4094
    .EXAMPLE
        Invoke-ADCDeleteBridgetable 
    .NOTES
        File Name : Invoke-ADCDeleteBridgetable
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/bridgetable/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [string]$mac ,

        [double]$vxlan ,

        [string]$vtep ,

        [double]$devicevlan 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteBridgetable: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }
            if ($PSBoundParameters.ContainsKey('mac')) { $Arguments.Add('mac', $mac) }
            if ($PSBoundParameters.ContainsKey('vxlan')) { $Arguments.Add('vxlan', $vxlan) }
            if ($PSBoundParameters.ContainsKey('vtep')) { $Arguments.Add('vtep', $vtep) }
            if ($PSBoundParameters.ContainsKey('devicevlan')) { $Arguments.Add('devicevlan', $devicevlan) }
            if ($PSCmdlet.ShouldProcess("bridgetable", "Delete Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type bridgetable -NitroPath nitro/v1/config -Resource $ -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteBridgetable: Finished"
    }
}

function Invoke-ADCUpdateBridgetable {
<#
    .SYNOPSIS
        Update Network configuration Object
    .DESCRIPTION
        Update Network configuration Object 
    .PARAMETER bridgeage 
        Time-out value for the bridge table entries, in seconds. The new value applies only to the entries that are dynamically learned after the new value is set. Previously existing bridge table entries expire after the previously configured time-out value.  
        Default value: 300  
        Minimum value = 60  
        Maximum value = 300
    .EXAMPLE
        Invoke-ADCUpdateBridgetable 
    .NOTES
        File Name : Invoke-ADCUpdateBridgetable
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/bridgetable/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [ValidateRange(60, 300)]
        [double]$bridgeage 

    )
    begin {
        Write-Verbose "Invoke-ADCUpdateBridgetable: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('bridgeage')) { $Payload.Add('bridgeage', $bridgeage) }
 
            if ($PSCmdlet.ShouldProcess("bridgetable", "Update Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -NitroPath nitro/v1/config -Type bridgetable -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
            Write-Output $result

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUpdateBridgetable: Finished"
    }
}

function Invoke-ADCUnsetBridgetable {
<#
    .SYNOPSIS
        Unset Network configuration Object
    .DESCRIPTION
        Unset Network configuration Object 
   .PARAMETER bridgeage 
       Time-out value for the bridge table entries, in seconds. The new value applies only to the entries that are dynamically learned after the new value is set. Previously existing bridge table entries expire after the previously configured time-out value.
    .EXAMPLE
        Invoke-ADCUnsetBridgetable 
    .NOTES
        File Name : Invoke-ADCUnsetBridgetable
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/bridgetable
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Boolean]$bridgeage 
    )
    begin {
        Write-Verbose "Invoke-ADCUnsetBridgetable: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('bridgeage')) { $Payload.Add('bridgeage', $bridgeage) }
            if ($PSCmdlet.ShouldProcess("bridgetable", "Unset Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type bridgetable -NitroPath nitro/v1/config -Action unset -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUnsetBridgetable: Finished"
    }
}

function Invoke-ADCClearBridgetable {
<#
    .SYNOPSIS
        Clear Network configuration Object
    .DESCRIPTION
        Clear Network configuration Object 
    .PARAMETER vlan 
        VLAN whose entries are to be removed. 
    .PARAMETER ifnum 
        INTERFACE whose entries are to be removed. 
    .PARAMETER vxlan 
        The VXLAN to which this address is associated.
    .EXAMPLE
        Invoke-ADCClearBridgetable 
    .NOTES
        File Name : Invoke-ADCClearBridgetable
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/bridgetable/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [ValidateRange(1, 4094)]
        [double]$vlan ,

        [string]$ifnum ,

        [ValidateRange(1, 16777215)]
        [double]$vxlan 

    )
    begin {
        Write-Verbose "Invoke-ADCClearBridgetable: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('vlan')) { $Payload.Add('vlan', $vlan) }
            if ($PSBoundParameters.ContainsKey('ifnum')) { $Payload.Add('ifnum', $ifnum) }
            if ($PSBoundParameters.ContainsKey('vxlan')) { $Payload.Add('vxlan', $vxlan) }
            if ($PSCmdlet.ShouldProcess($Name, "Clear Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -NitroPath nitro/v1/config -Type bridgetable -Action clear -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $result
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCClearBridgetable: Finished"
    }
}

function Invoke-ADCGetBridgetable {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER nodeid 
       Unique number that identifies the cluster node. 
    .PARAMETER GetAll 
        Retreive all bridgetable object(s)
    .PARAMETER Count
        If specified, the count of the bridgetable object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetBridgetable
    .EXAMPLE 
        Invoke-ADCGetBridgetable -GetAll 
    .EXAMPLE 
        Invoke-ADCGetBridgetable -Count
    .EXAMPLE
        Invoke-ADCGetBridgetable -name <string>
    .EXAMPLE
        Invoke-ADCGetBridgetable -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetBridgetable
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/bridgetable/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByArgument')]
        [ValidateRange(0, 31)]
        [double]$nodeid,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll,

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$ViewSummary

    )
    begin {
        Write-Verbose "Invoke-ADCGetBridgetable: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all bridgetable objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type bridgetable -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for bridgetable objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type bridgetable -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving bridgetable objects by arguments"
                $Arguments = @{ } 
                if ($PSBoundParameters.ContainsKey('nodeid')) { $Arguments.Add('nodeid', $nodeid) }
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type bridgetable -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving bridgetable configuration for property ''"

            } else {
                Write-Verbose "Retrieving bridgetable configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type bridgetable -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetBridgetable: Ended"
    }
}

function Invoke-ADCAddChannel {
<#
    .SYNOPSIS
        Add Network configuration Object
    .DESCRIPTION
        Add Network configuration Object 
    .PARAMETER id 
        ID for the LA channel or cluster LA channel or LR channel to be created. Specify an LA channel in LA/x notation, where x can range from 1 to 8 or cluster LA channel in CLA/x notation or Link redundant channel in LR/x notation, where x can range from 1 to 4. Cannot be changed after the LA channel is created. 
    .PARAMETER ifnum 
        Interfaces to be bound to the LA channel of a Citrix ADC or to the LA channel of a cluster configuration.  
        For an LA channel of a Citrix ADC, specify an interface in C/U notation (for example, 1/3).  
        For an LA channel of a cluster configuration, specify an interface in N/C/U notation (for example, 2/1/3).  
        where C can take one of the following values:  
        * 0 - Indicates a management interface.  
        * 1 - Indicates a 1 Gbps port.  
        * 10 - Indicates a 10 Gbps port.  
        U is a unique integer for representing an interface in a particular port group.  
        N is the ID of the node to which an interface belongs in a cluster configuration.  
        Use spaces to separate multiple entries. 
    .PARAMETER state 
        Enable or disable the LA channel.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER mode 
        The initital mode for the LA channel.  
        Possible values = MANUAL, AUTO 
    .PARAMETER conndistr 
        The 'connection' distribution mode for the LA channel.  
        Possible values = DISABLED, ENABLED 
    .PARAMETER macdistr 
        The 'MAC' distribution mode for the LA channel.  
        Possible values = SOURCE, DESTINATION, BOTH 
    .PARAMETER lamac 
        Specifies a MAC address for the LA channels configured in Citrix ADC virtual appliances (VPX). This MAC address is persistent after each reboot.  
        If you don't specify this parameter, a MAC address is generated randomly for each LA channel. These MAC addresses change after each reboot. 
    .PARAMETER speed 
        Ethernet speed of the channel, in Mbps. If the speed of any bound interface is greater than or equal to the value set for this parameter, the state of the interface is UP. Otherwise, the state is INACTIVE. Bound Interfaces whose state is INACTIVE do not process any traffic.  
        Default value: AUTO  
        Possible values = AUTO, 10, 100, 1000, 10000, 25000, 40000, 50000, 100000 
    .PARAMETER flowctl 
        Specifies the flow control type for this LA channel to manage the flow of frames. Flow control is a function as mentioned in clause 31 of the IEEE 802.3 standard. Flow control allows congested ports to pause traffic from the peer device. Flow control is achieved by sending PAUSE frames.  
        Default value: OFF  
        Possible values = OFF, RX, TX, RXTX, ON 
    .PARAMETER hamonitor 
        In a High Availability (HA) configuration, monitor the LA channel for failure events. Failure of any LA channel that has HA MON enabled triggers HA failover.  
        Default value: ON  
        Possible values = ON, OFF 
    .PARAMETER haheartbeat 
        In a High Availability (HA) configuration, configure the LA channel for sending heartbeats. LA channel that has HA Heartbeat disabled should not send the heartbeats.  
        Default value: ON  
        Possible values = OFF, ON 
    .PARAMETER tagall 
        Adds a four-byte 802.1q tag to every packet sent on this channel. The ON setting applies tags for all VLANs that are bound to this channel. OFF applies the tag for all VLANs other than the native VLAN.  
        Default value: OFF  
        Possible values = ON, OFF 
    .PARAMETER trunk 
        This is deprecated by tagall.  
        Default value: OFF  
        Possible values = ON, OFF 
    .PARAMETER ifalias 
        Alias name for the LA channel. Used only to enhance readability. To perform any operations, you have to specify the LA channel ID.  
        Default value: " "  
        Maximum length = 31 
    .PARAMETER throughput 
        Low threshold value for the throughput of the LA channel, in Mbps. In an high availability (HA) configuration, failover is triggered when the LA channel has HA MON enabled and the throughput is below the specified threshold.  
        Minimum value = 0  
        Maximum value = 160000 
    .PARAMETER bandwidthhigh 
        High threshold value for the bandwidth usage of the LA channel, in Mbps. The Citrix ADC generates an SNMP trap message when the bandwidth usage of the LA channel is greater than or equal to the specified high threshold value.  
        Minimum value = 0  
        Maximum value = 160000 
    .PARAMETER bandwidthnormal 
        Normal threshold value for the bandwidth usage of the LA channel, in Mbps. When the bandwidth usage of the LA channel returns to less than or equal to the specified normal threshold after exceeding the high threshold, the Citrix ADC generates an SNMP trap message to indicate that the bandwidth usage has returned to normal.  
        Minimum value = 0  
        Maximum value = 160000 
    .PARAMETER PassThru 
        Return details about the created channel item.
    .EXAMPLE
        Invoke-ADCAddChannel -id <string>
    .NOTES
        File Name : Invoke-ADCAddChannel
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/channel/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$id ,

        [string[]]$ifnum ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$state = 'ENABLED' ,

        [ValidateSet('MANUAL', 'AUTO')]
        [string]$mode ,

        [ValidateSet('DISABLED', 'ENABLED')]
        [string]$conndistr ,

        [ValidateSet('SOURCE', 'DESTINATION', 'BOTH')]
        [string]$macdistr ,

        [string]$lamac ,

        [ValidateSet('AUTO', '10', '100', '1000', '10000', '25000', '40000', '50000', '100000')]
        [string]$speed = 'AUTO' ,

        [ValidateSet('OFF', 'RX', 'TX', 'RXTX', 'ON')]
        [string]$flowctl = 'OFF' ,

        [ValidateSet('ON', 'OFF')]
        [string]$hamonitor = 'ON' ,

        [ValidateSet('OFF', 'ON')]
        [string]$haheartbeat = 'ON' ,

        [ValidateSet('ON', 'OFF')]
        [string]$tagall = 'OFF' ,

        [ValidateSet('ON', 'OFF')]
        [string]$trunk = 'OFF' ,

        [string]$ifalias = '" "' ,

        [ValidateRange(0, 160000)]
        [double]$throughput ,

        [ValidateRange(0, 160000)]
        [double]$bandwidthhigh ,

        [ValidateRange(0, 160000)]
        [double]$bandwidthnormal ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddChannel: Starting"
    }
    process {
        try {
            $Payload = @{
                id = $id
            }
            if ($PSBoundParameters.ContainsKey('ifnum')) { $Payload.Add('ifnum', $ifnum) }
            if ($PSBoundParameters.ContainsKey('state')) { $Payload.Add('state', $state) }
            if ($PSBoundParameters.ContainsKey('mode')) { $Payload.Add('mode', $mode) }
            if ($PSBoundParameters.ContainsKey('conndistr')) { $Payload.Add('conndistr', $conndistr) }
            if ($PSBoundParameters.ContainsKey('macdistr')) { $Payload.Add('macdistr', $macdistr) }
            if ($PSBoundParameters.ContainsKey('lamac')) { $Payload.Add('lamac', $lamac) }
            if ($PSBoundParameters.ContainsKey('speed')) { $Payload.Add('speed', $speed) }
            if ($PSBoundParameters.ContainsKey('flowctl')) { $Payload.Add('flowctl', $flowctl) }
            if ($PSBoundParameters.ContainsKey('hamonitor')) { $Payload.Add('hamonitor', $hamonitor) }
            if ($PSBoundParameters.ContainsKey('haheartbeat')) { $Payload.Add('haheartbeat', $haheartbeat) }
            if ($PSBoundParameters.ContainsKey('tagall')) { $Payload.Add('tagall', $tagall) }
            if ($PSBoundParameters.ContainsKey('trunk')) { $Payload.Add('trunk', $trunk) }
            if ($PSBoundParameters.ContainsKey('ifalias')) { $Payload.Add('ifalias', $ifalias) }
            if ($PSBoundParameters.ContainsKey('throughput')) { $Payload.Add('throughput', $throughput) }
            if ($PSBoundParameters.ContainsKey('bandwidthhigh')) { $Payload.Add('bandwidthhigh', $bandwidthhigh) }
            if ($PSBoundParameters.ContainsKey('bandwidthnormal')) { $Payload.Add('bandwidthnormal', $bandwidthnormal) }
 
            if ($PSCmdlet.ShouldProcess("channel", "Add Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -NitroPath nitro/v1/config -Type channel -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetChannel -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddChannel: Finished"
    }
}

function Invoke-ADCDeleteChannel {
<#
    .SYNOPSIS
        Delete Network configuration Object
    .DESCRIPTION
        Delete Network configuration Object
    .PARAMETER id 
       ID for the LA channel or cluster LA channel or LR channel to be created. Specify an LA channel in LA/x notation, where x can range from 1 to 8 or cluster LA channel in CLA/x notation or Link redundant channel in LR/x notation, where x can range from 1 to 4. Cannot be changed after the LA channel is created. 
    .EXAMPLE
        Invoke-ADCDeleteChannel -id <string>
    .NOTES
        File Name : Invoke-ADCDeleteChannel
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/channel/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$id 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteChannel: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }

            if ($PSCmdlet.ShouldProcess("$id", "Delete Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type channel -NitroPath nitro/v1/config -Resource $id -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteChannel: Finished"
    }
}

function Invoke-ADCUpdateChannel {
<#
    .SYNOPSIS
        Update Network configuration Object
    .DESCRIPTION
        Update Network configuration Object 
    .PARAMETER id 
        ID for the LA channel or cluster LA channel or LR channel to be created. Specify an LA channel in LA/x notation, where x can range from 1 to 8 or cluster LA channel in CLA/x notation or Link redundant channel in LR/x notation, where x can range from 1 to 4. Cannot be changed after the LA channel is created. 
    .PARAMETER state 
        Enable or disable the LA channel.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER mode 
        The initital mode for the LA channel.  
        Possible values = MANUAL, AUTO 
    .PARAMETER conndistr 
        The 'connection' distribution mode for the LA channel.  
        Possible values = DISABLED, ENABLED 
    .PARAMETER macdistr 
        The 'MAC' distribution mode for the LA channel.  
        Possible values = SOURCE, DESTINATION, BOTH 
    .PARAMETER lamac 
        Specifies a MAC address for the LA channels configured in Citrix ADC virtual appliances (VPX). This MAC address is persistent after each reboot.  
        If you don't specify this parameter, a MAC address is generated randomly for each LA channel. These MAC addresses change after each reboot. 
    .PARAMETER speed 
        Ethernet speed of the channel, in Mbps. If the speed of any bound interface is greater than or equal to the value set for this parameter, the state of the interface is UP. Otherwise, the state is INACTIVE. Bound Interfaces whose state is INACTIVE do not process any traffic.  
        Default value: AUTO  
        Possible values = AUTO, 10, 100, 1000, 10000, 25000, 40000, 50000, 100000 
    .PARAMETER mtu 
        The maximum transmission unit (MTU) is the largest packet size, measured in bytes excluding 14 bytes ethernet header and 4 bytes crc, that can be transmitted and received by this interface. Default value of MTU is 1500 on all the interface of Citrix ADC any value configured more than 1500 on the interface will make the interface as jumbo enabled. In case of cluster backplane interface MTU value will be changed to 1514 by default, user has to change the backplane interface value to maximum mtu configured on any of the interface in cluster system plus 14 bytes more for backplane interface if Jumbo is enabled on any of the interface in a cluster system. Changing the backplane will bring back the MTU of backplane interface to default value of 1500. If a channel is configured as backplane then the same holds true for channel as well as member interfaces.  
        Default value: 1500  
        Minimum value = 1500  
        Maximum value = 9216 
    .PARAMETER flowctl 
        Specifies the flow control type for this LA channel to manage the flow of frames. Flow control is a function as mentioned in clause 31 of the IEEE 802.3 standard. Flow control allows congested ports to pause traffic from the peer device. Flow control is achieved by sending PAUSE frames.  
        Default value: OFF  
        Possible values = OFF, RX, TX, RXTX, ON 
    .PARAMETER hamonitor 
        In a High Availability (HA) configuration, monitor the LA channel for failure events. Failure of any LA channel that has HA MON enabled triggers HA failover.  
        Default value: ON  
        Possible values = ON, OFF 
    .PARAMETER haheartbeat 
        In a High Availability (HA) configuration, configure the LA channel for sending heartbeats. LA channel that has HA Heartbeat disabled should not send the heartbeats.  
        Default value: ON  
        Possible values = OFF, ON 
    .PARAMETER tagall 
        Adds a four-byte 802.1q tag to every packet sent on this channel. The ON setting applies tags for all VLANs that are bound to this channel. OFF applies the tag for all VLANs other than the native VLAN.  
        Default value: OFF  
        Possible values = ON, OFF 
    .PARAMETER trunk 
        This is deprecated by tagall.  
        Default value: OFF  
        Possible values = ON, OFF 
    .PARAMETER ifalias 
        Alias name for the LA channel. Used only to enhance readability. To perform any operations, you have to specify the LA channel ID.  
        Default value: " "  
        Maximum length = 31 
    .PARAMETER throughput 
        Low threshold value for the throughput of the LA channel, in Mbps. In an high availability (HA) configuration, failover is triggered when the LA channel has HA MON enabled and the throughput is below the specified threshold.  
        Minimum value = 0  
        Maximum value = 160000 
    .PARAMETER lrminthroughput 
        Specifies the minimum throughput threshold (in Mbps) to be met by the active subchannel. Setting this parameter automatically divides an LACP channel into logical subchannels, with one subchannel active and the others in standby mode. When the maximum supported throughput of the active channel falls below the lrMinThroughput value, link failover occurs and a standby subchannel becomes active.  
        Minimum value = 0  
        Maximum value = 80000 
    .PARAMETER linkredundancy 
        Link Redundancy for Cluster LAG.  
        Default value: OFF  
        Possible values = ON, OFF 
    .PARAMETER bandwidthhigh 
        High threshold value for the bandwidth usage of the LA channel, in Mbps. The Citrix ADC generates an SNMP trap message when the bandwidth usage of the LA channel is greater than or equal to the specified high threshold value.  
        Minimum value = 0  
        Maximum value = 160000 
    .PARAMETER bandwidthnormal 
        Normal threshold value for the bandwidth usage of the LA channel, in Mbps. When the bandwidth usage of the LA channel returns to less than or equal to the specified normal threshold after exceeding the high threshold, the Citrix ADC generates an SNMP trap message to indicate that the bandwidth usage has returned to normal.  
        Minimum value = 0  
        Maximum value = 160000 
    .PARAMETER PassThru 
        Return details about the created channel item.
    .EXAMPLE
        Invoke-ADCUpdateChannel -id <string>
    .NOTES
        File Name : Invoke-ADCUpdateChannel
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/channel/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$id ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$state ,

        [ValidateSet('MANUAL', 'AUTO')]
        [string]$mode ,

        [ValidateSet('DISABLED', 'ENABLED')]
        [string]$conndistr ,

        [ValidateSet('SOURCE', 'DESTINATION', 'BOTH')]
        [string]$macdistr ,

        [string]$lamac ,

        [ValidateSet('AUTO', '10', '100', '1000', '10000', '25000', '40000', '50000', '100000')]
        [string]$speed ,

        [ValidateRange(1500, 9216)]
        [double]$mtu ,

        [ValidateSet('OFF', 'RX', 'TX', 'RXTX', 'ON')]
        [string]$flowctl ,

        [ValidateSet('ON', 'OFF')]
        [string]$hamonitor ,

        [ValidateSet('OFF', 'ON')]
        [string]$haheartbeat ,

        [ValidateSet('ON', 'OFF')]
        [string]$tagall ,

        [ValidateSet('ON', 'OFF')]
        [string]$trunk ,

        [string]$ifalias ,

        [ValidateRange(0, 160000)]
        [double]$throughput ,

        [ValidateRange(0, 80000)]
        [double]$lrminthroughput ,

        [ValidateSet('ON', 'OFF')]
        [string]$linkredundancy ,

        [ValidateRange(0, 160000)]
        [double]$bandwidthhigh ,

        [ValidateRange(0, 160000)]
        [double]$bandwidthnormal ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCUpdateChannel: Starting"
    }
    process {
        try {
            $Payload = @{
                id = $id
            }
            if ($PSBoundParameters.ContainsKey('state')) { $Payload.Add('state', $state) }
            if ($PSBoundParameters.ContainsKey('mode')) { $Payload.Add('mode', $mode) }
            if ($PSBoundParameters.ContainsKey('conndistr')) { $Payload.Add('conndistr', $conndistr) }
            if ($PSBoundParameters.ContainsKey('macdistr')) { $Payload.Add('macdistr', $macdistr) }
            if ($PSBoundParameters.ContainsKey('lamac')) { $Payload.Add('lamac', $lamac) }
            if ($PSBoundParameters.ContainsKey('speed')) { $Payload.Add('speed', $speed) }
            if ($PSBoundParameters.ContainsKey('mtu')) { $Payload.Add('mtu', $mtu) }
            if ($PSBoundParameters.ContainsKey('flowctl')) { $Payload.Add('flowctl', $flowctl) }
            if ($PSBoundParameters.ContainsKey('hamonitor')) { $Payload.Add('hamonitor', $hamonitor) }
            if ($PSBoundParameters.ContainsKey('haheartbeat')) { $Payload.Add('haheartbeat', $haheartbeat) }
            if ($PSBoundParameters.ContainsKey('tagall')) { $Payload.Add('tagall', $tagall) }
            if ($PSBoundParameters.ContainsKey('trunk')) { $Payload.Add('trunk', $trunk) }
            if ($PSBoundParameters.ContainsKey('ifalias')) { $Payload.Add('ifalias', $ifalias) }
            if ($PSBoundParameters.ContainsKey('throughput')) { $Payload.Add('throughput', $throughput) }
            if ($PSBoundParameters.ContainsKey('lrminthroughput')) { $Payload.Add('lrminthroughput', $lrminthroughput) }
            if ($PSBoundParameters.ContainsKey('linkredundancy')) { $Payload.Add('linkredundancy', $linkredundancy) }
            if ($PSBoundParameters.ContainsKey('bandwidthhigh')) { $Payload.Add('bandwidthhigh', $bandwidthhigh) }
            if ($PSBoundParameters.ContainsKey('bandwidthnormal')) { $Payload.Add('bandwidthnormal', $bandwidthnormal) }
 
            if ($PSCmdlet.ShouldProcess("channel", "Update Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -NitroPath nitro/v1/config -Type channel -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetChannel -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUpdateChannel: Finished"
    }
}

function Invoke-ADCUnsetChannel {
<#
    .SYNOPSIS
        Unset Network configuration Object
    .DESCRIPTION
        Unset Network configuration Object 
   .PARAMETER id 
       ID for the LA channel or cluster LA channel or LR channel to be created. Specify an LA channel in LA/x notation, where x can range from 1 to 8 or cluster LA channel in CLA/x notation or Link redundant channel in LR/x notation, where x can range from 1 to 4. Cannot be changed after the LA channel is created. 
   .PARAMETER state 
       Enable or disable the LA channel.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER mode 
       The initital mode for the LA channel.  
       Possible values = MANUAL, AUTO 
   .PARAMETER conndistr 
       The 'connection' distribution mode for the LA channel.  
       Possible values = DISABLED, ENABLED 
   .PARAMETER macdistr 
       The 'MAC' distribution mode for the LA channel.  
       Possible values = SOURCE, DESTINATION, BOTH 
   .PARAMETER speed 
       Ethernet speed of the channel, in Mbps. If the speed of any bound interface is greater than or equal to the value set for this parameter, the state of the interface is UP. Otherwise, the state is INACTIVE. Bound Interfaces whose state is INACTIVE do not process any traffic.  
       Possible values = AUTO, 10, 100, 1000, 10000, 25000, 40000, 50000, 100000 
   .PARAMETER mtu 
       The maximum transmission unit (MTU) is the largest packet size, measured in bytes excluding 14 bytes ethernet header and 4 bytes crc, that can be transmitted and received by this interface. Default value of MTU is 1500 on all the interface of Citrix ADC any value configured more than 1500 on the interface will make the interface as jumbo enabled. In case of cluster backplane interface MTU value will be changed to 1514 by default, user has to change the backplane interface value to maximum mtu configured on any of the interface in cluster system plus 14 bytes more for backplane interface if Jumbo is enabled on any of the interface in a cluster system. Changing the backplane will bring back the MTU of backplane interface to default value of 1500. If a channel is configured as backplane then the same holds true for channel as well as member interfaces. 
   .PARAMETER flowctl 
       Specifies the flow control type for this LA channel to manage the flow of frames. Flow control is a function as mentioned in clause 31 of the IEEE 802.3 standard. Flow control allows congested ports to pause traffic from the peer device. Flow control is achieved by sending PAUSE frames.  
       Possible values = OFF, RX, TX, RXTX, ON 
   .PARAMETER hamonitor 
       In a High Availability (HA) configuration, monitor the LA channel for failure events. Failure of any LA channel that has HA MON enabled triggers HA failover.  
       Possible values = ON, OFF 
   .PARAMETER haheartbeat 
       In a High Availability (HA) configuration, configure the LA channel for sending heartbeats. LA channel that has HA Heartbeat disabled should not send the heartbeats.  
       Possible values = OFF, ON 
   .PARAMETER tagall 
       Adds a four-byte 802.1q tag to every packet sent on this channel. The ON setting applies tags for all VLANs that are bound to this channel. OFF applies the tag for all VLANs other than the native VLAN.  
       Possible values = ON, OFF 
   .PARAMETER trunk 
       This is deprecated by tagall.  
       Possible values = ON, OFF 
   .PARAMETER ifalias 
       Alias name for the LA channel. Used only to enhance readability. To perform any operations, you have to specify the LA channel ID. 
   .PARAMETER throughput 
       Low threshold value for the throughput of the LA channel, in Mbps. In an high availability (HA) configuration, failover is triggered when the LA channel has HA MON enabled and the throughput is below the specified threshold. 
   .PARAMETER lrminthroughput 
       Specifies the minimum throughput threshold (in Mbps) to be met by the active subchannel. Setting this parameter automatically divides an LACP channel into logical subchannels, with one subchannel active and the others in standby mode. When the maximum supported throughput of the active channel falls below the lrMinThroughput value, link failover occurs and a standby subchannel becomes active. 
   .PARAMETER linkredundancy 
       Link Redundancy for Cluster LAG.  
       Possible values = ON, OFF 
   .PARAMETER bandwidthhigh 
       High threshold value for the bandwidth usage of the LA channel, in Mbps. The Citrix ADC generates an SNMP trap message when the bandwidth usage of the LA channel is greater than or equal to the specified high threshold value. 
   .PARAMETER bandwidthnormal 
       Normal threshold value for the bandwidth usage of the LA channel, in Mbps. When the bandwidth usage of the LA channel returns to less than or equal to the specified normal threshold after exceeding the high threshold, the Citrix ADC generates an SNMP trap message to indicate that the bandwidth usage has returned to normal.
    .EXAMPLE
        Invoke-ADCUnsetChannel -id <string>
    .NOTES
        File Name : Invoke-ADCUnsetChannel
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/channel
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$id ,

        [Boolean]$state ,

        [Boolean]$mode ,

        [Boolean]$conndistr ,

        [Boolean]$macdistr ,

        [Boolean]$speed ,

        [Boolean]$mtu ,

        [Boolean]$flowctl ,

        [Boolean]$hamonitor ,

        [Boolean]$haheartbeat ,

        [Boolean]$tagall ,

        [Boolean]$trunk ,

        [Boolean]$ifalias ,

        [Boolean]$throughput ,

        [Boolean]$lrminthroughput ,

        [Boolean]$linkredundancy ,

        [Boolean]$bandwidthhigh ,

        [Boolean]$bandwidthnormal 
    )
    begin {
        Write-Verbose "Invoke-ADCUnsetChannel: Starting"
    }
    process {
        try {
            $Payload = @{
                id = $id
            }
            if ($PSBoundParameters.ContainsKey('state')) { $Payload.Add('state', $state) }
            if ($PSBoundParameters.ContainsKey('mode')) { $Payload.Add('mode', $mode) }
            if ($PSBoundParameters.ContainsKey('conndistr')) { $Payload.Add('conndistr', $conndistr) }
            if ($PSBoundParameters.ContainsKey('macdistr')) { $Payload.Add('macdistr', $macdistr) }
            if ($PSBoundParameters.ContainsKey('speed')) { $Payload.Add('speed', $speed) }
            if ($PSBoundParameters.ContainsKey('mtu')) { $Payload.Add('mtu', $mtu) }
            if ($PSBoundParameters.ContainsKey('flowctl')) { $Payload.Add('flowctl', $flowctl) }
            if ($PSBoundParameters.ContainsKey('hamonitor')) { $Payload.Add('hamonitor', $hamonitor) }
            if ($PSBoundParameters.ContainsKey('haheartbeat')) { $Payload.Add('haheartbeat', $haheartbeat) }
            if ($PSBoundParameters.ContainsKey('tagall')) { $Payload.Add('tagall', $tagall) }
            if ($PSBoundParameters.ContainsKey('trunk')) { $Payload.Add('trunk', $trunk) }
            if ($PSBoundParameters.ContainsKey('ifalias')) { $Payload.Add('ifalias', $ifalias) }
            if ($PSBoundParameters.ContainsKey('throughput')) { $Payload.Add('throughput', $throughput) }
            if ($PSBoundParameters.ContainsKey('lrminthroughput')) { $Payload.Add('lrminthroughput', $lrminthroughput) }
            if ($PSBoundParameters.ContainsKey('linkredundancy')) { $Payload.Add('linkredundancy', $linkredundancy) }
            if ($PSBoundParameters.ContainsKey('bandwidthhigh')) { $Payload.Add('bandwidthhigh', $bandwidthhigh) }
            if ($PSBoundParameters.ContainsKey('bandwidthnormal')) { $Payload.Add('bandwidthnormal', $bandwidthnormal) }
            if ($PSCmdlet.ShouldProcess("$id", "Unset Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type channel -NitroPath nitro/v1/config -Action unset -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUnsetChannel: Finished"
    }
}

function Invoke-ADCGetChannel {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER id 
       ID for the LA channel or cluster LA channel or LR channel to be created. Specify an LA channel in LA/x notation, where x can range from 1 to 8 or cluster LA channel in CLA/x notation or Link redundant channel in LR/x notation, where x can range from 1 to 4. Cannot be changed after the LA channel is created. 
    .PARAMETER GetAll 
        Retreive all channel object(s)
    .PARAMETER Count
        If specified, the count of the channel object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetChannel
    .EXAMPLE 
        Invoke-ADCGetChannel -GetAll 
    .EXAMPLE 
        Invoke-ADCGetChannel -Count
    .EXAMPLE
        Invoke-ADCGetChannel -name <string>
    .EXAMPLE
        Invoke-ADCGetChannel -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetChannel
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/channel/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [string]$id,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll,

        [Parameter(ParameterSetName = 'GetAll')]
        [Parameter(ParameterSetName = 'Get')]
        [Switch]$ViewSummary

    )
    begin {
        Write-Verbose "Invoke-ADCGetChannel: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all channel objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type channel -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for channel objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type channel -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving channel objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type channel -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving channel configuration for property 'id'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type channel -NitroPath nitro/v1/config -Resource $id -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving channel configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type channel -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetChannel: Ended"
    }
}

function Invoke-ADCGetChannelbinding {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER id 
       ID of an LA channel or LA channel in cluster configuration whose details you want the Citrix ADC to display.  
       Specify an LA channel in LA/x notation, where x can range from 1 to 8 or a cluster LA channel in CLA/x notation or Link redundant channel in LR/x notation , where x can range from 1 to 4. 
    .PARAMETER GetAll 
        Retreive all channel_binding object(s)
    .PARAMETER Count
        If specified, the count of the channel_binding object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetChannelbinding
    .EXAMPLE 
        Invoke-ADCGetChannelbinding -GetAll
    .EXAMPLE
        Invoke-ADCGetChannelbinding -name <string>
    .EXAMPLE
        Invoke-ADCGetChannelbinding -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetChannelbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/channel_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$id,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetChannelbinding: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ 
                    bulkbindings = 'yes'
                }
                Write-Verbose "Retrieving all channel_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type channel_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for channel_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type channel_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving channel_binding objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type channel_binding -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving channel_binding configuration for property 'id'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type channel_binding -NitroPath nitro/v1/config -Resource $id -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving channel_binding configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type channel_binding -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetChannelbinding: Ended"
    }
}

function Invoke-ADCAddChannelinterfacebinding {
<#
    .SYNOPSIS
        Add Network configuration Object
    .DESCRIPTION
        Add Network configuration Object 
    .PARAMETER id 
        ID of the LA channel or the cluster LA channel to which you want to bind interfaces. Specify an LA channel in LA/x notation, where x can range from 1 to 8 or a cluster LA channel in CLA/x notation or Link redundant channel in LR/x notation , where x can range from 1 to 4. 
    .PARAMETER ifnum 
        Interfaces to be bound to the LA channel of a Citrix ADC or to the LA channel of a cluster configuration. For an LA channel of a Citrix ADC, specify an interface in C/U notation (for example, 1/3). For an LA channel of a cluster configuration, specify an interface in N/C/U notation (for example, 2/1/3). where C can take one of the following values: * 0 - Indicates a management interface. * 1 - Indicates a 1 Gbps port. * 10 - Indicates a 10 Gbps port. U is a unique integer for representing an interface in a particular port group. N is the ID of the node to which an interface belongs in a cluster configuration. Use spaces to separate multiple entries. 
    .PARAMETER PassThru 
        Return details about the created channel_interface_binding item.
    .EXAMPLE
        Invoke-ADCAddChannelinterfacebinding -id <string> -ifnum <string[]>
    .NOTES
        File Name : Invoke-ADCAddChannelinterfacebinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/channel_interface_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$id ,

        [Parameter(Mandatory = $true)]
        [string[]]$ifnum ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddChannelinterfacebinding: Starting"
    }
    process {
        try {
            $Payload = @{
                id = $id
                ifnum = $ifnum
            }

 
            if ($PSCmdlet.ShouldProcess("channel_interface_binding", "Add Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -NitroPath nitro/v1/config -Type channel_interface_binding -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetChannelinterfacebinding -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddChannelinterfacebinding: Finished"
    }
}

function Invoke-ADCDeleteChannelinterfacebinding {
<#
    .SYNOPSIS
        Delete Network configuration Object
    .DESCRIPTION
        Delete Network configuration Object
    .PARAMETER id 
       ID of the LA channel or the cluster LA channel to which you want to bind interfaces. Specify an LA channel in LA/x notation, where x can range from 1 to 8 or a cluster LA channel in CLA/x notation or Link redundant channel in LR/x notation , where x can range from 1 to 4.    .PARAMETER ifnum 
       Interfaces to be bound to the LA channel of a Citrix ADC or to the LA channel of a cluster configuration. For an LA channel of a Citrix ADC, specify an interface in C/U notation (for example, 1/3). For an LA channel of a cluster configuration, specify an interface in N/C/U notation (for example, 2/1/3). where C can take one of the following values: * 0 - Indicates a management interface. * 1 - Indicates a 1 Gbps port. * 10 - Indicates a 10 Gbps port. U is a unique integer for representing an interface in a particular port group. N is the ID of the node to which an interface belongs in a cluster configuration. Use spaces to separate multiple entries.
    .EXAMPLE
        Invoke-ADCDeleteChannelinterfacebinding -id <string>
    .NOTES
        File Name : Invoke-ADCDeleteChannelinterfacebinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/channel_interface_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$id ,

        [string[]]$ifnum 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteChannelinterfacebinding: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }
            if ($PSBoundParameters.ContainsKey('ifnum')) { $Arguments.Add('ifnum', $ifnum) }
            if ($PSCmdlet.ShouldProcess("$id", "Delete Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type channel_interface_binding -NitroPath nitro/v1/config -Resource $id -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteChannelinterfacebinding: Finished"
    }
}

function Invoke-ADCGetChannelinterfacebinding {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER id 
       ID of the LA channel or the cluster LA channel to which you want to bind interfaces. Specify an LA channel in LA/x notation, where x can range from 1 to 8 or a cluster LA channel in CLA/x notation or Link redundant channel in LR/x notation , where x can range from 1 to 4. 
    .PARAMETER GetAll 
        Retreive all channel_interface_binding object(s)
    .PARAMETER Count
        If specified, the count of the channel_interface_binding object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetChannelinterfacebinding
    .EXAMPLE 
        Invoke-ADCGetChannelinterfacebinding -GetAll 
    .EXAMPLE 
        Invoke-ADCGetChannelinterfacebinding -Count
    .EXAMPLE
        Invoke-ADCGetChannelinterfacebinding -name <string>
    .EXAMPLE
        Invoke-ADCGetChannelinterfacebinding -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetChannelinterfacebinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/channel_interface_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [string]$id,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetChannelinterfacebinding: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ 
                    bulkbindings = 'yes'
                }
                Write-Verbose "Retrieving all channel_interface_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type channel_interface_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for channel_interface_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type channel_interface_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving channel_interface_binding objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type channel_interface_binding -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving channel_interface_binding configuration for property 'id'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type channel_interface_binding -NitroPath nitro/v1/config -Resource $id -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving channel_interface_binding configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type channel_interface_binding -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetChannelinterfacebinding: Ended"
    }
}

function Invoke-ADCGetCi {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER GetAll 
        Retreive all ci object(s)
    .PARAMETER Count
        If specified, the count of the ci object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetCi
    .EXAMPLE 
        Invoke-ADCGetCi -GetAll 
    .EXAMPLE 
        Invoke-ADCGetCi -Count
    .EXAMPLE
        Invoke-ADCGetCi -name <string>
    .EXAMPLE
        Invoke-ADCGetCi -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetCi
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/ci/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll,

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$ViewSummary

    )
    begin {
        Write-Verbose "Invoke-ADCGetCi: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all ci objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type ci -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for ci objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type ci -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving ci objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type ci -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving ci configuration for property ''"

            } else {
                Write-Verbose "Retrieving ci configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type ci -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetCi: Ended"
    }
}

function Invoke-ADCAddFis {
<#
    .SYNOPSIS
        Add Network configuration Object
    .DESCRIPTION
        Add Network configuration Object 
    .PARAMETER name 
        Name for the FIS to be created. Leading character must be a number or letter. Other characters allowed, after the first character, are @ _ - . (period) : (colon) # and space ( ). Note: In a cluster setup, the FIS name on each node must be unique.  
        Minimum length = 1 
    .PARAMETER ownernode 
        ID of the cluster node for which you are creating the FIS. Can be configured only through the cluster IP address.  
        Minimum value = 0  
        Maximum value = 31 
    .PARAMETER PassThru 
        Return details about the created fis item.
    .EXAMPLE
        Invoke-ADCAddFis -name <string>
    .NOTES
        File Name : Invoke-ADCAddFis
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/fis/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name ,

        [ValidateRange(0, 31)]
        [double]$ownernode ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddFis: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
            }
            if ($PSBoundParameters.ContainsKey('ownernode')) { $Payload.Add('ownernode', $ownernode) }
 
            if ($PSCmdlet.ShouldProcess("fis", "Add Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -NitroPath nitro/v1/config -Type fis -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetFis -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddFis: Finished"
    }
}

function Invoke-ADCDeleteFis {
<#
    .SYNOPSIS
        Delete Network configuration Object
    .DESCRIPTION
        Delete Network configuration Object
    .PARAMETER name 
       Name for the FIS to be created. Leading character must be a number or letter. Other characters allowed, after the first character, are @ _ - . (period) : (colon) # and space ( ). Note: In a cluster setup, the FIS name on each node must be unique.  
       Minimum length = 1 
    .EXAMPLE
        Invoke-ADCDeleteFis -name <string>
    .NOTES
        File Name : Invoke-ADCDeleteFis
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/fis/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$name 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteFis: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }

            if ($PSCmdlet.ShouldProcess("$name", "Delete Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type fis -NitroPath nitro/v1/config -Resource $name -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteFis: Finished"
    }
}

function Invoke-ADCGetFis {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER name 
       Name for the FIS to be created. Leading character must be a number or letter. Other characters allowed, after the first character, are @ _ - . (period) : (colon) # and space ( ). Note: In a cluster setup, the FIS name on each node must be unique. 
    .PARAMETER GetAll 
        Retreive all fis object(s)
    .PARAMETER Count
        If specified, the count of the fis object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetFis
    .EXAMPLE 
        Invoke-ADCGetFis -GetAll 
    .EXAMPLE 
        Invoke-ADCGetFis -Count
    .EXAMPLE
        Invoke-ADCGetFis -name <string>
    .EXAMPLE
        Invoke-ADCGetFis -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetFis
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/fis/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll,

        [Parameter(ParameterSetName = 'GetAll')]
        [Parameter(ParameterSetName = 'Get')]
        [Switch]$ViewSummary

    )
    begin {
        Write-Verbose "Invoke-ADCGetFis: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all fis objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type fis -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for fis objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type fis -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving fis objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type fis -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving fis configuration for property 'name'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type fis -NitroPath nitro/v1/config -Resource $name -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving fis configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type fis -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetFis: Ended"
    }
}

function Invoke-ADCGetFisbinding {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER name 
       The name of the FIS configured on the appliance. . 
    .PARAMETER GetAll 
        Retreive all fis_binding object(s)
    .PARAMETER Count
        If specified, the count of the fis_binding object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetFisbinding
    .EXAMPLE 
        Invoke-ADCGetFisbinding -GetAll
    .EXAMPLE
        Invoke-ADCGetFisbinding -name <string>
    .EXAMPLE
        Invoke-ADCGetFisbinding -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetFisbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/fis_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetFisbinding: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ 
                    bulkbindings = 'yes'
                }
                Write-Verbose "Retrieving all fis_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type fis_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for fis_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type fis_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving fis_binding objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type fis_binding -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving fis_binding configuration for property 'name'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type fis_binding -NitroPath nitro/v1/config -Resource $name -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving fis_binding configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type fis_binding -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetFisbinding: Ended"
    }
}

function Invoke-ADCAddFischannelbinding {
<#
    .SYNOPSIS
        Add Network configuration Object
    .DESCRIPTION
        Add Network configuration Object 
    .PARAMETER name 
        The name of the FIS to which you want to bind interfaces.  
        Minimum length = 1 
    .PARAMETER ifnum 
        Interface to be bound to the FIS, specified in slot/port notation (for example, 1/3). 
    .PARAMETER PassThru 
        Return details about the created fis_channel_binding item.
    .EXAMPLE
        Invoke-ADCAddFischannelbinding -name <string> -ifnum <string>
    .NOTES
        File Name : Invoke-ADCAddFischannelbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/fis_channel_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name ,

        [Parameter(Mandatory = $true)]
        [string]$ifnum ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddFischannelbinding: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
                ifnum = $ifnum
            }

 
            if ($PSCmdlet.ShouldProcess("fis_channel_binding", "Add Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -NitroPath nitro/v1/config -Type fis_channel_binding -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetFischannelbinding -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddFischannelbinding: Finished"
    }
}

function Invoke-ADCDeleteFischannelbinding {
<#
    .SYNOPSIS
        Delete Network configuration Object
    .DESCRIPTION
        Delete Network configuration Object
    .PARAMETER name 
       The name of the FIS to which you want to bind interfaces.  
       Minimum length = 1    .PARAMETER ifnum 
       Interface to be bound to the FIS, specified in slot/port notation (for example, 1/3).
    .EXAMPLE
        Invoke-ADCDeleteFischannelbinding -name <string>
    .NOTES
        File Name : Invoke-ADCDeleteFischannelbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/fis_channel_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$name ,

        [string]$ifnum 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteFischannelbinding: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }
            if ($PSBoundParameters.ContainsKey('ifnum')) { $Arguments.Add('ifnum', $ifnum) }
            if ($PSCmdlet.ShouldProcess("$name", "Delete Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type fis_channel_binding -NitroPath nitro/v1/config -Resource $name -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteFischannelbinding: Finished"
    }
}

function Invoke-ADCGetFischannelbinding {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER name 
       The name of the FIS to which you want to bind interfaces. 
    .PARAMETER GetAll 
        Retreive all fis_channel_binding object(s)
    .PARAMETER Count
        If specified, the count of the fis_channel_binding object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetFischannelbinding
    .EXAMPLE 
        Invoke-ADCGetFischannelbinding -GetAll 
    .EXAMPLE 
        Invoke-ADCGetFischannelbinding -Count
    .EXAMPLE
        Invoke-ADCGetFischannelbinding -name <string>
    .EXAMPLE
        Invoke-ADCGetFischannelbinding -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetFischannelbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/fis_channel_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetFischannelbinding: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ 
                    bulkbindings = 'yes'
                }
                Write-Verbose "Retrieving all fis_channel_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type fis_channel_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for fis_channel_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type fis_channel_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving fis_channel_binding objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type fis_channel_binding -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving fis_channel_binding configuration for property 'name'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type fis_channel_binding -NitroPath nitro/v1/config -Resource $name -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving fis_channel_binding configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type fis_channel_binding -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetFischannelbinding: Ended"
    }
}

function Invoke-ADCAddFisinterfacebinding {
<#
    .SYNOPSIS
        Add Network configuration Object
    .DESCRIPTION
        Add Network configuration Object 
    .PARAMETER name 
        The name of the FIS to which you want to bind interfaces.  
        Minimum length = 1 
    .PARAMETER ifnum 
        Interface to be bound to the FIS, specified in slot/port notation (for example, 1/3).
    .EXAMPLE
        Invoke-ADCAddFisinterfacebinding -name <string> -ifnum <string>
    .NOTES
        File Name : Invoke-ADCAddFisinterfacebinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/fis_interface_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name ,

        [Parameter(Mandatory = $true)]
        [string]$ifnum 

    )
    begin {
        Write-Verbose "Invoke-ADCAddFisinterfacebinding: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
                ifnum = $ifnum
            }

 
            if ($PSCmdlet.ShouldProcess("fis_interface_binding", "Add Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -NitroPath nitro/v1/config -Type fis_interface_binding -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
            Write-Output $result

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddFisinterfacebinding: Finished"
    }
}

function Invoke-ADCDeleteFisinterfacebinding {
<#
    .SYNOPSIS
        Delete Network configuration Object
    .DESCRIPTION
        Delete Network configuration Object
    .PARAMETER name 
       The name of the FIS to which you want to bind interfaces.  
       Minimum length = 1    .PARAMETER ifnum 
       Interface to be bound to the FIS, specified in slot/port notation (for example, 1/3).
    .EXAMPLE
        Invoke-ADCDeleteFisinterfacebinding -name <string>
    .NOTES
        File Name : Invoke-ADCDeleteFisinterfacebinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/fis_interface_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$name ,

        [string]$ifnum 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteFisinterfacebinding: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }
            if ($PSBoundParameters.ContainsKey('ifnum')) { $Arguments.Add('ifnum', $ifnum) }
            if ($PSCmdlet.ShouldProcess("$name", "Delete Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type fis_interface_binding -NitroPath nitro/v1/config -Resource $name -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteFisinterfacebinding: Finished"
    }
}

function Invoke-ADCAddForwardingsession {
<#
    .SYNOPSIS
        Add Network configuration Object
    .DESCRIPTION
        Add Network configuration Object 
    .PARAMETER name 
        Name for the forwarding session rule. Can begin with a letter, number, or the underscore character (_), and can consist of letters, numbers, and the hyphen (-), period (.) pound (#), space ( ), at (@), equals (=), colon (:), and underscore characters. Cannot be changed after the rule is created. 
    .PARAMETER network 
        An IPv4 network address or IPv6 prefix of a network from which the forwarded traffic originates or to which it is destined.  
        Minimum length = 1 
    .PARAMETER netmask 
        Subnet mask associated with the network.  
        Minimum length = 1 
    .PARAMETER acl6name 
        Name of any configured ACL6 whose action is ALLOW. The rule of the ACL6 is used as a forwarding session rule.  
        Minimum length = 1 
    .PARAMETER aclname 
        Name of any configured ACL whose action is ALLOW. The rule of the ACL is used as a forwarding session rule.  
        Minimum length = 1 
    .PARAMETER td 
        Integer value that uniquely identifies the traffic domain in which you want to configure the entity. If you do not specify an ID, the entity becomes part of the default traffic domain, which has an ID of 0.  
        Minimum value = 0  
        Maximum value = 4094 
    .PARAMETER connfailover 
        Synchronize connection information with the secondary appliance in a high availability (HA) pair. That is, synchronize all connection-related information for the forwarding session.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER sourceroutecache 
        Cache the source ip address and mac address of the DA servers.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER processlocal 
        Enabling this option on forwarding session will not steer the packet to flow processor. Instead, packet will be routed.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER PassThru 
        Return details about the created forwardingsession item.
    .EXAMPLE
        Invoke-ADCAddForwardingsession -name <string>
    .NOTES
        File Name : Invoke-ADCAddForwardingsession
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/forwardingsession/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$network ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$netmask ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$acl6name ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$aclname ,

        [ValidateRange(0, 4094)]
        [double]$td ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$connfailover = 'DISABLED' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$sourceroutecache = 'DISABLED' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$processlocal = 'DISABLED' ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddForwardingsession: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
            }
            if ($PSBoundParameters.ContainsKey('network')) { $Payload.Add('network', $network) }
            if ($PSBoundParameters.ContainsKey('netmask')) { $Payload.Add('netmask', $netmask) }
            if ($PSBoundParameters.ContainsKey('acl6name')) { $Payload.Add('acl6name', $acl6name) }
            if ($PSBoundParameters.ContainsKey('aclname')) { $Payload.Add('aclname', $aclname) }
            if ($PSBoundParameters.ContainsKey('td')) { $Payload.Add('td', $td) }
            if ($PSBoundParameters.ContainsKey('connfailover')) { $Payload.Add('connfailover', $connfailover) }
            if ($PSBoundParameters.ContainsKey('sourceroutecache')) { $Payload.Add('sourceroutecache', $sourceroutecache) }
            if ($PSBoundParameters.ContainsKey('processlocal')) { $Payload.Add('processlocal', $processlocal) }
 
            if ($PSCmdlet.ShouldProcess("forwardingsession", "Add Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -NitroPath nitro/v1/config -Type forwardingsession -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetForwardingsession -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddForwardingsession: Finished"
    }
}

function Invoke-ADCUpdateForwardingsession {
<#
    .SYNOPSIS
        Update Network configuration Object
    .DESCRIPTION
        Update Network configuration Object 
    .PARAMETER name 
        Name for the forwarding session rule. Can begin with a letter, number, or the underscore character (_), and can consist of letters, numbers, and the hyphen (-), period (.) pound (#), space ( ), at (@), equals (=), colon (:), and underscore characters. Cannot be changed after the rule is created. 
    .PARAMETER connfailover 
        Synchronize connection information with the secondary appliance in a high availability (HA) pair. That is, synchronize all connection-related information for the forwarding session.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER sourceroutecache 
        Cache the source ip address and mac address of the DA servers.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER processlocal 
        Enabling this option on forwarding session will not steer the packet to flow processor. Instead, packet will be routed.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER acl6name 
        Name of any configured ACL6 whose action is ALLOW. The rule of the ACL6 is used as a forwarding session rule.  
        Minimum length = 1 
    .PARAMETER aclname 
        Name of any configured ACL whose action is ALLOW. The rule of the ACL is used as a forwarding session rule.  
        Minimum length = 1 
    .PARAMETER PassThru 
        Return details about the created forwardingsession item.
    .EXAMPLE
        Invoke-ADCUpdateForwardingsession -name <string>
    .NOTES
        File Name : Invoke-ADCUpdateForwardingsession
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/forwardingsession/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$connfailover ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$sourceroutecache ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$processlocal ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$acl6name ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$aclname ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCUpdateForwardingsession: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
            }
            if ($PSBoundParameters.ContainsKey('connfailover')) { $Payload.Add('connfailover', $connfailover) }
            if ($PSBoundParameters.ContainsKey('sourceroutecache')) { $Payload.Add('sourceroutecache', $sourceroutecache) }
            if ($PSBoundParameters.ContainsKey('processlocal')) { $Payload.Add('processlocal', $processlocal) }
            if ($PSBoundParameters.ContainsKey('acl6name')) { $Payload.Add('acl6name', $acl6name) }
            if ($PSBoundParameters.ContainsKey('aclname')) { $Payload.Add('aclname', $aclname) }
 
            if ($PSCmdlet.ShouldProcess("forwardingsession", "Update Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -NitroPath nitro/v1/config -Type forwardingsession -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetForwardingsession -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUpdateForwardingsession: Finished"
    }
}

function Invoke-ADCDeleteForwardingsession {
<#
    .SYNOPSIS
        Delete Network configuration Object
    .DESCRIPTION
        Delete Network configuration Object
    .PARAMETER name 
       Name for the forwarding session rule. Can begin with a letter, number, or the underscore character (_), and can consist of letters, numbers, and the hyphen (-), period (.) pound (#), space ( ), at (@), equals (=), colon (:), and underscore characters. Cannot be changed after the rule is created. 
    .EXAMPLE
        Invoke-ADCDeleteForwardingsession -name <string>
    .NOTES
        File Name : Invoke-ADCDeleteForwardingsession
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/forwardingsession/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$name 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteForwardingsession: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }

            if ($PSCmdlet.ShouldProcess("$name", "Delete Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type forwardingsession -NitroPath nitro/v1/config -Resource $name -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteForwardingsession: Finished"
    }
}

function Invoke-ADCGetForwardingsession {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER name 
       Name for the forwarding session rule. Can begin with a letter, number, or the underscore character (_), and can consist of letters, numbers, and the hyphen (-), period (.) pound (#), space ( ), at (@), equals (=), colon (:), and underscore characters. Cannot be changed after the rule is created. 
    .PARAMETER GetAll 
        Retreive all forwardingsession object(s)
    .PARAMETER Count
        If specified, the count of the forwardingsession object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetForwardingsession
    .EXAMPLE 
        Invoke-ADCGetForwardingsession -GetAll 
    .EXAMPLE 
        Invoke-ADCGetForwardingsession -Count
    .EXAMPLE
        Invoke-ADCGetForwardingsession -name <string>
    .EXAMPLE
        Invoke-ADCGetForwardingsession -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetForwardingsession
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/forwardingsession/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll,

        [Parameter(ParameterSetName = 'GetAll')]
        [Parameter(ParameterSetName = 'Get')]
        [Switch]$ViewSummary

    )
    begin {
        Write-Verbose "Invoke-ADCGetForwardingsession: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all forwardingsession objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type forwardingsession -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for forwardingsession objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type forwardingsession -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving forwardingsession objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type forwardingsession -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving forwardingsession configuration for property 'name'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type forwardingsession -NitroPath nitro/v1/config -Resource $name -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving forwardingsession configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type forwardingsession -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetForwardingsession: Ended"
    }
}

function Invoke-ADCAddInat {
<#
    .SYNOPSIS
        Add Network configuration Object
    .DESCRIPTION
        Add Network configuration Object 
    .PARAMETER name 
        Name for the Inbound NAT (INAT) entry. Leading character must be a number or letter. Other characters allowed, after the first character, are @ _ - . (period) : (colon) # and space ( ).  
        Minimum length = 1 
    .PARAMETER publicip 
        Public IP address of packets received on the Citrix ADC. Can be aNetScaler-owned VIP or VIP6 address.  
        Minimum length = 1 
    .PARAMETER privateip 
        IP address of the server to which the packet is sent by the Citrix ADC. Can be an IPv4 or IPv6 address.  
        Minimum length = 1 
    .PARAMETER mode 
        Stateless translation.  
        Possible values = STATELESS 
    .PARAMETER tcpproxy 
        Enable TCP proxy, which enables the Citrix ADC to optimize the RNAT TCP traffic by using Layer 4 features.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER ftp 
        Enable the FTP protocol on the server for transferring files between the client and the server.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER tftp 
        To enable/disable TFTP (Default DISABLED).  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER usip 
        Enable the Citrix ADC to retain the source IP address of packets before sending the packets to the server.  
        Possible values = ON, OFF 
    .PARAMETER usnip 
        Enable the Citrix ADC to use a SNIP address as the source IP address of packets before sending the packets to the server.  
        Possible values = ON, OFF 
    .PARAMETER proxyip 
        Unique IP address used as the source IP address in packets sent to the server. Must be a MIP or SNIP address. 
    .PARAMETER useproxyport 
        Enable the Citrix ADC to proxy the source port of packets before sending the packets to the server.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER td 
        Integer value that uniquely identifies the traffic domain in which you want to configure the entity. If you do not specify an ID, the entity becomes part of the default traffic domain, which has an ID of 0.  
        Minimum value = 0  
        Maximum value = 4094 
    .PARAMETER connfailover 
        Synchronize connection information with the secondary appliance in a high availability (HA) pair. That is, synchronize all connection-related information for the INAT session.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER PassThru 
        Return details about the created inat item.
    .EXAMPLE
        Invoke-ADCAddInat -name <string> -publicip <string> -privateip <string>
    .NOTES
        File Name : Invoke-ADCAddInat
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/inat/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name ,

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$publicip ,

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$privateip ,

        [ValidateSet('STATELESS')]
        [string]$mode ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$tcpproxy = 'DISABLED' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$ftp = 'DISABLED' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$tftp = 'DISABLED' ,

        [ValidateSet('ON', 'OFF')]
        [string]$usip ,

        [ValidateSet('ON', 'OFF')]
        [string]$usnip ,

        [string]$proxyip ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$useproxyport = 'ENABLED' ,

        [ValidateRange(0, 4094)]
        [double]$td ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$connfailover = 'DISABLED' ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddInat: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
                publicip = $publicip
                privateip = $privateip
            }
            if ($PSBoundParameters.ContainsKey('mode')) { $Payload.Add('mode', $mode) }
            if ($PSBoundParameters.ContainsKey('tcpproxy')) { $Payload.Add('tcpproxy', $tcpproxy) }
            if ($PSBoundParameters.ContainsKey('ftp')) { $Payload.Add('ftp', $ftp) }
            if ($PSBoundParameters.ContainsKey('tftp')) { $Payload.Add('tftp', $tftp) }
            if ($PSBoundParameters.ContainsKey('usip')) { $Payload.Add('usip', $usip) }
            if ($PSBoundParameters.ContainsKey('usnip')) { $Payload.Add('usnip', $usnip) }
            if ($PSBoundParameters.ContainsKey('proxyip')) { $Payload.Add('proxyip', $proxyip) }
            if ($PSBoundParameters.ContainsKey('useproxyport')) { $Payload.Add('useproxyport', $useproxyport) }
            if ($PSBoundParameters.ContainsKey('td')) { $Payload.Add('td', $td) }
            if ($PSBoundParameters.ContainsKey('connfailover')) { $Payload.Add('connfailover', $connfailover) }
 
            if ($PSCmdlet.ShouldProcess("inat", "Add Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -NitroPath nitro/v1/config -Type inat -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetInat -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddInat: Finished"
    }
}

function Invoke-ADCDeleteInat {
<#
    .SYNOPSIS
        Delete Network configuration Object
    .DESCRIPTION
        Delete Network configuration Object
    .PARAMETER name 
       Name for the Inbound NAT (INAT) entry. Leading character must be a number or letter. Other characters allowed, after the first character, are @ _ - . (period) : (colon) # and space ( ).  
       Minimum length = 1 
    .EXAMPLE
        Invoke-ADCDeleteInat -name <string>
    .NOTES
        File Name : Invoke-ADCDeleteInat
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/inat/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$name 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteInat: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }

            if ($PSCmdlet.ShouldProcess("$name", "Delete Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type inat -NitroPath nitro/v1/config -Resource $name -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteInat: Finished"
    }
}

function Invoke-ADCUpdateInat {
<#
    .SYNOPSIS
        Update Network configuration Object
    .DESCRIPTION
        Update Network configuration Object 
    .PARAMETER name 
        Name for the Inbound NAT (INAT) entry. Leading character must be a number or letter. Other characters allowed, after the first character, are @ _ - . (period) : (colon) # and space ( ).  
        Minimum length = 1 
    .PARAMETER privateip 
        IP address of the server to which the packet is sent by the Citrix ADC. Can be an IPv4 or IPv6 address.  
        Minimum length = 1 
    .PARAMETER tcpproxy 
        Enable TCP proxy, which enables the Citrix ADC to optimize the RNAT TCP traffic by using Layer 4 features.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER ftp 
        Enable the FTP protocol on the server for transferring files between the client and the server.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER tftp 
        To enable/disable TFTP (Default DISABLED).  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER usip 
        Enable the Citrix ADC to retain the source IP address of packets before sending the packets to the server.  
        Possible values = ON, OFF 
    .PARAMETER usnip 
        Enable the Citrix ADC to use a SNIP address as the source IP address of packets before sending the packets to the server.  
        Possible values = ON, OFF 
    .PARAMETER proxyip 
        Unique IP address used as the source IP address in packets sent to the server. Must be a MIP or SNIP address. 
    .PARAMETER useproxyport 
        Enable the Citrix ADC to proxy the source port of packets before sending the packets to the server.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER connfailover 
        Synchronize connection information with the secondary appliance in a high availability (HA) pair. That is, synchronize all connection-related information for the INAT session.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER mode 
        Stateless translation.  
        Possible values = STATELESS 
    .PARAMETER PassThru 
        Return details about the created inat item.
    .EXAMPLE
        Invoke-ADCUpdateInat -name <string>
    .NOTES
        File Name : Invoke-ADCUpdateInat
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/inat/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$privateip ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$tcpproxy ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$ftp ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$tftp ,

        [ValidateSet('ON', 'OFF')]
        [string]$usip ,

        [ValidateSet('ON', 'OFF')]
        [string]$usnip ,

        [string]$proxyip ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$useproxyport ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$connfailover ,

        [ValidateSet('STATELESS')]
        [string]$mode ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCUpdateInat: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
            }
            if ($PSBoundParameters.ContainsKey('privateip')) { $Payload.Add('privateip', $privateip) }
            if ($PSBoundParameters.ContainsKey('tcpproxy')) { $Payload.Add('tcpproxy', $tcpproxy) }
            if ($PSBoundParameters.ContainsKey('ftp')) { $Payload.Add('ftp', $ftp) }
            if ($PSBoundParameters.ContainsKey('tftp')) { $Payload.Add('tftp', $tftp) }
            if ($PSBoundParameters.ContainsKey('usip')) { $Payload.Add('usip', $usip) }
            if ($PSBoundParameters.ContainsKey('usnip')) { $Payload.Add('usnip', $usnip) }
            if ($PSBoundParameters.ContainsKey('proxyip')) { $Payload.Add('proxyip', $proxyip) }
            if ($PSBoundParameters.ContainsKey('useproxyport')) { $Payload.Add('useproxyport', $useproxyport) }
            if ($PSBoundParameters.ContainsKey('connfailover')) { $Payload.Add('connfailover', $connfailover) }
            if ($PSBoundParameters.ContainsKey('mode')) { $Payload.Add('mode', $mode) }
 
            if ($PSCmdlet.ShouldProcess("inat", "Update Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -NitroPath nitro/v1/config -Type inat -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetInat -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUpdateInat: Finished"
    }
}

function Invoke-ADCUnsetInat {
<#
    .SYNOPSIS
        Unset Network configuration Object
    .DESCRIPTION
        Unset Network configuration Object 
   .PARAMETER name 
       Name for the Inbound NAT (INAT) entry. Leading character must be a number or letter. Other characters allowed, after the first character, are @ _ - . (period) : (colon) # and space ( ). 
   .PARAMETER tcpproxy 
       Enable TCP proxy, which enables the Citrix ADC to optimize the RNAT TCP traffic by using Layer 4 features.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER ftp 
       Enable the FTP protocol on the server for transferring files between the client and the server.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER tftp 
       To enable/disable TFTP (Default DISABLED).  
       Possible values = ENABLED, DISABLED 
   .PARAMETER usip 
       Enable the Citrix ADC to retain the source IP address of packets before sending the packets to the server.  
       Possible values = ON, OFF 
   .PARAMETER usnip 
       Enable the Citrix ADC to use a SNIP address as the source IP address of packets before sending the packets to the server.  
       Possible values = ON, OFF 
   .PARAMETER proxyip 
       Unique IP address used as the source IP address in packets sent to the server. Must be a MIP or SNIP address. 
   .PARAMETER useproxyport 
       Enable the Citrix ADC to proxy the source port of packets before sending the packets to the server.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER connfailover 
       Synchronize connection information with the secondary appliance in a high availability (HA) pair. That is, synchronize all connection-related information for the INAT session.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER mode 
       Stateless translation.  
       Possible values = STATELESS
    .EXAMPLE
        Invoke-ADCUnsetInat -name <string>
    .NOTES
        File Name : Invoke-ADCUnsetInat
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/inat
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name ,

        [Boolean]$tcpproxy ,

        [Boolean]$ftp ,

        [Boolean]$tftp ,

        [Boolean]$usip ,

        [Boolean]$usnip ,

        [Boolean]$proxyip ,

        [Boolean]$useproxyport ,

        [Boolean]$connfailover ,

        [Boolean]$mode 
    )
    begin {
        Write-Verbose "Invoke-ADCUnsetInat: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
            }
            if ($PSBoundParameters.ContainsKey('tcpproxy')) { $Payload.Add('tcpproxy', $tcpproxy) }
            if ($PSBoundParameters.ContainsKey('ftp')) { $Payload.Add('ftp', $ftp) }
            if ($PSBoundParameters.ContainsKey('tftp')) { $Payload.Add('tftp', $tftp) }
            if ($PSBoundParameters.ContainsKey('usip')) { $Payload.Add('usip', $usip) }
            if ($PSBoundParameters.ContainsKey('usnip')) { $Payload.Add('usnip', $usnip) }
            if ($PSBoundParameters.ContainsKey('proxyip')) { $Payload.Add('proxyip', $proxyip) }
            if ($PSBoundParameters.ContainsKey('useproxyport')) { $Payload.Add('useproxyport', $useproxyport) }
            if ($PSBoundParameters.ContainsKey('connfailover')) { $Payload.Add('connfailover', $connfailover) }
            if ($PSBoundParameters.ContainsKey('mode')) { $Payload.Add('mode', $mode) }
            if ($PSCmdlet.ShouldProcess("$name", "Unset Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type inat -NitroPath nitro/v1/config -Action unset -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUnsetInat: Finished"
    }
}

function Invoke-ADCGetInat {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER name 
       Name for the Inbound NAT (INAT) entry. Leading character must be a number or letter. Other characters allowed, after the first character, are @ _ - . (period) : (colon) # and space ( ). 
    .PARAMETER GetAll 
        Retreive all inat object(s)
    .PARAMETER Count
        If specified, the count of the inat object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetInat
    .EXAMPLE 
        Invoke-ADCGetInat -GetAll 
    .EXAMPLE 
        Invoke-ADCGetInat -Count
    .EXAMPLE
        Invoke-ADCGetInat -name <string>
    .EXAMPLE
        Invoke-ADCGetInat -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetInat
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/inat/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll,

        [Parameter(ParameterSetName = 'GetAll')]
        [Parameter(ParameterSetName = 'Get')]
        [Switch]$ViewSummary

    )
    begin {
        Write-Verbose "Invoke-ADCGetInat: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all inat objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type inat -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for inat objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type inat -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving inat objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type inat -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving inat configuration for property 'name'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type inat -NitroPath nitro/v1/config -Resource $name -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving inat configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type inat -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetInat: Ended"
    }
}

function Invoke-ADCUpdateInatparam {
<#
    .SYNOPSIS
        Update Network configuration Object
    .DESCRIPTION
        Update Network configuration Object 
    .PARAMETER nat46v6prefix 
        The prefix used for translating packets received from private IPv6 servers into IPv4 packets. This prefix has a length of 96 bits (128-32 = 96). The IPv6 servers embed the destination IP address of the IPv4 servers or hosts in the last 32 bits of the destination IP address field of the IPv6 packets. The first 96 bits of the destination IP address field are set as the IPv6 NAT prefix. IPv6 packets addressed to this prefix have to be routed to the Citrix ADC to ensure that the IPv6-IPv4 translation is done by the appliance. 
    .PARAMETER td 
        Integer value that uniquely identifies the traffic domain in which you want to configure the entity. If you do not specify an ID, the entity becomes part of the default traffic domain, which has an ID of 0.  
        Default value: 0  
        Minimum value = 0  
        Maximum value = 4094 
    .PARAMETER nat46ignoretos 
        Ignore TOS.  
        Default value: NO  
        Possible values = YES, NO 
    .PARAMETER nat46zerochecksum 
        Calculate checksum for UDP packets with zero checksum.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER nat46v6mtu 
        MTU setting for the IPv6 side. If the incoming IPv4 packet greater than this, either fragment or send icmp need fragmentation error.  
        Default value: 1280  
        Minimum value = 1280  
        Maximum value = 9216 
    .PARAMETER nat46fragheader 
        When disabled, translator will not insert IPv6 fragmentation header for non fragmented IPv4 packets.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER PassThru 
        Return details about the created inatparam item.
    .EXAMPLE
        Invoke-ADCUpdateInatparam 
    .NOTES
        File Name : Invoke-ADCUpdateInatparam
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/inatparam/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [string]$nat46v6prefix ,

        [ValidateRange(0, 4094)]
        [double]$td ,

        [ValidateSet('YES', 'NO')]
        [string]$nat46ignoretos ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$nat46zerochecksum ,

        [ValidateRange(1280, 9216)]
        [double]$nat46v6mtu ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$nat46fragheader ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCUpdateInatparam: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('nat46v6prefix')) { $Payload.Add('nat46v6prefix', $nat46v6prefix) }
            if ($PSBoundParameters.ContainsKey('td')) { $Payload.Add('td', $td) }
            if ($PSBoundParameters.ContainsKey('nat46ignoretos')) { $Payload.Add('nat46ignoretos', $nat46ignoretos) }
            if ($PSBoundParameters.ContainsKey('nat46zerochecksum')) { $Payload.Add('nat46zerochecksum', $nat46zerochecksum) }
            if ($PSBoundParameters.ContainsKey('nat46v6mtu')) { $Payload.Add('nat46v6mtu', $nat46v6mtu) }
            if ($PSBoundParameters.ContainsKey('nat46fragheader')) { $Payload.Add('nat46fragheader', $nat46fragheader) }
 
            if ($PSCmdlet.ShouldProcess("inatparam", "Update Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -NitroPath nitro/v1/config -Type inatparam -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetInatparam -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUpdateInatparam: Finished"
    }
}

function Invoke-ADCUnsetInatparam {
<#
    .SYNOPSIS
        Unset Network configuration Object
    .DESCRIPTION
        Unset Network configuration Object 
   .PARAMETER nat46v6prefix 
       The prefix used for translating packets received from private IPv6 servers into IPv4 packets. This prefix has a length of 96 bits (128-32 = 96). The IPv6 servers embed the destination IP address of the IPv4 servers or hosts in the last 32 bits of the destination IP address field of the IPv6 packets. The first 96 bits of the destination IP address field are set as the IPv6 NAT prefix. IPv6 packets addressed to this prefix have to be routed to the Citrix ADC to ensure that the IPv6-IPv4 translation is done by the appliance. 
   .PARAMETER td 
       Integer value that uniquely identifies the traffic domain in which you want to configure the entity. If you do not specify an ID, the entity becomes part of the default traffic domain, which has an ID of 0.
    .EXAMPLE
        Invoke-ADCUnsetInatparam 
    .NOTES
        File Name : Invoke-ADCUnsetInatparam
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/inatparam
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Boolean]$nat46v6prefix ,

        [Boolean]$td 
    )
    begin {
        Write-Verbose "Invoke-ADCUnsetInatparam: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('nat46v6prefix')) { $Payload.Add('nat46v6prefix', $nat46v6prefix) }
            if ($PSBoundParameters.ContainsKey('td')) { $Payload.Add('td', $td) }
            if ($PSCmdlet.ShouldProcess("inatparam", "Unset Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type inatparam -NitroPath nitro/v1/config -Action unset -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUnsetInatparam: Finished"
    }
}

function Invoke-ADCGetInatparam {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER td 
       Integer value that uniquely identifies the traffic domain in which you want to configure the entity. If you do not specify an ID, the entity becomes part of the default traffic domain, which has an ID of 0. 
    .PARAMETER GetAll 
        Retreive all inatparam object(s)
    .PARAMETER Count
        If specified, the count of the inatparam object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetInatparam
    .EXAMPLE 
        Invoke-ADCGetInatparam -GetAll 
    .EXAMPLE 
        Invoke-ADCGetInatparam -Count
    .EXAMPLE
        Invoke-ADCGetInatparam -name <string>
    .EXAMPLE
        Invoke-ADCGetInatparam -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetInatparam
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/inatparam/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateRange(0, 4094)]
        [double]$td,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll,

        [Parameter(ParameterSetName = 'GetAll')]
        [Parameter(ParameterSetName = 'Get')]
        [Switch]$ViewSummary

    )
    begin {
        Write-Verbose "Invoke-ADCGetInatparam: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all inatparam objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type inatparam -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for inatparam objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type inatparam -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving inatparam objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type inatparam -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving inatparam configuration for property 'td'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type inatparam -NitroPath nitro/v1/config -Resource $td -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving inatparam configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type inatparam -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetInatparam: Ended"
    }
}

function Invoke-ADCClearInterface {
<#
    .SYNOPSIS
        Clear Network configuration Object
    .DESCRIPTION
        Clear Network configuration Object 
    .PARAMETER id 
        Interface number, in C/U format, where C can take one of the following values:  
        * 0 - Indicates a management interface.  
        * 1 - Indicates a 1 Gbps port.  
        * 10 - Indicates a 10 Gbps port.  
        * LA - Indicates a link aggregation port.  
        * LO - Indicates a loop back port.  
        U is a unique integer for representing an interface in a particular port group.
    .EXAMPLE
        Invoke-ADCClearInterface -id <string>
    .NOTES
        File Name : Invoke-ADCClearInterface
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/Interface/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$id 

    )
    begin {
        Write-Verbose "Invoke-ADCClearInterface: Starting"
    }
    process {
        try {
            $Payload = @{
                id = $id
            }

            if ($PSCmdlet.ShouldProcess($Name, "Clear Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -NitroPath nitro/v1/config -Type interface -Action clear -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $result
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCClearInterface: Finished"
    }
}

function Invoke-ADCUpdateInterface {
<#
    .SYNOPSIS
        Update Network configuration Object
    .DESCRIPTION
        Update Network configuration Object 
    .PARAMETER id 
        Interface number, in C/U format, where C can take one of the following values:  
        * 0 - Indicates a management interface.  
        * 1 - Indicates a 1 Gbps port.  
        * 10 - Indicates a 10 Gbps port.  
        * LA - Indicates a link aggregation port.  
        * LO - Indicates a loop back port.  
        U is a unique integer for representing an interface in a particular port group. 
    .PARAMETER speed 
        Ethernet speed of the interface, in Mbps.  
        Notes:  
        * If you set the speed as AUTO, the Citrix ADC attempts to auto-negotiate or auto-sense the link speed of the interface when it is UP. You must enable auto negotiation on the interface.  
        * If you set a speed other than AUTO, you must specify the same speed for the peer network device. Mismatched speed and duplex settings between the peer devices of a link lead to link errors, packet loss, and other errors.  
        Some interfaces do not support certain speeds. If you specify an unsupported speed, an error message appears.  
        Default value: AUTO  
        Possible values = AUTO, 10, 100, 1000, 10000, 25000, 40000, 50000, 100000 
    .PARAMETER duplex 
        The duplex mode for the interface. Notes:* If you set the duplex mode to AUTO, the Citrix ADC attempts to auto-negotiate the duplex mode of the interface when it is UP. You must enable auto negotiation on the interface. If you set a duplex mode other than AUTO, you must specify the same duplex mode for the peer network device. Mismatched speed and duplex settings between the peer devices of a link lead to link errors, packet loss, and other errors.  
        Default value: AUTO  
        Possible values = AUTO, HALF, FULL 
    .PARAMETER flowctl 
        802.3x flow control setting for the interface. The 802.3x specification does not define flow control for 10 Mbps and 100 Mbps speeds, but if a Gigabit Ethernet interface operates at those speeds, the flow control settings can be applied. The flow control setting that is finally applied to an interface depends on auto-negotiation. With the ON option, the peer negotiates the flow control, but the appliance then forces two-way flow control for the interface.  
        Default value: OFF  
        Possible values = OFF, RX, TX, RXTX, ON 
    .PARAMETER autoneg 
        Auto-negotiation state of the interface. With the ENABLED setting, the Citrix ADC auto-negotiates the speed and duplex settings with the peer network device on the link. The Citrix ADC appliance auto-negotiates the settings of only those parameters (speed or duplex mode) for which the value is set as AUTO.  
        Default value: NSA_DVC_AUTONEG_ON  
        Possible values = DISABLED, ENABLED 
    .PARAMETER hamonitor 
        In a High Availability (HA) configuration, monitor the interface for failure events. In an HA configuration, an interface that has HA MON enabled and is not bound to any Failover Interface Set (FIS), is a critical interface. Failure or disabling of any critical interface triggers HA failover.  
        Default value: ON  
        Possible values = ON, OFF 
    .PARAMETER haheartbeat 
        In a High Availability (HA) or Cluster configuration, configure the interface for sending heartbeats. In an HA or Cluster configuration, an interface that has HA Heartbeat disabled should not send the heartbeats.  
        Default value: ON  
        Possible values = OFF, ON 
    .PARAMETER mtu 
        The maximum transmission unit (MTU) is the largest packet size, measured in bytes excluding 14 bytes ethernet header and 4 bytes crc, that can be transmitted and received by this interface. Default value of MTU is 1500 on all the interface of Citrix ADC any value configured more than 1500 on the interface will make the interface as jumbo enabled. In case of cluster backplane interface MTU value will be changed to 1514 by default, user has to change the backplane interface value to maximum mtu configured on any of the interface in cluster system plus 14 bytes more for backplane interface if Jumbo is enabled on any of the interface in a cluster system. Changing the backplane will bring back the MTU of backplane interface to default value of 1500. If a channel is configured as backplane then the same holds true for channel as well as member interfaces.  
        Default value: 1500  
        Minimum value = 1500  
        Maximum value = 9216 
    .PARAMETER ringsize 
        The receive ringsize of the interface. A higher number provides more number of buffers in handling incoming traffic.  
        Default value: 2048  
        Minimum value = 512  
        Maximum value = 16384 
    .PARAMETER ringtype 
        The receive ringtype of the interface (Fixed or Elastic). A fixed ring type pre-allocates configured number of buffers irrespective of traffic rate. In contrast, an elastic ring, expands and shrinks based on incoming traffic rate.  
        Default value: Elastic  
        Possible values = Elastic, Fixed 
    .PARAMETER tagall 
        Add a four-byte 802.1q tag to every packet sent on this interface. The ON setting applies the tag for this interface's native VLAN. OFF applies the tag for all VLANs other than the native VLAN.  
        Default value: OFF  
        Possible values = ON, OFF 
    .PARAMETER trunk 
        This argument is deprecated by tagall.  
        Default value: OFF  
        Possible values = ON, OFF 
    .PARAMETER trunkmode 
        Accept and send 802.1q VLAN tagged packets, based on Allowed Vlan List of this interface.  
        Default value: OFF  
        Possible values = ON, OFF 
    .PARAMETER trunkallowedvlan 
        VLAN ID or range of VLAN IDs will be allowed on this trunk interface. In the command line interface, separate the range with a hyphen. For example: 40-90.  
        Minimum length = 1  
        Maximum length = 4094 
    .PARAMETER lacpmode 
        Bind the interface to a LA channel created by the Link Aggregation control protocol (LACP).  
        Available settings function as follows:  
        * Active - The LA channel port of the Citrix ADC generates LACPDU messages on a regular basis, regardless of any need expressed by its peer device to receive them.  
        * Passive - The LA channel port of the Citrix ADC does not transmit LACPDU messages unless the peer device port is in the active mode. That is, the port does not speak unless spoken to.  
        * Disabled - Unbinds the interface from the LA channel. If this is the only interface in the LA channel, the LA channel is removed.  
        Default value: DISABLED  
        Possible values = DISABLED, ACTIVE, PASSIVE 
    .PARAMETER lacpkey 
        Integer identifying the LACP LA channel to which the interface is to be bound.  
        For an LA channel of the Citrix ADC, this digit specifies the variable x of an LA channel in LA/x notation, where x can range from 1 to 8. For example, if you specify 3 as the LACP key for an LA channel, the interface is bound to the LA channel LA/3.  
        For an LA channel of a cluster configuration, this digit specifies the variable y of a cluster LA channel in CLA/(y-4) notation, where y can range from 5 to 8. For example, if you specify 6 as the LACP key for a cluster LA channel, the interface is bound to the cluster LA channel CLA/2.  
        Minimum value = 1  
        Maximum value = 8 
    .PARAMETER lagtype 
        Type of entity (Citrix ADC or cluster configuration) for which to create the channel.  
        Default value: NODE  
        Possible values = NODE, CLUSTER 
    .PARAMETER lacppriority 
        LACP port priority, expressed as an integer. The lower the number, the higher the priority. The Citrix ADC limits the number of interfaces in an LA channel to sixteen.  
        Default value: 32768  
        Minimum value = 1  
        Maximum value = 65535 
    .PARAMETER lacptimeout 
        Interval at which the Citrix ADC sends LACPDU messages to the peer device on the LA channel.  
        Available settings function as follows:  
        LONG - 30 seconds.  
        SHORT - 1 second.  
        Default value: NSA_LACP_TIMEOUT_LONG  
        Possible values = LONG, SHORT 
    .PARAMETER ifalias 
        Alias name for the interface. Used only to enhance readability. To perform any operations, you have to specify the interface ID.  
        Default value: " "  
        Maximum length = 31 
    .PARAMETER throughput 
        Low threshold value for the throughput of the interface, in Mbps. In an HA configuration, failover is triggered if the interface has HA MON enabled and the throughput is below the specified the threshold.  
        Minimum value = 0  
        Maximum value = 160000 
    .PARAMETER linkredundancy 
        Link Redundancy for Cluster LAG.  
        Default value: OFF  
        Possible values = ON, OFF 
    .PARAMETER bandwidthhigh 
        High threshold value for the bandwidth usage of the interface, in Mbps. The Citrix ADC generates an SNMP trap message when the bandwidth usage of the interface is greater than or equal to the specified high threshold value.  
        Minimum value = 0  
        Maximum value = 160000 
    .PARAMETER bandwidthnormal 
        Normal threshold value for the bandwidth usage of the interface, in Mbps. When the bandwidth usage of the interface becomes less than or equal to the specified normal threshold after exceeding the high threshold, the Citrix ADC generates an SNMP trap message to indicate that the bandwidth usage has returned to normal.  
        Minimum value = 0  
        Maximum value = 160000 
    .PARAMETER lldpmode 
        Link Layer Discovery Protocol (LLDP) mode for an interface. The resultant LLDP mode of an interface depends on the LLDP mode configured at the global and the interface levels.  
        Possible values = NONE, TRANSMITTER, RECEIVER, TRANSCEIVER 
    .PARAMETER lrsetpriority 
        LRSET port priority, expressed as an integer ranging from 1 to 1024. The highest priority is 1. The Citrix ADC limits the number of interfaces in an LRSET to 8. Within a LRSET the highest LR Priority Interface is considered as the first candidate for the Active interface, if the interface is UP.  
        Default value: 1024  
        Minimum value = 1  
        Maximum value = 1024 
    .PARAMETER PassThru 
        Return details about the created interface item.
    .EXAMPLE
        Invoke-ADCUpdateInterface -id <string>
    .NOTES
        File Name : Invoke-ADCUpdateInterface
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/Interface/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$id ,

        [ValidateSet('AUTO', '10', '100', '1000', '10000', '25000', '40000', '50000', '100000')]
        [string]$speed ,

        [ValidateSet('AUTO', 'HALF', 'FULL')]
        [string]$duplex ,

        [ValidateSet('OFF', 'RX', 'TX', 'RXTX', 'ON')]
        [string]$flowctl ,

        [ValidateSet('DISABLED', 'ENABLED')]
        [string]$autoneg ,

        [ValidateSet('ON', 'OFF')]
        [string]$hamonitor ,

        [ValidateSet('OFF', 'ON')]
        [string]$haheartbeat ,

        [ValidateRange(1500, 9216)]
        [double]$mtu ,

        [ValidateRange(512, 16384)]
        [double]$ringsize ,

        [ValidateSet('Elastic', 'Fixed')]
        [string]$ringtype ,

        [ValidateSet('ON', 'OFF')]
        [string]$tagall ,

        [ValidateSet('ON', 'OFF')]
        [string]$trunk ,

        [ValidateSet('ON', 'OFF')]
        [string]$trunkmode ,

        [ValidateLength(1, 4094)]
        [ValidateRange(40, 90)]
        [string[]]$trunkallowedvlan ,

        [ValidateSet('DISABLED', 'ACTIVE', 'PASSIVE')]
        [string]$lacpmode ,

        [double]$lacpkey ,

        [ValidateSet('NODE', 'CLUSTER')]
        [string]$lagtype ,

        [ValidateRange(1, 65535)]
        [double]$lacppriority ,

        [ValidateSet('LONG', 'SHORT')]
        [string]$lacptimeout ,

        [string]$ifalias ,

        [ValidateRange(0, 160000)]
        [double]$throughput ,

        [ValidateSet('ON', 'OFF')]
        [string]$linkredundancy ,

        [ValidateRange(0, 160000)]
        [double]$bandwidthhigh ,

        [ValidateRange(0, 160000)]
        [double]$bandwidthnormal ,

        [ValidateSet('NONE', 'TRANSMITTER', 'RECEIVER', 'TRANSCEIVER')]
        [string]$lldpmode ,

        [ValidateRange(1, 1024)]
        [double]$lrsetpriority ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCUpdateInterface: Starting"
    }
    process {
        try {
            $Payload = @{
                id = $id
            }
            if ($PSBoundParameters.ContainsKey('speed')) { $Payload.Add('speed', $speed) }
            if ($PSBoundParameters.ContainsKey('duplex')) { $Payload.Add('duplex', $duplex) }
            if ($PSBoundParameters.ContainsKey('flowctl')) { $Payload.Add('flowctl', $flowctl) }
            if ($PSBoundParameters.ContainsKey('autoneg')) { $Payload.Add('autoneg', $autoneg) }
            if ($PSBoundParameters.ContainsKey('hamonitor')) { $Payload.Add('hamonitor', $hamonitor) }
            if ($PSBoundParameters.ContainsKey('haheartbeat')) { $Payload.Add('haheartbeat', $haheartbeat) }
            if ($PSBoundParameters.ContainsKey('mtu')) { $Payload.Add('mtu', $mtu) }
            if ($PSBoundParameters.ContainsKey('ringsize')) { $Payload.Add('ringsize', $ringsize) }
            if ($PSBoundParameters.ContainsKey('ringtype')) { $Payload.Add('ringtype', $ringtype) }
            if ($PSBoundParameters.ContainsKey('tagall')) { $Payload.Add('tagall', $tagall) }
            if ($PSBoundParameters.ContainsKey('trunk')) { $Payload.Add('trunk', $trunk) }
            if ($PSBoundParameters.ContainsKey('trunkmode')) { $Payload.Add('trunkmode', $trunkmode) }
            if ($PSBoundParameters.ContainsKey('trunkallowedvlan')) { $Payload.Add('trunkallowedvlan', $trunkallowedvlan) }
            if ($PSBoundParameters.ContainsKey('lacpmode')) { $Payload.Add('lacpmode', $lacpmode) }
            if ($PSBoundParameters.ContainsKey('lacpkey')) { $Payload.Add('lacpkey', $lacpkey) }
            if ($PSBoundParameters.ContainsKey('lagtype')) { $Payload.Add('lagtype', $lagtype) }
            if ($PSBoundParameters.ContainsKey('lacppriority')) { $Payload.Add('lacppriority', $lacppriority) }
            if ($PSBoundParameters.ContainsKey('lacptimeout')) { $Payload.Add('lacptimeout', $lacptimeout) }
            if ($PSBoundParameters.ContainsKey('ifalias')) { $Payload.Add('ifalias', $ifalias) }
            if ($PSBoundParameters.ContainsKey('throughput')) { $Payload.Add('throughput', $throughput) }
            if ($PSBoundParameters.ContainsKey('linkredundancy')) { $Payload.Add('linkredundancy', $linkredundancy) }
            if ($PSBoundParameters.ContainsKey('bandwidthhigh')) { $Payload.Add('bandwidthhigh', $bandwidthhigh) }
            if ($PSBoundParameters.ContainsKey('bandwidthnormal')) { $Payload.Add('bandwidthnormal', $bandwidthnormal) }
            if ($PSBoundParameters.ContainsKey('lldpmode')) { $Payload.Add('lldpmode', $lldpmode) }
            if ($PSBoundParameters.ContainsKey('lrsetpriority')) { $Payload.Add('lrsetpriority', $lrsetpriority) }
 
            if ($PSCmdlet.ShouldProcess("interface", "Update Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -NitroPath nitro/v1/config -Type interface -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetInterface -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUpdateInterface: Finished"
    }
}

function Invoke-ADCUnsetInterface {
<#
    .SYNOPSIS
        Unset Network configuration Object
    .DESCRIPTION
        Unset Network configuration Object 
   .PARAMETER id 
       Interface number, in C/U format, where C can take one of the following values:  
       * 0 - Indicates a management interface.  
       * 1 - Indicates a 1 Gbps port.  
       * 10 - Indicates a 10 Gbps port.  
       * LA - Indicates a link aggregation port.  
       * LO - Indicates a loop back port.  
       U is a unique integer for representing an interface in a particular port group. 
   .PARAMETER speed 
       Ethernet speed of the interface, in Mbps.  
       Notes:  
       * If you set the speed as AUTO, the Citrix ADC attempts to auto-negotiate or auto-sense the link speed of the interface when it is UP. You must enable auto negotiation on the interface.  
       * If you set a speed other than AUTO, you must specify the same speed for the peer network device. Mismatched speed and duplex settings between the peer devices of a link lead to link errors, packet loss, and other errors.  
       Some interfaces do not support certain speeds. If you specify an unsupported speed, an error message appears.  
       Possible values = AUTO, 10, 100, 1000, 10000, 25000, 40000, 50000, 100000 
   .PARAMETER duplex 
       The duplex mode for the interface. Notes:* If you set the duplex mode to AUTO, the Citrix ADC attempts to auto-negotiate the duplex mode of the interface when it is UP. You must enable auto negotiation on the interface. If you set a duplex mode other than AUTO, you must specify the same duplex mode for the peer network device. Mismatched speed and duplex settings between the peer devices of a link lead to link errors, packet loss, and other errors.  
       Possible values = AUTO, HALF, FULL 
   .PARAMETER flowctl 
       802.3x flow control setting for the interface. The 802.3x specification does not define flow control for 10 Mbps and 100 Mbps speeds, but if a Gigabit Ethernet interface operates at those speeds, the flow control settings can be applied. The flow control setting that is finally applied to an interface depends on auto-negotiation. With the ON option, the peer negotiates the flow control, but the appliance then forces two-way flow control for the interface.  
       Possible values = OFF, RX, TX, RXTX, ON 
   .PARAMETER autoneg 
       Auto-negotiation state of the interface. With the ENABLED setting, the Citrix ADC auto-negotiates the speed and duplex settings with the peer network device on the link. The Citrix ADC appliance auto-negotiates the settings of only those parameters (speed or duplex mode) for which the value is set as AUTO.  
       Possible values = DISABLED, ENABLED 
   .PARAMETER hamonitor 
       In a High Availability (HA) configuration, monitor the interface for failure events. In an HA configuration, an interface that has HA MON enabled and is not bound to any Failover Interface Set (FIS), is a critical interface. Failure or disabling of any critical interface triggers HA failover.  
       Possible values = ON, OFF 
   .PARAMETER haheartbeat 
       In a High Availability (HA) or Cluster configuration, configure the interface for sending heartbeats. In an HA or Cluster configuration, an interface that has HA Heartbeat disabled should not send the heartbeats.  
       Possible values = OFF, ON 
   .PARAMETER mtu 
       The maximum transmission unit (MTU) is the largest packet size, measured in bytes excluding 14 bytes ethernet header and 4 bytes crc, that can be transmitted and received by this interface. Default value of MTU is 1500 on all the interface of Citrix ADC any value configured more than 1500 on the interface will make the interface as jumbo enabled. In case of cluster backplane interface MTU value will be changed to 1514 by default, user has to change the backplane interface value to maximum mtu configured on any of the interface in cluster system plus 14 bytes more for backplane interface if Jumbo is enabled on any of the interface in a cluster system. Changing the backplane will bring back the MTU of backplane interface to default value of 1500. If a channel is configured as backplane then the same holds true for channel as well as member interfaces. 
   .PARAMETER ringsize 
       The receive ringsize of the interface. A higher number provides more number of buffers in handling incoming traffic. 
   .PARAMETER ringtype 
       The receive ringtype of the interface (Fixed or Elastic). A fixed ring type pre-allocates configured number of buffers irrespective of traffic rate. In contrast, an elastic ring, expands and shrinks based on incoming traffic rate.  
       Possible values = Elastic, Fixed 
   .PARAMETER tagall 
       Add a four-byte 802.1q tag to every packet sent on this interface. The ON setting applies the tag for this interface's native VLAN. OFF applies the tag for all VLANs other than the native VLAN.  
       Possible values = ON, OFF 
   .PARAMETER trunk 
       This argument is deprecated by tagall.  
       Possible values = ON, OFF 
   .PARAMETER trunkmode 
       Accept and send 802.1q VLAN tagged packets, based on Allowed Vlan List of this interface.  
       Possible values = ON, OFF 
   .PARAMETER trunkallowedvlan 
       VLAN ID or . 
   .PARAMETER lacpmode 
       Bind the interface to a LA channel created by the Link Aggregation control protocol (LACP).  
       Available settings function as follows:  
       * Active - The LA channel port of the Citrix ADC generates LACPDU messages on a regular basis, regardless of any need expressed by its peer device to receive them.  
       * Passive - The LA channel port of the Citrix ADC does not transmit LACPDU messages unless the peer device port is in the active mode. That is, the port does not speak unless spoken to.  
       * Disabled - Unbinds the interface from the LA channel. If this is the only interface in the LA channel, the LA channel is removed.  
       Possible values = DISABLED, ACTIVE, PASSIVE 
   .PARAMETER lacppriority 
       LACP port priority, expressed as an integer. The lower the number, the higher the priority. The Citrix ADC limits the number of interfaces in an LA channel to sixteen. 
   .PARAMETER lacptimeout 
       Interval at which the Citrix ADC sends LACPDU messages to the peer device on the LA channel.  
       Available settings function as follows:  
       LONG - 30 seconds.  
       SHORT - 1 second.  
       Possible values = LONG, SHORT 
   .PARAMETER ifalias 
       Alias name for the interface. Used only to enhance readability. To perform any operations, you have to specify the interface ID. 
   .PARAMETER throughput 
       Low threshold value for the throughput of the interface, in Mbps. In an HA configuration, failover is triggered if the interface has HA MON enabled and the throughput is below the specified the threshold. 
   .PARAMETER linkredundancy 
       Link Redundancy for Cluster LAG.  
       Possible values = ON, OFF 
   .PARAMETER bandwidthhigh 
       High threshold value for the bandwidth usage of the interface, in Mbps. The Citrix ADC generates an SNMP trap message when the bandwidth usage of the interface is greater than or equal to the specified high threshold value. 
   .PARAMETER bandwidthnormal 
       Normal threshold value for the bandwidth usage of the interface, in Mbps. When the bandwidth usage of the interface becomes less than or equal to the specified normal threshold after exceeding the high threshold, the Citrix ADC generates an SNMP trap message to indicate that the bandwidth usage has returned to normal. 
   .PARAMETER lldpmode 
       Link Layer Discovery Protocol (LLDP) mode for an interface. The resultant LLDP mode of an interface depends on the LLDP mode configured at the global and the interface levels.  
       Possible values = NONE, TRANSMITTER, RECEIVER, TRANSCEIVER 
   .PARAMETER lrsetpriority 
       LRSET port priority, expressed as an integer ranging from 1 to 1024. The highest priority is 1. The Citrix ADC limits the number of interfaces in an LRSET to 8. Within a LRSET the highest LR Priority Interface is considered as the first candidate for the Active interface, if the interface is UP.
    .EXAMPLE
        Invoke-ADCUnsetInterface -id <string>
    .NOTES
        File Name : Invoke-ADCUnsetInterface
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/Interface
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$id ,

        [Boolean]$speed ,

        [Boolean]$duplex ,

        [Boolean]$flowctl ,

        [Boolean]$autoneg ,

        [Boolean]$hamonitor ,

        [Boolean]$haheartbeat ,

        [Boolean]$mtu ,

        [Boolean]$ringsize ,

        [Boolean]$ringtype ,

        [Boolean]$tagall ,

        [Boolean]$trunk ,

        [Boolean]$trunkmode ,

        [Boolean]$trunkallowedvlan ,

        [Boolean]$lacpmode ,

        [Boolean]$lacppriority ,

        [Boolean]$lacptimeout ,

        [Boolean]$ifalias ,

        [Boolean]$throughput ,

        [Boolean]$linkredundancy ,

        [Boolean]$bandwidthhigh ,

        [Boolean]$bandwidthnormal ,

        [Boolean]$lldpmode ,

        [Boolean]$lrsetpriority 
    )
    begin {
        Write-Verbose "Invoke-ADCUnsetInterface: Starting"
    }
    process {
        try {
            $Payload = @{
                id = $id
            }
            if ($PSBoundParameters.ContainsKey('speed')) { $Payload.Add('speed', $speed) }
            if ($PSBoundParameters.ContainsKey('duplex')) { $Payload.Add('duplex', $duplex) }
            if ($PSBoundParameters.ContainsKey('flowctl')) { $Payload.Add('flowctl', $flowctl) }
            if ($PSBoundParameters.ContainsKey('autoneg')) { $Payload.Add('autoneg', $autoneg) }
            if ($PSBoundParameters.ContainsKey('hamonitor')) { $Payload.Add('hamonitor', $hamonitor) }
            if ($PSBoundParameters.ContainsKey('haheartbeat')) { $Payload.Add('haheartbeat', $haheartbeat) }
            if ($PSBoundParameters.ContainsKey('mtu')) { $Payload.Add('mtu', $mtu) }
            if ($PSBoundParameters.ContainsKey('ringsize')) { $Payload.Add('ringsize', $ringsize) }
            if ($PSBoundParameters.ContainsKey('ringtype')) { $Payload.Add('ringtype', $ringtype) }
            if ($PSBoundParameters.ContainsKey('tagall')) { $Payload.Add('tagall', $tagall) }
            if ($PSBoundParameters.ContainsKey('trunk')) { $Payload.Add('trunk', $trunk) }
            if ($PSBoundParameters.ContainsKey('trunkmode')) { $Payload.Add('trunkmode', $trunkmode) }
            if ($PSBoundParameters.ContainsKey('trunkallowedvlan')) { $Payload.Add('trunkallowedvlan', $trunkallowedvlan) }
            if ($PSBoundParameters.ContainsKey('lacpmode')) { $Payload.Add('lacpmode', $lacpmode) }
            if ($PSBoundParameters.ContainsKey('lacppriority')) { $Payload.Add('lacppriority', $lacppriority) }
            if ($PSBoundParameters.ContainsKey('lacptimeout')) { $Payload.Add('lacptimeout', $lacptimeout) }
            if ($PSBoundParameters.ContainsKey('ifalias')) { $Payload.Add('ifalias', $ifalias) }
            if ($PSBoundParameters.ContainsKey('throughput')) { $Payload.Add('throughput', $throughput) }
            if ($PSBoundParameters.ContainsKey('linkredundancy')) { $Payload.Add('linkredundancy', $linkredundancy) }
            if ($PSBoundParameters.ContainsKey('bandwidthhigh')) { $Payload.Add('bandwidthhigh', $bandwidthhigh) }
            if ($PSBoundParameters.ContainsKey('bandwidthnormal')) { $Payload.Add('bandwidthnormal', $bandwidthnormal) }
            if ($PSBoundParameters.ContainsKey('lldpmode')) { $Payload.Add('lldpmode', $lldpmode) }
            if ($PSBoundParameters.ContainsKey('lrsetpriority')) { $Payload.Add('lrsetpriority', $lrsetpriority) }
            if ($PSCmdlet.ShouldProcess("$id", "Unset Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type interface -NitroPath nitro/v1/config -Action unset -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUnsetInterface: Finished"
    }
}

function Invoke-ADCEnableInterface {
<#
    .SYNOPSIS
        Enable Network configuration Object
    .DESCRIPTION
        Enable Network configuration Object 
    .PARAMETER id 
        Interface number, in C/U format, where C can take one of the following values:  
        * 0 - Indicates a management interface.  
        * 1 - Indicates a 1 Gbps port.  
        * 10 - Indicates a 10 Gbps port.  
        * LA - Indicates a link aggregation port.  
        * LO - Indicates a loop back port.  
        U is a unique integer for representing an interface in a particular port group.
    .EXAMPLE
        Invoke-ADCEnableInterface -id <string>
    .NOTES
        File Name : Invoke-ADCEnableInterface
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/Interface/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$id 

    )
    begin {
        Write-Verbose "Invoke-ADCEnableInterface: Starting"
    }
    process {
        try {
            $Payload = @{
                id = $id
            }

            if ($PSCmdlet.ShouldProcess($Name, "Enable Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -NitroPath nitro/v1/config -Type interface -Action enable -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $result
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCEnableInterface: Finished"
    }
}

function Invoke-ADCDisableInterface {
<#
    .SYNOPSIS
        Disable Network configuration Object
    .DESCRIPTION
        Disable Network configuration Object 
    .PARAMETER id 
        Interface number, in C/U format, where C can take one of the following values:  
        * 0 - Indicates a management interface.  
        * 1 - Indicates a 1 Gbps port.  
        * 10 - Indicates a 10 Gbps port.  
        * LA - Indicates a link aggregation port.  
        * LO - Indicates a loop back port.  
        U is a unique integer for representing an interface in a particular port group.
    .EXAMPLE
        Invoke-ADCDisableInterface -id <string>
    .NOTES
        File Name : Invoke-ADCDisableInterface
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/Interface/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$id 

    )
    begin {
        Write-Verbose "Invoke-ADCDisableInterface: Starting"
    }
    process {
        try {
            $Payload = @{
                id = $id
            }

            if ($PSCmdlet.ShouldProcess($Name, "Disable Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -NitroPath nitro/v1/config -Type interface -Action disable -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $result
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDisableInterface: Finished"
    }
}

function Invoke-ADCResetInterface {
<#
    .SYNOPSIS
        Reset Network configuration Object
    .DESCRIPTION
        Reset Network configuration Object 
    .PARAMETER id 
        Interface number, in C/U format, where C can take one of the following values:  
        * 0 - Indicates a management interface.  
        * 1 - Indicates a 1 Gbps port.  
        * 10 - Indicates a 10 Gbps port.  
        * LA - Indicates a link aggregation port.  
        * LO - Indicates a loop back port.  
        U is a unique integer for representing an interface in a particular port group.
    .EXAMPLE
        Invoke-ADCResetInterface -id <string>
    .NOTES
        File Name : Invoke-ADCResetInterface
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/Interface/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$id 

    )
    begin {
        Write-Verbose "Invoke-ADCResetInterface: Starting"
    }
    process {
        try {
            $Payload = @{
                id = $id
            }

            if ($PSCmdlet.ShouldProcess($Name, "Reset Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -NitroPath nitro/v1/config -Type interface -Action reset -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $result
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCResetInterface: Finished"
    }
}

function Invoke-ADCGetInterface {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER id 
       Interface number, in C/U format, where C can take one of the following values:  
       * 0 - Indicates a management interface.  
       * 1 - Indicates a 1 Gbps port.  
       * 10 - Indicates a 10 Gbps port.  
       * LA - Indicates a link aggregation port.  
       * LO - Indicates a loop back port.  
       U is a unique integer for representing an interface in a particular port group. 
    .PARAMETER GetAll 
        Retreive all Interface object(s)
    .PARAMETER Count
        If specified, the count of the Interface object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetInterface
    .EXAMPLE 
        Invoke-ADCGetInterface -GetAll 
    .EXAMPLE 
        Invoke-ADCGetInterface -Count
    .EXAMPLE
        Invoke-ADCGetInterface -name <string>
    .EXAMPLE
        Invoke-ADCGetInterface -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetInterface
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/Interface/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [string]$id,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll,

        [Parameter(ParameterSetName = 'GetAll')]
        [Parameter(ParameterSetName = 'Get')]
        [Switch]$ViewSummary

    )
    begin {
        Write-Verbose "Invoke-ADCGetInterface: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all Interface objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type Interface -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for Interface objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type Interface -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving Interface objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type Interface -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving Interface configuration for property 'id'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type Interface -NitroPath nitro/v1/config -Resource $id -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving Interface configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type Interface -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetInterface: Ended"
    }
}

function Invoke-ADCAddInterfacepair {
<#
    .SYNOPSIS
        Add Network configuration Object
    .DESCRIPTION
        Add Network configuration Object 
    .PARAMETER id 
        The Interface pair id.  
        Minimum value = 1  
        Maximum value = 255 
    .PARAMETER ifnum 
        The constituent interfaces in the interface pair.  
        Minimum length = 1 
    .PARAMETER PassThru 
        Return details about the created interfacepair item.
    .EXAMPLE
        Invoke-ADCAddInterfacepair -id <double> -ifnum <string[]>
    .NOTES
        File Name : Invoke-ADCAddInterfacepair
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/interfacepair/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateRange(1, 255)]
        [double]$id ,

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string[]]$ifnum ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddInterfacepair: Starting"
    }
    process {
        try {
            $Payload = @{
                id = $id
                ifnum = $ifnum
            }

 
            if ($PSCmdlet.ShouldProcess("interfacepair", "Add Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -NitroPath nitro/v1/config -Type interfacepair -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetInterfacepair -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddInterfacepair: Finished"
    }
}

function Invoke-ADCDeleteInterfacepair {
<#
    .SYNOPSIS
        Delete Network configuration Object
    .DESCRIPTION
        Delete Network configuration Object
    .PARAMETER id 
       The Interface pair id.  
       Minimum value = 1  
       Maximum value = 255 
    .EXAMPLE
        Invoke-ADCDeleteInterfacepair -id <double>
    .NOTES
        File Name : Invoke-ADCDeleteInterfacepair
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/interfacepair/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [double]$id 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteInterfacepair: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }

            if ($PSCmdlet.ShouldProcess("$id", "Delete Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type interfacepair -NitroPath nitro/v1/config -Resource $id -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteInterfacepair: Finished"
    }
}

function Invoke-ADCGetInterfacepair {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER id 
       The Interface pair id. 
    .PARAMETER GetAll 
        Retreive all interfacepair object(s)
    .PARAMETER Count
        If specified, the count of the interfacepair object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetInterfacepair
    .EXAMPLE 
        Invoke-ADCGetInterfacepair -GetAll 
    .EXAMPLE 
        Invoke-ADCGetInterfacepair -Count
    .EXAMPLE
        Invoke-ADCGetInterfacepair -name <string>
    .EXAMPLE
        Invoke-ADCGetInterfacepair -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetInterfacepair
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/interfacepair/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateRange(1, 255)]
        [double]$id,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll,

        [Parameter(ParameterSetName = 'GetAll')]
        [Parameter(ParameterSetName = 'Get')]
        [Switch]$ViewSummary

    )
    begin {
        Write-Verbose "Invoke-ADCGetInterfacepair: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all interfacepair objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type interfacepair -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for interfacepair objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type interfacepair -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving interfacepair objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type interfacepair -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving interfacepair configuration for property 'id'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type interfacepair -NitroPath nitro/v1/config -Resource $id -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving interfacepair configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type interfacepair -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetInterfacepair: Ended"
    }
}

function Invoke-ADCAddIp6tunnel {
<#
    .SYNOPSIS
        Add Network configuration Object
    .DESCRIPTION
        Add Network configuration Object 
    .PARAMETER name 
        Name for the IPv6 Tunnel. Cannot be changed after the service group is created. Must begin with a number or letter, and can consist of letters, numbers, and the @ _ - . (period) : (colon) # and space ( ) characters.  
        Minimum length = 1  
        Maximum length = 31 
    .PARAMETER remote 
        An IPv6 address of the remote Citrix ADC used to set up the tunnel.  
        Minimum length = 1 
    .PARAMETER local 
        An IPv6 address of the local Citrix ADC used to set up the tunnel. 
    .PARAMETER ownergroup 
        The owner node group in a Cluster for the tunnel.  
        Default value: DEFAULT_NG  
        Minimum length = 1 
    .PARAMETER PassThru 
        Return details about the created ip6tunnel item.
    .EXAMPLE
        Invoke-ADCAddIp6tunnel -name <string> -remote <string> -local <string>
    .NOTES
        File Name : Invoke-ADCAddIp6tunnel
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/ip6tunnel/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateLength(1, 31)]
        [string]$name ,

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$remote ,

        [Parameter(Mandatory = $true)]
        [string]$local ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$ownergroup = 'DEFAULT_NG' ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddIp6tunnel: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
                remote = $remote
                local = $local
            }
            if ($PSBoundParameters.ContainsKey('ownergroup')) { $Payload.Add('ownergroup', $ownergroup) }
 
            if ($PSCmdlet.ShouldProcess("ip6tunnel", "Add Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -NitroPath nitro/v1/config -Type ip6tunnel -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetIp6tunnel -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddIp6tunnel: Finished"
    }
}

function Invoke-ADCDeleteIp6tunnel {
<#
    .SYNOPSIS
        Delete Network configuration Object
    .DESCRIPTION
        Delete Network configuration Object
    .PARAMETER name 
       Name for the IPv6 Tunnel. Cannot be changed after the service group is created. Must begin with a number or letter, and can consist of letters, numbers, and the @ _ - . (period) : (colon) # and space ( ) characters.  
       Minimum length = 1  
       Maximum length = 31 
    .EXAMPLE
        Invoke-ADCDeleteIp6tunnel -name <string>
    .NOTES
        File Name : Invoke-ADCDeleteIp6tunnel
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/ip6tunnel/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$name 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteIp6tunnel: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }

            if ($PSCmdlet.ShouldProcess("$name", "Delete Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type ip6tunnel -NitroPath nitro/v1/config -Resource $name -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteIp6tunnel: Finished"
    }
}

function Invoke-ADCGetIp6tunnel {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER name 
       Name for the IPv6 Tunnel. Cannot be changed after the service group is created. Must begin with a number or letter, and can consist of letters, numbers, and the @ _ - . (period) : (colon) # and space ( ) characters. 
    .PARAMETER GetAll 
        Retreive all ip6tunnel object(s)
    .PARAMETER Count
        If specified, the count of the ip6tunnel object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetIp6tunnel
    .EXAMPLE 
        Invoke-ADCGetIp6tunnel -GetAll 
    .EXAMPLE 
        Invoke-ADCGetIp6tunnel -Count
    .EXAMPLE
        Invoke-ADCGetIp6tunnel -name <string>
    .EXAMPLE
        Invoke-ADCGetIp6tunnel -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetIp6tunnel
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/ip6tunnel/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateLength(1, 31)]
        [string]$name,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll,

        [Parameter(ParameterSetName = 'GetAll')]
        [Parameter(ParameterSetName = 'Get')]
        [Switch]$ViewSummary

    )
    begin {
        Write-Verbose "Invoke-ADCGetIp6tunnel: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all ip6tunnel objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type ip6tunnel -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for ip6tunnel objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type ip6tunnel -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving ip6tunnel objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type ip6tunnel -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving ip6tunnel configuration for property 'name'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type ip6tunnel -NitroPath nitro/v1/config -Resource $name -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving ip6tunnel configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type ip6tunnel -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetIp6tunnel: Ended"
    }
}

function Invoke-ADCUpdateIp6tunnelparam {
<#
    .SYNOPSIS
        Update Network configuration Object
    .DESCRIPTION
        Update Network configuration Object 
    .PARAMETER srcip 
        Common source IPv6 address for all IPv6 tunnels. Must be a SNIP6 or VIP6 address.  
        Minimum length = 1 
    .PARAMETER dropfrag 
        Drop any packet that requires fragmentation.  
        Default value: NO  
        Possible values = YES, NO 
    .PARAMETER dropfragcputhreshold 
        Threshold value, as a percentage of CPU usage, at which to drop packets that require fragmentation. Applies only if dropFragparameter is set to NO.  
        Minimum value = 1  
        Maximum value = 100 
    .PARAMETER srciproundrobin 
        Use a different source IPv6 address for each new session through a particular IPv6 tunnel, as determined by round robin selection of one of the SNIP6 addresses. This setting is ignored if a common global source IPv6 address has been specified for all the IPv6 tunnels. This setting does not apply to a tunnel for which a source IPv6 address has been specified.  
        Default value: NO  
        Possible values = YES, NO 
    .PARAMETER useclientsourceipv6 
        Use client source IPv6 address as source IPv6 address for outer tunnel IPv6 header.  
        Default value: NO  
        Possible values = YES, NO
    .EXAMPLE
        Invoke-ADCUpdateIp6tunnelparam 
    .NOTES
        File Name : Invoke-ADCUpdateIp6tunnelparam
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/ip6tunnelparam/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$srcip ,

        [ValidateSet('YES', 'NO')]
        [string]$dropfrag ,

        [ValidateRange(1, 100)]
        [double]$dropfragcputhreshold ,

        [ValidateSet('YES', 'NO')]
        [string]$srciproundrobin ,

        [ValidateSet('YES', 'NO')]
        [string]$useclientsourceipv6 

    )
    begin {
        Write-Verbose "Invoke-ADCUpdateIp6tunnelparam: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('srcip')) { $Payload.Add('srcip', $srcip) }
            if ($PSBoundParameters.ContainsKey('dropfrag')) { $Payload.Add('dropfrag', $dropfrag) }
            if ($PSBoundParameters.ContainsKey('dropfragcputhreshold')) { $Payload.Add('dropfragcputhreshold', $dropfragcputhreshold) }
            if ($PSBoundParameters.ContainsKey('srciproundrobin')) { $Payload.Add('srciproundrobin', $srciproundrobin) }
            if ($PSBoundParameters.ContainsKey('useclientsourceipv6')) { $Payload.Add('useclientsourceipv6', $useclientsourceipv6) }
 
            if ($PSCmdlet.ShouldProcess("ip6tunnelparam", "Update Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -NitroPath nitro/v1/config -Type ip6tunnelparam -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
            Write-Output $result

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUpdateIp6tunnelparam: Finished"
    }
}

function Invoke-ADCUnsetIp6tunnelparam {
<#
    .SYNOPSIS
        Unset Network configuration Object
    .DESCRIPTION
        Unset Network configuration Object 
   .PARAMETER srcip 
       Common source IPv6 address for all IPv6 tunnels. Must be a SNIP6 or VIP6 address. 
   .PARAMETER dropfrag 
       Drop any packet that requires fragmentation.  
       Possible values = YES, NO 
   .PARAMETER dropfragcputhreshold 
       Threshold value, as a percentage of CPU usage, at which to drop packets that require fragmentation. Applies only if dropFragparameter is set to NO. 
   .PARAMETER srciproundrobin 
       Use a different source IPv6 address for each new session through a particular IPv6 tunnel, as determined by round robin selection of one of the SNIP6 addresses. This setting is ignored if a common global source IPv6 address has been specified for all the IPv6 tunnels. This setting does not apply to a tunnel for which a source IPv6 address has been specified.  
       Possible values = YES, NO 
   .PARAMETER useclientsourceipv6 
       Use client source IPv6 address as source IPv6 address for outer tunnel IPv6 header.  
       Possible values = YES, NO
    .EXAMPLE
        Invoke-ADCUnsetIp6tunnelparam 
    .NOTES
        File Name : Invoke-ADCUnsetIp6tunnelparam
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/ip6tunnelparam
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Boolean]$srcip ,

        [Boolean]$dropfrag ,

        [Boolean]$dropfragcputhreshold ,

        [Boolean]$srciproundrobin ,

        [Boolean]$useclientsourceipv6 
    )
    begin {
        Write-Verbose "Invoke-ADCUnsetIp6tunnelparam: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('srcip')) { $Payload.Add('srcip', $srcip) }
            if ($PSBoundParameters.ContainsKey('dropfrag')) { $Payload.Add('dropfrag', $dropfrag) }
            if ($PSBoundParameters.ContainsKey('dropfragcputhreshold')) { $Payload.Add('dropfragcputhreshold', $dropfragcputhreshold) }
            if ($PSBoundParameters.ContainsKey('srciproundrobin')) { $Payload.Add('srciproundrobin', $srciproundrobin) }
            if ($PSBoundParameters.ContainsKey('useclientsourceipv6')) { $Payload.Add('useclientsourceipv6', $useclientsourceipv6) }
            if ($PSCmdlet.ShouldProcess("ip6tunnelparam", "Unset Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type ip6tunnelparam -NitroPath nitro/v1/config -Action unset -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUnsetIp6tunnelparam: Finished"
    }
}

function Invoke-ADCGetIp6tunnelparam {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER GetAll 
        Retreive all ip6tunnelparam object(s)
    .PARAMETER Count
        If specified, the count of the ip6tunnelparam object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetIp6tunnelparam
    .EXAMPLE 
        Invoke-ADCGetIp6tunnelparam -GetAll
    .EXAMPLE
        Invoke-ADCGetIp6tunnelparam -name <string>
    .EXAMPLE
        Invoke-ADCGetIp6tunnelparam -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetIp6tunnelparam
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/ip6tunnelparam/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetIp6tunnelparam: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all ip6tunnelparam objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type ip6tunnelparam -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for ip6tunnelparam objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type ip6tunnelparam -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving ip6tunnelparam objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type ip6tunnelparam -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving ip6tunnelparam configuration for property ''"

            } else {
                Write-Verbose "Retrieving ip6tunnelparam configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type ip6tunnelparam -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetIp6tunnelparam: Ended"
    }
}

function Invoke-ADCAddIpset {
<#
    .SYNOPSIS
        Add Network configuration Object
    .DESCRIPTION
        Add Network configuration Object 
    .PARAMETER name 
        Name for the IP set. Must begin with a letter, number, or the underscore character (_), and can consist of letters, numbers, and the hyphen (-), period (.) pound (#), space ( ), at sign (@), equals (=), colon (:), and underscore characters. Cannot be changed after the IP set is created. Choose a name that helps identify the IP set.  
        Minimum length = 1 
    .PARAMETER td 
        Integer value that uniquely identifies the traffic domain in which you want to configure the entity. If you do not specify an ID, the entity becomes part of the default traffic domain, which has an ID of 0.  
        Minimum value = 0  
        Maximum value = 4094 
    .PARAMETER PassThru 
        Return details about the created ipset item.
    .EXAMPLE
        Invoke-ADCAddIpset -name <string>
    .NOTES
        File Name : Invoke-ADCAddIpset
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/ipset/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name ,

        [ValidateRange(0, 4094)]
        [double]$td ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddIpset: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
            }
            if ($PSBoundParameters.ContainsKey('td')) { $Payload.Add('td', $td) }
 
            if ($PSCmdlet.ShouldProcess("ipset", "Add Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -NitroPath nitro/v1/config -Type ipset -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetIpset -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddIpset: Finished"
    }
}

function Invoke-ADCDeleteIpset {
<#
    .SYNOPSIS
        Delete Network configuration Object
    .DESCRIPTION
        Delete Network configuration Object
    .PARAMETER name 
       Name for the IP set. Must begin with a letter, number, or the underscore character (_), and can consist of letters, numbers, and the hyphen (-), period (.) pound (#), space ( ), at sign (@), equals (=), colon (:), and underscore characters. Cannot be changed after the IP set is created. Choose a name that helps identify the IP set.  
       Minimum length = 1 
    .EXAMPLE
        Invoke-ADCDeleteIpset -name <string>
    .NOTES
        File Name : Invoke-ADCDeleteIpset
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/ipset/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$name 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteIpset: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }

            if ($PSCmdlet.ShouldProcess("$name", "Delete Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type ipset -NitroPath nitro/v1/config -Resource $name -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteIpset: Finished"
    }
}

function Invoke-ADCGetIpset {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER name 
       Name for the IP set. Must begin with a letter, number, or the underscore character (_), and can consist of letters, numbers, and the hyphen (-), period (.) pound (#), space ( ), at sign (@), equals (=), colon (:), and underscore characters. Cannot be changed after the IP set is created. Choose a name that helps identify the IP set. 
    .PARAMETER GetAll 
        Retreive all ipset object(s)
    .PARAMETER Count
        If specified, the count of the ipset object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetIpset
    .EXAMPLE 
        Invoke-ADCGetIpset -GetAll 
    .EXAMPLE 
        Invoke-ADCGetIpset -Count
    .EXAMPLE
        Invoke-ADCGetIpset -name <string>
    .EXAMPLE
        Invoke-ADCGetIpset -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetIpset
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/ipset/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll,

        [Parameter(ParameterSetName = 'GetAll')]
        [Parameter(ParameterSetName = 'Get')]
        [Switch]$ViewSummary

    )
    begin {
        Write-Verbose "Invoke-ADCGetIpset: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all ipset objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type ipset -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for ipset objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type ipset -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving ipset objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type ipset -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving ipset configuration for property 'name'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type ipset -NitroPath nitro/v1/config -Resource $name -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving ipset configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type ipset -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetIpset: Ended"
    }
}

function Invoke-ADCGetIpsetbinding {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER name 
       Name of the IP set whose details you want to display. 
    .PARAMETER GetAll 
        Retreive all ipset_binding object(s)
    .PARAMETER Count
        If specified, the count of the ipset_binding object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetIpsetbinding
    .EXAMPLE 
        Invoke-ADCGetIpsetbinding -GetAll
    .EXAMPLE
        Invoke-ADCGetIpsetbinding -name <string>
    .EXAMPLE
        Invoke-ADCGetIpsetbinding -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetIpsetbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/ipset_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetIpsetbinding: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ 
                    bulkbindings = 'yes'
                }
                Write-Verbose "Retrieving all ipset_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type ipset_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for ipset_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type ipset_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving ipset_binding objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type ipset_binding -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving ipset_binding configuration for property 'name'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type ipset_binding -NitroPath nitro/v1/config -Resource $name -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving ipset_binding configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type ipset_binding -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetIpsetbinding: Ended"
    }
}

function Invoke-ADCAddIpsetnsip6binding {
<#
    .SYNOPSIS
        Add Network configuration Object
    .DESCRIPTION
        Add Network configuration Object 
    .PARAMETER name 
        Name of the IP set to which to bind IP addresses.  
        Minimum length = 1 
    .PARAMETER ipaddress 
        One or more IP addresses bound to the IP set.  
        Minimum length = 1 
    .PARAMETER PassThru 
        Return details about the created ipset_nsip6_binding item.
    .EXAMPLE
        Invoke-ADCAddIpsetnsip6binding -name <string> -ipaddress <string>
    .NOTES
        File Name : Invoke-ADCAddIpsetnsip6binding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/ipset_nsip6_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name ,

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$ipaddress ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddIpsetnsip6binding: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
                ipaddress = $ipaddress
            }

 
            if ($PSCmdlet.ShouldProcess("ipset_nsip6_binding", "Add Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -NitroPath nitro/v1/config -Type ipset_nsip6_binding -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetIpsetnsip6binding -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddIpsetnsip6binding: Finished"
    }
}

function Invoke-ADCDeleteIpsetnsip6binding {
<#
    .SYNOPSIS
        Delete Network configuration Object
    .DESCRIPTION
        Delete Network configuration Object
    .PARAMETER name 
       Name of the IP set to which to bind IP addresses.  
       Minimum length = 1    .PARAMETER ipaddress 
       One or more IP addresses bound to the IP set.  
       Minimum length = 1
    .EXAMPLE
        Invoke-ADCDeleteIpsetnsip6binding -name <string>
    .NOTES
        File Name : Invoke-ADCDeleteIpsetnsip6binding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/ipset_nsip6_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$name ,

        [string]$ipaddress 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteIpsetnsip6binding: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }
            if ($PSBoundParameters.ContainsKey('ipaddress')) { $Arguments.Add('ipaddress', $ipaddress) }
            if ($PSCmdlet.ShouldProcess("$name", "Delete Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type ipset_nsip6_binding -NitroPath nitro/v1/config -Resource $name -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteIpsetnsip6binding: Finished"
    }
}

function Invoke-ADCGetIpsetnsip6binding {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER name 
       Name of the IP set to which to bind IP addresses. 
    .PARAMETER GetAll 
        Retreive all ipset_nsip6_binding object(s)
    .PARAMETER Count
        If specified, the count of the ipset_nsip6_binding object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetIpsetnsip6binding
    .EXAMPLE 
        Invoke-ADCGetIpsetnsip6binding -GetAll 
    .EXAMPLE 
        Invoke-ADCGetIpsetnsip6binding -Count
    .EXAMPLE
        Invoke-ADCGetIpsetnsip6binding -name <string>
    .EXAMPLE
        Invoke-ADCGetIpsetnsip6binding -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetIpsetnsip6binding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/ipset_nsip6_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetIpsetnsip6binding: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ 
                    bulkbindings = 'yes'
                }
                Write-Verbose "Retrieving all ipset_nsip6_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type ipset_nsip6_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for ipset_nsip6_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type ipset_nsip6_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving ipset_nsip6_binding objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type ipset_nsip6_binding -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving ipset_nsip6_binding configuration for property 'name'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type ipset_nsip6_binding -NitroPath nitro/v1/config -Resource $name -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving ipset_nsip6_binding configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type ipset_nsip6_binding -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetIpsetnsip6binding: Ended"
    }
}

function Invoke-ADCAddIpsetnsipbinding {
<#
    .SYNOPSIS
        Add Network configuration Object
    .DESCRIPTION
        Add Network configuration Object 
    .PARAMETER name 
        Name of the IP set to which to bind IP addresses.  
        Minimum length = 1 
    .PARAMETER ipaddress 
        One or more IP addresses bound to the IP set.  
        Minimum length = 1 
    .PARAMETER PassThru 
        Return details about the created ipset_nsip_binding item.
    .EXAMPLE
        Invoke-ADCAddIpsetnsipbinding -name <string> -ipaddress <string>
    .NOTES
        File Name : Invoke-ADCAddIpsetnsipbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/ipset_nsip_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name ,

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$ipaddress ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddIpsetnsipbinding: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
                ipaddress = $ipaddress
            }

 
            if ($PSCmdlet.ShouldProcess("ipset_nsip_binding", "Add Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -NitroPath nitro/v1/config -Type ipset_nsip_binding -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetIpsetnsipbinding -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddIpsetnsipbinding: Finished"
    }
}

function Invoke-ADCDeleteIpsetnsipbinding {
<#
    .SYNOPSIS
        Delete Network configuration Object
    .DESCRIPTION
        Delete Network configuration Object
    .PARAMETER name 
       Name of the IP set to which to bind IP addresses.  
       Minimum length = 1    .PARAMETER ipaddress 
       One or more IP addresses bound to the IP set.  
       Minimum length = 1
    .EXAMPLE
        Invoke-ADCDeleteIpsetnsipbinding -name <string>
    .NOTES
        File Name : Invoke-ADCDeleteIpsetnsipbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/ipset_nsip_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$name ,

        [string]$ipaddress 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteIpsetnsipbinding: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }
            if ($PSBoundParameters.ContainsKey('ipaddress')) { $Arguments.Add('ipaddress', $ipaddress) }
            if ($PSCmdlet.ShouldProcess("$name", "Delete Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type ipset_nsip_binding -NitroPath nitro/v1/config -Resource $name -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteIpsetnsipbinding: Finished"
    }
}

function Invoke-ADCGetIpsetnsipbinding {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER name 
       Name of the IP set to which to bind IP addresses. 
    .PARAMETER GetAll 
        Retreive all ipset_nsip_binding object(s)
    .PARAMETER Count
        If specified, the count of the ipset_nsip_binding object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetIpsetnsipbinding
    .EXAMPLE 
        Invoke-ADCGetIpsetnsipbinding -GetAll 
    .EXAMPLE 
        Invoke-ADCGetIpsetnsipbinding -Count
    .EXAMPLE
        Invoke-ADCGetIpsetnsipbinding -name <string>
    .EXAMPLE
        Invoke-ADCGetIpsetnsipbinding -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetIpsetnsipbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/ipset_nsip_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetIpsetnsipbinding: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ 
                    bulkbindings = 'yes'
                }
                Write-Verbose "Retrieving all ipset_nsip_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type ipset_nsip_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for ipset_nsip_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type ipset_nsip_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving ipset_nsip_binding objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type ipset_nsip_binding -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving ipset_nsip_binding configuration for property 'name'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type ipset_nsip_binding -NitroPath nitro/v1/config -Resource $name -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving ipset_nsip_binding configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type ipset_nsip_binding -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetIpsetnsipbinding: Ended"
    }
}

function Invoke-ADCAddIptunnel {
<#
    .SYNOPSIS
        Add Network configuration Object
    .DESCRIPTION
        Add Network configuration Object 
    .PARAMETER name 
        Name for the IP tunnel. Leading character must be a number or letter. Other characters allowed, after the first character, are @ _ - . (period) : (colon) # and space ( ).  
        Minimum length = 1 
    .PARAMETER remote 
        Public IPv4 address, of the remote device, used to set up the tunnel. For this parameter, you can alternatively specify a network address.  
        Minimum length = 1 
    .PARAMETER remotesubnetmask 
        Subnet mask of the remote IP address of the tunnel. 
    .PARAMETER local 
        Type of Citrix ADC owned public IPv4 address, configured on the local Citrix ADC and used to set up the tunnel. 
    .PARAMETER protocol 
        Name of the protocol to be used on this tunnel.  
        Default value: IPIP  
        Possible values = IPIP, GRE, IPSEC, UDP 
    .PARAMETER grepayload 
        The payload GRE will carry.  
        Default value: ETHERNETwithDOT1Q  
        Possible values = ETHERNETwithDOT1Q, ETHERNET, IP 
    .PARAMETER ipsecprofilename 
        Name of IPSec profile to be associated.  
        Default value: "ns_ipsec_default_profile" 
    .PARAMETER vlan 
        The vlan for mulicast packets.  
        Minimum value = 1  
        Maximum value = 4094 
    .PARAMETER ownergroup 
        The owner node group in a Cluster for the iptunnel.  
        Default value: DEFAULT_NG  
        Minimum length = 1 
    .PARAMETER PassThru 
        Return details about the created iptunnel item.
    .EXAMPLE
        Invoke-ADCAddIptunnel -name <string> -remote <string> -remotesubnetmask <string> -local <string>
    .NOTES
        File Name : Invoke-ADCAddIptunnel
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/iptunnel/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name ,

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$remote ,

        [Parameter(Mandatory = $true)]
        [string]$remotesubnetmask ,

        [Parameter(Mandatory = $true)]
        [string]$local ,

        [ValidateSet('IPIP', 'GRE', 'IPSEC', 'UDP')]
        [string]$protocol = 'IPIP' ,

        [ValidateSet('ETHERNETwithDOT1Q', 'ETHERNET', 'IP')]
        [string]$grepayload = 'ETHERNETwithDOT1Q' ,

        [string]$ipsecprofilename = '"ns_ipsec_default_profile"' ,

        [ValidateRange(1, 4094)]
        [double]$vlan ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$ownergroup = 'DEFAULT_NG' ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddIptunnel: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
                remote = $remote
                remotesubnetmask = $remotesubnetmask
                local = $local
            }
            if ($PSBoundParameters.ContainsKey('protocol')) { $Payload.Add('protocol', $protocol) }
            if ($PSBoundParameters.ContainsKey('grepayload')) { $Payload.Add('grepayload', $grepayload) }
            if ($PSBoundParameters.ContainsKey('ipsecprofilename')) { $Payload.Add('ipsecprofilename', $ipsecprofilename) }
            if ($PSBoundParameters.ContainsKey('vlan')) { $Payload.Add('vlan', $vlan) }
            if ($PSBoundParameters.ContainsKey('ownergroup')) { $Payload.Add('ownergroup', $ownergroup) }
 
            if ($PSCmdlet.ShouldProcess("iptunnel", "Add Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -NitroPath nitro/v1/config -Type iptunnel -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetIptunnel -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddIptunnel: Finished"
    }
}

function Invoke-ADCDeleteIptunnel {
<#
    .SYNOPSIS
        Delete Network configuration Object
    .DESCRIPTION
        Delete Network configuration Object
    .PARAMETER name 
       Name for the IP tunnel. Leading character must be a number or letter. Other characters allowed, after the first character, are @ _ - . (period) : (colon) # and space ( ).  
       Minimum length = 1 
    .EXAMPLE
        Invoke-ADCDeleteIptunnel -name <string>
    .NOTES
        File Name : Invoke-ADCDeleteIptunnel
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/iptunnel/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$name 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteIptunnel: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }

            if ($PSCmdlet.ShouldProcess("$name", "Delete Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type iptunnel -NitroPath nitro/v1/config -Resource $name -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteIptunnel: Finished"
    }
}

function Invoke-ADCGetIptunnel {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER name 
       Name for the IP tunnel. Leading character must be a number or letter. Other characters allowed, after the first character, are @ _ - . (period) : (colon) # and space ( ). 
    .PARAMETER GetAll 
        Retreive all iptunnel object(s)
    .PARAMETER Count
        If specified, the count of the iptunnel object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetIptunnel
    .EXAMPLE 
        Invoke-ADCGetIptunnel -GetAll 
    .EXAMPLE 
        Invoke-ADCGetIptunnel -Count
    .EXAMPLE
        Invoke-ADCGetIptunnel -name <string>
    .EXAMPLE
        Invoke-ADCGetIptunnel -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetIptunnel
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/iptunnel/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll,

        [Parameter(ParameterSetName = 'GetAll')]
        [Parameter(ParameterSetName = 'Get')]
        [Switch]$ViewSummary

    )
    begin {
        Write-Verbose "Invoke-ADCGetIptunnel: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all iptunnel objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type iptunnel -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for iptunnel objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type iptunnel -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving iptunnel objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type iptunnel -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving iptunnel configuration for property 'name'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type iptunnel -NitroPath nitro/v1/config -Resource $name -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving iptunnel configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type iptunnel -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetIptunnel: Ended"
    }
}

function Invoke-ADCUpdateIptunnelparam {
<#
    .SYNOPSIS
        Update Network configuration Object
    .DESCRIPTION
        Update Network configuration Object 
    .PARAMETER srcip 
        Common source-IP address for all tunnels. For a specific tunnel, this global setting is overridden if you have specified another source IP address. Must be a MIP or SNIP address.  
        Minimum length = 1 
    .PARAMETER dropfrag 
        Drop any IP packet that requires fragmentation before it is sent through the tunnel.  
        Default value: NO  
        Possible values = YES, NO 
    .PARAMETER dropfragcputhreshold 
        Threshold value, as a percentage of CPU usage, at which to drop packets that require fragmentation to use the IP tunnel. Applies only if dropFragparameter is set to NO. The default value, 0, specifies that this parameter is not set.  
        Minimum value = 1  
        Maximum value = 100 
    .PARAMETER srciproundrobin 
        Use a different source IP address for each new session through a particular IP tunnel, as determined by round robin selection of one of the SNIP addresses. This setting is ignored if a common global source IP address has been specified for all the IP tunnels. This setting does not apply to a tunnel for which a source IP address has been specified.  
        Default value: NO  
        Possible values = YES, NO 
    .PARAMETER enablestrictrx 
        Strict PBR check for IPSec packets received through tunnel.  
        Default value: NO  
        Possible values = YES, NO 
    .PARAMETER enablestricttx 
        Strict PBR check for packets to be sent IPSec protected.  
        Default value: NO  
        Possible values = YES, NO 
    .PARAMETER mac 
        The shared MAC used for shared IP between cluster nodes/HA peers. 
    .PARAMETER useclientsourceip 
        Use client source IP as source IP for outer tunnel IP header.  
        Default value: NO  
        Possible values = YES, NO
    .EXAMPLE
        Invoke-ADCUpdateIptunnelparam 
    .NOTES
        File Name : Invoke-ADCUpdateIptunnelparam
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/iptunnelparam/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$srcip ,

        [ValidateSet('YES', 'NO')]
        [string]$dropfrag ,

        [ValidateRange(1, 100)]
        [double]$dropfragcputhreshold ,

        [ValidateSet('YES', 'NO')]
        [string]$srciproundrobin ,

        [ValidateSet('YES', 'NO')]
        [string]$enablestrictrx ,

        [ValidateSet('YES', 'NO')]
        [string]$enablestricttx ,

        [string]$mac ,

        [ValidateSet('YES', 'NO')]
        [string]$useclientsourceip 

    )
    begin {
        Write-Verbose "Invoke-ADCUpdateIptunnelparam: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('srcip')) { $Payload.Add('srcip', $srcip) }
            if ($PSBoundParameters.ContainsKey('dropfrag')) { $Payload.Add('dropfrag', $dropfrag) }
            if ($PSBoundParameters.ContainsKey('dropfragcputhreshold')) { $Payload.Add('dropfragcputhreshold', $dropfragcputhreshold) }
            if ($PSBoundParameters.ContainsKey('srciproundrobin')) { $Payload.Add('srciproundrobin', $srciproundrobin) }
            if ($PSBoundParameters.ContainsKey('enablestrictrx')) { $Payload.Add('enablestrictrx', $enablestrictrx) }
            if ($PSBoundParameters.ContainsKey('enablestricttx')) { $Payload.Add('enablestricttx', $enablestricttx) }
            if ($PSBoundParameters.ContainsKey('mac')) { $Payload.Add('mac', $mac) }
            if ($PSBoundParameters.ContainsKey('useclientsourceip')) { $Payload.Add('useclientsourceip', $useclientsourceip) }
 
            if ($PSCmdlet.ShouldProcess("iptunnelparam", "Update Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -NitroPath nitro/v1/config -Type iptunnelparam -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
            Write-Output $result

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUpdateIptunnelparam: Finished"
    }
}

function Invoke-ADCUnsetIptunnelparam {
<#
    .SYNOPSIS
        Unset Network configuration Object
    .DESCRIPTION
        Unset Network configuration Object 
   .PARAMETER srcip 
       Common source-IP address for all tunnels. For a specific tunnel, this global setting is overridden if you have specified another source IP address. Must be a MIP or SNIP address. 
   .PARAMETER dropfrag 
       Drop any IP packet that requires fragmentation before it is sent through the tunnel.  
       Possible values = YES, NO 
   .PARAMETER dropfragcputhreshold 
       Threshold value, as a percentage of CPU usage, at which to drop packets that require fragmentation to use the IP tunnel. Applies only if dropFragparameter is set to NO. The default value, 0, specifies that this parameter is not set. 
   .PARAMETER srciproundrobin 
       Use a different source IP address for each new session through a particular IP tunnel, as determined by round robin selection of one of the SNIP addresses. This setting is ignored if a common global source IP address has been specified for all the IP tunnels. This setting does not apply to a tunnel for which a source IP address has been specified.  
       Possible values = YES, NO 
   .PARAMETER enablestrictrx 
       Strict PBR check for IPSec packets received through tunnel.  
       Possible values = YES, NO 
   .PARAMETER enablestricttx 
       Strict PBR check for packets to be sent IPSec protected.  
       Possible values = YES, NO 
   .PARAMETER mac 
       The shared MAC used for shared IP between cluster nodes/HA peers. 
   .PARAMETER useclientsourceip 
       Use client source IP as source IP for outer tunnel IP header.  
       Possible values = YES, NO
    .EXAMPLE
        Invoke-ADCUnsetIptunnelparam 
    .NOTES
        File Name : Invoke-ADCUnsetIptunnelparam
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/iptunnelparam
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Boolean]$srcip ,

        [Boolean]$dropfrag ,

        [Boolean]$dropfragcputhreshold ,

        [Boolean]$srciproundrobin ,

        [Boolean]$enablestrictrx ,

        [Boolean]$enablestricttx ,

        [Boolean]$mac ,

        [Boolean]$useclientsourceip 
    )
    begin {
        Write-Verbose "Invoke-ADCUnsetIptunnelparam: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('srcip')) { $Payload.Add('srcip', $srcip) }
            if ($PSBoundParameters.ContainsKey('dropfrag')) { $Payload.Add('dropfrag', $dropfrag) }
            if ($PSBoundParameters.ContainsKey('dropfragcputhreshold')) { $Payload.Add('dropfragcputhreshold', $dropfragcputhreshold) }
            if ($PSBoundParameters.ContainsKey('srciproundrobin')) { $Payload.Add('srciproundrobin', $srciproundrobin) }
            if ($PSBoundParameters.ContainsKey('enablestrictrx')) { $Payload.Add('enablestrictrx', $enablestrictrx) }
            if ($PSBoundParameters.ContainsKey('enablestricttx')) { $Payload.Add('enablestricttx', $enablestricttx) }
            if ($PSBoundParameters.ContainsKey('mac')) { $Payload.Add('mac', $mac) }
            if ($PSBoundParameters.ContainsKey('useclientsourceip')) { $Payload.Add('useclientsourceip', $useclientsourceip) }
            if ($PSCmdlet.ShouldProcess("iptunnelparam", "Unset Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type iptunnelparam -NitroPath nitro/v1/config -Action unset -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUnsetIptunnelparam: Finished"
    }
}

function Invoke-ADCGetIptunnelparam {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER GetAll 
        Retreive all iptunnelparam object(s)
    .PARAMETER Count
        If specified, the count of the iptunnelparam object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetIptunnelparam
    .EXAMPLE 
        Invoke-ADCGetIptunnelparam -GetAll
    .EXAMPLE
        Invoke-ADCGetIptunnelparam -name <string>
    .EXAMPLE
        Invoke-ADCGetIptunnelparam -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetIptunnelparam
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/iptunnelparam/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetIptunnelparam: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all iptunnelparam objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type iptunnelparam -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for iptunnelparam objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type iptunnelparam -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving iptunnelparam objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type iptunnelparam -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving iptunnelparam configuration for property ''"

            } else {
                Write-Verbose "Retrieving iptunnelparam configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type iptunnelparam -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetIptunnelparam: Ended"
    }
}

function Invoke-ADCUpdateIpv6 {
<#
    .SYNOPSIS
        Update Network configuration Object
    .DESCRIPTION
        Update Network configuration Object 
    .PARAMETER ralearning 
        Enable the Citrix ADC to learn about various routes from Router Advertisement (RA) and Router Solicitation (RS) messages sent by the routers.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER routerredirection 
        Enable the Citrix ADC to do Router Redirection.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER ndbasereachtime 
        Base reachable time of the Neighbor Discovery (ND6) protocol. The time, in milliseconds, that the Citrix ADC assumes an adjacent device is reachable after receiving a reachability confirmation.  
        Default value: 30000  
        Minimum value = 1 
    .PARAMETER ndretransmissiontime 
        Retransmission time of the Neighbor Discovery (ND6) protocol. The time, in milliseconds, between retransmitted Neighbor Solicitation (NS) messages, to an adjacent device.  
        Default value: 1000  
        Minimum value = 1 
    .PARAMETER natprefix 
        Prefix used for translating packets from private IPv6 servers to IPv4 packets. This prefix has a length of 96 bits (128-32 = 96). The IPv6 servers embed the destination IP address of the IPv4 servers or hosts in the last 32 bits of the destination IP address field of the IPv6 packets. The first 96 bits of the destination IP address field are set as the IPv6 NAT prefix. IPv6 packets addressed to this prefix have to be routed to the Citrix ADC to ensure that the IPv6-IPv4 translation is done by the appliance. 
    .PARAMETER td 
        Integer value that uniquely identifies the traffic domain in which you want to configure the entity. If you do not specify an ID, the entity becomes part of the default traffic domain, which has an ID of 0.  
        Default value: 0  
        Minimum value = 0  
        Maximum value = 4094 
    .PARAMETER dodad 
        Enable the Citrix ADC to do Duplicate Address  
        Detection (DAD) for all the Citrix ADC owned IPv6 addresses regardless of whether they are obtained through stateless auto configuration, DHCPv6, or manual configuration.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER usipnatprefix 
        IPV6 NATPREFIX used in NAT46 scenario when USIP is turned on. 
    .PARAMETER PassThru 
        Return details about the created ipv6 item.
    .EXAMPLE
        Invoke-ADCUpdateIpv6 
    .NOTES
        File Name : Invoke-ADCUpdateIpv6
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/ipv6/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$ralearning ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$routerredirection ,

        [double]$ndbasereachtime ,

        [double]$ndretransmissiontime ,

        [string]$natprefix ,

        [ValidateRange(0, 4094)]
        [double]$td ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$dodad ,

        [string]$usipnatprefix ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCUpdateIpv6: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('ralearning')) { $Payload.Add('ralearning', $ralearning) }
            if ($PSBoundParameters.ContainsKey('routerredirection')) { $Payload.Add('routerredirection', $routerredirection) }
            if ($PSBoundParameters.ContainsKey('ndbasereachtime')) { $Payload.Add('ndbasereachtime', $ndbasereachtime) }
            if ($PSBoundParameters.ContainsKey('ndretransmissiontime')) { $Payload.Add('ndretransmissiontime', $ndretransmissiontime) }
            if ($PSBoundParameters.ContainsKey('natprefix')) { $Payload.Add('natprefix', $natprefix) }
            if ($PSBoundParameters.ContainsKey('td')) { $Payload.Add('td', $td) }
            if ($PSBoundParameters.ContainsKey('dodad')) { $Payload.Add('dodad', $dodad) }
            if ($PSBoundParameters.ContainsKey('usipnatprefix')) { $Payload.Add('usipnatprefix', $usipnatprefix) }
 
            if ($PSCmdlet.ShouldProcess("ipv6", "Update Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -NitroPath nitro/v1/config -Type ipv6 -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetIpv6 -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUpdateIpv6: Finished"
    }
}

function Invoke-ADCUnsetIpv6 {
<#
    .SYNOPSIS
        Unset Network configuration Object
    .DESCRIPTION
        Unset Network configuration Object 
   .PARAMETER ralearning 
       Enable the Citrix ADC to learn about various routes from Router Advertisement (RA) and Router Solicitation (RS) messages sent by the routers.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER routerredirection 
       Enable the Citrix ADC to do Router Redirection.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER ndbasereachtime 
       Base reachable time of the Neighbor Discovery (ND6) protocol. The time, in milliseconds, that the Citrix ADC assumes an adjacent device is reachable after receiving a reachability confirmation. 
   .PARAMETER ndretransmissiontime 
       Retransmission time of the Neighbor Discovery (ND6) protocol. The time, in milliseconds, between retransmitted Neighbor Solicitation (NS) messages, to an adjacent device. 
   .PARAMETER natprefix 
       Prefix used for translating packets from private IPv6 servers to IPv4 packets. This prefix has a length of 96 bits (128-32 = 96). The IPv6 servers embed the destination IP address of the IPv4 servers or hosts in the last 32 bits of the destination IP address field of the IPv6 packets. The first 96 bits of the destination IP address field are set as the IPv6 NAT prefix. IPv6 packets addressed to this prefix have to be routed to the Citrix ADC to ensure that the IPv6-IPv4 translation is done by the appliance. 
   .PARAMETER td 
       Integer value that uniquely identifies the traffic domain in which you want to configure the entity. If you do not specify an ID, the entity becomes part of the default traffic domain, which has an ID of 0. 
   .PARAMETER dodad 
       Enable the Citrix ADC to do Duplicate Address  
       Detection (DAD) for all the Citrix ADC owned IPv6 addresses regardless of whether they are obtained through stateless auto configuration, DHCPv6, or manual configuration.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER usipnatprefix 
       IPV6 NATPREFIX used in NAT46 scenario when USIP is turned on.
    .EXAMPLE
        Invoke-ADCUnsetIpv6 
    .NOTES
        File Name : Invoke-ADCUnsetIpv6
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/ipv6
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Boolean]$ralearning ,

        [Boolean]$routerredirection ,

        [Boolean]$ndbasereachtime ,

        [Boolean]$ndretransmissiontime ,

        [Boolean]$natprefix ,

        [Boolean]$td ,

        [Boolean]$dodad ,

        [Boolean]$usipnatprefix 
    )
    begin {
        Write-Verbose "Invoke-ADCUnsetIpv6: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('ralearning')) { $Payload.Add('ralearning', $ralearning) }
            if ($PSBoundParameters.ContainsKey('routerredirection')) { $Payload.Add('routerredirection', $routerredirection) }
            if ($PSBoundParameters.ContainsKey('ndbasereachtime')) { $Payload.Add('ndbasereachtime', $ndbasereachtime) }
            if ($PSBoundParameters.ContainsKey('ndretransmissiontime')) { $Payload.Add('ndretransmissiontime', $ndretransmissiontime) }
            if ($PSBoundParameters.ContainsKey('natprefix')) { $Payload.Add('natprefix', $natprefix) }
            if ($PSBoundParameters.ContainsKey('td')) { $Payload.Add('td', $td) }
            if ($PSBoundParameters.ContainsKey('dodad')) { $Payload.Add('dodad', $dodad) }
            if ($PSBoundParameters.ContainsKey('usipnatprefix')) { $Payload.Add('usipnatprefix', $usipnatprefix) }
            if ($PSCmdlet.ShouldProcess("ipv6", "Unset Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type ipv6 -NitroPath nitro/v1/config -Action unset -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUnsetIpv6: Finished"
    }
}

function Invoke-ADCGetIpv6 {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER td 
       Integer value that uniquely identifies the traffic domain in which you want to configure the entity. If you do not specify an ID, the entity becomes part of the default traffic domain, which has an ID of 0. 
    .PARAMETER GetAll 
        Retreive all ipv6 object(s)
    .PARAMETER Count
        If specified, the count of the ipv6 object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetIpv6
    .EXAMPLE 
        Invoke-ADCGetIpv6 -GetAll 
    .EXAMPLE 
        Invoke-ADCGetIpv6 -Count
    .EXAMPLE
        Invoke-ADCGetIpv6 -name <string>
    .EXAMPLE
        Invoke-ADCGetIpv6 -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetIpv6
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/ipv6/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateRange(0, 4094)]
        [double]$td,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll,

        [Parameter(ParameterSetName = 'GetAll')]
        [Parameter(ParameterSetName = 'Get')]
        [Switch]$ViewSummary

    )
    begin {
        Write-Verbose "Invoke-ADCGetIpv6: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all ipv6 objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type ipv6 -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for ipv6 objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type ipv6 -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving ipv6 objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type ipv6 -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving ipv6 configuration for property 'td'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type ipv6 -NitroPath nitro/v1/config -Resource $td -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving ipv6 configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type ipv6 -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetIpv6: Ended"
    }
}

function Invoke-ADCUpdateL2param {
<#
    .SYNOPSIS
        Update Network configuration Object
    .DESCRIPTION
        Update Network configuration Object 
    .PARAMETER mbfpeermacupdate 
        When mbf_instant_learning is enabled, learn any changes in peer's MAC after this time interval, which is in 10ms ticks.  
        Default value: 10 
    .PARAMETER maxbridgecollision 
        Maximum bridge collision for loop detection .  
        Default value: 20 
    .PARAMETER bdggrpproxyarp 
        Set/reset proxy ARP in bridge group deployment.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER bdgsetting 
        Bridging settings for C2C behavior. If enabled, each PE will learn MAC entries independently. Otherwise, when L2 mode is ON, learned MAC entries on a PE will be broadcasted to all other PEs.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER garponvridintf 
        Send GARP messagess on VRID-configured interfaces upon failover .  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER macmodefwdmypkt 
        Allows MAC mode vserver to pick and forward the packets even if it is destined to Citrix ADC owned VIP.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER usemymac 
        Use Citrix ADC MAC for all outgoing packets.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER proxyarp 
        Proxies the ARP as Citrix ADC MAC for FreeBSD.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER garpreply 
        Set/reset REPLY form of GARP .  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER mbfinstlearning 
        Enable instant learning of MAC changes in MBF mode.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER rstintfonhafo 
        Enable the reset interface upon HA failover.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER skipproxyingbsdtraffic 
        Control source parameters (IP and Port) for FreeBSD initiated traffic. If Enabled, source parameters are retained. Else proxy the source parameters based on next hop.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER returntoethernetsender 
        Return to ethernet sender.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER stopmacmoveupdate 
        Stop Update of server mac change to NAT sessions.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER bridgeagetimeout 
        Time-out value for the bridge table entries, in seconds. The new value applies only to the entries that are dynamically learned after the new value is set. Previously existing bridge table entries expire after the previously configured time-out value.  
        Default value: 300  
        Minimum value = 60  
        Maximum value = 300
    .EXAMPLE
        Invoke-ADCUpdateL2param 
    .NOTES
        File Name : Invoke-ADCUpdateL2param
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/l2param/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [double]$mbfpeermacupdate ,

        [double]$maxbridgecollision ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$bdggrpproxyarp ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$bdgsetting ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$garponvridintf ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$macmodefwdmypkt ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$usemymac ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$proxyarp ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$garpreply ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$mbfinstlearning ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$rstintfonhafo ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$skipproxyingbsdtraffic ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$returntoethernetsender ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$stopmacmoveupdate ,

        [ValidateRange(60, 300)]
        [double]$bridgeagetimeout 

    )
    begin {
        Write-Verbose "Invoke-ADCUpdateL2param: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('mbfpeermacupdate')) { $Payload.Add('mbfpeermacupdate', $mbfpeermacupdate) }
            if ($PSBoundParameters.ContainsKey('maxbridgecollision')) { $Payload.Add('maxbridgecollision', $maxbridgecollision) }
            if ($PSBoundParameters.ContainsKey('bdggrpproxyarp')) { $Payload.Add('bdggrpproxyarp', $bdggrpproxyarp) }
            if ($PSBoundParameters.ContainsKey('bdgsetting')) { $Payload.Add('bdgsetting', $bdgsetting) }
            if ($PSBoundParameters.ContainsKey('garponvridintf')) { $Payload.Add('garponvridintf', $garponvridintf) }
            if ($PSBoundParameters.ContainsKey('macmodefwdmypkt')) { $Payload.Add('macmodefwdmypkt', $macmodefwdmypkt) }
            if ($PSBoundParameters.ContainsKey('usemymac')) { $Payload.Add('usemymac', $usemymac) }
            if ($PSBoundParameters.ContainsKey('proxyarp')) { $Payload.Add('proxyarp', $proxyarp) }
            if ($PSBoundParameters.ContainsKey('garpreply')) { $Payload.Add('garpreply', $garpreply) }
            if ($PSBoundParameters.ContainsKey('mbfinstlearning')) { $Payload.Add('mbfinstlearning', $mbfinstlearning) }
            if ($PSBoundParameters.ContainsKey('rstintfonhafo')) { $Payload.Add('rstintfonhafo', $rstintfonhafo) }
            if ($PSBoundParameters.ContainsKey('skipproxyingbsdtraffic')) { $Payload.Add('skipproxyingbsdtraffic', $skipproxyingbsdtraffic) }
            if ($PSBoundParameters.ContainsKey('returntoethernetsender')) { $Payload.Add('returntoethernetsender', $returntoethernetsender) }
            if ($PSBoundParameters.ContainsKey('stopmacmoveupdate')) { $Payload.Add('stopmacmoveupdate', $stopmacmoveupdate) }
            if ($PSBoundParameters.ContainsKey('bridgeagetimeout')) { $Payload.Add('bridgeagetimeout', $bridgeagetimeout) }
 
            if ($PSCmdlet.ShouldProcess("l2param", "Update Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -NitroPath nitro/v1/config -Type l2param -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
            Write-Output $result

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUpdateL2param: Finished"
    }
}

function Invoke-ADCUnsetL2param {
<#
    .SYNOPSIS
        Unset Network configuration Object
    .DESCRIPTION
        Unset Network configuration Object 
   .PARAMETER mbfpeermacupdate 
       When mbf_instant_learning is enabled, learn any changes in peer's MAC after this time interval, which is in 10ms ticks. 
   .PARAMETER maxbridgecollision 
       Maximum bridge collision for loop detection . 
   .PARAMETER bdggrpproxyarp 
       Set/reset proxy ARP in bridge group deployment.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER bdgsetting 
       Bridging settings for C2C behavior. If enabled, each PE will learn MAC entries independently. Otherwise, when L2 mode is ON, learned MAC entries on a PE will be broadcasted to all other PEs.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER garponvridintf 
       Send GARP messagess on VRID-configured interfaces upon failover .  
       Possible values = ENABLED, DISABLED 
   .PARAMETER macmodefwdmypkt 
       Allows MAC mode vserver to pick and forward the packets even if it is destined to Citrix ADC owned VIP.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER usemymac 
       Use Citrix ADC MAC for all outgoing packets.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER proxyarp 
       Proxies the ARP as Citrix ADC MAC for FreeBSD.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER garpreply 
       Set/reset REPLY form of GARP .  
       Possible values = ENABLED, DISABLED 
   .PARAMETER mbfinstlearning 
       Enable instant learning of MAC changes in MBF mode.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER rstintfonhafo 
       Enable the reset interface upon HA failover.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER skipproxyingbsdtraffic 
       Control source parameters (IP and Port) for FreeBSD initiated traffic. If Enabled, source parameters are retained. Else proxy the source parameters based on next hop.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER returntoethernetsender 
       Return to ethernet sender.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER stopmacmoveupdate 
       Stop Update of server mac change to NAT sessions.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER bridgeagetimeout 
       Time-out value for the bridge table entries, in seconds. The new value applies only to the entries that are dynamically learned after the new value is set. Previously existing bridge table entries expire after the previously configured time-out value.
    .EXAMPLE
        Invoke-ADCUnsetL2param 
    .NOTES
        File Name : Invoke-ADCUnsetL2param
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/l2param
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Boolean]$mbfpeermacupdate ,

        [Boolean]$maxbridgecollision ,

        [Boolean]$bdggrpproxyarp ,

        [Boolean]$bdgsetting ,

        [Boolean]$garponvridintf ,

        [Boolean]$macmodefwdmypkt ,

        [Boolean]$usemymac ,

        [Boolean]$proxyarp ,

        [Boolean]$garpreply ,

        [Boolean]$mbfinstlearning ,

        [Boolean]$rstintfonhafo ,

        [Boolean]$skipproxyingbsdtraffic ,

        [Boolean]$returntoethernetsender ,

        [Boolean]$stopmacmoveupdate ,

        [Boolean]$bridgeagetimeout 
    )
    begin {
        Write-Verbose "Invoke-ADCUnsetL2param: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('mbfpeermacupdate')) { $Payload.Add('mbfpeermacupdate', $mbfpeermacupdate) }
            if ($PSBoundParameters.ContainsKey('maxbridgecollision')) { $Payload.Add('maxbridgecollision', $maxbridgecollision) }
            if ($PSBoundParameters.ContainsKey('bdggrpproxyarp')) { $Payload.Add('bdggrpproxyarp', $bdggrpproxyarp) }
            if ($PSBoundParameters.ContainsKey('bdgsetting')) { $Payload.Add('bdgsetting', $bdgsetting) }
            if ($PSBoundParameters.ContainsKey('garponvridintf')) { $Payload.Add('garponvridintf', $garponvridintf) }
            if ($PSBoundParameters.ContainsKey('macmodefwdmypkt')) { $Payload.Add('macmodefwdmypkt', $macmodefwdmypkt) }
            if ($PSBoundParameters.ContainsKey('usemymac')) { $Payload.Add('usemymac', $usemymac) }
            if ($PSBoundParameters.ContainsKey('proxyarp')) { $Payload.Add('proxyarp', $proxyarp) }
            if ($PSBoundParameters.ContainsKey('garpreply')) { $Payload.Add('garpreply', $garpreply) }
            if ($PSBoundParameters.ContainsKey('mbfinstlearning')) { $Payload.Add('mbfinstlearning', $mbfinstlearning) }
            if ($PSBoundParameters.ContainsKey('rstintfonhafo')) { $Payload.Add('rstintfonhafo', $rstintfonhafo) }
            if ($PSBoundParameters.ContainsKey('skipproxyingbsdtraffic')) { $Payload.Add('skipproxyingbsdtraffic', $skipproxyingbsdtraffic) }
            if ($PSBoundParameters.ContainsKey('returntoethernetsender')) { $Payload.Add('returntoethernetsender', $returntoethernetsender) }
            if ($PSBoundParameters.ContainsKey('stopmacmoveupdate')) { $Payload.Add('stopmacmoveupdate', $stopmacmoveupdate) }
            if ($PSBoundParameters.ContainsKey('bridgeagetimeout')) { $Payload.Add('bridgeagetimeout', $bridgeagetimeout) }
            if ($PSCmdlet.ShouldProcess("l2param", "Unset Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type l2param -NitroPath nitro/v1/config -Action unset -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUnsetL2param: Finished"
    }
}

function Invoke-ADCGetL2param {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER GetAll 
        Retreive all l2param object(s)
    .PARAMETER Count
        If specified, the count of the l2param object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetL2param
    .EXAMPLE 
        Invoke-ADCGetL2param -GetAll
    .EXAMPLE
        Invoke-ADCGetL2param -name <string>
    .EXAMPLE
        Invoke-ADCGetL2param -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetL2param
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/l2param/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetL2param: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all l2param objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type l2param -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for l2param objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type l2param -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving l2param objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type l2param -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving l2param configuration for property ''"

            } else {
                Write-Verbose "Retrieving l2param configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type l2param -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetL2param: Ended"
    }
}

function Invoke-ADCUpdateL3param {
<#
    .SYNOPSIS
        Update Network configuration Object
    .DESCRIPTION
        Update Network configuration Object 
    .PARAMETER srcnat 
        Perform NAT if only the source is in the private network.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER icmpgenratethreshold 
        NS generated ICMP pkts per 10ms rate threshold.  
        Default value: 100 
    .PARAMETER overridernat 
        USNIP/USIP settings override RNAT settings for configured  
        service/virtual server traffic.. .  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER dropdfflag 
        Enable dropping the IP DF flag.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER miproundrobin 
        Enable round robin usage of mapped IPs.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER externalloopback 
        Enable external loopback.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER tnlpmtuwoconn 
        Enable/Disable learning PMTU of IP tunnel when ICMP error does not contain connection information.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER usipserverstraypkt 
        Enable detection of stray server side pkts in USIP mode.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER forwardicmpfragments 
        Enable forwarding of ICMP fragments.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER dropipfragments 
        Enable dropping of IP fragments.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER acllogtime 
        Parameter to tune acl logging time.  
        Default value: 5000 
    .PARAMETER implicitaclallow 
        Do not apply ACLs for internal ports.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER dynamicrouting 
        Enable/Disable Dynamic routing on partition. This configuration is not applicable to default partition.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER ipv6dynamicrouting 
        Enable/Disable IPv6 Dynamic routing.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER allowclasseipv4 
        Enable/Disable IPv4 Class E address clients.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED
    .EXAMPLE
        Invoke-ADCUpdateL3param 
    .NOTES
        File Name : Invoke-ADCUpdateL3param
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/l3param/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$srcnat ,

        [double]$icmpgenratethreshold ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$overridernat ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$dropdfflag ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$miproundrobin ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$externalloopback ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$tnlpmtuwoconn ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$usipserverstraypkt ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$forwardicmpfragments ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$dropipfragments ,

        [double]$acllogtime ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$implicitaclallow ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$dynamicrouting ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$ipv6dynamicrouting ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$allowclasseipv4 

    )
    begin {
        Write-Verbose "Invoke-ADCUpdateL3param: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('srcnat')) { $Payload.Add('srcnat', $srcnat) }
            if ($PSBoundParameters.ContainsKey('icmpgenratethreshold')) { $Payload.Add('icmpgenratethreshold', $icmpgenratethreshold) }
            if ($PSBoundParameters.ContainsKey('overridernat')) { $Payload.Add('overridernat', $overridernat) }
            if ($PSBoundParameters.ContainsKey('dropdfflag')) { $Payload.Add('dropdfflag', $dropdfflag) }
            if ($PSBoundParameters.ContainsKey('miproundrobin')) { $Payload.Add('miproundrobin', $miproundrobin) }
            if ($PSBoundParameters.ContainsKey('externalloopback')) { $Payload.Add('externalloopback', $externalloopback) }
            if ($PSBoundParameters.ContainsKey('tnlpmtuwoconn')) { $Payload.Add('tnlpmtuwoconn', $tnlpmtuwoconn) }
            if ($PSBoundParameters.ContainsKey('usipserverstraypkt')) { $Payload.Add('usipserverstraypkt', $usipserverstraypkt) }
            if ($PSBoundParameters.ContainsKey('forwardicmpfragments')) { $Payload.Add('forwardicmpfragments', $forwardicmpfragments) }
            if ($PSBoundParameters.ContainsKey('dropipfragments')) { $Payload.Add('dropipfragments', $dropipfragments) }
            if ($PSBoundParameters.ContainsKey('acllogtime')) { $Payload.Add('acllogtime', $acllogtime) }
            if ($PSBoundParameters.ContainsKey('implicitaclallow')) { $Payload.Add('implicitaclallow', $implicitaclallow) }
            if ($PSBoundParameters.ContainsKey('dynamicrouting')) { $Payload.Add('dynamicrouting', $dynamicrouting) }
            if ($PSBoundParameters.ContainsKey('ipv6dynamicrouting')) { $Payload.Add('ipv6dynamicrouting', $ipv6dynamicrouting) }
            if ($PSBoundParameters.ContainsKey('allowclasseipv4')) { $Payload.Add('allowclasseipv4', $allowclasseipv4) }
 
            if ($PSCmdlet.ShouldProcess("l3param", "Update Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -NitroPath nitro/v1/config -Type l3param -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
            Write-Output $result

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUpdateL3param: Finished"
    }
}

function Invoke-ADCUnsetL3param {
<#
    .SYNOPSIS
        Unset Network configuration Object
    .DESCRIPTION
        Unset Network configuration Object 
   .PARAMETER srcnat 
       Perform NAT if only the source is in the private network.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER icmpgenratethreshold 
       NS generated ICMP pkts per 10ms rate threshold. 
   .PARAMETER overridernat 
       USNIP/USIP settings override RNAT settings for configured  
       service/virtual server traffic.. .  
       Possible values = ENABLED, DISABLED 
   .PARAMETER dropdfflag 
       Enable dropping the IP DF flag.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER miproundrobin 
       Enable round robin usage of mapped IPs.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER externalloopback 
       Enable external loopback.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER tnlpmtuwoconn 
       Enable/Disable learning PMTU of IP tunnel when ICMP error does not contain connection information.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER usipserverstraypkt 
       Enable detection of stray server side pkts in USIP mode.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER forwardicmpfragments 
       Enable forwarding of ICMP fragments.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER dropipfragments 
       Enable dropping of IP fragments.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER acllogtime 
       Parameter to tune acl logging time. 
   .PARAMETER implicitaclallow 
       Do not apply ACLs for internal ports.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER dynamicrouting 
       Enable/Disable Dynamic routing on partition. This configuration is not applicable to default partition.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER ipv6dynamicrouting 
       Enable/Disable IPv6 Dynamic routing.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER allowclasseipv4 
       Enable/Disable IPv4 Class E address clients.  
       Possible values = ENABLED, DISABLED
    .EXAMPLE
        Invoke-ADCUnsetL3param 
    .NOTES
        File Name : Invoke-ADCUnsetL3param
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/l3param
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Boolean]$srcnat ,

        [Boolean]$icmpgenratethreshold ,

        [Boolean]$overridernat ,

        [Boolean]$dropdfflag ,

        [Boolean]$miproundrobin ,

        [Boolean]$externalloopback ,

        [Boolean]$tnlpmtuwoconn ,

        [Boolean]$usipserverstraypkt ,

        [Boolean]$forwardicmpfragments ,

        [Boolean]$dropipfragments ,

        [Boolean]$acllogtime ,

        [Boolean]$implicitaclallow ,

        [Boolean]$dynamicrouting ,

        [Boolean]$ipv6dynamicrouting ,

        [Boolean]$allowclasseipv4 
    )
    begin {
        Write-Verbose "Invoke-ADCUnsetL3param: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('srcnat')) { $Payload.Add('srcnat', $srcnat) }
            if ($PSBoundParameters.ContainsKey('icmpgenratethreshold')) { $Payload.Add('icmpgenratethreshold', $icmpgenratethreshold) }
            if ($PSBoundParameters.ContainsKey('overridernat')) { $Payload.Add('overridernat', $overridernat) }
            if ($PSBoundParameters.ContainsKey('dropdfflag')) { $Payload.Add('dropdfflag', $dropdfflag) }
            if ($PSBoundParameters.ContainsKey('miproundrobin')) { $Payload.Add('miproundrobin', $miproundrobin) }
            if ($PSBoundParameters.ContainsKey('externalloopback')) { $Payload.Add('externalloopback', $externalloopback) }
            if ($PSBoundParameters.ContainsKey('tnlpmtuwoconn')) { $Payload.Add('tnlpmtuwoconn', $tnlpmtuwoconn) }
            if ($PSBoundParameters.ContainsKey('usipserverstraypkt')) { $Payload.Add('usipserverstraypkt', $usipserverstraypkt) }
            if ($PSBoundParameters.ContainsKey('forwardicmpfragments')) { $Payload.Add('forwardicmpfragments', $forwardicmpfragments) }
            if ($PSBoundParameters.ContainsKey('dropipfragments')) { $Payload.Add('dropipfragments', $dropipfragments) }
            if ($PSBoundParameters.ContainsKey('acllogtime')) { $Payload.Add('acllogtime', $acllogtime) }
            if ($PSBoundParameters.ContainsKey('implicitaclallow')) { $Payload.Add('implicitaclallow', $implicitaclallow) }
            if ($PSBoundParameters.ContainsKey('dynamicrouting')) { $Payload.Add('dynamicrouting', $dynamicrouting) }
            if ($PSBoundParameters.ContainsKey('ipv6dynamicrouting')) { $Payload.Add('ipv6dynamicrouting', $ipv6dynamicrouting) }
            if ($PSBoundParameters.ContainsKey('allowclasseipv4')) { $Payload.Add('allowclasseipv4', $allowclasseipv4) }
            if ($PSCmdlet.ShouldProcess("l3param", "Unset Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type l3param -NitroPath nitro/v1/config -Action unset -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUnsetL3param: Finished"
    }
}

function Invoke-ADCGetL3param {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER GetAll 
        Retreive all l3param object(s)
    .PARAMETER Count
        If specified, the count of the l3param object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetL3param
    .EXAMPLE 
        Invoke-ADCGetL3param -GetAll
    .EXAMPLE
        Invoke-ADCGetL3param -name <string>
    .EXAMPLE
        Invoke-ADCGetL3param -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetL3param
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/l3param/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetL3param: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all l3param objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type l3param -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for l3param objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type l3param -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving l3param objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type l3param -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving l3param configuration for property ''"

            } else {
                Write-Verbose "Retrieving l3param configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type l3param -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetL3param: Ended"
    }
}

function Invoke-ADCUpdateL4param {
<#
    .SYNOPSIS
        Update Network configuration Object
    .DESCRIPTION
        Update Network configuration Object 
    .PARAMETER l2connmethod 
        Layer 2 connection method based on the combination of channel number, MAC address and VLAN. It is tuned with l2conn param of lb vserver. If l2conn of lb vserver is ON then method specified here will be used to identify a connection in addition to the 4-tuple (<source IP>:<source port>::<destination IP>:<destination port>).  
        Default value: MacVlanChannel  
        Possible values = Channel, Vlan, VlanChannel, Mac, MacChannel, MacVlan, MacVlanChannel 
    .PARAMETER l4switch 
        In L4 switch topology, always clients and servers are on the same side. Enable l4switch to allow such connections.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED
    .EXAMPLE
        Invoke-ADCUpdateL4param 
    .NOTES
        File Name : Invoke-ADCUpdateL4param
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/l4param/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [ValidateSet('Channel', 'Vlan', 'VlanChannel', 'Mac', 'MacChannel', 'MacVlan', 'MacVlanChannel')]
        [string]$l2connmethod ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$l4switch 

    )
    begin {
        Write-Verbose "Invoke-ADCUpdateL4param: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('l2connmethod')) { $Payload.Add('l2connmethod', $l2connmethod) }
            if ($PSBoundParameters.ContainsKey('l4switch')) { $Payload.Add('l4switch', $l4switch) }
 
            if ($PSCmdlet.ShouldProcess("l4param", "Update Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -NitroPath nitro/v1/config -Type l4param -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
            Write-Output $result

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUpdateL4param: Finished"
    }
}

function Invoke-ADCUnsetL4param {
<#
    .SYNOPSIS
        Unset Network configuration Object
    .DESCRIPTION
        Unset Network configuration Object 
   .PARAMETER l2connmethod 
       Layer 2 connection method based on the combination of channel number, MAC address and VLAN. It is tuned with l2conn param of lb vserver. If l2conn of lb vserver is ON then method specified here will be used to identify a connection in addition to the 4-tuple (<source IP>:<source port>::<destination IP>:<destination port>).  
       Possible values = Channel, Vlan, VlanChannel, Mac, MacChannel, MacVlan, MacVlanChannel 
   .PARAMETER l4switch 
       In L4 switch topology, always clients and servers are on the same side. Enable l4switch to allow such connections.  
       Possible values = ENABLED, DISABLED
    .EXAMPLE
        Invoke-ADCUnsetL4param 
    .NOTES
        File Name : Invoke-ADCUnsetL4param
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/l4param
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Boolean]$l2connmethod ,

        [Boolean]$l4switch 
    )
    begin {
        Write-Verbose "Invoke-ADCUnsetL4param: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('l2connmethod')) { $Payload.Add('l2connmethod', $l2connmethod) }
            if ($PSBoundParameters.ContainsKey('l4switch')) { $Payload.Add('l4switch', $l4switch) }
            if ($PSCmdlet.ShouldProcess("l4param", "Unset Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type l4param -NitroPath nitro/v1/config -Action unset -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUnsetL4param: Finished"
    }
}

function Invoke-ADCGetL4param {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER GetAll 
        Retreive all l4param object(s)
    .PARAMETER Count
        If specified, the count of the l4param object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetL4param
    .EXAMPLE 
        Invoke-ADCGetL4param -GetAll
    .EXAMPLE
        Invoke-ADCGetL4param -name <string>
    .EXAMPLE
        Invoke-ADCGetL4param -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetL4param
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/l4param/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetL4param: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all l4param objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type l4param -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for l4param objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type l4param -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving l4param objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type l4param -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving l4param configuration for property ''"

            } else {
                Write-Verbose "Retrieving l4param configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type l4param -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetL4param: Ended"
    }
}

function Invoke-ADCUpdateLacp {
<#
    .SYNOPSIS
        Update Network configuration Object
    .DESCRIPTION
        Update Network configuration Object 
    .PARAMETER syspriority 
        Priority number that determines which peer device of an LACP LA channel can have control over the LA channel. This parameter is globally applied to all LACP channels on the Citrix ADC. The lower the number, the higher the priority.  
        Default value: 32768  
        Minimum value = 1  
        Maximum value = 65535 
    .PARAMETER ownernode 
        The owner node in a cluster for which we want to set the lacp priority. Owner node can vary from 0 to 31. Ownernode value of 254 is used for Cluster.  
        Default value: 255 
    .PARAMETER PassThru 
        Return details about the created lacp item.
    .EXAMPLE
        Invoke-ADCUpdateLacp -syspriority <double>
    .NOTES
        File Name : Invoke-ADCUpdateLacp
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/lacp/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateRange(1, 65535)]
        [double]$syspriority ,

        [double]$ownernode ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCUpdateLacp: Starting"
    }
    process {
        try {
            $Payload = @{
                syspriority = $syspriority
            }
            if ($PSBoundParameters.ContainsKey('ownernode')) { $Payload.Add('ownernode', $ownernode) }
 
            if ($PSCmdlet.ShouldProcess("lacp", "Update Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -NitroPath nitro/v1/config -Type lacp -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetLacp -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUpdateLacp: Finished"
    }
}

function Invoke-ADCGetLacp {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER ownernode 
       The owner node in a cluster for which we want to set the lacp priority. Owner node can vary from 0 to 31. Ownernode value of 254 is used for Cluster. 
    .PARAMETER GetAll 
        Retreive all lacp object(s)
    .PARAMETER Count
        If specified, the count of the lacp object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetLacp
    .EXAMPLE 
        Invoke-ADCGetLacp -GetAll 
    .EXAMPLE 
        Invoke-ADCGetLacp -Count
    .EXAMPLE
        Invoke-ADCGetLacp -name <string>
    .EXAMPLE
        Invoke-ADCGetLacp -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetLacp
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/lacp/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [double]$ownernode,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll,

        [Parameter(ParameterSetName = 'GetAll')]
        [Parameter(ParameterSetName = 'Get')]
        [Switch]$ViewSummary

    )
    begin {
        Write-Verbose "Invoke-ADCGetLacp: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all lacp objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type lacp -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for lacp objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type lacp -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving lacp objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type lacp -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving lacp configuration for property 'ownernode'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type lacp -NitroPath nitro/v1/config -Resource $ownernode -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving lacp configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type lacp -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetLacp: Ended"
    }
}

function Invoke-ADCAddLinkset {
<#
    .SYNOPSIS
        Add Network configuration Object
    .DESCRIPTION
        Add Network configuration Object 
    .PARAMETER id 
        Unique identifier for the linkset. Must be of the form LS/x, where x can be an integer from 1 to 32. 
    .PARAMETER PassThru 
        Return details about the created linkset item.
    .EXAMPLE
        Invoke-ADCAddLinkset -id <string>
    .NOTES
        File Name : Invoke-ADCAddLinkset
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/linkset/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$id ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddLinkset: Starting"
    }
    process {
        try {
            $Payload = @{
                id = $id
            }

 
            if ($PSCmdlet.ShouldProcess("linkset", "Add Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -NitroPath nitro/v1/config -Type linkset -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetLinkset -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddLinkset: Finished"
    }
}

function Invoke-ADCDeleteLinkset {
<#
    .SYNOPSIS
        Delete Network configuration Object
    .DESCRIPTION
        Delete Network configuration Object
    .PARAMETER id 
       Unique identifier for the linkset. Must be of the form LS/x, where x can be an integer from 1 to 32. 
    .EXAMPLE
        Invoke-ADCDeleteLinkset -id <string>
    .NOTES
        File Name : Invoke-ADCDeleteLinkset
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/linkset/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$id 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteLinkset: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }

            if ($PSCmdlet.ShouldProcess("$id", "Delete Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type linkset -NitroPath nitro/v1/config -Resource $id -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteLinkset: Finished"
    }
}

function Invoke-ADCGetLinkset {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER id 
       Unique identifier for the linkset. Must be of the form LS/x, where x can be an integer from 1 to 32. 
    .PARAMETER GetAll 
        Retreive all linkset object(s)
    .PARAMETER Count
        If specified, the count of the linkset object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetLinkset
    .EXAMPLE 
        Invoke-ADCGetLinkset -GetAll 
    .EXAMPLE 
        Invoke-ADCGetLinkset -Count
    .EXAMPLE
        Invoke-ADCGetLinkset -name <string>
    .EXAMPLE
        Invoke-ADCGetLinkset -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetLinkset
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/linkset/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [string]$id,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll,

        [Parameter(ParameterSetName = 'GetAll')]
        [Parameter(ParameterSetName = 'Get')]
        [Switch]$ViewSummary

    )
    begin {
        Write-Verbose "Invoke-ADCGetLinkset: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all linkset objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type linkset -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for linkset objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type linkset -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving linkset objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type linkset -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving linkset configuration for property 'id'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type linkset -NitroPath nitro/v1/config -Resource $id -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving linkset configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type linkset -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetLinkset: Ended"
    }
}

function Invoke-ADCGetLinksetbinding {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER id 
       ID of the linkset for which to display information. If an ID is not provided, the display includes information about all linksets that are available in the cluster. 
    .PARAMETER GetAll 
        Retreive all linkset_binding object(s)
    .PARAMETER Count
        If specified, the count of the linkset_binding object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetLinksetbinding
    .EXAMPLE 
        Invoke-ADCGetLinksetbinding -GetAll
    .EXAMPLE
        Invoke-ADCGetLinksetbinding -name <string>
    .EXAMPLE
        Invoke-ADCGetLinksetbinding -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetLinksetbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/linkset_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [string]$id,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetLinksetbinding: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ 
                    bulkbindings = 'yes'
                }
                Write-Verbose "Retrieving all linkset_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type linkset_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for linkset_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type linkset_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving linkset_binding objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type linkset_binding -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving linkset_binding configuration for property 'id'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type linkset_binding -NitroPath nitro/v1/config -Resource $id -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving linkset_binding configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type linkset_binding -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetLinksetbinding: Ended"
    }
}

function Invoke-ADCAddLinksetchannelbinding {
<#
    .SYNOPSIS
        Add Network configuration Object
    .DESCRIPTION
        Add Network configuration Object 
    .PARAMETER id 
        ID of the linkset to which to bind the interfaces. 
    .PARAMETER ifnum 
        The interfaces to be bound to the linkset. 
    .PARAMETER PassThru 
        Return details about the created linkset_channel_binding item.
    .EXAMPLE
        Invoke-ADCAddLinksetchannelbinding -id <string> -ifnum <string>
    .NOTES
        File Name : Invoke-ADCAddLinksetchannelbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/linkset_channel_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$id ,

        [Parameter(Mandatory = $true)]
        [string]$ifnum ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddLinksetchannelbinding: Starting"
    }
    process {
        try {
            $Payload = @{
                id = $id
                ifnum = $ifnum
            }

 
            if ($PSCmdlet.ShouldProcess("linkset_channel_binding", "Add Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -NitroPath nitro/v1/config -Type linkset_channel_binding -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetLinksetchannelbinding -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddLinksetchannelbinding: Finished"
    }
}

function Invoke-ADCDeleteLinksetchannelbinding {
<#
    .SYNOPSIS
        Delete Network configuration Object
    .DESCRIPTION
        Delete Network configuration Object
    .PARAMETER id 
       ID of the linkset to which to bind the interfaces.    .PARAMETER ifnum 
       The interfaces to be bound to the linkset.
    .EXAMPLE
        Invoke-ADCDeleteLinksetchannelbinding -id <string>
    .NOTES
        File Name : Invoke-ADCDeleteLinksetchannelbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/linkset_channel_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$id ,

        [string]$ifnum 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteLinksetchannelbinding: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }
            if ($PSBoundParameters.ContainsKey('ifnum')) { $Arguments.Add('ifnum', $ifnum) }
            if ($PSCmdlet.ShouldProcess("$id", "Delete Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type linkset_channel_binding -NitroPath nitro/v1/config -Resource $id -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteLinksetchannelbinding: Finished"
    }
}

function Invoke-ADCGetLinksetchannelbinding {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER id 
       ID of the linkset to which to bind the interfaces. 
    .PARAMETER GetAll 
        Retreive all linkset_channel_binding object(s)
    .PARAMETER Count
        If specified, the count of the linkset_channel_binding object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetLinksetchannelbinding
    .EXAMPLE 
        Invoke-ADCGetLinksetchannelbinding -GetAll 
    .EXAMPLE 
        Invoke-ADCGetLinksetchannelbinding -Count
    .EXAMPLE
        Invoke-ADCGetLinksetchannelbinding -name <string>
    .EXAMPLE
        Invoke-ADCGetLinksetchannelbinding -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetLinksetchannelbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/linkset_channel_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [string]$id,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetLinksetchannelbinding: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ 
                    bulkbindings = 'yes'
                }
                Write-Verbose "Retrieving all linkset_channel_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type linkset_channel_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for linkset_channel_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type linkset_channel_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving linkset_channel_binding objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type linkset_channel_binding -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving linkset_channel_binding configuration for property 'id'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type linkset_channel_binding -NitroPath nitro/v1/config -Resource $id -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving linkset_channel_binding configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type linkset_channel_binding -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetLinksetchannelbinding: Ended"
    }
}

function Invoke-ADCAddLinksetinterfacebinding {
<#
    .SYNOPSIS
        Add Network configuration Object
    .DESCRIPTION
        Add Network configuration Object 
    .PARAMETER id 
        ID of the linkset to which to bind the interfaces. 
    .PARAMETER ifnum 
        The interfaces to be bound to the linkset. 
    .PARAMETER PassThru 
        Return details about the created linkset_interface_binding item.
    .EXAMPLE
        Invoke-ADCAddLinksetinterfacebinding -id <string> -ifnum <string>
    .NOTES
        File Name : Invoke-ADCAddLinksetinterfacebinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/linkset_interface_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$id ,

        [Parameter(Mandatory = $true)]
        [string]$ifnum ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddLinksetinterfacebinding: Starting"
    }
    process {
        try {
            $Payload = @{
                id = $id
                ifnum = $ifnum
            }

 
            if ($PSCmdlet.ShouldProcess("linkset_interface_binding", "Add Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -NitroPath nitro/v1/config -Type linkset_interface_binding -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetLinksetinterfacebinding -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddLinksetinterfacebinding: Finished"
    }
}

function Invoke-ADCDeleteLinksetinterfacebinding {
<#
    .SYNOPSIS
        Delete Network configuration Object
    .DESCRIPTION
        Delete Network configuration Object
    .PARAMETER id 
       ID of the linkset to which to bind the interfaces.    .PARAMETER ifnum 
       The interfaces to be bound to the linkset.
    .EXAMPLE
        Invoke-ADCDeleteLinksetinterfacebinding -id <string>
    .NOTES
        File Name : Invoke-ADCDeleteLinksetinterfacebinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/linkset_interface_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$id ,

        [string]$ifnum 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteLinksetinterfacebinding: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }
            if ($PSBoundParameters.ContainsKey('ifnum')) { $Arguments.Add('ifnum', $ifnum) }
            if ($PSCmdlet.ShouldProcess("$id", "Delete Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type linkset_interface_binding -NitroPath nitro/v1/config -Resource $id -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteLinksetinterfacebinding: Finished"
    }
}

function Invoke-ADCGetLinksetinterfacebinding {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER id 
       ID of the linkset to which to bind the interfaces. 
    .PARAMETER GetAll 
        Retreive all linkset_interface_binding object(s)
    .PARAMETER Count
        If specified, the count of the linkset_interface_binding object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetLinksetinterfacebinding
    .EXAMPLE 
        Invoke-ADCGetLinksetinterfacebinding -GetAll 
    .EXAMPLE 
        Invoke-ADCGetLinksetinterfacebinding -Count
    .EXAMPLE
        Invoke-ADCGetLinksetinterfacebinding -name <string>
    .EXAMPLE
        Invoke-ADCGetLinksetinterfacebinding -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetLinksetinterfacebinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/linkset_interface_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [string]$id,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetLinksetinterfacebinding: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ 
                    bulkbindings = 'yes'
                }
                Write-Verbose "Retrieving all linkset_interface_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type linkset_interface_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for linkset_interface_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type linkset_interface_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving linkset_interface_binding objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type linkset_interface_binding -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving linkset_interface_binding configuration for property 'id'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type linkset_interface_binding -NitroPath nitro/v1/config -Resource $id -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving linkset_interface_binding configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type linkset_interface_binding -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetLinksetinterfacebinding: Ended"
    }
}

function Invoke-ADCAddMapbmr {
<#
    .SYNOPSIS
        Add Network configuration Object
    .DESCRIPTION
        Add Network configuration Object 
    .PARAMETER name 
        Name for the Basic Mapping Rule. Must begin with an ASCII alphanumeric or underscore (_) character, and must contain only ASCII alphanumeric, underscore, hash (#), period (.), space, colon (:), at (@), equals (=), and hyphen (-) characters. Cannot be changed after the MAP Basic Mapping Rule is created. 
    .PARAMETER ruleipv6prefix 
        IPv6 prefix of Customer Edge(CE) device.MAP-T CE will send ipv6 packets with this ipv6 prefix as source ipv6 address prefix. 
    .PARAMETER psidoffset 
        Start bit position of Port Set Identifier(PSID) value in Embedded Address (EA) bits.  
        Default value: 6  
        Minimum value = 1  
        Maximum value = 15 
    .PARAMETER eabitlength 
        The Embedded Address (EA) bit field encodes the CE-specific IPv4 address and port information. The EA bit field, which is unique for a  
        given Rule IPv6 prefix.  
        Default value: 16  
        Minimum value = 2  
        Maximum value = 47 
    .PARAMETER psidlength 
        Length of Port Set IdentifierPort Set Identifier(PSID) in Embedded Address (EA) bits.  
        Default value: 8  
        Minimum value = 1  
        Maximum value = 16 
    .PARAMETER PassThru 
        Return details about the created mapbmr item.
    .EXAMPLE
        Invoke-ADCAddMapbmr -name <string> -ruleipv6prefix <string>
    .NOTES
        File Name : Invoke-ADCAddMapbmr
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/mapbmr/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidatePattern('^(([a-zA-Z0-9]|[_])+([a-zA-Z0-9]|[_])+)$')]
        [ValidateLength(1, 127)]
        [string]$name ,

        [Parameter(Mandatory = $true)]
        [string]$ruleipv6prefix ,

        [ValidateRange(1, 15)]
        [double]$psidoffset = '6' ,

        [ValidateRange(2, 47)]
        [double]$eabitlength = '16' ,

        [ValidateRange(1, 16)]
        [double]$psidlength = '8' ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddMapbmr: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
                ruleipv6prefix = $ruleipv6prefix
            }
            if ($PSBoundParameters.ContainsKey('psidoffset')) { $Payload.Add('psidoffset', $psidoffset) }
            if ($PSBoundParameters.ContainsKey('eabitlength')) { $Payload.Add('eabitlength', $eabitlength) }
            if ($PSBoundParameters.ContainsKey('psidlength')) { $Payload.Add('psidlength', $psidlength) }
 
            if ($PSCmdlet.ShouldProcess("mapbmr", "Add Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -NitroPath nitro/v1/config -Type mapbmr -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetMapbmr -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddMapbmr: Finished"
    }
}

function Invoke-ADCDeleteMapbmr {
<#
    .SYNOPSIS
        Delete Network configuration Object
    .DESCRIPTION
        Delete Network configuration Object
    .PARAMETER name 
       Name for the Basic Mapping Rule. Must begin with an ASCII alphanumeric or underscore (_) character, and must contain only ASCII alphanumeric, underscore, hash (#), period (.), space, colon (:), at (@), equals (=), and hyphen (-) characters. Cannot be changed after the MAP Basic Mapping Rule is created. 
    .EXAMPLE
        Invoke-ADCDeleteMapbmr -name <string>
    .NOTES
        File Name : Invoke-ADCDeleteMapbmr
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/mapbmr/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$name 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteMapbmr: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }

            if ($PSCmdlet.ShouldProcess("$name", "Delete Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type mapbmr -NitroPath nitro/v1/config -Resource $name -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteMapbmr: Finished"
    }
}

function Invoke-ADCGetMapbmr {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER name 
       Name for the Basic Mapping Rule. Must begin with an ASCII alphanumeric or underscore (_) character, and must contain only ASCII alphanumeric, underscore, hash (#), period (.), space, colon (:), at (@), equals (=), and hyphen (-) characters. Cannot be changed after the MAP Basic Mapping Rule is created. 
    .PARAMETER GetAll 
        Retreive all mapbmr object(s)
    .PARAMETER Count
        If specified, the count of the mapbmr object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetMapbmr
    .EXAMPLE 
        Invoke-ADCGetMapbmr -GetAll 
    .EXAMPLE 
        Invoke-ADCGetMapbmr -Count
    .EXAMPLE
        Invoke-ADCGetMapbmr -name <string>
    .EXAMPLE
        Invoke-ADCGetMapbmr -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetMapbmr
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/mapbmr/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidatePattern('^(([a-zA-Z0-9]|[_])+([a-zA-Z0-9]|[_])+)$')]
        [ValidateLength(1, 127)]
        [string]$name,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll,

        [Parameter(ParameterSetName = 'GetAll')]
        [Parameter(ParameterSetName = 'Get')]
        [Switch]$ViewSummary

    )
    begin {
        Write-Verbose "Invoke-ADCGetMapbmr: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all mapbmr objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type mapbmr -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for mapbmr objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type mapbmr -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving mapbmr objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type mapbmr -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving mapbmr configuration for property 'name'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type mapbmr -NitroPath nitro/v1/config -Resource $name -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving mapbmr configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type mapbmr -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetMapbmr: Ended"
    }
}

function Invoke-ADCGetMapbmrbinding {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER name 
       Name for the Basic Mapping Rule. Must begin with an ASCII alphanumeric or underscore (_) character, and must contain only ASCII alphanumeric, underscore, hash (#), period (.), space, colon (:), at (@), equals (=), and hyphen (-) characters. Cannot be changed after the MAP Basic Mapping Rule is created. 
    .PARAMETER GetAll 
        Retreive all mapbmr_binding object(s)
    .PARAMETER Count
        If specified, the count of the mapbmr_binding object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetMapbmrbinding
    .EXAMPLE 
        Invoke-ADCGetMapbmrbinding -GetAll
    .EXAMPLE
        Invoke-ADCGetMapbmrbinding -name <string>
    .EXAMPLE
        Invoke-ADCGetMapbmrbinding -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetMapbmrbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/mapbmr_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidatePattern('^(([a-zA-Z0-9]|[_])+([a-zA-Z0-9]|[_])+)$')]
        [ValidateLength(1, 127)]
        [string]$name,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetMapbmrbinding: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ 
                    bulkbindings = 'yes'
                }
                Write-Verbose "Retrieving all mapbmr_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type mapbmr_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for mapbmr_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type mapbmr_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving mapbmr_binding objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type mapbmr_binding -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving mapbmr_binding configuration for property 'name'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type mapbmr_binding -NitroPath nitro/v1/config -Resource $name -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving mapbmr_binding configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type mapbmr_binding -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetMapbmrbinding: Ended"
    }
}

function Invoke-ADCAddMapbmrbmrv4networkbinding {
<#
    .SYNOPSIS
        Add Network configuration Object
    .DESCRIPTION
        Add Network configuration Object 
    .PARAMETER name 
        Name for the Basic Mapping Rule. Must begin with an ASCII alphanumeric or underscore (_) character, and must contain only ASCII alphanumeric, underscore, hash (#), period (.), space, colon (:), at (@), equals (=), and hyphen (-) characters. Cannot be changed after the MAP Basic Mapping Rule is created. 
    .PARAMETER network 
        IPv4 NAT address range of Customer Edge (CE).  
        Minimum length = 1 
    .PARAMETER netmask 
        Subnet mask for the IPv4 address specified in the Network parameter. 
    .PARAMETER PassThru 
        Return details about the created mapbmr_bmrv4network_binding item.
    .EXAMPLE
        Invoke-ADCAddMapbmrbmrv4networkbinding -name <string> -network <string>
    .NOTES
        File Name : Invoke-ADCAddMapbmrbmrv4networkbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/mapbmr_bmrv4network_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidatePattern('^(([a-zA-Z0-9]|[_])+([a-zA-Z0-9]|[_])+)$')]
        [ValidateLength(1, 127)]
        [string]$name ,

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$network ,

        [string]$netmask ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddMapbmrbmrv4networkbinding: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
                network = $network
            }
            if ($PSBoundParameters.ContainsKey('netmask')) { $Payload.Add('netmask', $netmask) }
 
            if ($PSCmdlet.ShouldProcess("mapbmr_bmrv4network_binding", "Add Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -NitroPath nitro/v1/config -Type mapbmr_bmrv4network_binding -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetMapbmrbmrv4networkbinding -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddMapbmrbmrv4networkbinding: Finished"
    }
}

function Invoke-ADCDeleteMapbmrbmrv4networkbinding {
<#
    .SYNOPSIS
        Delete Network configuration Object
    .DESCRIPTION
        Delete Network configuration Object
    .PARAMETER name 
       Name for the Basic Mapping Rule. Must begin with an ASCII alphanumeric or underscore (_) character, and must contain only ASCII alphanumeric, underscore, hash (#), period (.), space, colon (:), at (@), equals (=), and hyphen (-) characters. Cannot be changed after the MAP Basic Mapping Rule is created.    .PARAMETER network 
       IPv4 NAT address range of Customer Edge (CE).  
       Minimum length = 1    .PARAMETER netmask 
       Subnet mask for the IPv4 address specified in the Network parameter.
    .EXAMPLE
        Invoke-ADCDeleteMapbmrbmrv4networkbinding -name <string>
    .NOTES
        File Name : Invoke-ADCDeleteMapbmrbmrv4networkbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/mapbmr_bmrv4network_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$name ,

        [string]$network ,

        [string]$netmask 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteMapbmrbmrv4networkbinding: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }
            if ($PSBoundParameters.ContainsKey('network')) { $Arguments.Add('network', $network) }
            if ($PSBoundParameters.ContainsKey('netmask')) { $Arguments.Add('netmask', $netmask) }
            if ($PSCmdlet.ShouldProcess("$name", "Delete Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type mapbmr_bmrv4network_binding -NitroPath nitro/v1/config -Resource $name -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteMapbmrbmrv4networkbinding: Finished"
    }
}

function Invoke-ADCGetMapbmrbmrv4networkbinding {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER name 
       Name for the Basic Mapping Rule. Must begin with an ASCII alphanumeric or underscore (_) character, and must contain only ASCII alphanumeric, underscore, hash (#), period (.), space, colon (:), at (@), equals (=), and hyphen (-) characters. Cannot be changed after the MAP Basic Mapping Rule is created. 
    .PARAMETER GetAll 
        Retreive all mapbmr_bmrv4network_binding object(s)
    .PARAMETER Count
        If specified, the count of the mapbmr_bmrv4network_binding object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetMapbmrbmrv4networkbinding
    .EXAMPLE 
        Invoke-ADCGetMapbmrbmrv4networkbinding -GetAll 
    .EXAMPLE 
        Invoke-ADCGetMapbmrbmrv4networkbinding -Count
    .EXAMPLE
        Invoke-ADCGetMapbmrbmrv4networkbinding -name <string>
    .EXAMPLE
        Invoke-ADCGetMapbmrbmrv4networkbinding -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetMapbmrbmrv4networkbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/mapbmr_bmrv4network_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidatePattern('^(([a-zA-Z0-9]|[_])+([a-zA-Z0-9]|[_])+)$')]
        [ValidateLength(1, 127)]
        [string]$name,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetMapbmrbmrv4networkbinding: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ 
                    bulkbindings = 'yes'
                }
                Write-Verbose "Retrieving all mapbmr_bmrv4network_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type mapbmr_bmrv4network_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for mapbmr_bmrv4network_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type mapbmr_bmrv4network_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving mapbmr_bmrv4network_binding objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type mapbmr_bmrv4network_binding -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving mapbmr_bmrv4network_binding configuration for property 'name'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type mapbmr_bmrv4network_binding -NitroPath nitro/v1/config -Resource $name -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving mapbmr_bmrv4network_binding configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type mapbmr_bmrv4network_binding -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetMapbmrbmrv4networkbinding: Ended"
    }
}

function Invoke-ADCAddMapdmr {
<#
    .SYNOPSIS
        Add Network configuration Object
    .DESCRIPTION
        Add Network configuration Object 
    .PARAMETER name 
        Name for the Default Mapping Rule. Must begin with an ASCII alphanumeric or underscore (_) character, and must contain only ASCII alphanumeric, underscore, hash (#), period (.), space, colon (:), at (@), equals (=), and hyphen (-) characters. Cannot be changed after the MAP Default Mapping Rule is created. 
    .PARAMETER bripv6prefix 
        IPv6 prefix of Border Relay (Citrix ADC) device.MAP-T CE will send ipv6 packets to this ipv6 prefix.The DMR IPv6 prefix length SHOULD be 64 bits long by default and in any case MUST NOT exceed 96 bits. 
    .PARAMETER PassThru 
        Return details about the created mapdmr item.
    .EXAMPLE
        Invoke-ADCAddMapdmr -name <string> -bripv6prefix <string>
    .NOTES
        File Name : Invoke-ADCAddMapdmr
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/mapdmr/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidatePattern('^(([a-zA-Z0-9]|[_])+([a-zA-Z0-9]|[_])+)$')]
        [ValidateLength(1, 127)]
        [string]$name ,

        [Parameter(Mandatory = $true)]
        [string]$bripv6prefix ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddMapdmr: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
                bripv6prefix = $bripv6prefix
            }

 
            if ($PSCmdlet.ShouldProcess("mapdmr", "Add Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -NitroPath nitro/v1/config -Type mapdmr -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetMapdmr -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddMapdmr: Finished"
    }
}

function Invoke-ADCDeleteMapdmr {
<#
    .SYNOPSIS
        Delete Network configuration Object
    .DESCRIPTION
        Delete Network configuration Object
    .PARAMETER name 
       Name for the Default Mapping Rule. Must begin with an ASCII alphanumeric or underscore (_) character, and must contain only ASCII alphanumeric, underscore, hash (#), period (.), space, colon (:), at (@), equals (=), and hyphen (-) characters. Cannot be changed after the MAP Default Mapping Rule is created. 
    .EXAMPLE
        Invoke-ADCDeleteMapdmr -name <string>
    .NOTES
        File Name : Invoke-ADCDeleteMapdmr
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/mapdmr/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$name 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteMapdmr: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }

            if ($PSCmdlet.ShouldProcess("$name", "Delete Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type mapdmr -NitroPath nitro/v1/config -Resource $name -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteMapdmr: Finished"
    }
}

function Invoke-ADCGetMapdmr {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER name 
       Name for the Default Mapping Rule. Must begin with an ASCII alphanumeric or underscore (_) character, and must contain only ASCII alphanumeric, underscore, hash (#), period (.), space, colon (:), at (@), equals (=), and hyphen (-) characters. Cannot be changed after the MAP Default Mapping Rule is created. 
    .PARAMETER GetAll 
        Retreive all mapdmr object(s)
    .PARAMETER Count
        If specified, the count of the mapdmr object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetMapdmr
    .EXAMPLE 
        Invoke-ADCGetMapdmr -GetAll 
    .EXAMPLE 
        Invoke-ADCGetMapdmr -Count
    .EXAMPLE
        Invoke-ADCGetMapdmr -name <string>
    .EXAMPLE
        Invoke-ADCGetMapdmr -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetMapdmr
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/mapdmr/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidatePattern('^(([a-zA-Z0-9]|[_])+([a-zA-Z0-9]|[_])+)$')]
        [ValidateLength(1, 127)]
        [string]$name,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll,

        [Parameter(ParameterSetName = 'GetAll')]
        [Parameter(ParameterSetName = 'Get')]
        [Switch]$ViewSummary

    )
    begin {
        Write-Verbose "Invoke-ADCGetMapdmr: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all mapdmr objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type mapdmr -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for mapdmr objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type mapdmr -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving mapdmr objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type mapdmr -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving mapdmr configuration for property 'name'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type mapdmr -NitroPath nitro/v1/config -Resource $name -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving mapdmr configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type mapdmr -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetMapdmr: Ended"
    }
}

function Invoke-ADCAddMapdomain {
<#
    .SYNOPSIS
        Add Network configuration Object
    .DESCRIPTION
        Add Network configuration Object 
    .PARAMETER name 
        Name for the MAP Domain. Must begin with an ASCII alphanumeric or underscore (_) character, and must contain only ASCII alphanumeric, underscore, hash (#), period (.), space, colon (:), at (@), equals (=), and hyphen (-) characters. Cannot be changed after the MAP Domain is created . 
    .PARAMETER mapdmrname 
        Default Mapping rule name. 
    .PARAMETER PassThru 
        Return details about the created mapdomain item.
    .EXAMPLE
        Invoke-ADCAddMapdomain -name <string> -mapdmrname <string>
    .NOTES
        File Name : Invoke-ADCAddMapdomain
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/mapdomain/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidatePattern('^(([a-zA-Z0-9]|[_])+([a-zA-Z0-9]|[_])+)$')]
        [ValidateLength(1, 127)]
        [string]$name ,

        [Parameter(Mandatory = $true)]
        [string]$mapdmrname ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddMapdomain: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
                mapdmrname = $mapdmrname
            }

 
            if ($PSCmdlet.ShouldProcess("mapdomain", "Add Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -NitroPath nitro/v1/config -Type mapdomain -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetMapdomain -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddMapdomain: Finished"
    }
}

function Invoke-ADCDeleteMapdomain {
<#
    .SYNOPSIS
        Delete Network configuration Object
    .DESCRIPTION
        Delete Network configuration Object
    .PARAMETER name 
       Name for the MAP Domain. Must begin with an ASCII alphanumeric or underscore (_) character, and must contain only ASCII alphanumeric, underscore, hash (#), period (.), space, colon (:), at (@), equals (=), and hyphen (-) characters. Cannot be changed after the MAP Domain is created . 
    .EXAMPLE
        Invoke-ADCDeleteMapdomain -name <string>
    .NOTES
        File Name : Invoke-ADCDeleteMapdomain
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/mapdomain/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$name 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteMapdomain: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }

            if ($PSCmdlet.ShouldProcess("$name", "Delete Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type mapdomain -NitroPath nitro/v1/config -Resource $name -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteMapdomain: Finished"
    }
}

function Invoke-ADCGetMapdomain {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER name 
       Name for the MAP Domain. Must begin with an ASCII alphanumeric or underscore (_) character, and must contain only ASCII alphanumeric, underscore, hash (#), period (.), space, colon (:), at (@), equals (=), and hyphen (-) characters. Cannot be changed after the MAP Domain is created . 
    .PARAMETER GetAll 
        Retreive all mapdomain object(s)
    .PARAMETER Count
        If specified, the count of the mapdomain object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetMapdomain
    .EXAMPLE 
        Invoke-ADCGetMapdomain -GetAll 
    .EXAMPLE 
        Invoke-ADCGetMapdomain -Count
    .EXAMPLE
        Invoke-ADCGetMapdomain -name <string>
    .EXAMPLE
        Invoke-ADCGetMapdomain -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetMapdomain
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/mapdomain/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidatePattern('^(([a-zA-Z0-9]|[_])+([a-zA-Z0-9]|[_])+)$')]
        [ValidateLength(1, 127)]
        [string]$name,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll,

        [Parameter(ParameterSetName = 'GetAll')]
        [Parameter(ParameterSetName = 'Get')]
        [Switch]$ViewSummary

    )
    begin {
        Write-Verbose "Invoke-ADCGetMapdomain: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all mapdomain objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type mapdomain -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for mapdomain objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type mapdomain -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving mapdomain objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type mapdomain -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving mapdomain configuration for property 'name'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type mapdomain -NitroPath nitro/v1/config -Resource $name -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving mapdomain configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type mapdomain -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetMapdomain: Ended"
    }
}

function Invoke-ADCGetMapdomainbinding {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER name 
       Name for the MAP Domain. Must begin with an ASCII alphanumeric or underscore (_) character, and must contain only ASCII alphanumeric, underscore, hash (#), period (.), space, colon (:), at (@), equals (=), and hyphen (-) characters. Cannot be changed after the MAP Domain is created . 
    .PARAMETER GetAll 
        Retreive all mapdomain_binding object(s)
    .PARAMETER Count
        If specified, the count of the mapdomain_binding object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetMapdomainbinding
    .EXAMPLE 
        Invoke-ADCGetMapdomainbinding -GetAll
    .EXAMPLE
        Invoke-ADCGetMapdomainbinding -name <string>
    .EXAMPLE
        Invoke-ADCGetMapdomainbinding -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetMapdomainbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/mapdomain_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidatePattern('^(([a-zA-Z0-9]|[_])+([a-zA-Z0-9]|[_])+)$')]
        [ValidateLength(1, 127)]
        [string]$name,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetMapdomainbinding: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ 
                    bulkbindings = 'yes'
                }
                Write-Verbose "Retrieving all mapdomain_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type mapdomain_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for mapdomain_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type mapdomain_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving mapdomain_binding objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type mapdomain_binding -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving mapdomain_binding configuration for property 'name'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type mapdomain_binding -NitroPath nitro/v1/config -Resource $name -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving mapdomain_binding configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type mapdomain_binding -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetMapdomainbinding: Ended"
    }
}

function Invoke-ADCAddMapdomainmapbmrbinding {
<#
    .SYNOPSIS
        Add Network configuration Object
    .DESCRIPTION
        Add Network configuration Object 
    .PARAMETER name 
        Name for the MAP Domain. Must begin with an ASCII alphanumeric or underscore (_) character, and must contain only ASCII alphanumeric, underscore, hash (#), period (.), space, colon (:), at (@), equals (=), and hyphen (-) characters. Cannot be changed after the MAP Domain is created . 
    .PARAMETER mapbmrname 
        Basic Mapping rule name. 
    .PARAMETER PassThru 
        Return details about the created mapdomain_mapbmr_binding item.
    .EXAMPLE
        Invoke-ADCAddMapdomainmapbmrbinding -name <string> -mapbmrname <string>
    .NOTES
        File Name : Invoke-ADCAddMapdomainmapbmrbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/mapdomain_mapbmr_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidatePattern('^(([a-zA-Z0-9]|[_])+([a-zA-Z0-9]|[_])+)$')]
        [ValidateLength(1, 127)]
        [string]$name ,

        [Parameter(Mandatory = $true)]
        [string]$mapbmrname ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddMapdomainmapbmrbinding: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
                mapbmrname = $mapbmrname
            }

 
            if ($PSCmdlet.ShouldProcess("mapdomain_mapbmr_binding", "Add Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -NitroPath nitro/v1/config -Type mapdomain_mapbmr_binding -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetMapdomainmapbmrbinding -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddMapdomainmapbmrbinding: Finished"
    }
}

function Invoke-ADCDeleteMapdomainmapbmrbinding {
<#
    .SYNOPSIS
        Delete Network configuration Object
    .DESCRIPTION
        Delete Network configuration Object
    .PARAMETER name 
       Name for the MAP Domain. Must begin with an ASCII alphanumeric or underscore (_) character, and must contain only ASCII alphanumeric, underscore, hash (#), period (.), space, colon (:), at (@), equals (=), and hyphen (-) characters. Cannot be changed after the MAP Domain is created .    .PARAMETER mapbmrname 
       Basic Mapping rule name.
    .EXAMPLE
        Invoke-ADCDeleteMapdomainmapbmrbinding -name <string>
    .NOTES
        File Name : Invoke-ADCDeleteMapdomainmapbmrbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/mapdomain_mapbmr_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$name ,

        [string]$mapbmrname 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteMapdomainmapbmrbinding: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }
            if ($PSBoundParameters.ContainsKey('mapbmrname')) { $Arguments.Add('mapbmrname', $mapbmrname) }
            if ($PSCmdlet.ShouldProcess("$name", "Delete Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type mapdomain_mapbmr_binding -NitroPath nitro/v1/config -Resource $name -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteMapdomainmapbmrbinding: Finished"
    }
}

function Invoke-ADCGetMapdomainmapbmrbinding {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER name 
       Name for the MAP Domain. Must begin with an ASCII alphanumeric or underscore (_) character, and must contain only ASCII alphanumeric, underscore, hash (#), period (.), space, colon (:), at (@), equals (=), and hyphen (-) characters. Cannot be changed after the MAP Domain is created . 
    .PARAMETER GetAll 
        Retreive all mapdomain_mapbmr_binding object(s)
    .PARAMETER Count
        If specified, the count of the mapdomain_mapbmr_binding object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetMapdomainmapbmrbinding
    .EXAMPLE 
        Invoke-ADCGetMapdomainmapbmrbinding -GetAll 
    .EXAMPLE 
        Invoke-ADCGetMapdomainmapbmrbinding -Count
    .EXAMPLE
        Invoke-ADCGetMapdomainmapbmrbinding -name <string>
    .EXAMPLE
        Invoke-ADCGetMapdomainmapbmrbinding -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetMapdomainmapbmrbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/mapdomain_mapbmr_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidatePattern('^(([a-zA-Z0-9]|[_])+([a-zA-Z0-9]|[_])+)$')]
        [ValidateLength(1, 127)]
        [string]$name,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetMapdomainmapbmrbinding: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ 
                    bulkbindings = 'yes'
                }
                Write-Verbose "Retrieving all mapdomain_mapbmr_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type mapdomain_mapbmr_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for mapdomain_mapbmr_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type mapdomain_mapbmr_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving mapdomain_mapbmr_binding objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type mapdomain_mapbmr_binding -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving mapdomain_mapbmr_binding configuration for property 'name'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type mapdomain_mapbmr_binding -NitroPath nitro/v1/config -Resource $name -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving mapdomain_mapbmr_binding configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type mapdomain_mapbmr_binding -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetMapdomainmapbmrbinding: Ended"
    }
}

function Invoke-ADCAddNat64 {
<#
    .SYNOPSIS
        Add Network configuration Object
    .DESCRIPTION
        Add Network configuration Object 
    .PARAMETER name 
        Name for the NAT64 rule. Must begin with a letter, number, or the underscore character (_), and can consist of letters, numbers, and the hyphen (-), period (.) pound (#), space ( ), at sign (@), equals (=), colon (:), and underscore characters. Cannot be changed after the rule is created. Choose a name that helps identify the NAT64 rule.  
        Minimum length = 1 
    .PARAMETER acl6name 
        Name of any configured ACL6 whose action is ALLOW. IPv6 Packets matching the condition of this ACL6 rule and destination IP address of these packets matching the NAT64 IPv6 prefix are considered for NAT64 translation.  
        Minimum length = 1 
    .PARAMETER netprofile 
        Name of the configured netprofile. The Citrix ADC selects one of the IP address in the netprofile as the source IP address of the translated IPv4 packet to be sent to the IPv4 server.  
        Minimum length = 1  
        Maximum length = 127 
    .PARAMETER PassThru 
        Return details about the created nat64 item.
    .EXAMPLE
        Invoke-ADCAddNat64 -name <string> -acl6name <string>
    .NOTES
        File Name : Invoke-ADCAddNat64
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/nat64/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name ,

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$acl6name ,

        [ValidateLength(1, 127)]
        [string]$netprofile ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddNat64: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
                acl6name = $acl6name
            }
            if ($PSBoundParameters.ContainsKey('netprofile')) { $Payload.Add('netprofile', $netprofile) }
 
            if ($PSCmdlet.ShouldProcess("nat64", "Add Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -NitroPath nitro/v1/config -Type nat64 -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetNat64 -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddNat64: Finished"
    }
}

function Invoke-ADCUpdateNat64 {
<#
    .SYNOPSIS
        Update Network configuration Object
    .DESCRIPTION
        Update Network configuration Object 
    .PARAMETER name 
        Name for the NAT64 rule. Must begin with a letter, number, or the underscore character (_), and can consist of letters, numbers, and the hyphen (-), period (.) pound (#), space ( ), at sign (@), equals (=), colon (:), and underscore characters. Cannot be changed after the rule is created. Choose a name that helps identify the NAT64 rule.  
        Minimum length = 1 
    .PARAMETER acl6name 
        Name of any configured ACL6 whose action is ALLOW. IPv6 Packets matching the condition of this ACL6 rule and destination IP address of these packets matching the NAT64 IPv6 prefix are considered for NAT64 translation.  
        Minimum length = 1 
    .PARAMETER netprofile 
        Name of the configured netprofile. The Citrix ADC selects one of the IP address in the netprofile as the source IP address of the translated IPv4 packet to be sent to the IPv4 server.  
        Minimum length = 1  
        Maximum length = 127 
    .PARAMETER PassThru 
        Return details about the created nat64 item.
    .EXAMPLE
        Invoke-ADCUpdateNat64 -name <string>
    .NOTES
        File Name : Invoke-ADCUpdateNat64
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/nat64/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$acl6name ,

        [ValidateLength(1, 127)]
        [string]$netprofile ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCUpdateNat64: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
            }
            if ($PSBoundParameters.ContainsKey('acl6name')) { $Payload.Add('acl6name', $acl6name) }
            if ($PSBoundParameters.ContainsKey('netprofile')) { $Payload.Add('netprofile', $netprofile) }
 
            if ($PSCmdlet.ShouldProcess("nat64", "Update Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -NitroPath nitro/v1/config -Type nat64 -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetNat64 -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUpdateNat64: Finished"
    }
}

function Invoke-ADCUnsetNat64 {
<#
    .SYNOPSIS
        Unset Network configuration Object
    .DESCRIPTION
        Unset Network configuration Object 
   .PARAMETER name 
       Name for the NAT64 rule. Must begin with a letter, number, or the underscore character (_), and can consist of letters, numbers, and the hyphen (-), period (.) pound (#), space ( ), at sign (@), equals (=), colon (:), and underscore characters. Cannot be changed after the rule is created. Choose a name that helps identify the NAT64 rule. 
   .PARAMETER netprofile 
       Name of the configured netprofile. The Citrix ADC selects one of the IP address in the netprofile as the source IP address of the translated IPv4 packet to be sent to the IPv4 server.
    .EXAMPLE
        Invoke-ADCUnsetNat64 -name <string>
    .NOTES
        File Name : Invoke-ADCUnsetNat64
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/nat64
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name ,

        [Boolean]$netprofile 
    )
    begin {
        Write-Verbose "Invoke-ADCUnsetNat64: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
            }
            if ($PSBoundParameters.ContainsKey('netprofile')) { $Payload.Add('netprofile', $netprofile) }
            if ($PSCmdlet.ShouldProcess("$name", "Unset Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nat64 -NitroPath nitro/v1/config -Action unset -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUnsetNat64: Finished"
    }
}

function Invoke-ADCDeleteNat64 {
<#
    .SYNOPSIS
        Delete Network configuration Object
    .DESCRIPTION
        Delete Network configuration Object
    .PARAMETER name 
       Name for the NAT64 rule. Must begin with a letter, number, or the underscore character (_), and can consist of letters, numbers, and the hyphen (-), period (.) pound (#), space ( ), at sign (@), equals (=), colon (:), and underscore characters. Cannot be changed after the rule is created. Choose a name that helps identify the NAT64 rule.  
       Minimum length = 1 
    .EXAMPLE
        Invoke-ADCDeleteNat64 -name <string>
    .NOTES
        File Name : Invoke-ADCDeleteNat64
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/nat64/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$name 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteNat64: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }

            if ($PSCmdlet.ShouldProcess("$name", "Delete Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type nat64 -NitroPath nitro/v1/config -Resource $name -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteNat64: Finished"
    }
}

function Invoke-ADCGetNat64 {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER name 
       Name for the NAT64 rule. Must begin with a letter, number, or the underscore character (_), and can consist of letters, numbers, and the hyphen (-), period (.) pound (#), space ( ), at sign (@), equals (=), colon (:), and underscore characters. Cannot be changed after the rule is created. Choose a name that helps identify the NAT64 rule. 
    .PARAMETER GetAll 
        Retreive all nat64 object(s)
    .PARAMETER Count
        If specified, the count of the nat64 object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNat64
    .EXAMPLE 
        Invoke-ADCGetNat64 -GetAll 
    .EXAMPLE 
        Invoke-ADCGetNat64 -Count
    .EXAMPLE
        Invoke-ADCGetNat64 -name <string>
    .EXAMPLE
        Invoke-ADCGetNat64 -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNat64
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/nat64/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll,

        [Parameter(ParameterSetName = 'GetAll')]
        [Parameter(ParameterSetName = 'Get')]
        [Switch]$ViewSummary

    )
    begin {
        Write-Verbose "Invoke-ADCGetNat64: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all nat64 objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nat64 -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nat64 objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nat64 -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nat64 objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nat64 -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nat64 configuration for property 'name'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nat64 -NitroPath nitro/v1/config -Resource $name -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving nat64 configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nat64 -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNat64: Ended"
    }
}

function Invoke-ADCUpdateNat64param {
<#
    .SYNOPSIS
        Update Network configuration Object
    .DESCRIPTION
        Update Network configuration Object 
    .PARAMETER td 
        Integer value that uniquely identifies the traffic domain in which you want to configure the entity. If you do not specify an ID, the entity becomes part of the default traffic domain, which has an ID of 0.  
        Default value: 0  
        Minimum value = 0  
        Maximum value = 4094 
    .PARAMETER nat64ignoretos 
        Ignore TOS.  
        Default value: NO  
        Possible values = YES, NO 
    .PARAMETER nat64zerochecksum 
        Calculate checksum for UDP packets with zero checksum.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER nat64v6mtu 
        MTU setting for the IPv6 side. If the incoming IPv4 packet greater than this, either fragment or send icmp need fragmentation error.  
        Default value: 1280  
        Minimum value = 1280  
        Maximum value = 9216 
    .PARAMETER nat64fragheader 
        When disabled, translator will not insert IPv6 fragmentation header for non fragmented IPv4 packets.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER PassThru 
        Return details about the created nat64param item.
    .EXAMPLE
        Invoke-ADCUpdateNat64param 
    .NOTES
        File Name : Invoke-ADCUpdateNat64param
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/nat64param/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [ValidateRange(0, 4094)]
        [double]$td ,

        [ValidateSet('YES', 'NO')]
        [string]$nat64ignoretos ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$nat64zerochecksum ,

        [ValidateRange(1280, 9216)]
        [double]$nat64v6mtu ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$nat64fragheader ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCUpdateNat64param: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('td')) { $Payload.Add('td', $td) }
            if ($PSBoundParameters.ContainsKey('nat64ignoretos')) { $Payload.Add('nat64ignoretos', $nat64ignoretos) }
            if ($PSBoundParameters.ContainsKey('nat64zerochecksum')) { $Payload.Add('nat64zerochecksum', $nat64zerochecksum) }
            if ($PSBoundParameters.ContainsKey('nat64v6mtu')) { $Payload.Add('nat64v6mtu', $nat64v6mtu) }
            if ($PSBoundParameters.ContainsKey('nat64fragheader')) { $Payload.Add('nat64fragheader', $nat64fragheader) }
 
            if ($PSCmdlet.ShouldProcess("nat64param", "Update Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -NitroPath nitro/v1/config -Type nat64param -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetNat64param -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUpdateNat64param: Finished"
    }
}

function Invoke-ADCUnsetNat64param {
<#
    .SYNOPSIS
        Unset Network configuration Object
    .DESCRIPTION
        Unset Network configuration Object 
   .PARAMETER td 
       Integer value that uniquely identifies the traffic domain in which you want to configure the entity. If you do not specify an ID, the entity becomes part of the default traffic domain, which has an ID of 0. 
   .PARAMETER nat64ignoretos 
       Ignore TOS.  
       Possible values = YES, NO 
   .PARAMETER nat64zerochecksum 
       Calculate checksum for UDP packets with zero checksum.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER nat64v6mtu 
       MTU setting for the IPv6 side. If the incoming IPv4 packet greater than this, either fragment or send icmp need fragmentation error. 
   .PARAMETER nat64fragheader 
       When disabled, translator will not insert IPv6 fragmentation header for non fragmented IPv4 packets.  
       Possible values = ENABLED, DISABLED
    .EXAMPLE
        Invoke-ADCUnsetNat64param 
    .NOTES
        File Name : Invoke-ADCUnsetNat64param
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/nat64param
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Boolean]$td ,

        [Boolean]$nat64ignoretos ,

        [Boolean]$nat64zerochecksum ,

        [Boolean]$nat64v6mtu ,

        [Boolean]$nat64fragheader 
    )
    begin {
        Write-Verbose "Invoke-ADCUnsetNat64param: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('td')) { $Payload.Add('td', $td) }
            if ($PSBoundParameters.ContainsKey('nat64ignoretos')) { $Payload.Add('nat64ignoretos', $nat64ignoretos) }
            if ($PSBoundParameters.ContainsKey('nat64zerochecksum')) { $Payload.Add('nat64zerochecksum', $nat64zerochecksum) }
            if ($PSBoundParameters.ContainsKey('nat64v6mtu')) { $Payload.Add('nat64v6mtu', $nat64v6mtu) }
            if ($PSBoundParameters.ContainsKey('nat64fragheader')) { $Payload.Add('nat64fragheader', $nat64fragheader) }
            if ($PSCmdlet.ShouldProcess("nat64param", "Unset Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nat64param -NitroPath nitro/v1/config -Action unset -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUnsetNat64param: Finished"
    }
}

function Invoke-ADCGetNat64param {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER td 
       Integer value that uniquely identifies the traffic domain in which you want to configure the entity. If you do not specify an ID, the entity becomes part of the default traffic domain, which has an ID of 0. 
    .PARAMETER GetAll 
        Retreive all nat64param object(s)
    .PARAMETER Count
        If specified, the count of the nat64param object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNat64param
    .EXAMPLE 
        Invoke-ADCGetNat64param -GetAll 
    .EXAMPLE 
        Invoke-ADCGetNat64param -Count
    .EXAMPLE
        Invoke-ADCGetNat64param -name <string>
    .EXAMPLE
        Invoke-ADCGetNat64param -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNat64param
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/nat64param/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateRange(0, 4094)]
        [double]$td,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll,

        [Parameter(ParameterSetName = 'GetAll')]
        [Parameter(ParameterSetName = 'Get')]
        [Switch]$ViewSummary

    )
    begin {
        Write-Verbose "Invoke-ADCGetNat64param: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all nat64param objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nat64param -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nat64param objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nat64param -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nat64param objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nat64param -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nat64param configuration for property 'td'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nat64param -NitroPath nitro/v1/config -Resource $td -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving nat64param configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nat64param -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNat64param: Ended"
    }
}

function Invoke-ADCAddNd6 {
<#
    .SYNOPSIS
        Add Network configuration Object
    .DESCRIPTION
        Add Network configuration Object 
    .PARAMETER neighbor 
        Link-local IPv6 address of the adjacent network device to add to the ND6 table. 
    .PARAMETER mac 
        MAC address of the adjacent network device. 
    .PARAMETER ifnum 
        Interface through which the adjacent network device is available, specified in slot/port notation (for example, 1/3). Use spaces to separate multiple entries. 
    .PARAMETER vlan 
        Integer value that uniquely identifies the VLAN on which the adjacent network device exists.  
        Minimum value = 1  
        Maximum value = 4094 
    .PARAMETER vxlan 
        ID of the VXLAN on which the IPv6 address of this ND6 entry is reachable.  
        Minimum value = 1  
        Maximum value = 16777215 
    .PARAMETER vtep 
        IP address of the VXLAN tunnel endpoint (VTEP) through which the IPv6 address of this ND6 entry is reachable.  
        Minimum length = 1 
    .PARAMETER td 
        Integer value that uniquely identifies the traffic domain in which you want to configure the entity. If you do not specify an ID, the entity becomes part of the default traffic domain, which has an ID of 0.  
        Minimum value = 0  
        Maximum value = 4094
    .EXAMPLE
        Invoke-ADCAddNd6 -neighbor <string> -mac <string>
    .NOTES
        File Name : Invoke-ADCAddNd6
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/nd6/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$neighbor ,

        [Parameter(Mandatory = $true)]
        [string]$mac ,

        [string]$ifnum ,

        [ValidateRange(1, 4094)]
        [int]$vlan ,

        [ValidateRange(1, 16777215)]
        [double]$vxlan ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$vtep ,

        [ValidateRange(0, 4094)]
        [double]$td 

    )
    begin {
        Write-Verbose "Invoke-ADCAddNd6: Starting"
    }
    process {
        try {
            $Payload = @{
                neighbor = $neighbor
                mac = $mac
            }
            if ($PSBoundParameters.ContainsKey('ifnum')) { $Payload.Add('ifnum', $ifnum) }
            if ($PSBoundParameters.ContainsKey('vlan')) { $Payload.Add('vlan', $vlan) }
            if ($PSBoundParameters.ContainsKey('vxlan')) { $Payload.Add('vxlan', $vxlan) }
            if ($PSBoundParameters.ContainsKey('vtep')) { $Payload.Add('vtep', $vtep) }
            if ($PSBoundParameters.ContainsKey('td')) { $Payload.Add('td', $td) }
 
            if ($PSCmdlet.ShouldProcess("nd6", "Add Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -NitroPath nitro/v1/config -Type nd6 -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
            Write-Output $result

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddNd6: Finished"
    }
}

function Invoke-ADCClearNd6 {
<#
    .SYNOPSIS
        Clear Network configuration Object
    .DESCRIPTION
        Clear Network configuration Object 
    .EXAMPLE
        Invoke-ADCClearNd6 
    .NOTES
        File Name : Invoke-ADCClearNd6
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/nd6/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession) 

    )
    begin {
        Write-Verbose "Invoke-ADCClearNd6: Starting"
    }
    process {
        try {
            $Payload = @{

            }

            if ($PSCmdlet.ShouldProcess($Name, "Clear Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -NitroPath nitro/v1/config -Type nd6 -Action clear -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $result
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCClearNd6: Finished"
    }
}

function Invoke-ADCDeleteNd6 {
<#
    .SYNOPSIS
        Delete Network configuration Object
    .DESCRIPTION
        Delete Network configuration Object
    .PARAMETER neighbor 
       Link-local IPv6 address of the adjacent network device to add to the ND6 table.    .PARAMETER vlan 
       Integer value that uniquely identifies the VLAN on which the adjacent network device exists.  
       Minimum value = 1  
       Maximum value = 4094    .PARAMETER vxlan 
       ID of the VXLAN on which the IPv6 address of this ND6 entry is reachable.  
       Minimum value = 1  
       Maximum value = 16777215    .PARAMETER td 
       Integer value that uniquely identifies the traffic domain in which you want to configure the entity. If you do not specify an ID, the entity becomes part of the default traffic domain, which has an ID of 0.  
       Minimum value = 0  
       Maximum value = 4094
    .EXAMPLE
        Invoke-ADCDeleteNd6 -neighbor <string>
    .NOTES
        File Name : Invoke-ADCDeleteNd6
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/nd6/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$neighbor ,

        [int]$vlan ,

        [double]$vxlan ,

        [double]$td 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteNd6: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }
            if ($PSBoundParameters.ContainsKey('vlan')) { $Arguments.Add('vlan', $vlan) }
            if ($PSBoundParameters.ContainsKey('vxlan')) { $Arguments.Add('vxlan', $vxlan) }
            if ($PSBoundParameters.ContainsKey('td')) { $Arguments.Add('td', $td) }
            if ($PSCmdlet.ShouldProcess("$neighbor", "Delete Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type nd6 -NitroPath nitro/v1/config -Resource $neighbor -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteNd6: Finished"
    }
}

function Invoke-ADCGetNd6 {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER neighbor 
       Link-local IPv6 address of the adjacent network device to add to the ND6 table. 
    .PARAMETER td 
       Integer value that uniquely identifies the traffic domain in which you want to configure the entity. If you do not specify an ID, the entity becomes part of the default traffic domain, which has an ID of 0. 
    .PARAMETER nodeid 
       Unique number that identifies the cluster node. 
    .PARAMETER GetAll 
        Retreive all nd6 object(s)
    .PARAMETER Count
        If specified, the count of the nd6 object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNd6
    .EXAMPLE 
        Invoke-ADCGetNd6 -GetAll 
    .EXAMPLE 
        Invoke-ADCGetNd6 -Count
    .EXAMPLE
        Invoke-ADCGetNd6 -name <string>
    .EXAMPLE
        Invoke-ADCGetNd6 -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNd6
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/nd6/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByArgument')]
        [string]$neighbor ,

        [Parameter(ParameterSetName = 'GetByArgument')]
        [ValidateRange(0, 4094)]
        [double]$td ,

        [Parameter(ParameterSetName = 'GetByArgument')]
        [ValidateRange(0, 31)]
        [double]$nodeid,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll,

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$ViewSummary

    )
    begin {
        Write-Verbose "Invoke-ADCGetNd6: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all nd6 objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nd6 -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nd6 objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nd6 -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nd6 objects by arguments"
                $Arguments = @{ } 
                if ($PSBoundParameters.ContainsKey('neighbor')) { $Arguments.Add('neighbor', $neighbor) } 
                if ($PSBoundParameters.ContainsKey('td')) { $Arguments.Add('td', $td) } 
                if ($PSBoundParameters.ContainsKey('nodeid')) { $Arguments.Add('nodeid', $nodeid) }
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nd6 -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nd6 configuration for property ''"

            } else {
                Write-Verbose "Retrieving nd6 configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nd6 -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNd6: Ended"
    }
}

function Invoke-ADCUpdateNd6ravariables {
<#
    .SYNOPSIS
        Update Network configuration Object
    .DESCRIPTION
        Update Network configuration Object 
    .PARAMETER vlan 
        The VLAN number.  
        Minimum value = 1  
        Maximum value = 4094 
    .PARAMETER ceaserouteradv 
        Cease router advertisements on this vlan.  
        Default value: NO  
        Possible values = YES, NO 
    .PARAMETER sendrouteradv 
        whether the router sends periodic RAs and responds to Router Solicitations.  
        Default value: NO  
        Possible values = YES, NO 
    .PARAMETER srclinklayeraddroption 
        Include source link layer address option in RA messages.  
        Default value: YES  
        Possible values = YES, NO 
    .PARAMETER onlyunicastrtadvresponse 
        Send only Unicast Router Advertisements in respond to Router Solicitations.  
        Default value: NO  
        Possible values = YES, NO 
    .PARAMETER managedaddrconfig 
        Value to be placed in the Managed address configuration flag field.  
        Default value: NO  
        Possible values = YES, NO 
    .PARAMETER otheraddrconfig 
        Value to be placed in the Other configuration flag field.  
        Default value: NO  
        Possible values = YES, NO 
    .PARAMETER currhoplimit 
        Current Hop limit.  
        Default value: 64  
        Minimum value = 0  
        Maximum value = 255 
    .PARAMETER maxrtadvinterval 
        Maximum time allowed between unsolicited multicast RAs, in seconds.  
        Default value: 600  
        Minimum value = 4  
        Maximum value = 1800 
    .PARAMETER minrtadvinterval 
        Minimum time interval between RA messages, in seconds.  
        Default value: 198  
        Minimum value = 3  
        Maximum value = 1350 
    .PARAMETER linkmtu 
        The Link MTU.  
        Default value: 0  
        Minimum value = 0  
        Maximum value = 1500 
    .PARAMETER reachabletime 
        Reachable time, in milliseconds.  
        Default value: 0  
        Minimum value = 0  
        Maximum value = 3600000 
    .PARAMETER retranstime 
        Retransmission time, in milliseconds.  
        Default value: 0 
    .PARAMETER defaultlifetime 
        Default life time, in seconds.  
        Default value: 1800  
        Minimum value = 0  
        Maximum value = 9000 
    .PARAMETER PassThru 
        Return details about the created nd6ravariables item.
    .EXAMPLE
        Invoke-ADCUpdateNd6ravariables -vlan <double>
    .NOTES
        File Name : Invoke-ADCUpdateNd6ravariables
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/nd6ravariables/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateRange(1, 4094)]
        [double]$vlan ,

        [ValidateSet('YES', 'NO')]
        [string]$ceaserouteradv ,

        [ValidateSet('YES', 'NO')]
        [string]$sendrouteradv ,

        [ValidateSet('YES', 'NO')]
        [string]$srclinklayeraddroption ,

        [ValidateSet('YES', 'NO')]
        [string]$onlyunicastrtadvresponse ,

        [ValidateSet('YES', 'NO')]
        [string]$managedaddrconfig ,

        [ValidateSet('YES', 'NO')]
        [string]$otheraddrconfig ,

        [ValidateRange(0, 255)]
        [double]$currhoplimit ,

        [ValidateRange(4, 1800)]
        [double]$maxrtadvinterval ,

        [ValidateRange(3, 1350)]
        [double]$minrtadvinterval ,

        [ValidateRange(0, 1500)]
        [double]$linkmtu ,

        [ValidateRange(0, 3600000)]
        [double]$reachabletime ,

        [double]$retranstime ,

        [ValidateRange(0, 9000)]
        [int]$defaultlifetime ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCUpdateNd6ravariables: Starting"
    }
    process {
        try {
            $Payload = @{
                vlan = $vlan
            }
            if ($PSBoundParameters.ContainsKey('ceaserouteradv')) { $Payload.Add('ceaserouteradv', $ceaserouteradv) }
            if ($PSBoundParameters.ContainsKey('sendrouteradv')) { $Payload.Add('sendrouteradv', $sendrouteradv) }
            if ($PSBoundParameters.ContainsKey('srclinklayeraddroption')) { $Payload.Add('srclinklayeraddroption', $srclinklayeraddroption) }
            if ($PSBoundParameters.ContainsKey('onlyunicastrtadvresponse')) { $Payload.Add('onlyunicastrtadvresponse', $onlyunicastrtadvresponse) }
            if ($PSBoundParameters.ContainsKey('managedaddrconfig')) { $Payload.Add('managedaddrconfig', $managedaddrconfig) }
            if ($PSBoundParameters.ContainsKey('otheraddrconfig')) { $Payload.Add('otheraddrconfig', $otheraddrconfig) }
            if ($PSBoundParameters.ContainsKey('currhoplimit')) { $Payload.Add('currhoplimit', $currhoplimit) }
            if ($PSBoundParameters.ContainsKey('maxrtadvinterval')) { $Payload.Add('maxrtadvinterval', $maxrtadvinterval) }
            if ($PSBoundParameters.ContainsKey('minrtadvinterval')) { $Payload.Add('minrtadvinterval', $minrtadvinterval) }
            if ($PSBoundParameters.ContainsKey('linkmtu')) { $Payload.Add('linkmtu', $linkmtu) }
            if ($PSBoundParameters.ContainsKey('reachabletime')) { $Payload.Add('reachabletime', $reachabletime) }
            if ($PSBoundParameters.ContainsKey('retranstime')) { $Payload.Add('retranstime', $retranstime) }
            if ($PSBoundParameters.ContainsKey('defaultlifetime')) { $Payload.Add('defaultlifetime', $defaultlifetime) }
 
            if ($PSCmdlet.ShouldProcess("nd6ravariables", "Update Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -NitroPath nitro/v1/config -Type nd6ravariables -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetNd6ravariables -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUpdateNd6ravariables: Finished"
    }
}

function Invoke-ADCUnsetNd6ravariables {
<#
    .SYNOPSIS
        Unset Network configuration Object
    .DESCRIPTION
        Unset Network configuration Object 
   .PARAMETER vlan 
       The VLAN number. 
   .PARAMETER ceaserouteradv 
       Cease router advertisements on this vlan.  
       Possible values = YES, NO 
   .PARAMETER sendrouteradv 
       whether the router sends periodic RAs and responds to Router Solicitations.  
       Possible values = YES, NO 
   .PARAMETER srclinklayeraddroption 
       Include source link layer address option in RA messages.  
       Possible values = YES, NO 
   .PARAMETER onlyunicastrtadvresponse 
       Send only Unicast Router Advertisements in respond to Router Solicitations.  
       Possible values = YES, NO 
   .PARAMETER managedaddrconfig 
       Value to be placed in the Managed address configuration flag field.  
       Possible values = YES, NO 
   .PARAMETER otheraddrconfig 
       Value to be placed in the Other configuration flag field.  
       Possible values = YES, NO 
   .PARAMETER currhoplimit 
       Current Hop limit. 
   .PARAMETER maxrtadvinterval 
       Maximum time allowed between unsolicited multicast RAs, in seconds. 
   .PARAMETER minrtadvinterval 
       Minimum time interval between RA messages, in seconds. 
   .PARAMETER linkmtu 
       The Link MTU. 
   .PARAMETER reachabletime 
       Reachable time, in milliseconds. 
   .PARAMETER retranstime 
       Retransmission time, in milliseconds. 
   .PARAMETER defaultlifetime 
       Default life time, in seconds.
    .EXAMPLE
        Invoke-ADCUnsetNd6ravariables -vlan <double>
    .NOTES
        File Name : Invoke-ADCUnsetNd6ravariables
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/nd6ravariables
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateRange(1, 4094)]
        [double]$vlan ,

        [Boolean]$ceaserouteradv ,

        [Boolean]$sendrouteradv ,

        [Boolean]$srclinklayeraddroption ,

        [Boolean]$onlyunicastrtadvresponse ,

        [Boolean]$managedaddrconfig ,

        [Boolean]$otheraddrconfig ,

        [Boolean]$currhoplimit ,

        [Boolean]$maxrtadvinterval ,

        [Boolean]$minrtadvinterval ,

        [Boolean]$linkmtu ,

        [Boolean]$reachabletime ,

        [Boolean]$retranstime ,

        [Boolean]$defaultlifetime 
    )
    begin {
        Write-Verbose "Invoke-ADCUnsetNd6ravariables: Starting"
    }
    process {
        try {
            $Payload = @{
                vlan = $vlan
            }
            if ($PSBoundParameters.ContainsKey('ceaserouteradv')) { $Payload.Add('ceaserouteradv', $ceaserouteradv) }
            if ($PSBoundParameters.ContainsKey('sendrouteradv')) { $Payload.Add('sendrouteradv', $sendrouteradv) }
            if ($PSBoundParameters.ContainsKey('srclinklayeraddroption')) { $Payload.Add('srclinklayeraddroption', $srclinklayeraddroption) }
            if ($PSBoundParameters.ContainsKey('onlyunicastrtadvresponse')) { $Payload.Add('onlyunicastrtadvresponse', $onlyunicastrtadvresponse) }
            if ($PSBoundParameters.ContainsKey('managedaddrconfig')) { $Payload.Add('managedaddrconfig', $managedaddrconfig) }
            if ($PSBoundParameters.ContainsKey('otheraddrconfig')) { $Payload.Add('otheraddrconfig', $otheraddrconfig) }
            if ($PSBoundParameters.ContainsKey('currhoplimit')) { $Payload.Add('currhoplimit', $currhoplimit) }
            if ($PSBoundParameters.ContainsKey('maxrtadvinterval')) { $Payload.Add('maxrtadvinterval', $maxrtadvinterval) }
            if ($PSBoundParameters.ContainsKey('minrtadvinterval')) { $Payload.Add('minrtadvinterval', $minrtadvinterval) }
            if ($PSBoundParameters.ContainsKey('linkmtu')) { $Payload.Add('linkmtu', $linkmtu) }
            if ($PSBoundParameters.ContainsKey('reachabletime')) { $Payload.Add('reachabletime', $reachabletime) }
            if ($PSBoundParameters.ContainsKey('retranstime')) { $Payload.Add('retranstime', $retranstime) }
            if ($PSBoundParameters.ContainsKey('defaultlifetime')) { $Payload.Add('defaultlifetime', $defaultlifetime) }
            if ($PSCmdlet.ShouldProcess("$vlan", "Unset Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nd6ravariables -NitroPath nitro/v1/config -Action unset -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUnsetNd6ravariables: Finished"
    }
}

function Invoke-ADCGetNd6ravariables {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER vlan 
       The VLAN number. 
    .PARAMETER GetAll 
        Retreive all nd6ravariables object(s)
    .PARAMETER Count
        If specified, the count of the nd6ravariables object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNd6ravariables
    .EXAMPLE 
        Invoke-ADCGetNd6ravariables -GetAll 
    .EXAMPLE 
        Invoke-ADCGetNd6ravariables -Count
    .EXAMPLE
        Invoke-ADCGetNd6ravariables -name <string>
    .EXAMPLE
        Invoke-ADCGetNd6ravariables -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNd6ravariables
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/nd6ravariables/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateRange(1, 4094)]
        [double]$vlan,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll,

        [Parameter(ParameterSetName = 'GetAll')]
        [Parameter(ParameterSetName = 'Get')]
        [Switch]$ViewSummary

    )
    begin {
        Write-Verbose "Invoke-ADCGetNd6ravariables: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all nd6ravariables objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nd6ravariables -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nd6ravariables objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nd6ravariables -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nd6ravariables objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nd6ravariables -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nd6ravariables configuration for property 'vlan'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nd6ravariables -NitroPath nitro/v1/config -Resource $vlan -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving nd6ravariables configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nd6ravariables -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNd6ravariables: Ended"
    }
}

function Invoke-ADCGetNd6ravariablesbinding {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER vlan 
       The VLAN number. 
    .PARAMETER GetAll 
        Retreive all nd6ravariables_binding object(s)
    .PARAMETER Count
        If specified, the count of the nd6ravariables_binding object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNd6ravariablesbinding
    .EXAMPLE 
        Invoke-ADCGetNd6ravariablesbinding -GetAll
    .EXAMPLE
        Invoke-ADCGetNd6ravariablesbinding -name <string>
    .EXAMPLE
        Invoke-ADCGetNd6ravariablesbinding -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNd6ravariablesbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/nd6ravariables_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateRange(1, 4094)]
        [double]$vlan,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetNd6ravariablesbinding: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ 
                    bulkbindings = 'yes'
                }
                Write-Verbose "Retrieving all nd6ravariables_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nd6ravariables_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nd6ravariables_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nd6ravariables_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nd6ravariables_binding objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nd6ravariables_binding -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nd6ravariables_binding configuration for property 'vlan'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nd6ravariables_binding -NitroPath nitro/v1/config -Resource $vlan -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving nd6ravariables_binding configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nd6ravariables_binding -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNd6ravariablesbinding: Ended"
    }
}

function Invoke-ADCAddNd6ravariablesonlinkipv6prefixbinding {
<#
    .SYNOPSIS
        Add Network configuration Object
    .DESCRIPTION
        Add Network configuration Object 
    .PARAMETER vlan 
        The VLAN number.  
        Minimum value = 1  
        Maximum value = 4094 
    .PARAMETER ipv6prefix 
        Onlink prefixes for RA messages. 
    .PARAMETER PassThru 
        Return details about the created nd6ravariables_onlinkipv6prefix_binding item.
    .EXAMPLE
        Invoke-ADCAddNd6ravariablesonlinkipv6prefixbinding -vlan <double> -ipv6prefix <string>
    .NOTES
        File Name : Invoke-ADCAddNd6ravariablesonlinkipv6prefixbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/nd6ravariables_onlinkipv6prefix_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateRange(1, 4094)]
        [double]$vlan ,

        [Parameter(Mandatory = $true)]
        [string]$ipv6prefix ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddNd6ravariablesonlinkipv6prefixbinding: Starting"
    }
    process {
        try {
            $Payload = @{
                vlan = $vlan
                ipv6prefix = $ipv6prefix
            }

 
            if ($PSCmdlet.ShouldProcess("nd6ravariables_onlinkipv6prefix_binding", "Add Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -NitroPath nitro/v1/config -Type nd6ravariables_onlinkipv6prefix_binding -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetNd6ravariablesonlinkipv6prefixbinding -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddNd6ravariablesonlinkipv6prefixbinding: Finished"
    }
}

function Invoke-ADCDeleteNd6ravariablesonlinkipv6prefixbinding {
<#
    .SYNOPSIS
        Delete Network configuration Object
    .DESCRIPTION
        Delete Network configuration Object
    .PARAMETER vlan 
       The VLAN number.  
       Minimum value = 1  
       Maximum value = 4094    .PARAMETER ipv6prefix 
       Onlink prefixes for RA messages.
    .EXAMPLE
        Invoke-ADCDeleteNd6ravariablesonlinkipv6prefixbinding -vlan <double>
    .NOTES
        File Name : Invoke-ADCDeleteNd6ravariablesonlinkipv6prefixbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/nd6ravariables_onlinkipv6prefix_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [double]$vlan ,

        [string]$ipv6prefix 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteNd6ravariablesonlinkipv6prefixbinding: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }
            if ($PSBoundParameters.ContainsKey('ipv6prefix')) { $Arguments.Add('ipv6prefix', $ipv6prefix) }
            if ($PSCmdlet.ShouldProcess("$vlan", "Delete Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type nd6ravariables_onlinkipv6prefix_binding -NitroPath nitro/v1/config -Resource $vlan -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteNd6ravariablesonlinkipv6prefixbinding: Finished"
    }
}

function Invoke-ADCGetNd6ravariablesonlinkipv6prefixbinding {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER vlan 
       The VLAN number. 
    .PARAMETER GetAll 
        Retreive all nd6ravariables_onlinkipv6prefix_binding object(s)
    .PARAMETER Count
        If specified, the count of the nd6ravariables_onlinkipv6prefix_binding object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNd6ravariablesonlinkipv6prefixbinding
    .EXAMPLE 
        Invoke-ADCGetNd6ravariablesonlinkipv6prefixbinding -GetAll 
    .EXAMPLE 
        Invoke-ADCGetNd6ravariablesonlinkipv6prefixbinding -Count
    .EXAMPLE
        Invoke-ADCGetNd6ravariablesonlinkipv6prefixbinding -name <string>
    .EXAMPLE
        Invoke-ADCGetNd6ravariablesonlinkipv6prefixbinding -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNd6ravariablesonlinkipv6prefixbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/nd6ravariables_onlinkipv6prefix_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateRange(1, 4094)]
        [double]$vlan,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetNd6ravariablesonlinkipv6prefixbinding: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ 
                    bulkbindings = 'yes'
                }
                Write-Verbose "Retrieving all nd6ravariables_onlinkipv6prefix_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nd6ravariables_onlinkipv6prefix_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nd6ravariables_onlinkipv6prefix_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nd6ravariables_onlinkipv6prefix_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nd6ravariables_onlinkipv6prefix_binding objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nd6ravariables_onlinkipv6prefix_binding -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nd6ravariables_onlinkipv6prefix_binding configuration for property 'vlan'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nd6ravariables_onlinkipv6prefix_binding -NitroPath nitro/v1/config -Resource $vlan -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving nd6ravariables_onlinkipv6prefix_binding configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nd6ravariables_onlinkipv6prefix_binding -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNd6ravariablesonlinkipv6prefixbinding: Ended"
    }
}

function Invoke-ADCAddNetbridge {
<#
    .SYNOPSIS
        Add Network configuration Object
    .DESCRIPTION
        Add Network configuration Object 
    .PARAMETER name 
        The name of the network bridge. 
    .PARAMETER vxlanvlanmap 
        The vlan to vxlan mapping to be applied to this netbridge. 
    .PARAMETER PassThru 
        Return details about the created netbridge item.
    .EXAMPLE
        Invoke-ADCAddNetbridge -name <string>
    .NOTES
        File Name : Invoke-ADCAddNetbridge
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/netbridge/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$name ,

        [string]$vxlanvlanmap ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddNetbridge: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
            }
            if ($PSBoundParameters.ContainsKey('vxlanvlanmap')) { $Payload.Add('vxlanvlanmap', $vxlanvlanmap) }
 
            if ($PSCmdlet.ShouldProcess("netbridge", "Add Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -NitroPath nitro/v1/config -Type netbridge -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetNetbridge -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddNetbridge: Finished"
    }
}

function Invoke-ADCUpdateNetbridge {
<#
    .SYNOPSIS
        Update Network configuration Object
    .DESCRIPTION
        Update Network configuration Object 
    .PARAMETER name 
        The name of the network bridge. 
    .PARAMETER vxlanvlanmap 
        The vlan to vxlan mapping to be applied to this netbridge. 
    .PARAMETER PassThru 
        Return details about the created netbridge item.
    .EXAMPLE
        Invoke-ADCUpdateNetbridge -name <string>
    .NOTES
        File Name : Invoke-ADCUpdateNetbridge
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/netbridge/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$name ,

        [string]$vxlanvlanmap ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCUpdateNetbridge: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
            }
            if ($PSBoundParameters.ContainsKey('vxlanvlanmap')) { $Payload.Add('vxlanvlanmap', $vxlanvlanmap) }
 
            if ($PSCmdlet.ShouldProcess("netbridge", "Update Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -NitroPath nitro/v1/config -Type netbridge -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetNetbridge -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUpdateNetbridge: Finished"
    }
}

function Invoke-ADCUnsetNetbridge {
<#
    .SYNOPSIS
        Unset Network configuration Object
    .DESCRIPTION
        Unset Network configuration Object 
   .PARAMETER name 
       The name of the network bridge. 
   .PARAMETER vxlanvlanmap 
       The vlan to vxlan mapping to be applied to this netbridge.
    .EXAMPLE
        Invoke-ADCUnsetNetbridge -name <string>
    .NOTES
        File Name : Invoke-ADCUnsetNetbridge
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/netbridge
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$name ,

        [Boolean]$vxlanvlanmap 
    )
    begin {
        Write-Verbose "Invoke-ADCUnsetNetbridge: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
            }
            if ($PSBoundParameters.ContainsKey('vxlanvlanmap')) { $Payload.Add('vxlanvlanmap', $vxlanvlanmap) }
            if ($PSCmdlet.ShouldProcess("$name", "Unset Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type netbridge -NitroPath nitro/v1/config -Action unset -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUnsetNetbridge: Finished"
    }
}

function Invoke-ADCDeleteNetbridge {
<#
    .SYNOPSIS
        Delete Network configuration Object
    .DESCRIPTION
        Delete Network configuration Object
    .PARAMETER name 
       The name of the network bridge. 
    .EXAMPLE
        Invoke-ADCDeleteNetbridge -name <string>
    .NOTES
        File Name : Invoke-ADCDeleteNetbridge
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/netbridge/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$name 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteNetbridge: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }

            if ($PSCmdlet.ShouldProcess("$name", "Delete Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type netbridge -NitroPath nitro/v1/config -Resource $name -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteNetbridge: Finished"
    }
}

function Invoke-ADCGetNetbridge {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER name 
       The name of the network bridge. 
    .PARAMETER GetAll 
        Retreive all netbridge object(s)
    .PARAMETER Count
        If specified, the count of the netbridge object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNetbridge
    .EXAMPLE 
        Invoke-ADCGetNetbridge -GetAll 
    .EXAMPLE 
        Invoke-ADCGetNetbridge -Count
    .EXAMPLE
        Invoke-ADCGetNetbridge -name <string>
    .EXAMPLE
        Invoke-ADCGetNetbridge -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNetbridge
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/netbridge/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [string]$name,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll,

        [Parameter(ParameterSetName = 'GetAll')]
        [Parameter(ParameterSetName = 'Get')]
        [Switch]$ViewSummary

    )
    begin {
        Write-Verbose "Invoke-ADCGetNetbridge: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all netbridge objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type netbridge -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for netbridge objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type netbridge -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving netbridge objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type netbridge -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving netbridge configuration for property 'name'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type netbridge -NitroPath nitro/v1/config -Resource $name -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving netbridge configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type netbridge -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNetbridge: Ended"
    }
}

function Invoke-ADCGetNetbridgebinding {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER name 
       The name of the network bridge. 
    .PARAMETER GetAll 
        Retreive all netbridge_binding object(s)
    .PARAMETER Count
        If specified, the count of the netbridge_binding object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNetbridgebinding
    .EXAMPLE 
        Invoke-ADCGetNetbridgebinding -GetAll
    .EXAMPLE
        Invoke-ADCGetNetbridgebinding -name <string>
    .EXAMPLE
        Invoke-ADCGetNetbridgebinding -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNetbridgebinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/netbridge_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [string]$name,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetNetbridgebinding: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ 
                    bulkbindings = 'yes'
                }
                Write-Verbose "Retrieving all netbridge_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type netbridge_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for netbridge_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type netbridge_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving netbridge_binding objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type netbridge_binding -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving netbridge_binding configuration for property 'name'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type netbridge_binding -NitroPath nitro/v1/config -Resource $name -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving netbridge_binding configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type netbridge_binding -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNetbridgebinding: Ended"
    }
}

function Invoke-ADCAddNetbridgeiptunnelbinding {
<#
    .SYNOPSIS
        Add Network configuration Object
    .DESCRIPTION
        Add Network configuration Object 
    .PARAMETER name 
        The name of the network bridge. 
    .PARAMETER tunnel 
        The name of the tunnel that is a part of this bridge. 
    .PARAMETER PassThru 
        Return details about the created netbridge_iptunnel_binding item.
    .EXAMPLE
        Invoke-ADCAddNetbridgeiptunnelbinding -name <string>
    .NOTES
        File Name : Invoke-ADCAddNetbridgeiptunnelbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/netbridge_iptunnel_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$name ,

        [string]$tunnel ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddNetbridgeiptunnelbinding: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
            }
            if ($PSBoundParameters.ContainsKey('tunnel')) { $Payload.Add('tunnel', $tunnel) }
 
            if ($PSCmdlet.ShouldProcess("netbridge_iptunnel_binding", "Add Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -NitroPath nitro/v1/config -Type netbridge_iptunnel_binding -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetNetbridgeiptunnelbinding -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddNetbridgeiptunnelbinding: Finished"
    }
}

function Invoke-ADCDeleteNetbridgeiptunnelbinding {
<#
    .SYNOPSIS
        Delete Network configuration Object
    .DESCRIPTION
        Delete Network configuration Object
    .PARAMETER name 
       The name of the network bridge.    .PARAMETER tunnel 
       The name of the tunnel that is a part of this bridge.
    .EXAMPLE
        Invoke-ADCDeleteNetbridgeiptunnelbinding -name <string>
    .NOTES
        File Name : Invoke-ADCDeleteNetbridgeiptunnelbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/netbridge_iptunnel_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$name ,

        [string]$tunnel 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteNetbridgeiptunnelbinding: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }
            if ($PSBoundParameters.ContainsKey('tunnel')) { $Arguments.Add('tunnel', $tunnel) }
            if ($PSCmdlet.ShouldProcess("$name", "Delete Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type netbridge_iptunnel_binding -NitroPath nitro/v1/config -Resource $name -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteNetbridgeiptunnelbinding: Finished"
    }
}

function Invoke-ADCGetNetbridgeiptunnelbinding {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER name 
       The name of the network bridge. 
    .PARAMETER GetAll 
        Retreive all netbridge_iptunnel_binding object(s)
    .PARAMETER Count
        If specified, the count of the netbridge_iptunnel_binding object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNetbridgeiptunnelbinding
    .EXAMPLE 
        Invoke-ADCGetNetbridgeiptunnelbinding -GetAll 
    .EXAMPLE 
        Invoke-ADCGetNetbridgeiptunnelbinding -Count
    .EXAMPLE
        Invoke-ADCGetNetbridgeiptunnelbinding -name <string>
    .EXAMPLE
        Invoke-ADCGetNetbridgeiptunnelbinding -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNetbridgeiptunnelbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/netbridge_iptunnel_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [string]$name,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetNetbridgeiptunnelbinding: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ 
                    bulkbindings = 'yes'
                }
                Write-Verbose "Retrieving all netbridge_iptunnel_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type netbridge_iptunnel_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for netbridge_iptunnel_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type netbridge_iptunnel_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving netbridge_iptunnel_binding objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type netbridge_iptunnel_binding -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving netbridge_iptunnel_binding configuration for property 'name'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type netbridge_iptunnel_binding -NitroPath nitro/v1/config -Resource $name -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving netbridge_iptunnel_binding configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type netbridge_iptunnel_binding -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNetbridgeiptunnelbinding: Ended"
    }
}

function Invoke-ADCAddNetbridgensip6binding {
<#
    .SYNOPSIS
        Add Network configuration Object
    .DESCRIPTION
        Add Network configuration Object 
    .PARAMETER name 
        The name of the network bridge. 
    .PARAMETER ipaddress 
        The subnet that is extended by this network bridge.  
        Minimum length = 1 
    .PARAMETER netmask 
        The network mask for the subnet. 
    .PARAMETER PassThru 
        Return details about the created netbridge_nsip6_binding item.
    .EXAMPLE
        Invoke-ADCAddNetbridgensip6binding -name <string>
    .NOTES
        File Name : Invoke-ADCAddNetbridgensip6binding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/netbridge_nsip6_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$name ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$ipaddress ,

        [string]$netmask ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddNetbridgensip6binding: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
            }
            if ($PSBoundParameters.ContainsKey('ipaddress')) { $Payload.Add('ipaddress', $ipaddress) }
            if ($PSBoundParameters.ContainsKey('netmask')) { $Payload.Add('netmask', $netmask) }
 
            if ($PSCmdlet.ShouldProcess("netbridge_nsip6_binding", "Add Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -NitroPath nitro/v1/config -Type netbridge_nsip6_binding -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetNetbridgensip6binding -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddNetbridgensip6binding: Finished"
    }
}

function Invoke-ADCDeleteNetbridgensip6binding {
<#
    .SYNOPSIS
        Delete Network configuration Object
    .DESCRIPTION
        Delete Network configuration Object
    .PARAMETER name 
       The name of the network bridge.    .PARAMETER ipaddress 
       The subnet that is extended by this network bridge.  
       Minimum length = 1    .PARAMETER netmask 
       The network mask for the subnet.
    .EXAMPLE
        Invoke-ADCDeleteNetbridgensip6binding -name <string>
    .NOTES
        File Name : Invoke-ADCDeleteNetbridgensip6binding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/netbridge_nsip6_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$name ,

        [string]$ipaddress ,

        [string]$netmask 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteNetbridgensip6binding: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }
            if ($PSBoundParameters.ContainsKey('ipaddress')) { $Arguments.Add('ipaddress', $ipaddress) }
            if ($PSBoundParameters.ContainsKey('netmask')) { $Arguments.Add('netmask', $netmask) }
            if ($PSCmdlet.ShouldProcess("$name", "Delete Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type netbridge_nsip6_binding -NitroPath nitro/v1/config -Resource $name -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteNetbridgensip6binding: Finished"
    }
}

function Invoke-ADCGetNetbridgensip6binding {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER name 
       The name of the network bridge. 
    .PARAMETER GetAll 
        Retreive all netbridge_nsip6_binding object(s)
    .PARAMETER Count
        If specified, the count of the netbridge_nsip6_binding object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNetbridgensip6binding
    .EXAMPLE 
        Invoke-ADCGetNetbridgensip6binding -GetAll 
    .EXAMPLE 
        Invoke-ADCGetNetbridgensip6binding -Count
    .EXAMPLE
        Invoke-ADCGetNetbridgensip6binding -name <string>
    .EXAMPLE
        Invoke-ADCGetNetbridgensip6binding -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNetbridgensip6binding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/netbridge_nsip6_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [string]$name,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetNetbridgensip6binding: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ 
                    bulkbindings = 'yes'
                }
                Write-Verbose "Retrieving all netbridge_nsip6_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type netbridge_nsip6_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for netbridge_nsip6_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type netbridge_nsip6_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving netbridge_nsip6_binding objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type netbridge_nsip6_binding -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving netbridge_nsip6_binding configuration for property 'name'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type netbridge_nsip6_binding -NitroPath nitro/v1/config -Resource $name -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving netbridge_nsip6_binding configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type netbridge_nsip6_binding -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNetbridgensip6binding: Ended"
    }
}

function Invoke-ADCAddNetbridgensipbinding {
<#
    .SYNOPSIS
        Add Network configuration Object
    .DESCRIPTION
        Add Network configuration Object 
    .PARAMETER name 
        The name of the network bridge. 
    .PARAMETER ipaddress 
        The subnet that is extended by this network bridge.  
        Minimum length = 1 
    .PARAMETER netmask 
        The network mask for the subnet. 
    .PARAMETER PassThru 
        Return details about the created netbridge_nsip_binding item.
    .EXAMPLE
        Invoke-ADCAddNetbridgensipbinding -name <string>
    .NOTES
        File Name : Invoke-ADCAddNetbridgensipbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/netbridge_nsip_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$name ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$ipaddress ,

        [string]$netmask ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddNetbridgensipbinding: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
            }
            if ($PSBoundParameters.ContainsKey('ipaddress')) { $Payload.Add('ipaddress', $ipaddress) }
            if ($PSBoundParameters.ContainsKey('netmask')) { $Payload.Add('netmask', $netmask) }
 
            if ($PSCmdlet.ShouldProcess("netbridge_nsip_binding", "Add Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -NitroPath nitro/v1/config -Type netbridge_nsip_binding -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetNetbridgensipbinding -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddNetbridgensipbinding: Finished"
    }
}

function Invoke-ADCDeleteNetbridgensipbinding {
<#
    .SYNOPSIS
        Delete Network configuration Object
    .DESCRIPTION
        Delete Network configuration Object
    .PARAMETER name 
       The name of the network bridge.    .PARAMETER ipaddress 
       The subnet that is extended by this network bridge.  
       Minimum length = 1    .PARAMETER netmask 
       The network mask for the subnet.
    .EXAMPLE
        Invoke-ADCDeleteNetbridgensipbinding -name <string>
    .NOTES
        File Name : Invoke-ADCDeleteNetbridgensipbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/netbridge_nsip_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$name ,

        [string]$ipaddress ,

        [string]$netmask 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteNetbridgensipbinding: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }
            if ($PSBoundParameters.ContainsKey('ipaddress')) { $Arguments.Add('ipaddress', $ipaddress) }
            if ($PSBoundParameters.ContainsKey('netmask')) { $Arguments.Add('netmask', $netmask) }
            if ($PSCmdlet.ShouldProcess("$name", "Delete Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type netbridge_nsip_binding -NitroPath nitro/v1/config -Resource $name -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteNetbridgensipbinding: Finished"
    }
}

function Invoke-ADCGetNetbridgensipbinding {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER name 
       The name of the network bridge. 
    .PARAMETER GetAll 
        Retreive all netbridge_nsip_binding object(s)
    .PARAMETER Count
        If specified, the count of the netbridge_nsip_binding object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNetbridgensipbinding
    .EXAMPLE 
        Invoke-ADCGetNetbridgensipbinding -GetAll 
    .EXAMPLE 
        Invoke-ADCGetNetbridgensipbinding -Count
    .EXAMPLE
        Invoke-ADCGetNetbridgensipbinding -name <string>
    .EXAMPLE
        Invoke-ADCGetNetbridgensipbinding -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNetbridgensipbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/netbridge_nsip_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [string]$name,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetNetbridgensipbinding: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ 
                    bulkbindings = 'yes'
                }
                Write-Verbose "Retrieving all netbridge_nsip_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type netbridge_nsip_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for netbridge_nsip_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type netbridge_nsip_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving netbridge_nsip_binding objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type netbridge_nsip_binding -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving netbridge_nsip_binding configuration for property 'name'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type netbridge_nsip_binding -NitroPath nitro/v1/config -Resource $name -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving netbridge_nsip_binding configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type netbridge_nsip_binding -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNetbridgensipbinding: Ended"
    }
}

function Invoke-ADCAddNetbridgevlanbinding {
<#
    .SYNOPSIS
        Add Network configuration Object
    .DESCRIPTION
        Add Network configuration Object 
    .PARAMETER name 
        The name of the network bridge. 
    .PARAMETER vlan 
        The VLAN that is extended by this network bridge.  
        Minimum value = 1  
        Maximum value = 4094 
    .PARAMETER PassThru 
        Return details about the created netbridge_vlan_binding item.
    .EXAMPLE
        Invoke-ADCAddNetbridgevlanbinding -name <string>
    .NOTES
        File Name : Invoke-ADCAddNetbridgevlanbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/netbridge_vlan_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$name ,

        [ValidateRange(1, 4094)]
        [double]$vlan ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddNetbridgevlanbinding: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
            }
            if ($PSBoundParameters.ContainsKey('vlan')) { $Payload.Add('vlan', $vlan) }
 
            if ($PSCmdlet.ShouldProcess("netbridge_vlan_binding", "Add Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -NitroPath nitro/v1/config -Type netbridge_vlan_binding -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetNetbridgevlanbinding -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddNetbridgevlanbinding: Finished"
    }
}

function Invoke-ADCDeleteNetbridgevlanbinding {
<#
    .SYNOPSIS
        Delete Network configuration Object
    .DESCRIPTION
        Delete Network configuration Object
    .PARAMETER name 
       The name of the network bridge.    .PARAMETER vlan 
       The VLAN that is extended by this network bridge.  
       Minimum value = 1  
       Maximum value = 4094
    .EXAMPLE
        Invoke-ADCDeleteNetbridgevlanbinding -name <string>
    .NOTES
        File Name : Invoke-ADCDeleteNetbridgevlanbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/netbridge_vlan_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$name ,

        [double]$vlan 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteNetbridgevlanbinding: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }
            if ($PSBoundParameters.ContainsKey('vlan')) { $Arguments.Add('vlan', $vlan) }
            if ($PSCmdlet.ShouldProcess("$name", "Delete Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type netbridge_vlan_binding -NitroPath nitro/v1/config -Resource $name -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteNetbridgevlanbinding: Finished"
    }
}

function Invoke-ADCGetNetbridgevlanbinding {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER name 
       The name of the network bridge. 
    .PARAMETER GetAll 
        Retreive all netbridge_vlan_binding object(s)
    .PARAMETER Count
        If specified, the count of the netbridge_vlan_binding object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNetbridgevlanbinding
    .EXAMPLE 
        Invoke-ADCGetNetbridgevlanbinding -GetAll 
    .EXAMPLE 
        Invoke-ADCGetNetbridgevlanbinding -Count
    .EXAMPLE
        Invoke-ADCGetNetbridgevlanbinding -name <string>
    .EXAMPLE
        Invoke-ADCGetNetbridgevlanbinding -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNetbridgevlanbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/netbridge_vlan_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [string]$name,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetNetbridgevlanbinding: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ 
                    bulkbindings = 'yes'
                }
                Write-Verbose "Retrieving all netbridge_vlan_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type netbridge_vlan_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for netbridge_vlan_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type netbridge_vlan_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving netbridge_vlan_binding objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type netbridge_vlan_binding -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving netbridge_vlan_binding configuration for property 'name'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type netbridge_vlan_binding -NitroPath nitro/v1/config -Resource $name -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving netbridge_vlan_binding configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type netbridge_vlan_binding -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNetbridgevlanbinding: Ended"
    }
}

function Invoke-ADCAddNetprofile {
<#
    .SYNOPSIS
        Add Network configuration Object
    .DESCRIPTION
        Add Network configuration Object 
    .PARAMETER name 
        Name for the net profile. Must begin with a letter, number, or the underscore character (_), and can consist of letters, numbers, and the hyphen (-), period (.) pound (#), space ( ), at sign (@), equals (=), colon (:), and underscore characters. Cannot be changed after the profile is created. Choose a name that helps identify the net profile.  
        Minimum length = 1 
    .PARAMETER td 
        Integer value that uniquely identifies the traffic domain in which you want to configure the entity. If you do not specify an ID, the entity becomes part of the default traffic domain, which has an ID of 0.  
        Minimum value = 0  
        Maximum value = 4094 
    .PARAMETER srcip 
        IP address or the name of an IP set. 
    .PARAMETER srcippersistency 
        When the net profile is associated with a virtual server or its bound services, this option enables the Citrix ADC to use the same address, specified in the net profile, to communicate to servers for all sessions initiated from a particular client to the virtual server.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER overridelsn 
        USNIP/USIP settings override LSN settings for configured  
        service/virtual server traffic.. .  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER mbf 
        Response will be sent using learnt info if enabled. When creating a netprofile, if you do not set this parameter, the netprofile inherits the global MBF setting (available in the enable ns mode and disable ns mode CLI commands, or in the System > Settings > Configure modes > Configure Modes dialog box). However, you can override this setting after you create the netprofile.  
        Possible values = ENABLED, DISABLED 
    .PARAMETER proxyprotocol 
        Proxy Protocol Action (Enabled/Disabled).  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER proxyprotocoltxversion 
        Proxy Protocol Version (V1/V2).  
        Default value: V1  
        Possible values = V1, V2 
    .PARAMETER PassThru 
        Return details about the created netprofile item.
    .EXAMPLE
        Invoke-ADCAddNetprofile -name <string>
    .NOTES
        File Name : Invoke-ADCAddNetprofile
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/netprofile/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name ,

        [ValidateRange(0, 4094)]
        [double]$td ,

        [string]$srcip ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$srcippersistency = 'DISABLED' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$overridelsn = 'DISABLED' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$mbf ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$proxyprotocol = 'DISABLED' ,

        [ValidateSet('V1', 'V2')]
        [string]$proxyprotocoltxversion = 'V1' ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddNetprofile: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
            }
            if ($PSBoundParameters.ContainsKey('td')) { $Payload.Add('td', $td) }
            if ($PSBoundParameters.ContainsKey('srcip')) { $Payload.Add('srcip', $srcip) }
            if ($PSBoundParameters.ContainsKey('srcippersistency')) { $Payload.Add('srcippersistency', $srcippersistency) }
            if ($PSBoundParameters.ContainsKey('overridelsn')) { $Payload.Add('overridelsn', $overridelsn) }
            if ($PSBoundParameters.ContainsKey('mbf')) { $Payload.Add('mbf', $mbf) }
            if ($PSBoundParameters.ContainsKey('proxyprotocol')) { $Payload.Add('proxyprotocol', $proxyprotocol) }
            if ($PSBoundParameters.ContainsKey('proxyprotocoltxversion')) { $Payload.Add('proxyprotocoltxversion', $proxyprotocoltxversion) }
 
            if ($PSCmdlet.ShouldProcess("netprofile", "Add Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -NitroPath nitro/v1/config -Type netprofile -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetNetprofile -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddNetprofile: Finished"
    }
}

function Invoke-ADCDeleteNetprofile {
<#
    .SYNOPSIS
        Delete Network configuration Object
    .DESCRIPTION
        Delete Network configuration Object
    .PARAMETER name 
       Name for the net profile. Must begin with a letter, number, or the underscore character (_), and can consist of letters, numbers, and the hyphen (-), period (.) pound (#), space ( ), at sign (@), equals (=), colon (:), and underscore characters. Cannot be changed after the profile is created. Choose a name that helps identify the net profile.  
       Minimum length = 1 
    .EXAMPLE
        Invoke-ADCDeleteNetprofile -name <string>
    .NOTES
        File Name : Invoke-ADCDeleteNetprofile
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/netprofile/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$name 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteNetprofile: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }

            if ($PSCmdlet.ShouldProcess("$name", "Delete Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type netprofile -NitroPath nitro/v1/config -Resource $name -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteNetprofile: Finished"
    }
}

function Invoke-ADCUpdateNetprofile {
<#
    .SYNOPSIS
        Update Network configuration Object
    .DESCRIPTION
        Update Network configuration Object 
    .PARAMETER name 
        Name for the net profile. Must begin with a letter, number, or the underscore character (_), and can consist of letters, numbers, and the hyphen (-), period (.) pound (#), space ( ), at sign (@), equals (=), colon (:), and underscore characters. Cannot be changed after the profile is created. Choose a name that helps identify the net profile.  
        Minimum length = 1 
    .PARAMETER srcip 
        IP address or the name of an IP set. 
    .PARAMETER srcippersistency 
        When the net profile is associated with a virtual server or its bound services, this option enables the Citrix ADC to use the same address, specified in the net profile, to communicate to servers for all sessions initiated from a particular client to the virtual server.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER overridelsn 
        USNIP/USIP settings override LSN settings for configured  
        service/virtual server traffic.. .  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER mbf 
        Response will be sent using learnt info if enabled. When creating a netprofile, if you do not set this parameter, the netprofile inherits the global MBF setting (available in the enable ns mode and disable ns mode CLI commands, or in the System > Settings > Configure modes > Configure Modes dialog box). However, you can override this setting after you create the netprofile.  
        Possible values = ENABLED, DISABLED 
    .PARAMETER proxyprotocol 
        Proxy Protocol Action (Enabled/Disabled).  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER proxyprotocoltxversion 
        Proxy Protocol Version (V1/V2).  
        Default value: V1  
        Possible values = V1, V2 
    .PARAMETER PassThru 
        Return details about the created netprofile item.
    .EXAMPLE
        Invoke-ADCUpdateNetprofile -name <string>
    .NOTES
        File Name : Invoke-ADCUpdateNetprofile
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/netprofile/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name ,

        [string]$srcip ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$srcippersistency ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$overridelsn ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$mbf ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$proxyprotocol ,

        [ValidateSet('V1', 'V2')]
        [string]$proxyprotocoltxversion ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCUpdateNetprofile: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
            }
            if ($PSBoundParameters.ContainsKey('srcip')) { $Payload.Add('srcip', $srcip) }
            if ($PSBoundParameters.ContainsKey('srcippersistency')) { $Payload.Add('srcippersistency', $srcippersistency) }
            if ($PSBoundParameters.ContainsKey('overridelsn')) { $Payload.Add('overridelsn', $overridelsn) }
            if ($PSBoundParameters.ContainsKey('mbf')) { $Payload.Add('mbf', $mbf) }
            if ($PSBoundParameters.ContainsKey('proxyprotocol')) { $Payload.Add('proxyprotocol', $proxyprotocol) }
            if ($PSBoundParameters.ContainsKey('proxyprotocoltxversion')) { $Payload.Add('proxyprotocoltxversion', $proxyprotocoltxversion) }
 
            if ($PSCmdlet.ShouldProcess("netprofile", "Update Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -NitroPath nitro/v1/config -Type netprofile -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetNetprofile -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUpdateNetprofile: Finished"
    }
}

function Invoke-ADCUnsetNetprofile {
<#
    .SYNOPSIS
        Unset Network configuration Object
    .DESCRIPTION
        Unset Network configuration Object 
   .PARAMETER name 
       Name for the net profile. Must begin with a letter, number, or the underscore character (_), and can consist of letters, numbers, and the hyphen (-), period (.) pound (#), space ( ), at sign (@), equals (=), colon (:), and underscore characters. Cannot be changed after the profile is created. Choose a name that helps identify the net profile. 
   .PARAMETER srcip 
       IP address or the name of an IP set. 
   .PARAMETER srcippersistency 
       When the net profile is associated with a virtual server or its bound services, this option enables the Citrix ADC to use the same address, specified in the net profile, to communicate to servers for all sessions initiated from a particular client to the virtual server.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER overridelsn 
       USNIP/USIP settings override LSN settings for configured  
       service/virtual server traffic.. .  
       Possible values = ENABLED, DISABLED 
   .PARAMETER mbf 
       Response will be sent using learnt info if enabled. When creating a netprofile, if you do not set this parameter, the netprofile inherits the global MBF setting (available in the enable ns mode and disable ns mode CLI commands, or in the System > Settings > Configure modes > Configure Modes dialog box). However, you can override this setting after you create the netprofile.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER proxyprotocol 
       Proxy Protocol Action (Enabled/Disabled).  
       Possible values = ENABLED, DISABLED 
   .PARAMETER proxyprotocoltxversion 
       Proxy Protocol Version (V1/V2).  
       Possible values = V1, V2
    .EXAMPLE
        Invoke-ADCUnsetNetprofile -name <string>
    .NOTES
        File Name : Invoke-ADCUnsetNetprofile
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/netprofile
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name ,

        [Boolean]$srcip ,

        [Boolean]$srcippersistency ,

        [Boolean]$overridelsn ,

        [Boolean]$mbf ,

        [Boolean]$proxyprotocol ,

        [Boolean]$proxyprotocoltxversion 
    )
    begin {
        Write-Verbose "Invoke-ADCUnsetNetprofile: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
            }
            if ($PSBoundParameters.ContainsKey('srcip')) { $Payload.Add('srcip', $srcip) }
            if ($PSBoundParameters.ContainsKey('srcippersistency')) { $Payload.Add('srcippersistency', $srcippersistency) }
            if ($PSBoundParameters.ContainsKey('overridelsn')) { $Payload.Add('overridelsn', $overridelsn) }
            if ($PSBoundParameters.ContainsKey('mbf')) { $Payload.Add('mbf', $mbf) }
            if ($PSBoundParameters.ContainsKey('proxyprotocol')) { $Payload.Add('proxyprotocol', $proxyprotocol) }
            if ($PSBoundParameters.ContainsKey('proxyprotocoltxversion')) { $Payload.Add('proxyprotocoltxversion', $proxyprotocoltxversion) }
            if ($PSCmdlet.ShouldProcess("$name", "Unset Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type netprofile -NitroPath nitro/v1/config -Action unset -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUnsetNetprofile: Finished"
    }
}

function Invoke-ADCGetNetprofile {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER name 
       Name for the net profile. Must begin with a letter, number, or the underscore character (_), and can consist of letters, numbers, and the hyphen (-), period (.) pound (#), space ( ), at sign (@), equals (=), colon (:), and underscore characters. Cannot be changed after the profile is created. Choose a name that helps identify the net profile. 
    .PARAMETER GetAll 
        Retreive all netprofile object(s)
    .PARAMETER Count
        If specified, the count of the netprofile object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNetprofile
    .EXAMPLE 
        Invoke-ADCGetNetprofile -GetAll 
    .EXAMPLE 
        Invoke-ADCGetNetprofile -Count
    .EXAMPLE
        Invoke-ADCGetNetprofile -name <string>
    .EXAMPLE
        Invoke-ADCGetNetprofile -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNetprofile
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/netprofile/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll,

        [Parameter(ParameterSetName = 'GetAll')]
        [Parameter(ParameterSetName = 'Get')]
        [Switch]$ViewSummary

    )
    begin {
        Write-Verbose "Invoke-ADCGetNetprofile: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all netprofile objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type netprofile -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for netprofile objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type netprofile -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving netprofile objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type netprofile -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving netprofile configuration for property 'name'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type netprofile -NitroPath nitro/v1/config -Resource $name -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving netprofile configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type netprofile -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNetprofile: Ended"
    }
}

function Invoke-ADCGetNetprofilebinding {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER name 
       Name of the net profile whose details you want to display. 
    .PARAMETER GetAll 
        Retreive all netprofile_binding object(s)
    .PARAMETER Count
        If specified, the count of the netprofile_binding object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNetprofilebinding
    .EXAMPLE 
        Invoke-ADCGetNetprofilebinding -GetAll
    .EXAMPLE
        Invoke-ADCGetNetprofilebinding -name <string>
    .EXAMPLE
        Invoke-ADCGetNetprofilebinding -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNetprofilebinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/netprofile_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetNetprofilebinding: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ 
                    bulkbindings = 'yes'
                }
                Write-Verbose "Retrieving all netprofile_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type netprofile_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for netprofile_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type netprofile_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving netprofile_binding objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type netprofile_binding -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving netprofile_binding configuration for property 'name'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type netprofile_binding -NitroPath nitro/v1/config -Resource $name -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving netprofile_binding configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type netprofile_binding -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNetprofilebinding: Ended"
    }
}

function Invoke-ADCAddNetprofilenatrulebinding {
<#
    .SYNOPSIS
        Add Network configuration Object
    .DESCRIPTION
        Add Network configuration Object 
    .PARAMETER name 
        Name of the netprofile to which to bind port ranges.  
        Minimum length = 1 
    .PARAMETER natrule 
        IPv4 network address on whose traffic you want the Citrix ADC to do rewrite ip prefix. 
    .PARAMETER netmask 
        . 
    .PARAMETER rewriteip 
        . 
    .PARAMETER PassThru 
        Return details about the created netprofile_natrule_binding item.
    .EXAMPLE
        Invoke-ADCAddNetprofilenatrulebinding -name <string>
    .NOTES
        File Name : Invoke-ADCAddNetprofilenatrulebinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/netprofile_natrule_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name ,

        [string]$natrule ,

        [string]$netmask ,

        [string]$rewriteip ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddNetprofilenatrulebinding: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
            }
            if ($PSBoundParameters.ContainsKey('natrule')) { $Payload.Add('natrule', $natrule) }
            if ($PSBoundParameters.ContainsKey('netmask')) { $Payload.Add('netmask', $netmask) }
            if ($PSBoundParameters.ContainsKey('rewriteip')) { $Payload.Add('rewriteip', $rewriteip) }
 
            if ($PSCmdlet.ShouldProcess("netprofile_natrule_binding", "Add Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -NitroPath nitro/v1/config -Type netprofile_natrule_binding -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetNetprofilenatrulebinding -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddNetprofilenatrulebinding: Finished"
    }
}

function Invoke-ADCDeleteNetprofilenatrulebinding {
<#
    .SYNOPSIS
        Delete Network configuration Object
    .DESCRIPTION
        Delete Network configuration Object
    .PARAMETER name 
       Name of the netprofile to which to bind port ranges.  
       Minimum length = 1    .PARAMETER natrule 
       IPv4 network address on whose traffic you want the Citrix ADC to do rewrite ip prefix.    .PARAMETER netmask 
       .
    .EXAMPLE
        Invoke-ADCDeleteNetprofilenatrulebinding -name <string>
    .NOTES
        File Name : Invoke-ADCDeleteNetprofilenatrulebinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/netprofile_natrule_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$name ,

        [string]$natrule ,

        [string]$netmask 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteNetprofilenatrulebinding: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }
            if ($PSBoundParameters.ContainsKey('natrule')) { $Arguments.Add('natrule', $natrule) }
            if ($PSBoundParameters.ContainsKey('netmask')) { $Arguments.Add('netmask', $netmask) }
            if ($PSCmdlet.ShouldProcess("$name", "Delete Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type netprofile_natrule_binding -NitroPath nitro/v1/config -Resource $name -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteNetprofilenatrulebinding: Finished"
    }
}

function Invoke-ADCGetNetprofilenatrulebinding {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER name 
       Name of the netprofile to which to bind port ranges. 
    .PARAMETER GetAll 
        Retreive all netprofile_natrule_binding object(s)
    .PARAMETER Count
        If specified, the count of the netprofile_natrule_binding object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNetprofilenatrulebinding
    .EXAMPLE 
        Invoke-ADCGetNetprofilenatrulebinding -GetAll 
    .EXAMPLE 
        Invoke-ADCGetNetprofilenatrulebinding -Count
    .EXAMPLE
        Invoke-ADCGetNetprofilenatrulebinding -name <string>
    .EXAMPLE
        Invoke-ADCGetNetprofilenatrulebinding -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNetprofilenatrulebinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/netprofile_natrule_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetNetprofilenatrulebinding: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ 
                    bulkbindings = 'yes'
                }
                Write-Verbose "Retrieving all netprofile_natrule_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type netprofile_natrule_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for netprofile_natrule_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type netprofile_natrule_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving netprofile_natrule_binding objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type netprofile_natrule_binding -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving netprofile_natrule_binding configuration for property 'name'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type netprofile_natrule_binding -NitroPath nitro/v1/config -Resource $name -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving netprofile_natrule_binding configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type netprofile_natrule_binding -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNetprofilenatrulebinding: Ended"
    }
}

function Invoke-ADCAddNetprofilesrcportsetbinding {
<#
    .SYNOPSIS
        Add Network configuration Object
    .DESCRIPTION
        Add Network configuration Object 
    .PARAMETER name 
        Name of the netprofile to which to bind port ranges.  
        Minimum length = 1 
    .PARAMETER srcportrange 
        When the source port range is configured and associated with the netprofile bound to a service group, Citrix ADC will choose a port from the range configured for connection establishment at the backend servers.  
        Minimum length = 1024  
        Maximum length = 65535 
    .PARAMETER PassThru 
        Return details about the created netprofile_srcportset_binding item.
    .EXAMPLE
        Invoke-ADCAddNetprofilesrcportsetbinding -name <string>
    .NOTES
        File Name : Invoke-ADCAddNetprofilesrcportsetbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/netprofile_srcportset_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name ,

        [ValidateLength(1024, 65535)]
        [string]$srcportrange ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddNetprofilesrcportsetbinding: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
            }
            if ($PSBoundParameters.ContainsKey('srcportrange')) { $Payload.Add('srcportrange', $srcportrange) }
 
            if ($PSCmdlet.ShouldProcess("netprofile_srcportset_binding", "Add Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -NitroPath nitro/v1/config -Type netprofile_srcportset_binding -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetNetprofilesrcportsetbinding -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddNetprofilesrcportsetbinding: Finished"
    }
}

function Invoke-ADCDeleteNetprofilesrcportsetbinding {
<#
    .SYNOPSIS
        Delete Network configuration Object
    .DESCRIPTION
        Delete Network configuration Object
    .PARAMETER name 
       Name of the netprofile to which to bind port ranges.  
       Minimum length = 1    .PARAMETER srcportrange 
       When the source port range is configured and associated with the netprofile bound to a service group, Citrix ADC will choose a port from the range configured for connection establishment at the backend servers.  
       Minimum length = 1024  
       Maximum length = 65535
    .EXAMPLE
        Invoke-ADCDeleteNetprofilesrcportsetbinding -name <string>
    .NOTES
        File Name : Invoke-ADCDeleteNetprofilesrcportsetbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/netprofile_srcportset_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$name ,

        [string]$srcportrange 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteNetprofilesrcportsetbinding: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }
            if ($PSBoundParameters.ContainsKey('srcportrange')) { $Arguments.Add('srcportrange', $srcportrange) }
            if ($PSCmdlet.ShouldProcess("$name", "Delete Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type netprofile_srcportset_binding -NitroPath nitro/v1/config -Resource $name -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteNetprofilesrcportsetbinding: Finished"
    }
}

function Invoke-ADCGetNetprofilesrcportsetbinding {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER name 
       Name of the netprofile to which to bind port ranges. 
    .PARAMETER GetAll 
        Retreive all netprofile_srcportset_binding object(s)
    .PARAMETER Count
        If specified, the count of the netprofile_srcportset_binding object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNetprofilesrcportsetbinding
    .EXAMPLE 
        Invoke-ADCGetNetprofilesrcportsetbinding -GetAll 
    .EXAMPLE 
        Invoke-ADCGetNetprofilesrcportsetbinding -Count
    .EXAMPLE
        Invoke-ADCGetNetprofilesrcportsetbinding -name <string>
    .EXAMPLE
        Invoke-ADCGetNetprofilesrcportsetbinding -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNetprofilesrcportsetbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/netprofile_srcportset_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetNetprofilesrcportsetbinding: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ 
                    bulkbindings = 'yes'
                }
                Write-Verbose "Retrieving all netprofile_srcportset_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type netprofile_srcportset_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for netprofile_srcportset_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type netprofile_srcportset_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving netprofile_srcportset_binding objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type netprofile_srcportset_binding -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving netprofile_srcportset_binding configuration for property 'name'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type netprofile_srcportset_binding -NitroPath nitro/v1/config -Resource $name -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving netprofile_srcportset_binding configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type netprofile_srcportset_binding -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNetprofilesrcportsetbinding: Ended"
    }
}

function Invoke-ADCAddOnlinkipv6prefix {
<#
    .SYNOPSIS
        Add Network configuration Object
    .DESCRIPTION
        Add Network configuration Object 
    .PARAMETER ipv6prefix 
        Onlink prefixes for RA messages. 
    .PARAMETER onlinkprefix 
        RA Prefix onlink flag.  
        Default value: YES  
        Possible values = YES, NO 
    .PARAMETER autonomusprefix 
        RA Prefix Autonomus flag.  
        Default value: YES  
        Possible values = YES, NO 
    .PARAMETER depricateprefix 
        Depricate the prefix.  
        Default value: NO  
        Possible values = YES, NO 
    .PARAMETER decrementprefixlifetimes 
        RA Prefix Autonomus flag.  
        Default value: NO  
        Possible values = YES, NO 
    .PARAMETER prefixvalidelifetime 
        Valide life time of the prefix, in seconds.  
        Default value: 2592000 
    .PARAMETER prefixpreferredlifetime 
        Preferred life time of the prefix, in seconds.  
        Default value: 604800 
    .PARAMETER PassThru 
        Return details about the created onlinkipv6prefix item.
    .EXAMPLE
        Invoke-ADCAddOnlinkipv6prefix -ipv6prefix <string>
    .NOTES
        File Name : Invoke-ADCAddOnlinkipv6prefix
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/onlinkipv6prefix/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$ipv6prefix ,

        [ValidateSet('YES', 'NO')]
        [string]$onlinkprefix = 'YES' ,

        [ValidateSet('YES', 'NO')]
        [string]$autonomusprefix = 'YES' ,

        [ValidateSet('YES', 'NO')]
        [string]$depricateprefix = 'NO' ,

        [ValidateSet('YES', 'NO')]
        [string]$decrementprefixlifetimes = 'NO' ,

        [double]$prefixvalidelifetime = '2592000' ,

        [double]$prefixpreferredlifetime = '604800' ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddOnlinkipv6prefix: Starting"
    }
    process {
        try {
            $Payload = @{
                ipv6prefix = $ipv6prefix
            }
            if ($PSBoundParameters.ContainsKey('onlinkprefix')) { $Payload.Add('onlinkprefix', $onlinkprefix) }
            if ($PSBoundParameters.ContainsKey('autonomusprefix')) { $Payload.Add('autonomusprefix', $autonomusprefix) }
            if ($PSBoundParameters.ContainsKey('depricateprefix')) { $Payload.Add('depricateprefix', $depricateprefix) }
            if ($PSBoundParameters.ContainsKey('decrementprefixlifetimes')) { $Payload.Add('decrementprefixlifetimes', $decrementprefixlifetimes) }
            if ($PSBoundParameters.ContainsKey('prefixvalidelifetime')) { $Payload.Add('prefixvalidelifetime', $prefixvalidelifetime) }
            if ($PSBoundParameters.ContainsKey('prefixpreferredlifetime')) { $Payload.Add('prefixpreferredlifetime', $prefixpreferredlifetime) }
 
            if ($PSCmdlet.ShouldProcess("onlinkipv6prefix", "Add Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -NitroPath nitro/v1/config -Type onlinkipv6prefix -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetOnlinkipv6prefix -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddOnlinkipv6prefix: Finished"
    }
}

function Invoke-ADCDeleteOnlinkipv6prefix {
<#
    .SYNOPSIS
        Delete Network configuration Object
    .DESCRIPTION
        Delete Network configuration Object
    .PARAMETER ipv6prefix 
       Onlink prefixes for RA messages. 
    .EXAMPLE
        Invoke-ADCDeleteOnlinkipv6prefix -ipv6prefix <string>
    .NOTES
        File Name : Invoke-ADCDeleteOnlinkipv6prefix
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/onlinkipv6prefix/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$ipv6prefix 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteOnlinkipv6prefix: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }

            if ($PSCmdlet.ShouldProcess("$ipv6prefix", "Delete Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type onlinkipv6prefix -NitroPath nitro/v1/config -Resource $ipv6prefix -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteOnlinkipv6prefix: Finished"
    }
}

function Invoke-ADCUpdateOnlinkipv6prefix {
<#
    .SYNOPSIS
        Update Network configuration Object
    .DESCRIPTION
        Update Network configuration Object 
    .PARAMETER ipv6prefix 
        Onlink prefixes for RA messages. 
    .PARAMETER onlinkprefix 
        RA Prefix onlink flag.  
        Default value: YES  
        Possible values = YES, NO 
    .PARAMETER autonomusprefix 
        RA Prefix Autonomus flag.  
        Default value: YES  
        Possible values = YES, NO 
    .PARAMETER depricateprefix 
        Depricate the prefix.  
        Default value: NO  
        Possible values = YES, NO 
    .PARAMETER decrementprefixlifetimes 
        RA Prefix Autonomus flag.  
        Default value: NO  
        Possible values = YES, NO 
    .PARAMETER prefixvalidelifetime 
        Valide life time of the prefix, in seconds.  
        Default value: 2592000 
    .PARAMETER prefixpreferredlifetime 
        Preferred life time of the prefix, in seconds.  
        Default value: 604800 
    .PARAMETER PassThru 
        Return details about the created onlinkipv6prefix item.
    .EXAMPLE
        Invoke-ADCUpdateOnlinkipv6prefix -ipv6prefix <string>
    .NOTES
        File Name : Invoke-ADCUpdateOnlinkipv6prefix
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/onlinkipv6prefix/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$ipv6prefix ,

        [ValidateSet('YES', 'NO')]
        [string]$onlinkprefix ,

        [ValidateSet('YES', 'NO')]
        [string]$autonomusprefix ,

        [ValidateSet('YES', 'NO')]
        [string]$depricateprefix ,

        [ValidateSet('YES', 'NO')]
        [string]$decrementprefixlifetimes ,

        [double]$prefixvalidelifetime ,

        [double]$prefixpreferredlifetime ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCUpdateOnlinkipv6prefix: Starting"
    }
    process {
        try {
            $Payload = @{
                ipv6prefix = $ipv6prefix
            }
            if ($PSBoundParameters.ContainsKey('onlinkprefix')) { $Payload.Add('onlinkprefix', $onlinkprefix) }
            if ($PSBoundParameters.ContainsKey('autonomusprefix')) { $Payload.Add('autonomusprefix', $autonomusprefix) }
            if ($PSBoundParameters.ContainsKey('depricateprefix')) { $Payload.Add('depricateprefix', $depricateprefix) }
            if ($PSBoundParameters.ContainsKey('decrementprefixlifetimes')) { $Payload.Add('decrementprefixlifetimes', $decrementprefixlifetimes) }
            if ($PSBoundParameters.ContainsKey('prefixvalidelifetime')) { $Payload.Add('prefixvalidelifetime', $prefixvalidelifetime) }
            if ($PSBoundParameters.ContainsKey('prefixpreferredlifetime')) { $Payload.Add('prefixpreferredlifetime', $prefixpreferredlifetime) }
 
            if ($PSCmdlet.ShouldProcess("onlinkipv6prefix", "Update Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -NitroPath nitro/v1/config -Type onlinkipv6prefix -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetOnlinkipv6prefix -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUpdateOnlinkipv6prefix: Finished"
    }
}

function Invoke-ADCUnsetOnlinkipv6prefix {
<#
    .SYNOPSIS
        Unset Network configuration Object
    .DESCRIPTION
        Unset Network configuration Object 
   .PARAMETER ipv6prefix 
       Onlink prefixes for RA messages. 
   .PARAMETER onlinkprefix 
       RA Prefix onlink flag.  
       Possible values = YES, NO 
   .PARAMETER autonomusprefix 
       RA Prefix Autonomus flag.  
       Possible values = YES, NO 
   .PARAMETER depricateprefix 
       Depricate the prefix.  
       Possible values = YES, NO 
   .PARAMETER decrementprefixlifetimes 
       RA Prefix Autonomus flag.  
       Possible values = YES, NO 
   .PARAMETER prefixvalidelifetime 
       Valide life time of the prefix, in seconds. 
   .PARAMETER prefixpreferredlifetime 
       Preferred life time of the prefix, in seconds.
    .EXAMPLE
        Invoke-ADCUnsetOnlinkipv6prefix -ipv6prefix <string>
    .NOTES
        File Name : Invoke-ADCUnsetOnlinkipv6prefix
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/onlinkipv6prefix
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$ipv6prefix ,

        [Boolean]$onlinkprefix ,

        [Boolean]$autonomusprefix ,

        [Boolean]$depricateprefix ,

        [Boolean]$decrementprefixlifetimes ,

        [Boolean]$prefixvalidelifetime ,

        [Boolean]$prefixpreferredlifetime 
    )
    begin {
        Write-Verbose "Invoke-ADCUnsetOnlinkipv6prefix: Starting"
    }
    process {
        try {
            $Payload = @{
                ipv6prefix = $ipv6prefix
            }
            if ($PSBoundParameters.ContainsKey('onlinkprefix')) { $Payload.Add('onlinkprefix', $onlinkprefix) }
            if ($PSBoundParameters.ContainsKey('autonomusprefix')) { $Payload.Add('autonomusprefix', $autonomusprefix) }
            if ($PSBoundParameters.ContainsKey('depricateprefix')) { $Payload.Add('depricateprefix', $depricateprefix) }
            if ($PSBoundParameters.ContainsKey('decrementprefixlifetimes')) { $Payload.Add('decrementprefixlifetimes', $decrementprefixlifetimes) }
            if ($PSBoundParameters.ContainsKey('prefixvalidelifetime')) { $Payload.Add('prefixvalidelifetime', $prefixvalidelifetime) }
            if ($PSBoundParameters.ContainsKey('prefixpreferredlifetime')) { $Payload.Add('prefixpreferredlifetime', $prefixpreferredlifetime) }
            if ($PSCmdlet.ShouldProcess("$ipv6prefix", "Unset Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type onlinkipv6prefix -NitroPath nitro/v1/config -Action unset -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUnsetOnlinkipv6prefix: Finished"
    }
}

function Invoke-ADCGetOnlinkipv6prefix {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER ipv6prefix 
       Onlink prefixes for RA messages. 
    .PARAMETER GetAll 
        Retreive all onlinkipv6prefix object(s)
    .PARAMETER Count
        If specified, the count of the onlinkipv6prefix object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetOnlinkipv6prefix
    .EXAMPLE 
        Invoke-ADCGetOnlinkipv6prefix -GetAll 
    .EXAMPLE 
        Invoke-ADCGetOnlinkipv6prefix -Count
    .EXAMPLE
        Invoke-ADCGetOnlinkipv6prefix -name <string>
    .EXAMPLE
        Invoke-ADCGetOnlinkipv6prefix -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetOnlinkipv6prefix
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/onlinkipv6prefix/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [string]$ipv6prefix,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll,

        [Parameter(ParameterSetName = 'GetAll')]
        [Parameter(ParameterSetName = 'Get')]
        [Switch]$ViewSummary

    )
    begin {
        Write-Verbose "Invoke-ADCGetOnlinkipv6prefix: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all onlinkipv6prefix objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type onlinkipv6prefix -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for onlinkipv6prefix objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type onlinkipv6prefix -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving onlinkipv6prefix objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type onlinkipv6prefix -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving onlinkipv6prefix configuration for property 'ipv6prefix'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type onlinkipv6prefix -NitroPath nitro/v1/config -Resource $ipv6prefix -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving onlinkipv6prefix configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type onlinkipv6prefix -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetOnlinkipv6prefix: Ended"
    }
}

function Invoke-ADCUpdatePtp {
<#
    .SYNOPSIS
        Update Network configuration Object
    .DESCRIPTION
        Update Network configuration Object 
    .PARAMETER state 
        Enables or disables Precision Time Protocol (PTP) on the appliance. If you disable PTP, make sure you enable Network Time Protocol (NTP) on the cluster.  
        Default value: ENABLE  
        Possible values = DISABLE, ENABLE
    .EXAMPLE
        Invoke-ADCUpdatePtp -state <string>
    .NOTES
        File Name : Invoke-ADCUpdatePtp
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/ptp/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateSet('DISABLE', 'ENABLE')]
        [string]$state 

    )
    begin {
        Write-Verbose "Invoke-ADCUpdatePtp: Starting"
    }
    process {
        try {
            $Payload = @{
                state = $state
            }

 
            if ($PSCmdlet.ShouldProcess("ptp", "Update Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -NitroPath nitro/v1/config -Type ptp -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
            Write-Output $result

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUpdatePtp: Finished"
    }
}

function Invoke-ADCGetPtp {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER GetAll 
        Retreive all ptp object(s)
    .PARAMETER Count
        If specified, the count of the ptp object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetPtp
    .EXAMPLE 
        Invoke-ADCGetPtp -GetAll
    .EXAMPLE
        Invoke-ADCGetPtp -name <string>
    .EXAMPLE
        Invoke-ADCGetPtp -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetPtp
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/ptp/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetPtp: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all ptp objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type ptp -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for ptp objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type ptp -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving ptp objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type ptp -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving ptp configuration for property ''"

            } else {
                Write-Verbose "Retrieving ptp configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type ptp -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetPtp: Ended"
    }
}

function Invoke-ADCClearRnat {
<#
    .SYNOPSIS
        Clear Network configuration Object
    .DESCRIPTION
        Clear Network configuration Object 
    .PARAMETER network 
        The network address defined for the RNAT entry. 
    .PARAMETER netmask 
        The subnet mask for the network address. 
    .PARAMETER aclname 
        An extended ACL defined for the RNAT entry. 
    .PARAMETER td 
        Integer value that uniquely identifies the traffic domain in which you want to configure the entity. If you do not specify an ID, the entity becomes part of the default traffic domain, which has an ID of 0. 
    .PARAMETER ownergroup 
        The owner node group in a Cluster for this rnat rule.
    .EXAMPLE
        Invoke-ADCClearRnat 
    .NOTES
        File Name : Invoke-ADCClearRnat
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/rnat/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$network ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$netmask ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$aclname ,

        [ValidateRange(0, 4094)]
        [double]$td ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$ownergroup 

    )
    begin {
        Write-Verbose "Invoke-ADCClearRnat: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('network')) { $Payload.Add('network', $network) }
            if ($PSBoundParameters.ContainsKey('netmask')) { $Payload.Add('netmask', $netmask) }
            if ($PSBoundParameters.ContainsKey('aclname')) { $Payload.Add('aclname', $aclname) }
            if ($PSBoundParameters.ContainsKey('td')) { $Payload.Add('td', $td) }
            if ($PSBoundParameters.ContainsKey('ownergroup')) { $Payload.Add('ownergroup', $ownergroup) }
            if ($PSCmdlet.ShouldProcess($Name, "Clear Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -NitroPath nitro/v1/config -Type rnat -Action clear -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $result
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCClearRnat: Finished"
    }
}

function Invoke-ADCUpdateRnat {
<#
    .SYNOPSIS
        Update Network configuration Object
    .DESCRIPTION
        Update Network configuration Object 
    .PARAMETER name 
        Name for the RNAT4 rule. Must begin with a letter, number, or the underscore character (_), and can consist of letters, numbers, and the hyphen (-), period (.) pound (#), space ( ), at sign (@), equals (=), colon (:), and underscore characters. Cannot be changed after the rule is created. Choose a name that helps identify the RNAT4 rule.  
        Minimum length = 1 
    .PARAMETER network 
        The network address defined for the RNAT entry.  
        Minimum length = 1 
    .PARAMETER netmask 
        The subnet mask for the network address.  
        Minimum length = 1 
    .PARAMETER aclname 
        An extended ACL defined for the RNAT entry.  
        Minimum length = 1 
    .PARAMETER redirectport 
        Port number to which the IPv4 packets are redirected. Applicable to TCP and UDP protocols.  
        Minimum value = 1  
        Maximum value = 65535 
    .PARAMETER td 
        Integer value that uniquely identifies the traffic domain in which you want to configure the entity. If you do not specify an ID, the entity becomes part of the default traffic domain, which has an ID of 0.  
        Minimum value = 0  
        Maximum value = 4094 
    .PARAMETER natip 
        Any NetScaler-owned IPv4 address except the NSIP address. The NetScaler appliance replaces the source IP addresses of server-generated packets with the IP address specified. The IP address must be a public NetScaler-owned IP address. If you specify multiple addresses for this field, NATIP selection uses the round robin algorithm for each session. By specifying a range of IP addresses, you can specify all NetScaler-owned IP addresses, except the NSIP, that fall within the specified range.  
        Minimum length = 1 
    .PARAMETER srcippersistency 
        Enables the Citrix ADC to use the same NAT IP address for all RNAT sessions initiated from a particular server.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER useproxyport 
        Enable source port proxying, which enables the Citrix ADC to use the RNAT ips using proxied source port.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER ownergroup 
        The owner node group in a Cluster for this rnat rule.  
        Default value: DEFAULT_NG  
        Minimum length = 1 
    .PARAMETER connfailover 
        Synchronize connection information with the secondary appliance in a high availability (HA) pair. That is, synchronize all connection-related information for the RNAT session. In order for this to work, tcpproxy should be DISABLED. To disable tcpproxy use "set rnatparam tcpproxy DISABLED".  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER PassThru 
        Return details about the created rnat item.
    .EXAMPLE
        Invoke-ADCUpdateRnat 
    .NOTES
        File Name : Invoke-ADCUpdateRnat
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/rnat/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$network ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$netmask ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$aclname ,

        [ValidateRange(1, 65535)]
        [int]$redirectport ,

        [ValidateRange(0, 4094)]
        [double]$td ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$natip ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$srcippersistency ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$useproxyport ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$ownergroup ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$connfailover ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCUpdateRnat: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('name')) { $Payload.Add('name', $name) }
            if ($PSBoundParameters.ContainsKey('network')) { $Payload.Add('network', $network) }
            if ($PSBoundParameters.ContainsKey('netmask')) { $Payload.Add('netmask', $netmask) }
            if ($PSBoundParameters.ContainsKey('aclname')) { $Payload.Add('aclname', $aclname) }
            if ($PSBoundParameters.ContainsKey('redirectport')) { $Payload.Add('redirectport', $redirectport) }
            if ($PSBoundParameters.ContainsKey('td')) { $Payload.Add('td', $td) }
            if ($PSBoundParameters.ContainsKey('natip')) { $Payload.Add('natip', $natip) }
            if ($PSBoundParameters.ContainsKey('srcippersistency')) { $Payload.Add('srcippersistency', $srcippersistency) }
            if ($PSBoundParameters.ContainsKey('useproxyport')) { $Payload.Add('useproxyport', $useproxyport) }
            if ($PSBoundParameters.ContainsKey('ownergroup')) { $Payload.Add('ownergroup', $ownergroup) }
            if ($PSBoundParameters.ContainsKey('connfailover')) { $Payload.Add('connfailover', $connfailover) }
 
            if ($PSCmdlet.ShouldProcess("rnat", "Update Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -NitroPath nitro/v1/config -Type rnat -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetRnat -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUpdateRnat: Finished"
    }
}

function Invoke-ADCUnsetRnat {
<#
    .SYNOPSIS
        Unset Network configuration Object
    .DESCRIPTION
        Unset Network configuration Object 
   .PARAMETER name 
       Name for the RNAT4 rule. Must begin with a letter, number, or the underscore character (_), and can consist of letters, numbers, and the hyphen (-), period (.) pound (#), space ( ), at sign (@), equals (=), colon (:), and underscore characters. Cannot be changed after the rule is created. Choose a name that helps identify the RNAT4 rule. 
   .PARAMETER network 
       The network address defined for the RNAT entry. 
   .PARAMETER netmask 
       The subnet mask for the network address. 
   .PARAMETER aclname 
       An extended ACL defined for the RNAT entry. 
   .PARAMETER td 
       Integer value that uniquely identifies the traffic domain in which you want to configure the entity. If you do not specify an ID, the entity becomes part of the default traffic domain, which has an ID of 0. 
   .PARAMETER redirectport 
       Port number to which the IPv4 packets are redirected. Applicable to TCP and UDP protocols. 
   .PARAMETER natip 
       Any NetScaler-owned IPv4 address except the NSIP address. The NetScaler appliance replaces the source IP addresses of server-generated packets with the IP address specified. The IP address must be a public NetScaler-owned IP address. If you specify multiple addresses for this field, NATIP selection uses the round robin algorithm for each session. By specifying a owned IP addresses, except the NSIP, that fall within the specified range. 
   .PARAMETER srcippersistency 
       Enables the Citrix ADC to use the same NAT IP address for all RNAT sessions initiated from a particular server.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER ownergroup 
       The owner node group in a Cluster for this rnat rule. 
   .PARAMETER useproxyport 
       Enable source port proxying, which enables the Citrix ADC to use the RNAT ips using proxied source port.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER connfailover 
       Synchronize connection information with the secondary appliance in a high availability (HA) pair. That is, synchronize all connection-related information for the RNAT session. In order for this to work, tcpproxy should be DISABLED. To disable tcpproxy use "set rnatparam tcpproxy DISABLED".  
       Possible values = ENABLED, DISABLED
    .EXAMPLE
        Invoke-ADCUnsetRnat 
    .NOTES
        File Name : Invoke-ADCUnsetRnat
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/rnat
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Boolean]$name ,

        [Boolean]$network ,

        [Boolean]$netmask ,

        [Boolean]$aclname ,

        [Boolean]$td ,

        [Boolean]$redirectport ,

        [Boolean]$natip ,

        [Boolean]$srcippersistency ,

        [Boolean]$ownergroup ,

        [Boolean]$useproxyport ,

        [Boolean]$connfailover 
    )
    begin {
        Write-Verbose "Invoke-ADCUnsetRnat: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('name')) { $Payload.Add('name', $name) }
            if ($PSBoundParameters.ContainsKey('network')) { $Payload.Add('network', $network) }
            if ($PSBoundParameters.ContainsKey('netmask')) { $Payload.Add('netmask', $netmask) }
            if ($PSBoundParameters.ContainsKey('aclname')) { $Payload.Add('aclname', $aclname) }
            if ($PSBoundParameters.ContainsKey('td')) { $Payload.Add('td', $td) }
            if ($PSBoundParameters.ContainsKey('redirectport')) { $Payload.Add('redirectport', $redirectport) }
            if ($PSBoundParameters.ContainsKey('natip')) { $Payload.Add('natip', $natip) }
            if ($PSBoundParameters.ContainsKey('srcippersistency')) { $Payload.Add('srcippersistency', $srcippersistency) }
            if ($PSBoundParameters.ContainsKey('ownergroup')) { $Payload.Add('ownergroup', $ownergroup) }
            if ($PSBoundParameters.ContainsKey('useproxyport')) { $Payload.Add('useproxyport', $useproxyport) }
            if ($PSBoundParameters.ContainsKey('connfailover')) { $Payload.Add('connfailover', $connfailover) }
            if ($PSCmdlet.ShouldProcess("rnat", "Unset Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type rnat -NitroPath nitro/v1/config -Action unset -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUnsetRnat: Finished"
    }
}

function Invoke-ADCAddRnat {
<#
    .SYNOPSIS
        Add Network configuration Object
    .DESCRIPTION
        Add Network configuration Object 
    .PARAMETER name 
        Name for the RNAT4 rule. Must begin with a letter, number, or the underscore character (_), and can consist of letters, numbers, and the hyphen (-), period (.) pound (#), space ( ), at sign (@), equals (=), colon (:), and underscore characters. Cannot be changed after the rule is created. Choose a name that helps identify the RNAT4 rule.  
        Minimum length = 1 
    .PARAMETER network 
        The network address defined for the RNAT entry.  
        Minimum length = 1 
    .PARAMETER netmask 
        The subnet mask for the network address.  
        Minimum length = 1 
    .PARAMETER aclname 
        An extended ACL defined for the RNAT entry.  
        Minimum length = 1 
    .PARAMETER redirectport 
        Port number to which the IPv4 packets are redirected. Applicable to TCP and UDP protocols.  
        Minimum value = 1  
        Maximum value = 65535 
    .PARAMETER td 
        Integer value that uniquely identifies the traffic domain in which you want to configure the entity. If you do not specify an ID, the entity becomes part of the default traffic domain, which has an ID of 0.  
        Minimum value = 0  
        Maximum value = 4094 
    .PARAMETER srcippersistency 
        Enables the Citrix ADC to use the same NAT IP address for all RNAT sessions initiated from a particular server.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER useproxyport 
        Enable source port proxying, which enables the Citrix ADC to use the RNAT ips using proxied source port.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER connfailover 
        Synchronize connection information with the secondary appliance in a high availability (HA) pair. That is, synchronize all connection-related information for the RNAT session. In order for this to work, tcpproxy should be DISABLED. To disable tcpproxy use "set rnatparam tcpproxy DISABLED".  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER ownergroup 
        The owner node group in a Cluster for this rnat rule.  
        Default value: DEFAULT_NG  
        Minimum length = 1 
    .PARAMETER PassThru 
        Return details about the created rnat item.
    .EXAMPLE
        Invoke-ADCAddRnat -name <string>
    .NOTES
        File Name : Invoke-ADCAddRnat
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/rnat/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$network ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$netmask ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$aclname ,

        [ValidateRange(1, 65535)]
        [int]$redirectport ,

        [ValidateRange(0, 4094)]
        [double]$td ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$srcippersistency = 'DISABLED' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$useproxyport = 'ENABLED' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$connfailover = 'DISABLED' ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$ownergroup = 'DEFAULT_NG' ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddRnat: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
            }
            if ($PSBoundParameters.ContainsKey('network')) { $Payload.Add('network', $network) }
            if ($PSBoundParameters.ContainsKey('netmask')) { $Payload.Add('netmask', $netmask) }
            if ($PSBoundParameters.ContainsKey('aclname')) { $Payload.Add('aclname', $aclname) }
            if ($PSBoundParameters.ContainsKey('redirectport')) { $Payload.Add('redirectport', $redirectport) }
            if ($PSBoundParameters.ContainsKey('td')) { $Payload.Add('td', $td) }
            if ($PSBoundParameters.ContainsKey('srcippersistency')) { $Payload.Add('srcippersistency', $srcippersistency) }
            if ($PSBoundParameters.ContainsKey('useproxyport')) { $Payload.Add('useproxyport', $useproxyport) }
            if ($PSBoundParameters.ContainsKey('connfailover')) { $Payload.Add('connfailover', $connfailover) }
            if ($PSBoundParameters.ContainsKey('ownergroup')) { $Payload.Add('ownergroup', $ownergroup) }
 
            if ($PSCmdlet.ShouldProcess("rnat", "Add Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -NitroPath nitro/v1/config -Type rnat -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetRnat -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddRnat: Finished"
    }
}

function Invoke-ADCRenameRnat {
<#
    .SYNOPSIS
        Rename Network configuration Object
    .DESCRIPTION
        Rename Network configuration Object 
    .PARAMETER name 
        Name for the RNAT4 rule. Must begin with a letter, number, or the underscore character (_), and can consist of letters, numbers, and the hyphen (-), period (.) pound (#), space ( ), at sign (@), equals (=), colon (:), and underscore characters. Cannot be changed after the rule is created. Choose a name that helps identify the RNAT4 rule.  
        Minimum length = 1 
    .PARAMETER newname 
        New name for the RNAT4 rule. Must begin with an ASCII alphabetic or underscore (_) character, and must contain only ASCII alphanumeric, underscore, hash (#), period (.), space, colon (:), at (@), equals (=), and hyphen (-) characters.  
        Minimum length = 1 
    .PARAMETER PassThru 
        Return details about the created rnat item.
    .EXAMPLE
        Invoke-ADCRenameRnat -name <string> -newname <string>
    .NOTES
        File Name : Invoke-ADCRenameRnat
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/rnat/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name ,

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [ValidatePattern('^(([a-zA-Z0-9]|[_])+([a-zA-Z0-9]|[_])+)$')]
        [string]$newname ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCRenameRnat: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
                newname = $newname
            }

 
            if ($PSCmdlet.ShouldProcess("rnat", "Rename Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -NitroPath nitro/v1/config -Type rnat -Action rename -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetRnat -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCRenameRnat: Finished"
    }
}

function Invoke-ADCDeleteRnat {
<#
    .SYNOPSIS
        Delete Network configuration Object
    .DESCRIPTION
        Delete Network configuration Object
    .PARAMETER name 
       Name for the RNAT4 rule. Must begin with a letter, number, or the underscore character (_), and can consist of letters, numbers, and the hyphen (-), period (.) pound (#), space ( ), at sign (@), equals (=), colon (:), and underscore characters. Cannot be changed after the rule is created. Choose a name that helps identify the RNAT4 rule.  
       Minimum length = 1 
    .EXAMPLE
        Invoke-ADCDeleteRnat -name <string>
    .NOTES
        File Name : Invoke-ADCDeleteRnat
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/rnat/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$name 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteRnat: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }

            if ($PSCmdlet.ShouldProcess("$name", "Delete Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type rnat -NitroPath nitro/v1/config -Resource $name -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteRnat: Finished"
    }
}

function Invoke-ADCGetRnat {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER name 
       Name for the RNAT4 rule. Must begin with a letter, number, or the underscore character (_), and can consist of letters, numbers, and the hyphen (-), period (.) pound (#), space ( ), at sign (@), equals (=), colon (:), and underscore characters. Cannot be changed after the rule is created. Choose a name that helps identify the RNAT4 rule. 
    .PARAMETER GetAll 
        Retreive all rnat object(s)
    .PARAMETER Count
        If specified, the count of the rnat object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetRnat
    .EXAMPLE 
        Invoke-ADCGetRnat -GetAll 
    .EXAMPLE 
        Invoke-ADCGetRnat -Count
    .EXAMPLE
        Invoke-ADCGetRnat -name <string>
    .EXAMPLE
        Invoke-ADCGetRnat -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetRnat
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/rnat/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll,

        [Parameter(ParameterSetName = 'GetAll')]
        [Parameter(ParameterSetName = 'Get')]
        [Switch]$ViewSummary

    )
    begin {
        Write-Verbose "Invoke-ADCGetRnat: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all rnat objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type rnat -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for rnat objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type rnat -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving rnat objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type rnat -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving rnat configuration for property 'name'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type rnat -NitroPath nitro/v1/config -Resource $name -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving rnat configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type rnat -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetRnat: Ended"
    }
}

function Invoke-ADCAddRnat6 {
<#
    .SYNOPSIS
        Add Network configuration Object
    .DESCRIPTION
        Add Network configuration Object 
    .PARAMETER name 
        Name for the RNAT6 rule. Must begin with a letter, number, or the underscore character (_), and can consist of letters, numbers, and the hyphen (-), period (.) pound (#), space ( ), at sign (@), equals (=), colon (:), and underscore characters. Cannot be changed after the rule is created. Choose a name that helps identify the RNAT6 rule.  
        Minimum length = 1 
    .PARAMETER network 
        IPv6 address of the network on whose traffic you want the Citrix ADC to do RNAT processing.  
        Minimum length = 1 
    .PARAMETER acl6name 
        Name of any configured ACL6 whose action is ALLOW. The rule of the ACL6 is used as an RNAT6 rule.  
        Minimum length = 1 
    .PARAMETER redirectport 
        Port number to which the IPv6 packets are redirected. Applicable to TCP and UDP protocols.  
        Minimum value = 1  
        Maximum value = 65535 
    .PARAMETER td 
        Integer value that uniquely identifies the traffic domain in which you want to configure the entity. If you do not specify an ID, the entity becomes part of the default traffic domain, which has an ID of 0.  
        Minimum value = 0  
        Maximum value = 4094 
    .PARAMETER srcippersistency 
        Enable source ip persistency, which enables the Citrix ADC to use the RNAT ips using source ip.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER ownergroup 
        The owner node group in a Cluster for this rnat rule.  
        Default value: DEFAULT_NG  
        Minimum length = 1 
    .PARAMETER PassThru 
        Return details about the created rnat6 item.
    .EXAMPLE
        Invoke-ADCAddRnat6 -name <string>
    .NOTES
        File Name : Invoke-ADCAddRnat6
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/rnat6/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$network ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$acl6name ,

        [ValidateRange(1, 65535)]
        [int]$redirectport ,

        [ValidateRange(0, 4094)]
        [double]$td ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$srcippersistency = 'DISABLED' ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$ownergroup = 'DEFAULT_NG' ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddRnat6: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
            }
            if ($PSBoundParameters.ContainsKey('network')) { $Payload.Add('network', $network) }
            if ($PSBoundParameters.ContainsKey('acl6name')) { $Payload.Add('acl6name', $acl6name) }
            if ($PSBoundParameters.ContainsKey('redirectport')) { $Payload.Add('redirectport', $redirectport) }
            if ($PSBoundParameters.ContainsKey('td')) { $Payload.Add('td', $td) }
            if ($PSBoundParameters.ContainsKey('srcippersistency')) { $Payload.Add('srcippersistency', $srcippersistency) }
            if ($PSBoundParameters.ContainsKey('ownergroup')) { $Payload.Add('ownergroup', $ownergroup) }
 
            if ($PSCmdlet.ShouldProcess("rnat6", "Add Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -NitroPath nitro/v1/config -Type rnat6 -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetRnat6 -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddRnat6: Finished"
    }
}

function Invoke-ADCUpdateRnat6 {
<#
    .SYNOPSIS
        Update Network configuration Object
    .DESCRIPTION
        Update Network configuration Object 
    .PARAMETER name 
        Name for the RNAT6 rule. Must begin with a letter, number, or the underscore character (_), and can consist of letters, numbers, and the hyphen (-), period (.) pound (#), space ( ), at sign (@), equals (=), colon (:), and underscore characters. Cannot be changed after the rule is created. Choose a name that helps identify the RNAT6 rule.  
        Minimum length = 1 
    .PARAMETER redirectport 
        Port number to which the IPv6 packets are redirected. Applicable to TCP and UDP protocols.  
        Minimum value = 1  
        Maximum value = 65535 
    .PARAMETER srcippersistency 
        Enable source ip persistency, which enables the Citrix ADC to use the RNAT ips using source ip.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER ownergroup 
        The owner node group in a Cluster for this rnat rule.  
        Default value: DEFAULT_NG  
        Minimum length = 1 
    .PARAMETER PassThru 
        Return details about the created rnat6 item.
    .EXAMPLE
        Invoke-ADCUpdateRnat6 -name <string>
    .NOTES
        File Name : Invoke-ADCUpdateRnat6
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/rnat6/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name ,

        [ValidateRange(1, 65535)]
        [int]$redirectport ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$srcippersistency ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$ownergroup ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCUpdateRnat6: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
            }
            if ($PSBoundParameters.ContainsKey('redirectport')) { $Payload.Add('redirectport', $redirectport) }
            if ($PSBoundParameters.ContainsKey('srcippersistency')) { $Payload.Add('srcippersistency', $srcippersistency) }
            if ($PSBoundParameters.ContainsKey('ownergroup')) { $Payload.Add('ownergroup', $ownergroup) }
 
            if ($PSCmdlet.ShouldProcess("rnat6", "Update Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -NitroPath nitro/v1/config -Type rnat6 -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetRnat6 -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUpdateRnat6: Finished"
    }
}

function Invoke-ADCUnsetRnat6 {
<#
    .SYNOPSIS
        Unset Network configuration Object
    .DESCRIPTION
        Unset Network configuration Object 
   .PARAMETER name 
       Name for the RNAT6 rule. Must begin with a letter, number, or the underscore character (_), and can consist of letters, numbers, and the hyphen (-), period (.) pound (#), space ( ), at sign (@), equals (=), colon (:), and underscore characters. Cannot be changed after the rule is created. Choose a name that helps identify the RNAT6 rule. 
   .PARAMETER redirectport 
       Port number to which the IPv6 packets are redirected. Applicable to TCP and UDP protocols. 
   .PARAMETER srcippersistency 
       Enable source ip persistency, which enables the Citrix ADC to use the RNAT ips using source ip.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER ownergroup 
       The owner node group in a Cluster for this rnat rule.
    .EXAMPLE
        Invoke-ADCUnsetRnat6 -name <string>
    .NOTES
        File Name : Invoke-ADCUnsetRnat6
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/rnat6
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name ,

        [Boolean]$redirectport ,

        [Boolean]$srcippersistency ,

        [Boolean]$ownergroup 
    )
    begin {
        Write-Verbose "Invoke-ADCUnsetRnat6: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
            }
            if ($PSBoundParameters.ContainsKey('redirectport')) { $Payload.Add('redirectport', $redirectport) }
            if ($PSBoundParameters.ContainsKey('srcippersistency')) { $Payload.Add('srcippersistency', $srcippersistency) }
            if ($PSBoundParameters.ContainsKey('ownergroup')) { $Payload.Add('ownergroup', $ownergroup) }
            if ($PSCmdlet.ShouldProcess("$name", "Unset Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type rnat6 -NitroPath nitro/v1/config -Action unset -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUnsetRnat6: Finished"
    }
}

function Invoke-ADCClearRnat6 {
<#
    .SYNOPSIS
        Clear Network configuration Object
    .DESCRIPTION
        Clear Network configuration Object 
    .PARAMETER name 
        Name for the RNAT6 rule. Must begin with a letter, number, or the underscore character (_), and can consist of letters, numbers, and the hyphen (-), period (.) pound (#), space ( ), at sign (@), equals (=), colon (:), and underscore characters. Cannot be changed after the rule is created. Choose a name that helps identify the RNAT6 rule. 
    .PARAMETER ownergroup 
        The owner node group in a Cluster for this rnat rule.
    .EXAMPLE
        Invoke-ADCClearRnat6 -name <string>
    .NOTES
        File Name : Invoke-ADCClearRnat6
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/rnat6/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$ownergroup 

    )
    begin {
        Write-Verbose "Invoke-ADCClearRnat6: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
            }
            if ($PSBoundParameters.ContainsKey('ownergroup')) { $Payload.Add('ownergroup', $ownergroup) }
            if ($PSCmdlet.ShouldProcess($Name, "Clear Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -NitroPath nitro/v1/config -Type rnat6 -Action clear -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $result
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCClearRnat6: Finished"
    }
}

function Invoke-ADCGetRnat6 {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER name 
       Name for the RNAT6 rule. Must begin with a letter, number, or the underscore character (_), and can consist of letters, numbers, and the hyphen (-), period (.) pound (#), space ( ), at sign (@), equals (=), colon (:), and underscore characters. Cannot be changed after the rule is created. Choose a name that helps identify the RNAT6 rule. 
    .PARAMETER GetAll 
        Retreive all rnat6 object(s)
    .PARAMETER Count
        If specified, the count of the rnat6 object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetRnat6
    .EXAMPLE 
        Invoke-ADCGetRnat6 -GetAll 
    .EXAMPLE 
        Invoke-ADCGetRnat6 -Count
    .EXAMPLE
        Invoke-ADCGetRnat6 -name <string>
    .EXAMPLE
        Invoke-ADCGetRnat6 -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetRnat6
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/rnat6/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll,

        [Parameter(ParameterSetName = 'GetAll')]
        [Parameter(ParameterSetName = 'Get')]
        [Switch]$ViewSummary

    )
    begin {
        Write-Verbose "Invoke-ADCGetRnat6: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all rnat6 objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type rnat6 -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for rnat6 objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type rnat6 -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving rnat6 objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type rnat6 -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving rnat6 configuration for property 'name'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type rnat6 -NitroPath nitro/v1/config -Resource $name -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving rnat6 configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type rnat6 -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetRnat6: Ended"
    }
}

function Invoke-ADCGetRnat6binding {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER name 
       Name of the RNAT6 rule whose details you want to display. 
    .PARAMETER GetAll 
        Retreive all rnat6_binding object(s)
    .PARAMETER Count
        If specified, the count of the rnat6_binding object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetRnat6binding
    .EXAMPLE 
        Invoke-ADCGetRnat6binding -GetAll
    .EXAMPLE
        Invoke-ADCGetRnat6binding -name <string>
    .EXAMPLE
        Invoke-ADCGetRnat6binding -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetRnat6binding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/rnat6_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetRnat6binding: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ 
                    bulkbindings = 'yes'
                }
                Write-Verbose "Retrieving all rnat6_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type rnat6_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for rnat6_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type rnat6_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving rnat6_binding objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type rnat6_binding -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving rnat6_binding configuration for property 'name'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type rnat6_binding -NitroPath nitro/v1/config -Resource $name -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving rnat6_binding configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type rnat6_binding -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetRnat6binding: Ended"
    }
}

function Invoke-ADCAddRnat6nsip6binding {
<#
    .SYNOPSIS
        Add Network configuration Object
    .DESCRIPTION
        Add Network configuration Object 
    .PARAMETER name 
        Name of the RNAT6 rule to which to bind NAT IPs.  
        Minimum length = 1 
    .PARAMETER natip6 
        Nat IP Address.  
        Minimum length = 1 
    .PARAMETER ownergroup 
        The owner node group in a Cluster for this rnat rule.  
        Default value: DEFAULT_NG  
        Minimum length = 1 
    .PARAMETER PassThru 
        Return details about the created rnat6_nsip6_binding item.
    .EXAMPLE
        Invoke-ADCAddRnat6nsip6binding -name <string> -natip6 <string>
    .NOTES
        File Name : Invoke-ADCAddRnat6nsip6binding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/rnat6_nsip6_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name ,

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$natip6 ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$ownergroup = 'DEFAULT_NG' ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddRnat6nsip6binding: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
                natip6 = $natip6
            }
            if ($PSBoundParameters.ContainsKey('ownergroup')) { $Payload.Add('ownergroup', $ownergroup) }
 
            if ($PSCmdlet.ShouldProcess("rnat6_nsip6_binding", "Add Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -NitroPath nitro/v1/config -Type rnat6_nsip6_binding -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetRnat6nsip6binding -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddRnat6nsip6binding: Finished"
    }
}

function Invoke-ADCDeleteRnat6nsip6binding {
<#
    .SYNOPSIS
        Delete Network configuration Object
    .DESCRIPTION
        Delete Network configuration Object
    .PARAMETER name 
       Name of the RNAT6 rule to which to bind NAT IPs.  
       Minimum length = 1    .PARAMETER natip6 
       Nat IP Address.  
       Minimum length = 1    .PARAMETER ownergroup 
       The owner node group in a Cluster for this rnat rule.  
       Default value: DEFAULT_NG  
       Minimum length = 1
    .EXAMPLE
        Invoke-ADCDeleteRnat6nsip6binding -name <string>
    .NOTES
        File Name : Invoke-ADCDeleteRnat6nsip6binding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/rnat6_nsip6_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$name ,

        [string]$natip6 ,

        [string]$ownergroup 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteRnat6nsip6binding: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }
            if ($PSBoundParameters.ContainsKey('natip6')) { $Arguments.Add('natip6', $natip6) }
            if ($PSBoundParameters.ContainsKey('ownergroup')) { $Arguments.Add('ownergroup', $ownergroup) }
            if ($PSCmdlet.ShouldProcess("$name", "Delete Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type rnat6_nsip6_binding -NitroPath nitro/v1/config -Resource $name -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteRnat6nsip6binding: Finished"
    }
}

function Invoke-ADCGetRnat6nsip6binding {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER name 
       Name of the RNAT6 rule to which to bind NAT IPs. 
    .PARAMETER GetAll 
        Retreive all rnat6_nsip6_binding object(s)
    .PARAMETER Count
        If specified, the count of the rnat6_nsip6_binding object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetRnat6nsip6binding
    .EXAMPLE 
        Invoke-ADCGetRnat6nsip6binding -GetAll 
    .EXAMPLE 
        Invoke-ADCGetRnat6nsip6binding -Count
    .EXAMPLE
        Invoke-ADCGetRnat6nsip6binding -name <string>
    .EXAMPLE
        Invoke-ADCGetRnat6nsip6binding -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetRnat6nsip6binding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/rnat6_nsip6_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetRnat6nsip6binding: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ 
                    bulkbindings = 'yes'
                }
                Write-Verbose "Retrieving all rnat6_nsip6_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type rnat6_nsip6_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for rnat6_nsip6_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type rnat6_nsip6_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving rnat6_nsip6_binding objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type rnat6_nsip6_binding -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving rnat6_nsip6_binding configuration for property 'name'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type rnat6_nsip6_binding -NitroPath nitro/v1/config -Resource $name -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving rnat6_nsip6_binding configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type rnat6_nsip6_binding -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetRnat6nsip6binding: Ended"
    }
}

function Invoke-ADCAddRnatglobalauditsyslogpolicybinding {
<#
    .SYNOPSIS
        Add Network configuration Object
    .DESCRIPTION
        Add Network configuration Object 
    .PARAMETER policy 
        The policy Name. 
    .PARAMETER priority 
        The priority of the policy. 
    .PARAMETER PassThru 
        Return details about the created rnatglobal_auditsyslogpolicy_binding item.
    .EXAMPLE
        Invoke-ADCAddRnatglobalauditsyslogpolicybinding 
    .NOTES
        File Name : Invoke-ADCAddRnatglobalauditsyslogpolicybinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/rnatglobal_auditsyslogpolicy_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [string]$policy ,

        [double]$priority ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddRnatglobalauditsyslogpolicybinding: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('policy')) { $Payload.Add('policy', $policy) }
            if ($PSBoundParameters.ContainsKey('priority')) { $Payload.Add('priority', $priority) }
 
            if ($PSCmdlet.ShouldProcess("rnatglobal_auditsyslogpolicy_binding", "Add Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -NitroPath nitro/v1/config -Type rnatglobal_auditsyslogpolicy_binding -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetRnatglobalauditsyslogpolicybinding -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddRnatglobalauditsyslogpolicybinding: Finished"
    }
}

function Invoke-ADCDeleteRnatglobalauditsyslogpolicybinding {
<#
    .SYNOPSIS
        Delete Network configuration Object
    .DESCRIPTION
        Delete Network configuration Object
     .PARAMETER policy 
       The policy Name.    .PARAMETER all 
       Remove all RNAT global config.
    .EXAMPLE
        Invoke-ADCDeleteRnatglobalauditsyslogpolicybinding 
    .NOTES
        File Name : Invoke-ADCDeleteRnatglobalauditsyslogpolicybinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/rnatglobal_auditsyslogpolicy_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [string]$policy ,

        [boolean]$all 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteRnatglobalauditsyslogpolicybinding: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }
            if ($PSBoundParameters.ContainsKey('policy')) { $Arguments.Add('policy', $policy) }
            if ($PSBoundParameters.ContainsKey('all')) { $Arguments.Add('all', $all) }
            if ($PSCmdlet.ShouldProcess("rnatglobal_auditsyslogpolicy_binding", "Delete Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type rnatglobal_auditsyslogpolicy_binding -NitroPath nitro/v1/config -Resource $ -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteRnatglobalauditsyslogpolicybinding: Finished"
    }
}

function Invoke-ADCGetRnatglobalauditsyslogpolicybinding {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER GetAll 
        Retreive all rnatglobal_auditsyslogpolicy_binding object(s)
    .PARAMETER Count
        If specified, the count of the rnatglobal_auditsyslogpolicy_binding object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetRnatglobalauditsyslogpolicybinding
    .EXAMPLE 
        Invoke-ADCGetRnatglobalauditsyslogpolicybinding -GetAll 
    .EXAMPLE 
        Invoke-ADCGetRnatglobalauditsyslogpolicybinding -Count
    .EXAMPLE
        Invoke-ADCGetRnatglobalauditsyslogpolicybinding -name <string>
    .EXAMPLE
        Invoke-ADCGetRnatglobalauditsyslogpolicybinding -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetRnatglobalauditsyslogpolicybinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/rnatglobal_auditsyslogpolicy_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetRnatglobalauditsyslogpolicybinding: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ 
                    bulkbindings = 'yes'
                }
                Write-Verbose "Retrieving all rnatglobal_auditsyslogpolicy_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type rnatglobal_auditsyslogpolicy_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for rnatglobal_auditsyslogpolicy_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type rnatglobal_auditsyslogpolicy_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving rnatglobal_auditsyslogpolicy_binding objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type rnatglobal_auditsyslogpolicy_binding -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving rnatglobal_auditsyslogpolicy_binding configuration for property ''"

            } else {
                Write-Verbose "Retrieving rnatglobal_auditsyslogpolicy_binding configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type rnatglobal_auditsyslogpolicy_binding -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetRnatglobalauditsyslogpolicybinding: Ended"
    }
}

function Invoke-ADCGetRnatglobalbinding {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER GetAll 
        Retreive all rnatglobal_binding object(s)
    .PARAMETER Count
        If specified, the count of the rnatglobal_binding object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetRnatglobalbinding
    .EXAMPLE 
        Invoke-ADCGetRnatglobalbinding -GetAll
    .EXAMPLE
        Invoke-ADCGetRnatglobalbinding -name <string>
    .EXAMPLE
        Invoke-ADCGetRnatglobalbinding -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetRnatglobalbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/rnatglobal_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetRnatglobalbinding: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ 
                    bulkbindings = 'yes'
                }
                Write-Verbose "Retrieving all rnatglobal_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type rnatglobal_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for rnatglobal_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type rnatglobal_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving rnatglobal_binding objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type rnatglobal_binding -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving rnatglobal_binding configuration for property ''"

            } else {
                Write-Verbose "Retrieving rnatglobal_binding configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type rnatglobal_binding -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetRnatglobalbinding: Ended"
    }
}

function Invoke-ADCUpdateRnatparam {
<#
    .SYNOPSIS
        Update Network configuration Object
    .DESCRIPTION
        Update Network configuration Object 
    .PARAMETER tcpproxy 
        Enable TCP proxy, which enables the Citrix ADC to optimize the RNAT TCP traffic by using Layer 4 features.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER srcippersistency 
        Enable source ip persistency, which enables the Citrix ADC to use the RNAT ips using source ip.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED
    .EXAMPLE
        Invoke-ADCUpdateRnatparam 
    .NOTES
        File Name : Invoke-ADCUpdateRnatparam
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/rnatparam/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$tcpproxy ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$srcippersistency 

    )
    begin {
        Write-Verbose "Invoke-ADCUpdateRnatparam: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('tcpproxy')) { $Payload.Add('tcpproxy', $tcpproxy) }
            if ($PSBoundParameters.ContainsKey('srcippersistency')) { $Payload.Add('srcippersistency', $srcippersistency) }
 
            if ($PSCmdlet.ShouldProcess("rnatparam", "Update Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -NitroPath nitro/v1/config -Type rnatparam -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
            Write-Output $result

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUpdateRnatparam: Finished"
    }
}

function Invoke-ADCUnsetRnatparam {
<#
    .SYNOPSIS
        Unset Network configuration Object
    .DESCRIPTION
        Unset Network configuration Object 
   .PARAMETER tcpproxy 
       Enable TCP proxy, which enables the Citrix ADC to optimize the RNAT TCP traffic by using Layer 4 features.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER srcippersistency 
       Enable source ip persistency, which enables the Citrix ADC to use the RNAT ips using source ip.  
       Possible values = ENABLED, DISABLED
    .EXAMPLE
        Invoke-ADCUnsetRnatparam 
    .NOTES
        File Name : Invoke-ADCUnsetRnatparam
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/rnatparam
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Boolean]$tcpproxy ,

        [Boolean]$srcippersistency 
    )
    begin {
        Write-Verbose "Invoke-ADCUnsetRnatparam: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('tcpproxy')) { $Payload.Add('tcpproxy', $tcpproxy) }
            if ($PSBoundParameters.ContainsKey('srcippersistency')) { $Payload.Add('srcippersistency', $srcippersistency) }
            if ($PSCmdlet.ShouldProcess("rnatparam", "Unset Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type rnatparam -NitroPath nitro/v1/config -Action unset -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUnsetRnatparam: Finished"
    }
}

function Invoke-ADCGetRnatparam {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER GetAll 
        Retreive all rnatparam object(s)
    .PARAMETER Count
        If specified, the count of the rnatparam object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetRnatparam
    .EXAMPLE 
        Invoke-ADCGetRnatparam -GetAll
    .EXAMPLE
        Invoke-ADCGetRnatparam -name <string>
    .EXAMPLE
        Invoke-ADCGetRnatparam -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetRnatparam
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/rnatparam/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetRnatparam: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all rnatparam objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type rnatparam -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for rnatparam objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type rnatparam -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving rnatparam objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type rnatparam -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving rnatparam configuration for property ''"

            } else {
                Write-Verbose "Retrieving rnatparam configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type rnatparam -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetRnatparam: Ended"
    }
}

function Invoke-ADCFlushRnatsession {
<#
    .SYNOPSIS
        Flush Network configuration Object
    .DESCRIPTION
        Flush Network configuration Object 
    .PARAMETER network 
        IPv4 network address on whose traffic you want the Citrix ADC to do RNAT processing. 
    .PARAMETER netmask 
        Subnet mask associated with the network address. 
    .PARAMETER natip 
        The NAT IP address defined for the RNAT entry. 
    .PARAMETER aclname 
        Name of any configured extended ACL whose action is ALLOW.
    .EXAMPLE
        Invoke-ADCFlushRnatsession 
    .NOTES
        File Name : Invoke-ADCFlushRnatsession
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/rnatsession/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$network ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$netmask ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$natip ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$aclname 

    )
    begin {
        Write-Verbose "Invoke-ADCFlushRnatsession: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('network')) { $Payload.Add('network', $network) }
            if ($PSBoundParameters.ContainsKey('netmask')) { $Payload.Add('netmask', $netmask) }
            if ($PSBoundParameters.ContainsKey('natip')) { $Payload.Add('natip', $natip) }
            if ($PSBoundParameters.ContainsKey('aclname')) { $Payload.Add('aclname', $aclname) }
            if ($PSCmdlet.ShouldProcess($Name, "Flush Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -NitroPath nitro/v1/config -Type rnatsession -Action flush -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $result
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCFlushRnatsession: Finished"
    }
}

function Invoke-ADCGetRnatbinding {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER name 
       Name of the RNAT rule whose details you want to display. 
    .PARAMETER GetAll 
        Retreive all rnat_binding object(s)
    .PARAMETER Count
        If specified, the count of the rnat_binding object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetRnatbinding
    .EXAMPLE 
        Invoke-ADCGetRnatbinding -GetAll
    .EXAMPLE
        Invoke-ADCGetRnatbinding -name <string>
    .EXAMPLE
        Invoke-ADCGetRnatbinding -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetRnatbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/rnat_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetRnatbinding: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ 
                    bulkbindings = 'yes'
                }
                Write-Verbose "Retrieving all rnat_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type rnat_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for rnat_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type rnat_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving rnat_binding objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type rnat_binding -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving rnat_binding configuration for property 'name'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type rnat_binding -NitroPath nitro/v1/config -Resource $name -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving rnat_binding configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type rnat_binding -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetRnatbinding: Ended"
    }
}

function Invoke-ADCAddRnatnsipbinding {
<#
    .SYNOPSIS
        Add Network configuration Object
    .DESCRIPTION
        Add Network configuration Object 
    .PARAMETER name 
        Name of the RNAT rule to which to bind NAT IPs.  
        Minimum length = 1 
    .PARAMETER natip 
        Any NetScaler-owned IPv4 address except the NSIP address. The NetScaler appliance replaces the source IP addresses of server-generated packets with the IP address specified. The IP address must be a public NetScaler-owned IP address. If you specify multiple addresses for this field, NATIP selection uses the round robin algorithm for each session. By specifying a range of IP addresses, you can specify all NetScaler-owned IP addresses, except the NSIP, that fall within the specified range.  
        Minimum length = 1 
    .PARAMETER PassThru 
        Return details about the created rnat_nsip_binding item.
    .EXAMPLE
        Invoke-ADCAddRnatnsipbinding -name <string>
    .NOTES
        File Name : Invoke-ADCAddRnatnsipbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/rnat_nsip_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$natip ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddRnatnsipbinding: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
            }
            if ($PSBoundParameters.ContainsKey('natip')) { $Payload.Add('natip', $natip) }
 
            if ($PSCmdlet.ShouldProcess("rnat_nsip_binding", "Add Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -NitroPath nitro/v1/config -Type rnat_nsip_binding -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetRnatnsipbinding -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddRnatnsipbinding: Finished"
    }
}

function Invoke-ADCDeleteRnatnsipbinding {
<#
    .SYNOPSIS
        Delete Network configuration Object
    .DESCRIPTION
        Delete Network configuration Object
    .PARAMETER name 
       Name of the RNAT rule to which to bind NAT IPs.  
       Minimum length = 1    .PARAMETER natip 
       Any NetScaler-owned IPv4 address except the NSIP address. The NetScaler appliance replaces the source IP addresses of server-generated packets with the IP address specified. The IP address must be a public NetScaler-owned IP address. If you specify multiple addresses for this field, NATIP selection uses the round robin algorithm for each session. By specifying a range of IP addresses, you can specify all NetScaler-owned IP addresses, except the NSIP, that fall within the specified range.  
       Minimum length = 1
    .EXAMPLE
        Invoke-ADCDeleteRnatnsipbinding -name <string>
    .NOTES
        File Name : Invoke-ADCDeleteRnatnsipbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/rnat_nsip_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$name ,

        [string]$natip 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteRnatnsipbinding: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }
            if ($PSBoundParameters.ContainsKey('natip')) { $Arguments.Add('natip', $natip) }
            if ($PSCmdlet.ShouldProcess("$name", "Delete Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type rnat_nsip_binding -NitroPath nitro/v1/config -Resource $name -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteRnatnsipbinding: Finished"
    }
}

function Invoke-ADCGetRnatnsipbinding {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER name 
       Name of the RNAT rule to which to bind NAT IPs. 
    .PARAMETER GetAll 
        Retreive all rnat_nsip_binding object(s)
    .PARAMETER Count
        If specified, the count of the rnat_nsip_binding object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetRnatnsipbinding
    .EXAMPLE 
        Invoke-ADCGetRnatnsipbinding -GetAll 
    .EXAMPLE 
        Invoke-ADCGetRnatnsipbinding -Count
    .EXAMPLE
        Invoke-ADCGetRnatnsipbinding -name <string>
    .EXAMPLE
        Invoke-ADCGetRnatnsipbinding -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetRnatnsipbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/rnat_nsip_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetRnatnsipbinding: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ 
                    bulkbindings = 'yes'
                }
                Write-Verbose "Retrieving all rnat_nsip_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type rnat_nsip_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for rnat_nsip_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type rnat_nsip_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving rnat_nsip_binding objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type rnat_nsip_binding -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving rnat_nsip_binding configuration for property 'name'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type rnat_nsip_binding -NitroPath nitro/v1/config -Resource $name -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving rnat_nsip_binding configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type rnat_nsip_binding -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetRnatnsipbinding: Ended"
    }
}

function Invoke-ADCAddRnatretainsourceportsetbinding {
<#
    .SYNOPSIS
        Add Network configuration Object
    .DESCRIPTION
        Add Network configuration Object 
    .PARAMETER name 
        Name of the RNAT rule to which to bind NAT IPs.  
        Minimum length = 1 
    .PARAMETER retainsourceportrange 
        When the source port range is configured and associated with the RNAT rule, Citrix ADC will choose a port from the specified source port range configured for connection establishment at the backend servers.  
        Minimum length = 1024  
        Maximum length = 65535 
    .PARAMETER PassThru 
        Return details about the created rnat_retainsourceportset_binding item.
    .EXAMPLE
        Invoke-ADCAddRnatretainsourceportsetbinding -name <string>
    .NOTES
        File Name : Invoke-ADCAddRnatretainsourceportsetbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/rnat_retainsourceportset_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name ,

        [ValidateLength(1024, 65535)]
        [string]$retainsourceportrange ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddRnatretainsourceportsetbinding: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
            }
            if ($PSBoundParameters.ContainsKey('retainsourceportrange')) { $Payload.Add('retainsourceportrange', $retainsourceportrange) }
 
            if ($PSCmdlet.ShouldProcess("rnat_retainsourceportset_binding", "Add Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -NitroPath nitro/v1/config -Type rnat_retainsourceportset_binding -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetRnatretainsourceportsetbinding -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddRnatretainsourceportsetbinding: Finished"
    }
}

function Invoke-ADCDeleteRnatretainsourceportsetbinding {
<#
    .SYNOPSIS
        Delete Network configuration Object
    .DESCRIPTION
        Delete Network configuration Object
    .PARAMETER name 
       Name of the RNAT rule to which to bind NAT IPs.  
       Minimum length = 1    .PARAMETER retainsourceportrange 
       When the source port range is configured and associated with the RNAT rule, Citrix ADC will choose a port from the specified source port range configured for connection establishment at the backend servers.  
       Minimum length = 1024  
       Maximum length = 65535
    .EXAMPLE
        Invoke-ADCDeleteRnatretainsourceportsetbinding -name <string>
    .NOTES
        File Name : Invoke-ADCDeleteRnatretainsourceportsetbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/rnat_retainsourceportset_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$name ,

        [string]$retainsourceportrange 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteRnatretainsourceportsetbinding: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }
            if ($PSBoundParameters.ContainsKey('retainsourceportrange')) { $Arguments.Add('retainsourceportrange', $retainsourceportrange) }
            if ($PSCmdlet.ShouldProcess("$name", "Delete Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type rnat_retainsourceportset_binding -NitroPath nitro/v1/config -Resource $name -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteRnatretainsourceportsetbinding: Finished"
    }
}

function Invoke-ADCGetRnatretainsourceportsetbinding {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER name 
       Name of the RNAT rule to which to bind NAT IPs. 
    .PARAMETER GetAll 
        Retreive all rnat_retainsourceportset_binding object(s)
    .PARAMETER Count
        If specified, the count of the rnat_retainsourceportset_binding object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetRnatretainsourceportsetbinding
    .EXAMPLE 
        Invoke-ADCGetRnatretainsourceportsetbinding -GetAll 
    .EXAMPLE 
        Invoke-ADCGetRnatretainsourceportsetbinding -Count
    .EXAMPLE
        Invoke-ADCGetRnatretainsourceportsetbinding -name <string>
    .EXAMPLE
        Invoke-ADCGetRnatretainsourceportsetbinding -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetRnatretainsourceportsetbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/rnat_retainsourceportset_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetRnatretainsourceportsetbinding: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ 
                    bulkbindings = 'yes'
                }
                Write-Verbose "Retrieving all rnat_retainsourceportset_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type rnat_retainsourceportset_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for rnat_retainsourceportset_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type rnat_retainsourceportset_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving rnat_retainsourceportset_binding objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type rnat_retainsourceportset_binding -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving rnat_retainsourceportset_binding configuration for property 'name'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type rnat_retainsourceportset_binding -NitroPath nitro/v1/config -Resource $name -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving rnat_retainsourceportset_binding configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type rnat_retainsourceportset_binding -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetRnatretainsourceportsetbinding: Ended"
    }
}

function Invoke-ADCAddRoute {
<#
    .SYNOPSIS
        Add Network configuration Object
    .DESCRIPTION
        Add Network configuration Object 
    .PARAMETER network 
        IPv4 network address for which to add a route entry in the routing table of the Citrix ADC. 
    .PARAMETER netmask 
        The subnet mask associated with the network address. 
    .PARAMETER gateway 
        IP address of the gateway for this route. Can be either the IP address of the gateway, or can be null to specify a null interface route.  
        Minimum length = 1 
    .PARAMETER vlan 
        VLAN as the gateway for this route.  
        Minimum value = 1  
        Maximum value = 4094 
    .PARAMETER cost 
        Positive integer used by the routing algorithms to determine preference for using this route. The lower the cost, the higher the preference.  
        Minimum value = 0  
        Maximum value = 65535 
    .PARAMETER td 
        Integer value that uniquely identifies the traffic domain in which you want to configure the entity. If you do not specify an ID, the entity becomes part of the default traffic domain, which has an ID of 0.  
        Minimum value = 0  
        Maximum value = 4094 
    .PARAMETER distance 
        Administrative distance of this route, which determines the preference of this route over other routes, with same destination, from different routing protocols. A lower value is preferred.  
        Default value: 1  
        Minimum value = 0  
        Maximum value = 255 
    .PARAMETER cost1 
        The cost of a route is used to compare routes of the same type. The route having the lowest cost is the most preferred route. Possible values: 0 through 65535. Default: 0.  
        Minimum value = 0  
        Maximum value = 65535 
    .PARAMETER weight 
        Positive integer used by the routing algorithms to determine preference for this route over others of equal cost. The lower the weight, the higher the preference.  
        Default value: 1  
        Minimum value = 1  
        Maximum value = 65535 
    .PARAMETER advertise 
        Advertise this route.  
        Possible values = DISABLED, ENABLED 
    .PARAMETER protocol 
        Routing protocol used for advertising this route.  
        Default value: ADV_ROUTE_FLAGS  
        Possible values = OSPF, ISIS, RIP, BGP 
    .PARAMETER msr 
        Monitor this route using a monitor of type ARP or PING.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER monitor 
        Name of the monitor, of type ARP or PING, configured on the Citrix ADC to monitor this route.  
        Minimum length = 1 
    .PARAMETER ownergroup 
        The owner node group in a Cluster for this route. If owner node group is not specified then the route is treated as Striped route.  
        Default value: DEFAULT_NG  
        Minimum length = 1
    .EXAMPLE
        Invoke-ADCAddRoute -network <string> -netmask <string>
    .NOTES
        File Name : Invoke-ADCAddRoute
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/route/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$network ,

        [Parameter(Mandatory = $true)]
        [string]$netmask ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$gateway ,

        [ValidateRange(1, 4094)]
        [double]$vlan ,

        [ValidateRange(0, 65535)]
        [double]$cost ,

        [ValidateRange(0, 4094)]
        [double]$td ,

        [ValidateRange(0, 255)]
        [double]$distance = '1' ,

        [ValidateRange(0, 65535)]
        [double]$cost1 ,

        [ValidateRange(1, 65535)]
        [double]$weight = '1' ,

        [ValidateSet('DISABLED', 'ENABLED')]
        [string]$advertise ,

        [ValidateSet('OSPF', 'ISIS', 'RIP', 'BGP')]
        [string[]]$protocol = 'ADV_ROUTE_FLAGS' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$msr = 'DISABLED' ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$monitor ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$ownergroup = 'DEFAULT_NG' 

    )
    begin {
        Write-Verbose "Invoke-ADCAddRoute: Starting"
    }
    process {
        try {
            $Payload = @{
                network = $network
                netmask = $netmask
            }
            if ($PSBoundParameters.ContainsKey('gateway')) { $Payload.Add('gateway', $gateway) }
            if ($PSBoundParameters.ContainsKey('vlan')) { $Payload.Add('vlan', $vlan) }
            if ($PSBoundParameters.ContainsKey('cost')) { $Payload.Add('cost', $cost) }
            if ($PSBoundParameters.ContainsKey('td')) { $Payload.Add('td', $td) }
            if ($PSBoundParameters.ContainsKey('distance')) { $Payload.Add('distance', $distance) }
            if ($PSBoundParameters.ContainsKey('cost1')) { $Payload.Add('cost1', $cost1) }
            if ($PSBoundParameters.ContainsKey('weight')) { $Payload.Add('weight', $weight) }
            if ($PSBoundParameters.ContainsKey('advertise')) { $Payload.Add('advertise', $advertise) }
            if ($PSBoundParameters.ContainsKey('protocol')) { $Payload.Add('protocol', $protocol) }
            if ($PSBoundParameters.ContainsKey('msr')) { $Payload.Add('msr', $msr) }
            if ($PSBoundParameters.ContainsKey('monitor')) { $Payload.Add('monitor', $monitor) }
            if ($PSBoundParameters.ContainsKey('ownergroup')) { $Payload.Add('ownergroup', $ownergroup) }
 
            if ($PSCmdlet.ShouldProcess("route", "Add Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -NitroPath nitro/v1/config -Type route -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
            Write-Output $result

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddRoute: Finished"
    }
}

function Invoke-ADCClearRoute {
<#
    .SYNOPSIS
        Clear Network configuration Object
    .DESCRIPTION
        Clear Network configuration Object 
    .PARAMETER routetype 
        Protocol used by routes that you want to remove from the routing table of the Citrix ADC.  
        Possible values = CONNECTED, STATIC, DYNAMIC, OSPF, ISIS, RIP, BGP
    .EXAMPLE
        Invoke-ADCClearRoute -routetype <string>
    .NOTES
        File Name : Invoke-ADCClearRoute
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/route/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateSet('CONNECTED', 'STATIC', 'DYNAMIC', 'OSPF', 'ISIS', 'RIP', 'BGP')]
        [string]$routetype 

    )
    begin {
        Write-Verbose "Invoke-ADCClearRoute: Starting"
    }
    process {
        try {
            $Payload = @{
                routetype = $routetype
            }

            if ($PSCmdlet.ShouldProcess($Name, "Clear Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -NitroPath nitro/v1/config -Type route -Action clear -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $result
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCClearRoute: Finished"
    }
}

function Invoke-ADCDeleteRoute {
<#
    .SYNOPSIS
        Delete Network configuration Object
    .DESCRIPTION
        Delete Network configuration Object
    .PARAMETER network 
       IPv4 network address for which to add a route entry in the routing table of the Citrix ADC.    .PARAMETER netmask 
       The subnet mask associated with the network address.    .PARAMETER gateway 
       IP address of the gateway for this route. Can be either the IP address of the gateway, or can be null to specify a null interface route.  
       Minimum length = 1    .PARAMETER vlan 
       VLAN as the gateway for this route.  
       Minimum value = 1  
       Maximum value = 4094    .PARAMETER td 
       Integer value that uniquely identifies the traffic domain in which you want to configure the entity. If you do not specify an ID, the entity becomes part of the default traffic domain, which has an ID of 0.  
       Minimum value = 0  
       Maximum value = 4094    .PARAMETER ownergroup 
       The owner node group in a Cluster for this route. If owner node group is not specified then the route is treated as Striped route.  
       Default value: DEFAULT_NG  
       Minimum length = 1
    .EXAMPLE
        Invoke-ADCDeleteRoute -network <string>
    .NOTES
        File Name : Invoke-ADCDeleteRoute
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/route/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$network ,

        [string]$netmask ,

        [string]$gateway ,

        [double]$vlan ,

        [double]$td ,

        [string]$ownergroup 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteRoute: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }
            if ($PSBoundParameters.ContainsKey('netmask')) { $Arguments.Add('netmask', $netmask) }
            if ($PSBoundParameters.ContainsKey('gateway')) { $Arguments.Add('gateway', $gateway) }
            if ($PSBoundParameters.ContainsKey('vlan')) { $Arguments.Add('vlan', $vlan) }
            if ($PSBoundParameters.ContainsKey('td')) { $Arguments.Add('td', $td) }
            if ($PSBoundParameters.ContainsKey('ownergroup')) { $Arguments.Add('ownergroup', $ownergroup) }
            if ($PSCmdlet.ShouldProcess("$network", "Delete Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type route -NitroPath nitro/v1/config -Resource $network -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteRoute: Finished"
    }
}

function Invoke-ADCUpdateRoute {
<#
    .SYNOPSIS
        Update Network configuration Object
    .DESCRIPTION
        Update Network configuration Object 
    .PARAMETER network 
        IPv4 network address for which to add a route entry in the routing table of the Citrix ADC. 
    .PARAMETER netmask 
        The subnet mask associated with the network address. 
    .PARAMETER gateway 
        IP address of the gateway for this route. Can be either the IP address of the gateway, or can be null to specify a null interface route.  
        Minimum length = 1 
    .PARAMETER td 
        Integer value that uniquely identifies the traffic domain in which you want to configure the entity. If you do not specify an ID, the entity becomes part of the default traffic domain, which has an ID of 0.  
        Minimum value = 0  
        Maximum value = 4094 
    .PARAMETER distance 
        Administrative distance of this route, which determines the preference of this route over other routes, with same destination, from different routing protocols. A lower value is preferred.  
        Default value: 1  
        Minimum value = 0  
        Maximum value = 255 
    .PARAMETER cost1 
        The cost of a route is used to compare routes of the same type. The route having the lowest cost is the most preferred route. Possible values: 0 through 65535. Default: 0.  
        Minimum value = 0  
        Maximum value = 65535 
    .PARAMETER weight 
        Positive integer used by the routing algorithms to determine preference for this route over others of equal cost. The lower the weight, the higher the preference.  
        Default value: 1  
        Minimum value = 1  
        Maximum value = 65535 
    .PARAMETER advertise 
        Advertise this route.  
        Possible values = DISABLED, ENABLED 
    .PARAMETER protocol 
        Routing protocol used for advertising this route.  
        Default value: ADV_ROUTE_FLAGS  
        Possible values = OSPF, ISIS, RIP, BGP 
    .PARAMETER msr 
        Monitor this route using a monitor of type ARP or PING.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER monitor 
        Name of the monitor, of type ARP or PING, configured on the Citrix ADC to monitor this route.  
        Minimum length = 1
    .EXAMPLE
        Invoke-ADCUpdateRoute -network <string> -netmask <string> -gateway <string>
    .NOTES
        File Name : Invoke-ADCUpdateRoute
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/route/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$network ,

        [Parameter(Mandatory = $true)]
        [string]$netmask ,

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$gateway ,

        [ValidateRange(0, 4094)]
        [double]$td ,

        [ValidateRange(0, 255)]
        [double]$distance ,

        [ValidateRange(0, 65535)]
        [double]$cost1 ,

        [ValidateRange(1, 65535)]
        [double]$weight ,

        [ValidateSet('DISABLED', 'ENABLED')]
        [string]$advertise ,

        [ValidateSet('OSPF', 'ISIS', 'RIP', 'BGP')]
        [string[]]$protocol ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$msr ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$monitor 

    )
    begin {
        Write-Verbose "Invoke-ADCUpdateRoute: Starting"
    }
    process {
        try {
            $Payload = @{
                network = $network
                netmask = $netmask
                gateway = $gateway
            }
            if ($PSBoundParameters.ContainsKey('td')) { $Payload.Add('td', $td) }
            if ($PSBoundParameters.ContainsKey('distance')) { $Payload.Add('distance', $distance) }
            if ($PSBoundParameters.ContainsKey('cost1')) { $Payload.Add('cost1', $cost1) }
            if ($PSBoundParameters.ContainsKey('weight')) { $Payload.Add('weight', $weight) }
            if ($PSBoundParameters.ContainsKey('advertise')) { $Payload.Add('advertise', $advertise) }
            if ($PSBoundParameters.ContainsKey('protocol')) { $Payload.Add('protocol', $protocol) }
            if ($PSBoundParameters.ContainsKey('msr')) { $Payload.Add('msr', $msr) }
            if ($PSBoundParameters.ContainsKey('monitor')) { $Payload.Add('monitor', $monitor) }
 
            if ($PSCmdlet.ShouldProcess("route", "Update Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -NitroPath nitro/v1/config -Type route -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
            Write-Output $result

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUpdateRoute: Finished"
    }
}

function Invoke-ADCUnsetRoute {
<#
    .SYNOPSIS
        Unset Network configuration Object
    .DESCRIPTION
        Unset Network configuration Object 
   .PARAMETER network 
       IPv4 network address for which to add a route entry in the routing table of the Citrix ADC. 
   .PARAMETER netmask 
       The subnet mask associated with the network address. 
   .PARAMETER gateway 
       IP address of the gateway for this route. Can be either the IP address of the gateway, or can be null to specify a null interface route. 
   .PARAMETER td 
       Integer value that uniquely identifies the traffic domain in which you want to configure the entity. If you do not specify an ID, the entity becomes part of the default traffic domain, which has an ID of 0. 
   .PARAMETER advertise 
       Advertise this route.  
       Possible values = DISABLED, ENABLED 
   .PARAMETER distance 
       Administrative distance of this route, which determines the preference of this route over other routes, with same destination, from different routing protocols. A lower value is preferred. 
   .PARAMETER cost1 
       The cost of a route is used to compare routes of the same type. The route having the lowest cost is the most preferred route. Possible values: 0 through 65535. Default: 0. 
   .PARAMETER weight 
       Positive integer used by the routing algorithms to determine preference for this route over others of equal cost. The lower the weight, the higher the preference. 
   .PARAMETER protocol 
       Routing protocol used for advertising this route.  
       Possible values = OSPF, ISIS, RIP, BGP 
   .PARAMETER msr 
       Monitor this route using a monitor of type ARP or PING.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER monitor 
       Name of the monitor, of type ARP or PING, configured on the Citrix ADC to monitor this route.
    .EXAMPLE
        Invoke-ADCUnsetRoute -network <string> -netmask <string> -gateway <string>
    .NOTES
        File Name : Invoke-ADCUnsetRoute
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/route
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$network ,

        [Parameter(Mandatory = $true)]
        [string]$netmask ,

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$gateway ,

        [Boolean]$td ,

        [Boolean]$advertise ,

        [Boolean]$distance ,

        [Boolean]$cost1 ,

        [Boolean]$weight ,

        [Boolean]$protocol ,

        [Boolean]$msr ,

        [Boolean]$monitor 
    )
    begin {
        Write-Verbose "Invoke-ADCUnsetRoute: Starting"
    }
    process {
        try {
            $Payload = @{
                network = $network
                netmask = $netmask
                gateway = $gateway
            }
            if ($PSBoundParameters.ContainsKey('td')) { $Payload.Add('td', $td) }
            if ($PSBoundParameters.ContainsKey('advertise')) { $Payload.Add('advertise', $advertise) }
            if ($PSBoundParameters.ContainsKey('distance')) { $Payload.Add('distance', $distance) }
            if ($PSBoundParameters.ContainsKey('cost1')) { $Payload.Add('cost1', $cost1) }
            if ($PSBoundParameters.ContainsKey('weight')) { $Payload.Add('weight', $weight) }
            if ($PSBoundParameters.ContainsKey('protocol')) { $Payload.Add('protocol', $protocol) }
            if ($PSBoundParameters.ContainsKey('msr')) { $Payload.Add('msr', $msr) }
            if ($PSBoundParameters.ContainsKey('monitor')) { $Payload.Add('monitor', $monitor) }
            if ($PSCmdlet.ShouldProcess("$network netmask gateway", "Unset Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type route -NitroPath nitro/v1/config -Action unset -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUnsetRoute: Finished"
    }
}

function Invoke-ADCGetRoute {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER network 
       IPv4 network address for which to add a route entry in the routing table of the Citrix ADC. 
    .PARAMETER netmask 
       The subnet mask associated with the network address. 
    .PARAMETER gateway 
       IP address of the gateway for this route. Can be either the IP address of the gateway, or can be null to specify a null interface route. 
    .PARAMETER vlan 
       VLAN as the gateway for this route. 
    .PARAMETER td 
       Integer value that uniquely identifies the traffic domain in which you want to configure the entity. If you do not specify an ID, the entity becomes part of the default traffic domain, which has an ID of 0. 
    .PARAMETER routetype 
       Protocol used by routes that you want to remove from the routing table of the Citrix ADC.  
       Possible values = CONNECTED, STATIC, DYNAMIC, OSPF, ISIS, RIP, BGP 
    .PARAMETER detail 
       Display a detailed view. 
    .PARAMETER GetAll 
        Retreive all route object(s)
    .PARAMETER Count
        If specified, the count of the route object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetRoute
    .EXAMPLE 
        Invoke-ADCGetRoute -GetAll 
    .EXAMPLE 
        Invoke-ADCGetRoute -Count
    .EXAMPLE
        Invoke-ADCGetRoute -name <string>
    .EXAMPLE
        Invoke-ADCGetRoute -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetRoute
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/route/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByArgument')]
        [string]$network ,

        [Parameter(ParameterSetName = 'GetByArgument')]
        [string]$netmask ,

        [Parameter(ParameterSetName = 'GetByArgument')]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$gateway ,

        [Parameter(ParameterSetName = 'GetByArgument')]
        [ValidateRange(1, 4094)]
        [double]$vlan ,

        [Parameter(ParameterSetName = 'GetByArgument')]
        [ValidateRange(0, 4094)]
        [double]$td ,

        [Parameter(ParameterSetName = 'GetByArgument')]
        [ValidateSet('CONNECTED', 'STATIC', 'DYNAMIC', 'OSPF', 'ISIS', 'RIP', 'BGP')]
        [string]$routetype ,

        [Parameter(ParameterSetName = 'GetByArgument')]
        [boolean]$detail,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll,

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$ViewSummary

    )
    begin {
        Write-Verbose "Invoke-ADCGetRoute: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all route objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type route -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for route objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type route -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving route objects by arguments"
                $Arguments = @{ } 
                if ($PSBoundParameters.ContainsKey('network')) { $Arguments.Add('network', $network) } 
                if ($PSBoundParameters.ContainsKey('netmask')) { $Arguments.Add('netmask', $netmask) } 
                if ($PSBoundParameters.ContainsKey('gateway')) { $Arguments.Add('gateway', $gateway) } 
                if ($PSBoundParameters.ContainsKey('vlan')) { $Arguments.Add('vlan', $vlan) } 
                if ($PSBoundParameters.ContainsKey('td')) { $Arguments.Add('td', $td) } 
                if ($PSBoundParameters.ContainsKey('routetype')) { $Arguments.Add('routetype', $routetype) } 
                if ($PSBoundParameters.ContainsKey('detail')) { $Arguments.Add('detail', $detail) }
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type route -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving route configuration for property ''"

            } else {
                Write-Verbose "Retrieving route configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type route -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetRoute: Ended"
    }
}

function Invoke-ADCAddRoute6 {
<#
    .SYNOPSIS
        Add Network configuration Object
    .DESCRIPTION
        Add Network configuration Object 
    .PARAMETER network 
        IPv6 network address for which to add a route entry to the routing table of the Citrix ADC. 
    .PARAMETER gateway 
        The gateway for this route. The value for this parameter is either an IPv6 address or null.  
        Default value: 0 
    .PARAMETER vlan 
        Integer value that uniquely identifies a VLAN through which the Citrix ADC forwards the packets for this route.  
        Default value: 0  
        Minimum value = 0  
        Maximum value = 4094 
    .PARAMETER vxlan 
        Integer value that uniquely identifies a VXLAN through which the Citrix ADC forwards the packets for this route.  
        Minimum value = 1  
        Maximum value = 16777215 
    .PARAMETER weight 
        Positive integer used by the routing algorithms to determine preference for this route over others of equal cost. The lower the weight, the higher the preference.  
        Default value: 1  
        Minimum value = 1  
        Maximum value = 65535 
    .PARAMETER distance 
        Administrative distance of this route from the appliance.  
        Default value: 1  
        Minimum value = 1  
        Maximum value = 254 
    .PARAMETER cost 
        Positive integer used by the routing algorithms to determine preference for this route. The lower the cost, the higher the preference.  
        Default value: 1  
        Minimum value = 0  
        Maximum value = 65535 
    .PARAMETER advertise 
        Advertise this route.  
        Possible values = DISABLED, ENABLED 
    .PARAMETER msr 
        Monitor this route with a monitor of type ND6 or PING.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER monitor 
        Name of the monitor, of type ND6 or PING, configured on the Citrix ADC to monitor this route.  
        Minimum length = 1 
    .PARAMETER td 
        Integer value that uniquely identifies the traffic domain in which you want to configure the entity. If you do not specify an ID, the entity becomes part of the default traffic domain, which has an ID of 0.  
        Minimum value = 0  
        Maximum value = 4094 
    .PARAMETER ownergroup 
        The owner node group in a Cluster for this route6. If owner node group is not specified then the route is treated as Striped route.  
        Default value: DEFAULT_NG  
        Minimum length = 1
    .EXAMPLE
        Invoke-ADCAddRoute6 -network <string>
    .NOTES
        File Name : Invoke-ADCAddRoute6
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/route6/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$network ,

        [string]$gateway = '0' ,

        [ValidateRange(0, 4094)]
        [double]$vlan = '0' ,

        [ValidateRange(1, 16777215)]
        [double]$vxlan ,

        [ValidateRange(1, 65535)]
        [double]$weight = '1' ,

        [ValidateRange(1, 254)]
        [double]$distance = '1' ,

        [ValidateRange(0, 65535)]
        [double]$cost = '1' ,

        [ValidateSet('DISABLED', 'ENABLED')]
        [string]$advertise ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$msr = 'DISABLED' ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$monitor ,

        [ValidateRange(0, 4094)]
        [double]$td ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$ownergroup = 'DEFAULT_NG' 

    )
    begin {
        Write-Verbose "Invoke-ADCAddRoute6: Starting"
    }
    process {
        try {
            $Payload = @{
                network = $network
            }
            if ($PSBoundParameters.ContainsKey('gateway')) { $Payload.Add('gateway', $gateway) }
            if ($PSBoundParameters.ContainsKey('vlan')) { $Payload.Add('vlan', $vlan) }
            if ($PSBoundParameters.ContainsKey('vxlan')) { $Payload.Add('vxlan', $vxlan) }
            if ($PSBoundParameters.ContainsKey('weight')) { $Payload.Add('weight', $weight) }
            if ($PSBoundParameters.ContainsKey('distance')) { $Payload.Add('distance', $distance) }
            if ($PSBoundParameters.ContainsKey('cost')) { $Payload.Add('cost', $cost) }
            if ($PSBoundParameters.ContainsKey('advertise')) { $Payload.Add('advertise', $advertise) }
            if ($PSBoundParameters.ContainsKey('msr')) { $Payload.Add('msr', $msr) }
            if ($PSBoundParameters.ContainsKey('monitor')) { $Payload.Add('monitor', $monitor) }
            if ($PSBoundParameters.ContainsKey('td')) { $Payload.Add('td', $td) }
            if ($PSBoundParameters.ContainsKey('ownergroup')) { $Payload.Add('ownergroup', $ownergroup) }
 
            if ($PSCmdlet.ShouldProcess("route6", "Add Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -NitroPath nitro/v1/config -Type route6 -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
            Write-Output $result

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddRoute6: Finished"
    }
}

function Invoke-ADCClearRoute6 {
<#
    .SYNOPSIS
        Clear Network configuration Object
    .DESCRIPTION
        Clear Network configuration Object 
    .PARAMETER routetype 
        Type of IPv6 routes to remove from the routing table of the Citrix ADC.  
        Possible values = CONNECTED, STATIC, DYNAMIC, OSPF, ISIS, BGP, RIP, ND-RA-ROUTE, FIB6
    .EXAMPLE
        Invoke-ADCClearRoute6 -routetype <string>
    .NOTES
        File Name : Invoke-ADCClearRoute6
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/route6/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateSet('CONNECTED', 'STATIC', 'DYNAMIC', 'OSPF', 'ISIS', 'BGP', 'RIP', 'ND-RA-ROUTE', 'FIB6')]
        [string]$routetype 

    )
    begin {
        Write-Verbose "Invoke-ADCClearRoute6: Starting"
    }
    process {
        try {
            $Payload = @{
                routetype = $routetype
            }

            if ($PSCmdlet.ShouldProcess($Name, "Clear Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -NitroPath nitro/v1/config -Type route6 -Action clear -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $result
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCClearRoute6: Finished"
    }
}

function Invoke-ADCDeleteRoute6 {
<#
    .SYNOPSIS
        Delete Network configuration Object
    .DESCRIPTION
        Delete Network configuration Object
    .PARAMETER network 
       IPv6 network address for which to add a route entry to the routing table of the Citrix ADC.    .PARAMETER gateway 
       The gateway for this route. The value for this parameter is either an IPv6 address or null.  
       Default value: 0    .PARAMETER vlan 
       Integer value that uniquely identifies a VLAN through which the Citrix ADC forwards the packets for this route.  
       Default value: 0  
       Minimum value = 0  
       Maximum value = 4094    .PARAMETER vxlan 
       Integer value that uniquely identifies a VXLAN through which the Citrix ADC forwards the packets for this route.  
       Minimum value = 1  
       Maximum value = 16777215    .PARAMETER td 
       Integer value that uniquely identifies the traffic domain in which you want to configure the entity. If you do not specify an ID, the entity becomes part of the default traffic domain, which has an ID of 0.  
       Minimum value = 0  
       Maximum value = 4094    .PARAMETER ownergroup 
       The owner node group in a Cluster for this route6. If owner node group is not specified then the route is treated as Striped route.  
       Default value: DEFAULT_NG  
       Minimum length = 1
    .EXAMPLE
        Invoke-ADCDeleteRoute6 -network <string>
    .NOTES
        File Name : Invoke-ADCDeleteRoute6
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/route6/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$network ,

        [string]$gateway ,

        [double]$vlan ,

        [double]$vxlan ,

        [double]$td ,

        [string]$ownergroup 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteRoute6: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }
            if ($PSBoundParameters.ContainsKey('gateway')) { $Arguments.Add('gateway', $gateway) }
            if ($PSBoundParameters.ContainsKey('vlan')) { $Arguments.Add('vlan', $vlan) }
            if ($PSBoundParameters.ContainsKey('vxlan')) { $Arguments.Add('vxlan', $vxlan) }
            if ($PSBoundParameters.ContainsKey('td')) { $Arguments.Add('td', $td) }
            if ($PSBoundParameters.ContainsKey('ownergroup')) { $Arguments.Add('ownergroup', $ownergroup) }
            if ($PSCmdlet.ShouldProcess("$network", "Delete Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type route6 -NitroPath nitro/v1/config -Resource $network -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteRoute6: Finished"
    }
}

function Invoke-ADCUpdateRoute6 {
<#
    .SYNOPSIS
        Update Network configuration Object
    .DESCRIPTION
        Update Network configuration Object 
    .PARAMETER network 
        IPv6 network address for which to add a route entry to the routing table of the Citrix ADC. 
    .PARAMETER gateway 
        The gateway for this route. The value for this parameter is either an IPv6 address or null.  
        Default value: 0 
    .PARAMETER vlan 
        Integer value that uniquely identifies a VLAN through which the Citrix ADC forwards the packets for this route.  
        Default value: 0  
        Minimum value = 0  
        Maximum value = 4094 
    .PARAMETER vxlan 
        Integer value that uniquely identifies a VXLAN through which the Citrix ADC forwards the packets for this route.  
        Minimum value = 1  
        Maximum value = 16777215 
    .PARAMETER weight 
        Positive integer used by the routing algorithms to determine preference for this route over others of equal cost. The lower the weight, the higher the preference.  
        Default value: 1  
        Minimum value = 1  
        Maximum value = 65535 
    .PARAMETER distance 
        Administrative distance of this route from the appliance.  
        Default value: 1  
        Minimum value = 1  
        Maximum value = 254 
    .PARAMETER cost 
        Positive integer used by the routing algorithms to determine preference for this route. The lower the cost, the higher the preference.  
        Default value: 1  
        Minimum value = 0  
        Maximum value = 65535 
    .PARAMETER advertise 
        Advertise this route.  
        Possible values = DISABLED, ENABLED 
    .PARAMETER msr 
        Monitor this route with a monitor of type ND6 or PING.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER monitor 
        Name of the monitor, of type ND6 or PING, configured on the Citrix ADC to monitor this route.  
        Minimum length = 1 
    .PARAMETER td 
        Integer value that uniquely identifies the traffic domain in which you want to configure the entity. If you do not specify an ID, the entity becomes part of the default traffic domain, which has an ID of 0.  
        Minimum value = 0  
        Maximum value = 4094
    .EXAMPLE
        Invoke-ADCUpdateRoute6 -network <string>
    .NOTES
        File Name : Invoke-ADCUpdateRoute6
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/route6/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$network ,

        [string]$gateway ,

        [ValidateRange(0, 4094)]
        [double]$vlan ,

        [ValidateRange(1, 16777215)]
        [double]$vxlan ,

        [ValidateRange(1, 65535)]
        [double]$weight ,

        [ValidateRange(1, 254)]
        [double]$distance ,

        [ValidateRange(0, 65535)]
        [double]$cost ,

        [ValidateSet('DISABLED', 'ENABLED')]
        [string]$advertise ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$msr ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$monitor ,

        [ValidateRange(0, 4094)]
        [double]$td 

    )
    begin {
        Write-Verbose "Invoke-ADCUpdateRoute6: Starting"
    }
    process {
        try {
            $Payload = @{
                network = $network
            }
            if ($PSBoundParameters.ContainsKey('gateway')) { $Payload.Add('gateway', $gateway) }
            if ($PSBoundParameters.ContainsKey('vlan')) { $Payload.Add('vlan', $vlan) }
            if ($PSBoundParameters.ContainsKey('vxlan')) { $Payload.Add('vxlan', $vxlan) }
            if ($PSBoundParameters.ContainsKey('weight')) { $Payload.Add('weight', $weight) }
            if ($PSBoundParameters.ContainsKey('distance')) { $Payload.Add('distance', $distance) }
            if ($PSBoundParameters.ContainsKey('cost')) { $Payload.Add('cost', $cost) }
            if ($PSBoundParameters.ContainsKey('advertise')) { $Payload.Add('advertise', $advertise) }
            if ($PSBoundParameters.ContainsKey('msr')) { $Payload.Add('msr', $msr) }
            if ($PSBoundParameters.ContainsKey('monitor')) { $Payload.Add('monitor', $monitor) }
            if ($PSBoundParameters.ContainsKey('td')) { $Payload.Add('td', $td) }
 
            if ($PSCmdlet.ShouldProcess("route6", "Update Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -NitroPath nitro/v1/config -Type route6 -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
            Write-Output $result

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUpdateRoute6: Finished"
    }
}

function Invoke-ADCUnsetRoute6 {
<#
    .SYNOPSIS
        Unset Network configuration Object
    .DESCRIPTION
        Unset Network configuration Object 
   .PARAMETER network 
       IPv6 network address for which to add a route entry to the routing table of the Citrix ADC. 
   .PARAMETER gateway 
       The gateway for this route. The value for this parameter is either an IPv6 address or null. 
   .PARAMETER vlan 
       Integer value that uniquely identifies a VLAN through which the Citrix ADC forwards the packets for this route. 
   .PARAMETER vxlan 
       Integer value that uniquely identifies a VXLAN through which the Citrix ADC forwards the packets for this route. 
   .PARAMETER td 
       Integer value that uniquely identifies the traffic domain in which you want to configure the entity. If you do not specify an ID, the entity becomes part of the default traffic domain, which has an ID of 0. 
   .PARAMETER weight 
       Positive integer used by the routing algorithms to determine preference for this route over others of equal cost. The lower the weight, the higher the preference. 
   .PARAMETER distance 
       Administrative distance of this route from the appliance. 
   .PARAMETER cost 
       Positive integer used by the routing algorithms to determine preference for this route. The lower the cost, the higher the preference. 
   .PARAMETER advertise 
       Advertise this route.  
       Possible values = DISABLED, ENABLED 
   .PARAMETER msr 
       Monitor this route with a monitor of type ND6 or PING.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER monitor 
       Name of the monitor, of type ND6 or PING, configured on the Citrix ADC to monitor this route.
    .EXAMPLE
        Invoke-ADCUnsetRoute6 -network <string>
    .NOTES
        File Name : Invoke-ADCUnsetRoute6
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/route6
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$network ,

        [Boolean]$gateway ,

        [Boolean]$vlan ,

        [Boolean]$vxlan ,

        [Boolean]$td ,

        [Boolean]$weight ,

        [Boolean]$distance ,

        [Boolean]$cost ,

        [Boolean]$advertise ,

        [Boolean]$msr ,

        [Boolean]$monitor 
    )
    begin {
        Write-Verbose "Invoke-ADCUnsetRoute6: Starting"
    }
    process {
        try {
            $Payload = @{
                network = $network
            }
            if ($PSBoundParameters.ContainsKey('gateway')) { $Payload.Add('gateway', $gateway) }
            if ($PSBoundParameters.ContainsKey('vlan')) { $Payload.Add('vlan', $vlan) }
            if ($PSBoundParameters.ContainsKey('vxlan')) { $Payload.Add('vxlan', $vxlan) }
            if ($PSBoundParameters.ContainsKey('td')) { $Payload.Add('td', $td) }
            if ($PSBoundParameters.ContainsKey('weight')) { $Payload.Add('weight', $weight) }
            if ($PSBoundParameters.ContainsKey('distance')) { $Payload.Add('distance', $distance) }
            if ($PSBoundParameters.ContainsKey('cost')) { $Payload.Add('cost', $cost) }
            if ($PSBoundParameters.ContainsKey('advertise')) { $Payload.Add('advertise', $advertise) }
            if ($PSBoundParameters.ContainsKey('msr')) { $Payload.Add('msr', $msr) }
            if ($PSBoundParameters.ContainsKey('monitor')) { $Payload.Add('monitor', $monitor) }
            if ($PSCmdlet.ShouldProcess("$network", "Unset Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type route6 -NitroPath nitro/v1/config -Action unset -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUnsetRoute6: Finished"
    }
}

function Invoke-ADCGetRoute6 {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER network 
       IPv6 network address for which to add a route entry to the routing table of the Citrix ADC. 
    .PARAMETER gateway 
       The gateway for this route. The value for this parameter is either an IPv6 address or null. 
    .PARAMETER vlan 
       Integer value that uniquely identifies a VLAN through which the Citrix ADC forwards the packets for this route. 
    .PARAMETER vxlan 
       Integer value that uniquely identifies a VXLAN through which the Citrix ADC forwards the packets for this route. 
    .PARAMETER td 
       Integer value that uniquely identifies the traffic domain in which you want to configure the entity. If you do not specify an ID, the entity becomes part of the default traffic domain, which has an ID of 0. 
    .PARAMETER routetype 
       Type of IPv6 routes to remove from the routing table of the Citrix ADC.  
       Possible values = CONNECTED, STATIC, DYNAMIC, OSPF, ISIS, BGP, RIP, ND-RA-ROUTE, FIB6 
    .PARAMETER detail 
       To get a detailed view. 
    .PARAMETER GetAll 
        Retreive all route6 object(s)
    .PARAMETER Count
        If specified, the count of the route6 object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetRoute6
    .EXAMPLE 
        Invoke-ADCGetRoute6 -GetAll 
    .EXAMPLE 
        Invoke-ADCGetRoute6 -Count
    .EXAMPLE
        Invoke-ADCGetRoute6 -name <string>
    .EXAMPLE
        Invoke-ADCGetRoute6 -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetRoute6
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/route6/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByArgument')]
        [string]$network ,

        [Parameter(ParameterSetName = 'GetByArgument')]
        [string]$gateway ,

        [Parameter(ParameterSetName = 'GetByArgument')]
        [ValidateRange(0, 4094)]
        [double]$vlan ,

        [Parameter(ParameterSetName = 'GetByArgument')]
        [ValidateRange(1, 16777215)]
        [double]$vxlan ,

        [Parameter(ParameterSetName = 'GetByArgument')]
        [ValidateRange(0, 4094)]
        [double]$td ,

        [Parameter(ParameterSetName = 'GetByArgument')]
        [ValidateSet('CONNECTED', 'STATIC', 'DYNAMIC', 'OSPF', 'ISIS', 'BGP', 'RIP', 'ND-RA-ROUTE', 'FIB6')]
        [string]$routetype ,

        [Parameter(ParameterSetName = 'GetByArgument')]
        [boolean]$detail,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll,

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$ViewSummary

    )
    begin {
        Write-Verbose "Invoke-ADCGetRoute6: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all route6 objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type route6 -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for route6 objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type route6 -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving route6 objects by arguments"
                $Arguments = @{ } 
                if ($PSBoundParameters.ContainsKey('network')) { $Arguments.Add('network', $network) } 
                if ($PSBoundParameters.ContainsKey('gateway')) { $Arguments.Add('gateway', $gateway) } 
                if ($PSBoundParameters.ContainsKey('vlan')) { $Arguments.Add('vlan', $vlan) } 
                if ($PSBoundParameters.ContainsKey('vxlan')) { $Arguments.Add('vxlan', $vxlan) } 
                if ($PSBoundParameters.ContainsKey('td')) { $Arguments.Add('td', $td) } 
                if ($PSBoundParameters.ContainsKey('routetype')) { $Arguments.Add('routetype', $routetype) } 
                if ($PSBoundParameters.ContainsKey('detail')) { $Arguments.Add('detail', $detail) }
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type route6 -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving route6 configuration for property ''"

            } else {
                Write-Verbose "Retrieving route6 configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type route6 -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetRoute6: Ended"
    }
}

function Invoke-ADCUpdateRsskeytype {
<#
    .SYNOPSIS
        Update Network configuration Object
    .DESCRIPTION
        Update Network configuration Object 
    .PARAMETER rsstype 
        Type of RSS key, possible values are SYMMETRIC and ASYMMETRIC.  
        Default value: ASYMMETRIC  
        Possible values = ASYMMETRIC, SYMMETRIC
    .EXAMPLE
        Invoke-ADCUpdateRsskeytype -rsstype <string>
    .NOTES
        File Name : Invoke-ADCUpdateRsskeytype
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/rsskeytype/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateSet('ASYMMETRIC', 'SYMMETRIC')]
        [string]$rsstype 

    )
    begin {
        Write-Verbose "Invoke-ADCUpdateRsskeytype: Starting"
    }
    process {
        try {
            $Payload = @{
                rsstype = $rsstype
            }

 
            if ($PSCmdlet.ShouldProcess("rsskeytype", "Update Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -NitroPath nitro/v1/config -Type rsskeytype -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
            Write-Output $result

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUpdateRsskeytype: Finished"
    }
}

function Invoke-ADCGetRsskeytype {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER GetAll 
        Retreive all rsskeytype object(s)
    .PARAMETER Count
        If specified, the count of the rsskeytype object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetRsskeytype
    .EXAMPLE 
        Invoke-ADCGetRsskeytype -GetAll
    .EXAMPLE
        Invoke-ADCGetRsskeytype -name <string>
    .EXAMPLE
        Invoke-ADCGetRsskeytype -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetRsskeytype
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/rsskeytype/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetRsskeytype: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all rsskeytype objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type rsskeytype -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for rsskeytype objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type rsskeytype -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving rsskeytype objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type rsskeytype -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving rsskeytype configuration for property ''"

            } else {
                Write-Verbose "Retrieving rsskeytype configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type rsskeytype -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetRsskeytype: Ended"
    }
}

function Invoke-ADCAddVlan {
<#
    .SYNOPSIS
        Add Network configuration Object
    .DESCRIPTION
        Add Network configuration Object 
    .PARAMETER id 
        A positive integer that uniquely identifies a VLAN.  
        Minimum value = 1  
        Maximum value = 4094 
    .PARAMETER aliasname 
        A name for the VLAN. Must begin with a letter, a number, or the underscore symbol, and can consist of from 1 to 31 letters, numbers, and the hyphen (-), period (.) pound (#), space ( ), at sign (@), equals (=), colon (:), and underscore (_) characters. You should choose a name that helps identify the VLAN. However, you cannot perform any VLAN operation by specifying this name instead of the VLAN ID.  
        Maximum length = 31 
    .PARAMETER dynamicrouting 
        Enable dynamic routing on this VLAN.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER ipv6dynamicrouting 
        Enable all IPv6 dynamic routing protocols on this VLAN. Note: For the ENABLED setting to work, you must configure IPv6 dynamic routing protocols from the VTYSH command line.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER mtu 
        Specifies the maximum transmission unit (MTU), in bytes. The MTU is the largest packet size, excluding 14 bytes of ethernet header and 4 bytes of crc, that can be transmitted and received over this VLAN.  
        Default value: 0  
        Minimum value = 500  
        Maximum value = 9216 
    .PARAMETER sharing 
        If sharing is enabled, then this vlan can be shared across multiple partitions by binding it to all those partitions. If sharing is disabled, then this vlan can be bound to only one of the partitions.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER PassThru 
        Return details about the created vlan item.
    .EXAMPLE
        Invoke-ADCAddVlan -id <double>
    .NOTES
        File Name : Invoke-ADCAddVlan
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vlan/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateRange(1, 4094)]
        [double]$id ,

        [string]$aliasname ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$dynamicrouting = 'DISABLED' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$ipv6dynamicrouting = 'DISABLED' ,

        [ValidateRange(500, 9216)]
        [double]$mtu = '0' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$sharing = 'DISABLED' ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddVlan: Starting"
    }
    process {
        try {
            $Payload = @{
                id = $id
            }
            if ($PSBoundParameters.ContainsKey('aliasname')) { $Payload.Add('aliasname', $aliasname) }
            if ($PSBoundParameters.ContainsKey('dynamicrouting')) { $Payload.Add('dynamicrouting', $dynamicrouting) }
            if ($PSBoundParameters.ContainsKey('ipv6dynamicrouting')) { $Payload.Add('ipv6dynamicrouting', $ipv6dynamicrouting) }
            if ($PSBoundParameters.ContainsKey('mtu')) { $Payload.Add('mtu', $mtu) }
            if ($PSBoundParameters.ContainsKey('sharing')) { $Payload.Add('sharing', $sharing) }
 
            if ($PSCmdlet.ShouldProcess("vlan", "Add Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -NitroPath nitro/v1/config -Type vlan -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetVlan -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddVlan: Finished"
    }
}

function Invoke-ADCDeleteVlan {
<#
    .SYNOPSIS
        Delete Network configuration Object
    .DESCRIPTION
        Delete Network configuration Object
    .PARAMETER id 
       A positive integer that uniquely identifies a VLAN.  
       Minimum value = 1  
       Maximum value = 4094 
    .EXAMPLE
        Invoke-ADCDeleteVlan -id <double>
    .NOTES
        File Name : Invoke-ADCDeleteVlan
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vlan/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [double]$id 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteVlan: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }

            if ($PSCmdlet.ShouldProcess("$id", "Delete Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type vlan -NitroPath nitro/v1/config -Resource $id -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteVlan: Finished"
    }
}

function Invoke-ADCUpdateVlan {
<#
    .SYNOPSIS
        Update Network configuration Object
    .DESCRIPTION
        Update Network configuration Object 
    .PARAMETER id 
        A positive integer that uniquely identifies a VLAN.  
        Minimum value = 1  
        Maximum value = 4094 
    .PARAMETER aliasname 
        A name for the VLAN. Must begin with a letter, a number, or the underscore symbol, and can consist of from 1 to 31 letters, numbers, and the hyphen (-), period (.) pound (#), space ( ), at sign (@), equals (=), colon (:), and underscore (_) characters. You should choose a name that helps identify the VLAN. However, you cannot perform any VLAN operation by specifying this name instead of the VLAN ID.  
        Maximum length = 31 
    .PARAMETER dynamicrouting 
        Enable dynamic routing on this VLAN.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER ipv6dynamicrouting 
        Enable all IPv6 dynamic routing protocols on this VLAN. Note: For the ENABLED setting to work, you must configure IPv6 dynamic routing protocols from the VTYSH command line.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER mtu 
        Specifies the maximum transmission unit (MTU), in bytes. The MTU is the largest packet size, excluding 14 bytes of ethernet header and 4 bytes of crc, that can be transmitted and received over this VLAN.  
        Default value: 0  
        Minimum value = 500  
        Maximum value = 9216 
    .PARAMETER sharing 
        If sharing is enabled, then this vlan can be shared across multiple partitions by binding it to all those partitions. If sharing is disabled, then this vlan can be bound to only one of the partitions.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER PassThru 
        Return details about the created vlan item.
    .EXAMPLE
        Invoke-ADCUpdateVlan -id <double>
    .NOTES
        File Name : Invoke-ADCUpdateVlan
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vlan/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateRange(1, 4094)]
        [double]$id ,

        [string]$aliasname ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$dynamicrouting ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$ipv6dynamicrouting ,

        [ValidateRange(500, 9216)]
        [double]$mtu ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$sharing ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCUpdateVlan: Starting"
    }
    process {
        try {
            $Payload = @{
                id = $id
            }
            if ($PSBoundParameters.ContainsKey('aliasname')) { $Payload.Add('aliasname', $aliasname) }
            if ($PSBoundParameters.ContainsKey('dynamicrouting')) { $Payload.Add('dynamicrouting', $dynamicrouting) }
            if ($PSBoundParameters.ContainsKey('ipv6dynamicrouting')) { $Payload.Add('ipv6dynamicrouting', $ipv6dynamicrouting) }
            if ($PSBoundParameters.ContainsKey('mtu')) { $Payload.Add('mtu', $mtu) }
            if ($PSBoundParameters.ContainsKey('sharing')) { $Payload.Add('sharing', $sharing) }
 
            if ($PSCmdlet.ShouldProcess("vlan", "Update Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -NitroPath nitro/v1/config -Type vlan -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetVlan -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUpdateVlan: Finished"
    }
}

function Invoke-ADCUnsetVlan {
<#
    .SYNOPSIS
        Unset Network configuration Object
    .DESCRIPTION
        Unset Network configuration Object 
   .PARAMETER id 
       A positive integer that uniquely identifies a VLAN. 
   .PARAMETER aliasname 
       A name for the VLAN. Must begin with a letter, a number, or the underscore symbol, and can consist of from 1 to 31 letters, numbers, and the hyphen (-), period (.) pound (#), space ( ), at sign (@), equals (=), colon (:), and underscore (_) characters. You should choose a name that helps identify the VLAN. However, you cannot perform any VLAN operation by specifying this name instead of the VLAN ID. 
   .PARAMETER dynamicrouting 
       Enable dynamic routing on this VLAN.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER ipv6dynamicrouting 
       Enable all IPv6 dynamic routing protocols on this VLAN. Note: For the ENABLED setting to work, you must configure IPv6 dynamic routing protocols from the VTYSH command line.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER mtu 
       Specifies the maximum transmission unit (MTU), in bytes. The MTU is the largest packet size, excluding 14 bytes of ethernet header and 4 bytes of crc, that can be transmitted and received over this VLAN. 
   .PARAMETER sharing 
       If sharing is enabled, then this vlan can be shared across multiple partitions by binding it to all those partitions. If sharing is disabled, then this vlan can be bound to only one of the partitions.  
       Possible values = ENABLED, DISABLED
    .EXAMPLE
        Invoke-ADCUnsetVlan -id <double>
    .NOTES
        File Name : Invoke-ADCUnsetVlan
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vlan
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateRange(1, 4094)]
        [double]$id ,

        [Boolean]$aliasname ,

        [Boolean]$dynamicrouting ,

        [Boolean]$ipv6dynamicrouting ,

        [Boolean]$mtu ,

        [Boolean]$sharing 
    )
    begin {
        Write-Verbose "Invoke-ADCUnsetVlan: Starting"
    }
    process {
        try {
            $Payload = @{
                id = $id
            }
            if ($PSBoundParameters.ContainsKey('aliasname')) { $Payload.Add('aliasname', $aliasname) }
            if ($PSBoundParameters.ContainsKey('dynamicrouting')) { $Payload.Add('dynamicrouting', $dynamicrouting) }
            if ($PSBoundParameters.ContainsKey('ipv6dynamicrouting')) { $Payload.Add('ipv6dynamicrouting', $ipv6dynamicrouting) }
            if ($PSBoundParameters.ContainsKey('mtu')) { $Payload.Add('mtu', $mtu) }
            if ($PSBoundParameters.ContainsKey('sharing')) { $Payload.Add('sharing', $sharing) }
            if ($PSCmdlet.ShouldProcess("$id", "Unset Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type vlan -NitroPath nitro/v1/config -Action unset -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUnsetVlan: Finished"
    }
}

function Invoke-ADCGetVlan {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER id 
       A positive integer that uniquely identifies a VLAN. 
    .PARAMETER GetAll 
        Retreive all vlan object(s)
    .PARAMETER Count
        If specified, the count of the vlan object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetVlan
    .EXAMPLE 
        Invoke-ADCGetVlan -GetAll 
    .EXAMPLE 
        Invoke-ADCGetVlan -Count
    .EXAMPLE
        Invoke-ADCGetVlan -name <string>
    .EXAMPLE
        Invoke-ADCGetVlan -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetVlan
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vlan/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateRange(1, 4094)]
        [double]$id,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll,

        [Parameter(ParameterSetName = 'GetAll')]
        [Parameter(ParameterSetName = 'Get')]
        [Switch]$ViewSummary

    )
    begin {
        Write-Verbose "Invoke-ADCGetVlan: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all vlan objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vlan -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for vlan objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vlan -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving vlan objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vlan -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving vlan configuration for property 'id'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vlan -NitroPath nitro/v1/config -Resource $id -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving vlan configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vlan -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetVlan: Ended"
    }
}

function Invoke-ADCGetVlanbinding {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER id 
       Integer that uniquely identifies the VLAN for which the details are to be displayed. 
    .PARAMETER GetAll 
        Retreive all vlan_binding object(s)
    .PARAMETER Count
        If specified, the count of the vlan_binding object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetVlanbinding
    .EXAMPLE 
        Invoke-ADCGetVlanbinding -GetAll
    .EXAMPLE
        Invoke-ADCGetVlanbinding -name <string>
    .EXAMPLE
        Invoke-ADCGetVlanbinding -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetVlanbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vlan_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateRange(1, 4094)]
        [double]$id,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetVlanbinding: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ 
                    bulkbindings = 'yes'
                }
                Write-Verbose "Retrieving all vlan_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vlan_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for vlan_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vlan_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving vlan_binding objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vlan_binding -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving vlan_binding configuration for property 'id'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vlan_binding -NitroPath nitro/v1/config -Resource $id -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving vlan_binding configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vlan_binding -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetVlanbinding: Ended"
    }
}

function Invoke-ADCAddVlanchannelbinding {
<#
    .SYNOPSIS
        Add Network configuration Object
    .DESCRIPTION
        Add Network configuration Object 
    .PARAMETER id 
        Specifies the virtual LAN ID.  
        Minimum value = 1  
        Maximum value = 4094 
    .PARAMETER ifnum 
        The interface to be bound to the VLAN, specified in slot/port notation (for example, 1/3).  
        Minimum length = 1 
    .PARAMETER tagged 
        Make the interface an 802.1q tagged interface. Packets sent on this interface on this VLAN have an additional 4-byte 802.1q tag, which identifies the VLAN. To use 802.1q tagging, you must also configure the switch connected to the appliance's interfaces. 
    .PARAMETER ownergroup 
        The owner node group in a Cluster for this vlan.  
        Default value: DEFAULT_NG  
        Minimum length = 1 
    .PARAMETER PassThru 
        Return details about the created vlan_channel_binding item.
    .EXAMPLE
        Invoke-ADCAddVlanchannelbinding -id <double>
    .NOTES
        File Name : Invoke-ADCAddVlanchannelbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vlan_channel_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateRange(1, 4094)]
        [double]$id ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$ifnum ,

        [boolean]$tagged ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$ownergroup = 'DEFAULT_NG' ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddVlanchannelbinding: Starting"
    }
    process {
        try {
            $Payload = @{
                id = $id
            }
            if ($PSBoundParameters.ContainsKey('ifnum')) { $Payload.Add('ifnum', $ifnum) }
            if ($PSBoundParameters.ContainsKey('tagged')) { $Payload.Add('tagged', $tagged) }
            if ($PSBoundParameters.ContainsKey('ownergroup')) { $Payload.Add('ownergroup', $ownergroup) }
 
            if ($PSCmdlet.ShouldProcess("vlan_channel_binding", "Add Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -NitroPath nitro/v1/config -Type vlan_channel_binding -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetVlanchannelbinding -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddVlanchannelbinding: Finished"
    }
}

function Invoke-ADCDeleteVlanchannelbinding {
<#
    .SYNOPSIS
        Delete Network configuration Object
    .DESCRIPTION
        Delete Network configuration Object
    .PARAMETER id 
       Specifies the virtual LAN ID.  
       Minimum value = 1  
       Maximum value = 4094    .PARAMETER ifnum 
       The interface to be bound to the VLAN, specified in slot/port notation (for example, 1/3).  
       Minimum length = 1    .PARAMETER tagged 
       Make the interface an 802.1q tagged interface. Packets sent on this interface on this VLAN have an additional 4-byte 802.1q tag, which identifies the VLAN. To use 802.1q tagging, you must also configure the switch connected to the appliance's interfaces.    .PARAMETER ownergroup 
       The owner node group in a Cluster for this vlan.  
       Default value: DEFAULT_NG  
       Minimum length = 1
    .EXAMPLE
        Invoke-ADCDeleteVlanchannelbinding -id <double>
    .NOTES
        File Name : Invoke-ADCDeleteVlanchannelbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vlan_channel_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [double]$id ,

        [string]$ifnum ,

        [boolean]$tagged ,

        [string]$ownergroup 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteVlanchannelbinding: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }
            if ($PSBoundParameters.ContainsKey('ifnum')) { $Arguments.Add('ifnum', $ifnum) }
            if ($PSBoundParameters.ContainsKey('tagged')) { $Arguments.Add('tagged', $tagged) }
            if ($PSBoundParameters.ContainsKey('ownergroup')) { $Arguments.Add('ownergroup', $ownergroup) }
            if ($PSCmdlet.ShouldProcess("$id", "Delete Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type vlan_channel_binding -NitroPath nitro/v1/config -Resource $id -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteVlanchannelbinding: Finished"
    }
}

function Invoke-ADCGetVlanchannelbinding {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER id 
       Specifies the virtual LAN ID. 
    .PARAMETER GetAll 
        Retreive all vlan_channel_binding object(s)
    .PARAMETER Count
        If specified, the count of the vlan_channel_binding object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetVlanchannelbinding
    .EXAMPLE 
        Invoke-ADCGetVlanchannelbinding -GetAll 
    .EXAMPLE 
        Invoke-ADCGetVlanchannelbinding -Count
    .EXAMPLE
        Invoke-ADCGetVlanchannelbinding -name <string>
    .EXAMPLE
        Invoke-ADCGetVlanchannelbinding -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetVlanchannelbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vlan_channel_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateRange(1, 4094)]
        [double]$id,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetVlanchannelbinding: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ 
                    bulkbindings = 'yes'
                }
                Write-Verbose "Retrieving all vlan_channel_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vlan_channel_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for vlan_channel_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vlan_channel_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving vlan_channel_binding objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vlan_channel_binding -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving vlan_channel_binding configuration for property 'id'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vlan_channel_binding -NitroPath nitro/v1/config -Resource $id -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving vlan_channel_binding configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vlan_channel_binding -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetVlanchannelbinding: Ended"
    }
}

function Invoke-ADCAddVlaninterfacebinding {
<#
    .SYNOPSIS
        Add Network configuration Object
    .DESCRIPTION
        Add Network configuration Object 
    .PARAMETER id 
        Specifies the virtual LAN ID.  
        Minimum value = 1  
        Maximum value = 4094 
    .PARAMETER ifnum 
        The interface to be bound to the VLAN, specified in slot/port notation (for example, 1/3).  
        Minimum length = 1 
    .PARAMETER tagged 
        Make the interface an 802.1q tagged interface. Packets sent on this interface on this VLAN have an additional 4-byte 802.1q tag, which identifies the VLAN. To use 802.1q tagging, you must also configure the switch connected to the appliance's interfaces. 
    .PARAMETER ownergroup 
        The owner node group in a Cluster for this vlan.  
        Default value: DEFAULT_NG  
        Minimum length = 1 
    .PARAMETER PassThru 
        Return details about the created vlan_interface_binding item.
    .EXAMPLE
        Invoke-ADCAddVlaninterfacebinding -id <double>
    .NOTES
        File Name : Invoke-ADCAddVlaninterfacebinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vlan_interface_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateRange(1, 4094)]
        [double]$id ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$ifnum ,

        [boolean]$tagged ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$ownergroup = 'DEFAULT_NG' ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddVlaninterfacebinding: Starting"
    }
    process {
        try {
            $Payload = @{
                id = $id
            }
            if ($PSBoundParameters.ContainsKey('ifnum')) { $Payload.Add('ifnum', $ifnum) }
            if ($PSBoundParameters.ContainsKey('tagged')) { $Payload.Add('tagged', $tagged) }
            if ($PSBoundParameters.ContainsKey('ownergroup')) { $Payload.Add('ownergroup', $ownergroup) }
 
            if ($PSCmdlet.ShouldProcess("vlan_interface_binding", "Add Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -NitroPath nitro/v1/config -Type vlan_interface_binding -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetVlaninterfacebinding -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddVlaninterfacebinding: Finished"
    }
}

function Invoke-ADCDeleteVlaninterfacebinding {
<#
    .SYNOPSIS
        Delete Network configuration Object
    .DESCRIPTION
        Delete Network configuration Object
    .PARAMETER id 
       Specifies the virtual LAN ID.  
       Minimum value = 1  
       Maximum value = 4094    .PARAMETER ifnum 
       The interface to be bound to the VLAN, specified in slot/port notation (for example, 1/3).  
       Minimum length = 1    .PARAMETER tagged 
       Make the interface an 802.1q tagged interface. Packets sent on this interface on this VLAN have an additional 4-byte 802.1q tag, which identifies the VLAN. To use 802.1q tagging, you must also configure the switch connected to the appliance's interfaces.    .PARAMETER ownergroup 
       The owner node group in a Cluster for this vlan.  
       Default value: DEFAULT_NG  
       Minimum length = 1
    .EXAMPLE
        Invoke-ADCDeleteVlaninterfacebinding -id <double>
    .NOTES
        File Name : Invoke-ADCDeleteVlaninterfacebinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vlan_interface_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [double]$id ,

        [string]$ifnum ,

        [boolean]$tagged ,

        [string]$ownergroup 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteVlaninterfacebinding: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }
            if ($PSBoundParameters.ContainsKey('ifnum')) { $Arguments.Add('ifnum', $ifnum) }
            if ($PSBoundParameters.ContainsKey('tagged')) { $Arguments.Add('tagged', $tagged) }
            if ($PSBoundParameters.ContainsKey('ownergroup')) { $Arguments.Add('ownergroup', $ownergroup) }
            if ($PSCmdlet.ShouldProcess("$id", "Delete Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type vlan_interface_binding -NitroPath nitro/v1/config -Resource $id -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteVlaninterfacebinding: Finished"
    }
}

function Invoke-ADCGetVlaninterfacebinding {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER id 
       Specifies the virtual LAN ID. 
    .PARAMETER GetAll 
        Retreive all vlan_interface_binding object(s)
    .PARAMETER Count
        If specified, the count of the vlan_interface_binding object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetVlaninterfacebinding
    .EXAMPLE 
        Invoke-ADCGetVlaninterfacebinding -GetAll 
    .EXAMPLE 
        Invoke-ADCGetVlaninterfacebinding -Count
    .EXAMPLE
        Invoke-ADCGetVlaninterfacebinding -name <string>
    .EXAMPLE
        Invoke-ADCGetVlaninterfacebinding -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetVlaninterfacebinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vlan_interface_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateRange(1, 4094)]
        [double]$id,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetVlaninterfacebinding: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ 
                    bulkbindings = 'yes'
                }
                Write-Verbose "Retrieving all vlan_interface_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vlan_interface_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for vlan_interface_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vlan_interface_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving vlan_interface_binding objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vlan_interface_binding -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving vlan_interface_binding configuration for property 'id'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vlan_interface_binding -NitroPath nitro/v1/config -Resource $id -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving vlan_interface_binding configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vlan_interface_binding -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetVlaninterfacebinding: Ended"
    }
}

function Invoke-ADCAddVlanlinksetbinding {
<#
    .SYNOPSIS
        Add Network configuration Object
    .DESCRIPTION
        Add Network configuration Object 
    .PARAMETER id 
        Specifies the virtual LAN ID.  
        Minimum value = 1  
        Maximum value = 4094 
    .PARAMETER ifnum 
        The interface to be bound to the VLAN, specified in slot/port notation (for example, 1/3).  
        Minimum length = 1 
    .PARAMETER tagged 
        Make the interface an 802.1q tagged interface. Packets sent on this interface on this VLAN have an additional 4-byte 802.1q tag, which identifies the VLAN. To use 802.1q tagging, you must also configure the switch connected to the appliance's interfaces. 
    .PARAMETER ownergroup 
        The owner node group in a Cluster for this vlan.  
        Default value: DEFAULT_NG  
        Minimum length = 1 
    .PARAMETER PassThru 
        Return details about the created vlan_linkset_binding item.
    .EXAMPLE
        Invoke-ADCAddVlanlinksetbinding -id <double>
    .NOTES
        File Name : Invoke-ADCAddVlanlinksetbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vlan_linkset_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateRange(1, 4094)]
        [double]$id ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$ifnum ,

        [boolean]$tagged ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$ownergroup = 'DEFAULT_NG' ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddVlanlinksetbinding: Starting"
    }
    process {
        try {
            $Payload = @{
                id = $id
            }
            if ($PSBoundParameters.ContainsKey('ifnum')) { $Payload.Add('ifnum', $ifnum) }
            if ($PSBoundParameters.ContainsKey('tagged')) { $Payload.Add('tagged', $tagged) }
            if ($PSBoundParameters.ContainsKey('ownergroup')) { $Payload.Add('ownergroup', $ownergroup) }
 
            if ($PSCmdlet.ShouldProcess("vlan_linkset_binding", "Add Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -NitroPath nitro/v1/config -Type vlan_linkset_binding -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetVlanlinksetbinding -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddVlanlinksetbinding: Finished"
    }
}

function Invoke-ADCDeleteVlanlinksetbinding {
<#
    .SYNOPSIS
        Delete Network configuration Object
    .DESCRIPTION
        Delete Network configuration Object
    .PARAMETER id 
       Specifies the virtual LAN ID.  
       Minimum value = 1  
       Maximum value = 4094    .PARAMETER ifnum 
       The interface to be bound to the VLAN, specified in slot/port notation (for example, 1/3).  
       Minimum length = 1    .PARAMETER tagged 
       Make the interface an 802.1q tagged interface. Packets sent on this interface on this VLAN have an additional 4-byte 802.1q tag, which identifies the VLAN. To use 802.1q tagging, you must also configure the switch connected to the appliance's interfaces.    .PARAMETER ownergroup 
       The owner node group in a Cluster for this vlan.  
       Default value: DEFAULT_NG  
       Minimum length = 1
    .EXAMPLE
        Invoke-ADCDeleteVlanlinksetbinding -id <double>
    .NOTES
        File Name : Invoke-ADCDeleteVlanlinksetbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vlan_linkset_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [double]$id ,

        [string]$ifnum ,

        [boolean]$tagged ,

        [string]$ownergroup 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteVlanlinksetbinding: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }
            if ($PSBoundParameters.ContainsKey('ifnum')) { $Arguments.Add('ifnum', $ifnum) }
            if ($PSBoundParameters.ContainsKey('tagged')) { $Arguments.Add('tagged', $tagged) }
            if ($PSBoundParameters.ContainsKey('ownergroup')) { $Arguments.Add('ownergroup', $ownergroup) }
            if ($PSCmdlet.ShouldProcess("$id", "Delete Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type vlan_linkset_binding -NitroPath nitro/v1/config -Resource $id -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteVlanlinksetbinding: Finished"
    }
}

function Invoke-ADCGetVlanlinksetbinding {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER id 
       Specifies the virtual LAN ID. 
    .PARAMETER GetAll 
        Retreive all vlan_linkset_binding object(s)
    .PARAMETER Count
        If specified, the count of the vlan_linkset_binding object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetVlanlinksetbinding
    .EXAMPLE 
        Invoke-ADCGetVlanlinksetbinding -GetAll 
    .EXAMPLE 
        Invoke-ADCGetVlanlinksetbinding -Count
    .EXAMPLE
        Invoke-ADCGetVlanlinksetbinding -name <string>
    .EXAMPLE
        Invoke-ADCGetVlanlinksetbinding -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetVlanlinksetbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vlan_linkset_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateRange(1, 4094)]
        [double]$id,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetVlanlinksetbinding: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ 
                    bulkbindings = 'yes'
                }
                Write-Verbose "Retrieving all vlan_linkset_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vlan_linkset_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for vlan_linkset_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vlan_linkset_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving vlan_linkset_binding objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vlan_linkset_binding -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving vlan_linkset_binding configuration for property 'id'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vlan_linkset_binding -NitroPath nitro/v1/config -Resource $id -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving vlan_linkset_binding configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vlan_linkset_binding -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetVlanlinksetbinding: Ended"
    }
}

function Invoke-ADCAddVlannsip6binding {
<#
    .SYNOPSIS
        Add Network configuration Object
    .DESCRIPTION
        Add Network configuration Object 
    .PARAMETER id 
        Specifies the virtual LAN ID.  
        Minimum value = 1  
        Maximum value = 4094 
    .PARAMETER ipaddress 
        The IP address assigned to the VLAN. 
    .PARAMETER netmask 
        Subnet mask for the network address defined for this VLAN.  
        Minimum length = 1 
    .PARAMETER td 
        Integer value that uniquely identifies the traffic domain in which you want to configure the entity. If you do not specify an ID, the entity becomes part of the default traffic domain, which has an ID of 0.  
        Minimum value = 0  
        Maximum value = 4094 
    .PARAMETER ownergroup 
        The owner node group in a Cluster for this vlan.  
        Default value: DEFAULT_NG  
        Minimum length = 1 
    .PARAMETER PassThru 
        Return details about the created vlan_nsip6_binding item.
    .EXAMPLE
        Invoke-ADCAddVlannsip6binding -id <double>
    .NOTES
        File Name : Invoke-ADCAddVlannsip6binding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vlan_nsip6_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateRange(1, 4094)]
        [double]$id ,

        [string]$ipaddress ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$netmask ,

        [ValidateRange(0, 4094)]
        [double]$td ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$ownergroup = 'DEFAULT_NG' ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddVlannsip6binding: Starting"
    }
    process {
        try {
            $Payload = @{
                id = $id
            }
            if ($PSBoundParameters.ContainsKey('ipaddress')) { $Payload.Add('ipaddress', $ipaddress) }
            if ($PSBoundParameters.ContainsKey('netmask')) { $Payload.Add('netmask', $netmask) }
            if ($PSBoundParameters.ContainsKey('td')) { $Payload.Add('td', $td) }
            if ($PSBoundParameters.ContainsKey('ownergroup')) { $Payload.Add('ownergroup', $ownergroup) }
 
            if ($PSCmdlet.ShouldProcess("vlan_nsip6_binding", "Add Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -NitroPath nitro/v1/config -Type vlan_nsip6_binding -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetVlannsip6binding -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddVlannsip6binding: Finished"
    }
}

function Invoke-ADCDeleteVlannsip6binding {
<#
    .SYNOPSIS
        Delete Network configuration Object
    .DESCRIPTION
        Delete Network configuration Object
    .PARAMETER id 
       Specifies the virtual LAN ID.  
       Minimum value = 1  
       Maximum value = 4094    .PARAMETER ipaddress 
       The IP address assigned to the VLAN.    .PARAMETER netmask 
       Subnet mask for the network address defined for this VLAN.  
       Minimum length = 1    .PARAMETER td 
       Integer value that uniquely identifies the traffic domain in which you want to configure the entity. If you do not specify an ID, the entity becomes part of the default traffic domain, which has an ID of 0.  
       Minimum value = 0  
       Maximum value = 4094    .PARAMETER ownergroup 
       The owner node group in a Cluster for this vlan.  
       Default value: DEFAULT_NG  
       Minimum length = 1
    .EXAMPLE
        Invoke-ADCDeleteVlannsip6binding -id <double>
    .NOTES
        File Name : Invoke-ADCDeleteVlannsip6binding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vlan_nsip6_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [double]$id ,

        [string]$ipaddress ,

        [string]$netmask ,

        [double]$td ,

        [string]$ownergroup 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteVlannsip6binding: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }
            if ($PSBoundParameters.ContainsKey('ipaddress')) { $Arguments.Add('ipaddress', $ipaddress) }
            if ($PSBoundParameters.ContainsKey('netmask')) { $Arguments.Add('netmask', $netmask) }
            if ($PSBoundParameters.ContainsKey('td')) { $Arguments.Add('td', $td) }
            if ($PSBoundParameters.ContainsKey('ownergroup')) { $Arguments.Add('ownergroup', $ownergroup) }
            if ($PSCmdlet.ShouldProcess("$id", "Delete Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type vlan_nsip6_binding -NitroPath nitro/v1/config -Resource $id -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteVlannsip6binding: Finished"
    }
}

function Invoke-ADCGetVlannsip6binding {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER id 
       Specifies the virtual LAN ID. 
    .PARAMETER GetAll 
        Retreive all vlan_nsip6_binding object(s)
    .PARAMETER Count
        If specified, the count of the vlan_nsip6_binding object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetVlannsip6binding
    .EXAMPLE 
        Invoke-ADCGetVlannsip6binding -GetAll 
    .EXAMPLE 
        Invoke-ADCGetVlannsip6binding -Count
    .EXAMPLE
        Invoke-ADCGetVlannsip6binding -name <string>
    .EXAMPLE
        Invoke-ADCGetVlannsip6binding -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetVlannsip6binding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vlan_nsip6_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateRange(1, 4094)]
        [double]$id,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetVlannsip6binding: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ 
                    bulkbindings = 'yes'
                }
                Write-Verbose "Retrieving all vlan_nsip6_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vlan_nsip6_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for vlan_nsip6_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vlan_nsip6_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving vlan_nsip6_binding objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vlan_nsip6_binding -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving vlan_nsip6_binding configuration for property 'id'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vlan_nsip6_binding -NitroPath nitro/v1/config -Resource $id -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving vlan_nsip6_binding configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vlan_nsip6_binding -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetVlannsip6binding: Ended"
    }
}

function Invoke-ADCAddVlannsipbinding {
<#
    .SYNOPSIS
        Add Network configuration Object
    .DESCRIPTION
        Add Network configuration Object 
    .PARAMETER id 
        Specifies the virtual LAN ID.  
        Minimum value = 1  
        Maximum value = 4094 
    .PARAMETER ipaddress 
        The IP address assigned to the VLAN. 
    .PARAMETER netmask 
        Subnet mask for the network address defined for this VLAN. 
    .PARAMETER td 
        Integer value that uniquely identifies the traffic domain in which you want to configure the entity. If you do not specify an ID, the entity becomes part of the default traffic domain, which has an ID of 0.  
        Minimum value = 0  
        Maximum value = 4094 
    .PARAMETER ownergroup 
        The owner node group in a Cluster for this vlan.  
        Default value: DEFAULT_NG  
        Minimum length = 1 
    .PARAMETER PassThru 
        Return details about the created vlan_nsip_binding item.
    .EXAMPLE
        Invoke-ADCAddVlannsipbinding -id <double>
    .NOTES
        File Name : Invoke-ADCAddVlannsipbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vlan_nsip_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateRange(1, 4094)]
        [double]$id ,

        [string]$ipaddress ,

        [string]$netmask ,

        [ValidateRange(0, 4094)]
        [double]$td ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$ownergroup = 'DEFAULT_NG' ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddVlannsipbinding: Starting"
    }
    process {
        try {
            $Payload = @{
                id = $id
            }
            if ($PSBoundParameters.ContainsKey('ipaddress')) { $Payload.Add('ipaddress', $ipaddress) }
            if ($PSBoundParameters.ContainsKey('netmask')) { $Payload.Add('netmask', $netmask) }
            if ($PSBoundParameters.ContainsKey('td')) { $Payload.Add('td', $td) }
            if ($PSBoundParameters.ContainsKey('ownergroup')) { $Payload.Add('ownergroup', $ownergroup) }
 
            if ($PSCmdlet.ShouldProcess("vlan_nsip_binding", "Add Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -NitroPath nitro/v1/config -Type vlan_nsip_binding -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetVlannsipbinding -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddVlannsipbinding: Finished"
    }
}

function Invoke-ADCDeleteVlannsipbinding {
<#
    .SYNOPSIS
        Delete Network configuration Object
    .DESCRIPTION
        Delete Network configuration Object
    .PARAMETER id 
       Specifies the virtual LAN ID.  
       Minimum value = 1  
       Maximum value = 4094    .PARAMETER ipaddress 
       The IP address assigned to the VLAN.    .PARAMETER netmask 
       Subnet mask for the network address defined for this VLAN.    .PARAMETER td 
       Integer value that uniquely identifies the traffic domain in which you want to configure the entity. If you do not specify an ID, the entity becomes part of the default traffic domain, which has an ID of 0.  
       Minimum value = 0  
       Maximum value = 4094    .PARAMETER ownergroup 
       The owner node group in a Cluster for this vlan.  
       Default value: DEFAULT_NG  
       Minimum length = 1
    .EXAMPLE
        Invoke-ADCDeleteVlannsipbinding -id <double>
    .NOTES
        File Name : Invoke-ADCDeleteVlannsipbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vlan_nsip_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [double]$id ,

        [string]$ipaddress ,

        [string]$netmask ,

        [double]$td ,

        [string]$ownergroup 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteVlannsipbinding: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }
            if ($PSBoundParameters.ContainsKey('ipaddress')) { $Arguments.Add('ipaddress', $ipaddress) }
            if ($PSBoundParameters.ContainsKey('netmask')) { $Arguments.Add('netmask', $netmask) }
            if ($PSBoundParameters.ContainsKey('td')) { $Arguments.Add('td', $td) }
            if ($PSBoundParameters.ContainsKey('ownergroup')) { $Arguments.Add('ownergroup', $ownergroup) }
            if ($PSCmdlet.ShouldProcess("$id", "Delete Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type vlan_nsip_binding -NitroPath nitro/v1/config -Resource $id -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteVlannsipbinding: Finished"
    }
}

function Invoke-ADCGetVlannsipbinding {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER id 
       Specifies the virtual LAN ID. 
    .PARAMETER GetAll 
        Retreive all vlan_nsip_binding object(s)
    .PARAMETER Count
        If specified, the count of the vlan_nsip_binding object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetVlannsipbinding
    .EXAMPLE 
        Invoke-ADCGetVlannsipbinding -GetAll 
    .EXAMPLE 
        Invoke-ADCGetVlannsipbinding -Count
    .EXAMPLE
        Invoke-ADCGetVlannsipbinding -name <string>
    .EXAMPLE
        Invoke-ADCGetVlannsipbinding -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetVlannsipbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vlan_nsip_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateRange(1, 4094)]
        [double]$id,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetVlannsipbinding: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ 
                    bulkbindings = 'yes'
                }
                Write-Verbose "Retrieving all vlan_nsip_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vlan_nsip_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for vlan_nsip_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vlan_nsip_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving vlan_nsip_binding objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vlan_nsip_binding -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving vlan_nsip_binding configuration for property 'id'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vlan_nsip_binding -NitroPath nitro/v1/config -Resource $id -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving vlan_nsip_binding configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vlan_nsip_binding -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetVlannsipbinding: Ended"
    }
}

function Invoke-ADCAddVrid {
<#
    .SYNOPSIS
        Add Network configuration Object
    .DESCRIPTION
        Add Network configuration Object 
    .PARAMETER id 
        Integer that uniquely identifies the VMAC address. The generic VMAC address is in the form of 00:00:5e:00:01:<VRID>. For example, if you add a VRID with a value of 60 and bind it to an interface, the resulting VMAC address is 00:00:5e:00:01:3c, where 3c is the hexadecimal representation of 60.  
        Minimum value = 1  
        Maximum value = 255 
    .PARAMETER priority 
        Base priority (BP), in an active-active mode configuration, which ordinarily determines the master VIP address.  
        Default value: 255  
        Minimum value = 0  
        Maximum value = 255 
    .PARAMETER preemption 
        In an active-active mode configuration, make a backup VIP address the master if its priority becomes higher than that of a master VIP address bound to this VMAC address.  
        If you disable pre-emption while a backup VIP address is the master, the backup VIP address remains master until the original master VIP's priority becomes higher than that of the current master.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER sharing 
        In an active-active mode configuration, enable the backup VIP address to process any traffic instead of dropping it.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER tracking 
        The effective priority (EP) value, relative to the base priority (BP) value in an active-active mode configuration. When EP is set to a value other than None, it is EP, not BP, which determines the master VIP address.  
        Available settings function as follows:  
        * NONE - No tracking. EP = BP  
        * ALL - If the status of all virtual servers is UP, EP = BP. Otherwise, EP = 0.  
        * ONE - If the status of at least one virtual server is UP, EP = BP. Otherwise, EP = 0.  
        * PROGRESSIVE - If the status of all virtual servers is UP, EP = BP. If the status of all virtual servers is DOWN, EP = 0. Otherwise EP = BP (1 - K/N), where N is the total number of virtual servers associated with the VIP address and K is the number of virtual servers for which the status is DOWN.  
        Default: NONE.  
        Default value: NONE  
        Possible values = NONE, ONE, ALL, PROGRESSIVE 
    .PARAMETER ownernode 
        In a cluster setup, assign a cluster node as the owner of this VMAC address for IP based VRRP configuration. If no owner is configured, owner node is displayed as ALL and one node is dynamically elected as the owner.  
        Minimum value = 0  
        Maximum value = 31 
    .PARAMETER trackifnumpriority 
        Priority by which the Effective priority will be reduced if any of the tracked interfaces goes down in an active-active configuration.  
        Default value: 0  
        Minimum value = 1  
        Maximum value = 255 
    .PARAMETER preemptiondelaytimer 
        Preemption delay time, in seconds, in an active-active configuration. If any high priority node will come in network, it will wait for these many seconds before becoming master.  
        Default value: 0  
        Minimum value = 1  
        Maximum value = 36000 
    .PARAMETER PassThru 
        Return details about the created vrid item.
    .EXAMPLE
        Invoke-ADCAddVrid -id <double>
    .NOTES
        File Name : Invoke-ADCAddVrid
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vrid/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateRange(1, 255)]
        [double]$id ,

        [ValidateRange(0, 255)]
        [double]$priority = '255' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$preemption = 'ENABLED' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$sharing = 'DISABLED' ,

        [ValidateSet('NONE', 'ONE', 'ALL', 'PROGRESSIVE')]
        [string]$tracking = 'NONE' ,

        [ValidateRange(0, 31)]
        [double]$ownernode ,

        [ValidateRange(1, 255)]
        [double]$trackifnumpriority = '0' ,

        [ValidateRange(1, 36000)]
        [double]$preemptiondelaytimer = '0' ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddVrid: Starting"
    }
    process {
        try {
            $Payload = @{
                id = $id
            }
            if ($PSBoundParameters.ContainsKey('priority')) { $Payload.Add('priority', $priority) }
            if ($PSBoundParameters.ContainsKey('preemption')) { $Payload.Add('preemption', $preemption) }
            if ($PSBoundParameters.ContainsKey('sharing')) { $Payload.Add('sharing', $sharing) }
            if ($PSBoundParameters.ContainsKey('tracking')) { $Payload.Add('tracking', $tracking) }
            if ($PSBoundParameters.ContainsKey('ownernode')) { $Payload.Add('ownernode', $ownernode) }
            if ($PSBoundParameters.ContainsKey('trackifnumpriority')) { $Payload.Add('trackifnumpriority', $trackifnumpriority) }
            if ($PSBoundParameters.ContainsKey('preemptiondelaytimer')) { $Payload.Add('preemptiondelaytimer', $preemptiondelaytimer) }
 
            if ($PSCmdlet.ShouldProcess("vrid", "Add Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -NitroPath nitro/v1/config -Type vrid -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetVrid -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddVrid: Finished"
    }
}

function Invoke-ADCDeleteVrid {
<#
    .SYNOPSIS
        Delete Network configuration Object
    .DESCRIPTION
        Delete Network configuration Object
    .PARAMETER id 
       Integer that uniquely identifies the VMAC address. The generic VMAC address is in the form of 00:00:5e:00:01:<VRID>. For example, if you add a VRID with a value of 60 and bind it to an interface, the resulting VMAC address is 00:00:5e:00:01:3c, where 3c is the hexadecimal representation of 60.  
       Minimum value = 1  
       Maximum value = 255    .PARAMETER all 
       Remove all the configured VMAC addresses from the Citrix ADC.
    .EXAMPLE
        Invoke-ADCDeleteVrid -id <double>
    .NOTES
        File Name : Invoke-ADCDeleteVrid
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vrid/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [double]$id ,

        [boolean]$all 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteVrid: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }
            if ($PSBoundParameters.ContainsKey('all')) { $Arguments.Add('all', $all) }
            if ($PSCmdlet.ShouldProcess("$id", "Delete Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type vrid -NitroPath nitro/v1/config -Resource $id -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteVrid: Finished"
    }
}

function Invoke-ADCUpdateVrid {
<#
    .SYNOPSIS
        Update Network configuration Object
    .DESCRIPTION
        Update Network configuration Object 
    .PARAMETER id 
        Integer that uniquely identifies the VMAC address. The generic VMAC address is in the form of 00:00:5e:00:01:<VRID>. For example, if you add a VRID with a value of 60 and bind it to an interface, the resulting VMAC address is 00:00:5e:00:01:3c, where 3c is the hexadecimal representation of 60.  
        Minimum value = 1  
        Maximum value = 255 
    .PARAMETER priority 
        Base priority (BP), in an active-active mode configuration, which ordinarily determines the master VIP address.  
        Default value: 255  
        Minimum value = 0  
        Maximum value = 255 
    .PARAMETER preemption 
        In an active-active mode configuration, make a backup VIP address the master if its priority becomes higher than that of a master VIP address bound to this VMAC address.  
        If you disable pre-emption while a backup VIP address is the master, the backup VIP address remains master until the original master VIP's priority becomes higher than that of the current master.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER sharing 
        In an active-active mode configuration, enable the backup VIP address to process any traffic instead of dropping it.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER tracking 
        The effective priority (EP) value, relative to the base priority (BP) value in an active-active mode configuration. When EP is set to a value other than None, it is EP, not BP, which determines the master VIP address.  
        Available settings function as follows:  
        * NONE - No tracking. EP = BP  
        * ALL - If the status of all virtual servers is UP, EP = BP. Otherwise, EP = 0.  
        * ONE - If the status of at least one virtual server is UP, EP = BP. Otherwise, EP = 0.  
        * PROGRESSIVE - If the status of all virtual servers is UP, EP = BP. If the status of all virtual servers is DOWN, EP = 0. Otherwise EP = BP (1 - K/N), where N is the total number of virtual servers associated with the VIP address and K is the number of virtual servers for which the status is DOWN.  
        Default: NONE.  
        Default value: NONE  
        Possible values = NONE, ONE, ALL, PROGRESSIVE 
    .PARAMETER ownernode 
        In a cluster setup, assign a cluster node as the owner of this VMAC address for IP based VRRP configuration. If no owner is configured, owner node is displayed as ALL and one node is dynamically elected as the owner.  
        Minimum value = 0  
        Maximum value = 31 
    .PARAMETER trackifnumpriority 
        Priority by which the Effective priority will be reduced if any of the tracked interfaces goes down in an active-active configuration.  
        Default value: 0  
        Minimum value = 1  
        Maximum value = 255 
    .PARAMETER preemptiondelaytimer 
        Preemption delay time, in seconds, in an active-active configuration. If any high priority node will come in network, it will wait for these many seconds before becoming master.  
        Default value: 0  
        Minimum value = 1  
        Maximum value = 36000 
    .PARAMETER PassThru 
        Return details about the created vrid item.
    .EXAMPLE
        Invoke-ADCUpdateVrid -id <double>
    .NOTES
        File Name : Invoke-ADCUpdateVrid
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vrid/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateRange(1, 255)]
        [double]$id ,

        [ValidateRange(0, 255)]
        [double]$priority ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$preemption ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$sharing ,

        [ValidateSet('NONE', 'ONE', 'ALL', 'PROGRESSIVE')]
        [string]$tracking ,

        [ValidateRange(0, 31)]
        [double]$ownernode ,

        [ValidateRange(1, 255)]
        [double]$trackifnumpriority ,

        [ValidateRange(1, 36000)]
        [double]$preemptiondelaytimer ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCUpdateVrid: Starting"
    }
    process {
        try {
            $Payload = @{
                id = $id
            }
            if ($PSBoundParameters.ContainsKey('priority')) { $Payload.Add('priority', $priority) }
            if ($PSBoundParameters.ContainsKey('preemption')) { $Payload.Add('preemption', $preemption) }
            if ($PSBoundParameters.ContainsKey('sharing')) { $Payload.Add('sharing', $sharing) }
            if ($PSBoundParameters.ContainsKey('tracking')) { $Payload.Add('tracking', $tracking) }
            if ($PSBoundParameters.ContainsKey('ownernode')) { $Payload.Add('ownernode', $ownernode) }
            if ($PSBoundParameters.ContainsKey('trackifnumpriority')) { $Payload.Add('trackifnumpriority', $trackifnumpriority) }
            if ($PSBoundParameters.ContainsKey('preemptiondelaytimer')) { $Payload.Add('preemptiondelaytimer', $preemptiondelaytimer) }
 
            if ($PSCmdlet.ShouldProcess("vrid", "Update Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -NitroPath nitro/v1/config -Type vrid -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetVrid -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUpdateVrid: Finished"
    }
}

function Invoke-ADCUnsetVrid {
<#
    .SYNOPSIS
        Unset Network configuration Object
    .DESCRIPTION
        Unset Network configuration Object 
   .PARAMETER id 
       Integer that uniquely identifies the VMAC address. The generic VMAC address is in the form of 00:00:5e:00:01:<VRID>. For example, if you add a VRID with a value of 60 and bind it to an interface, the resulting VMAC address is 00:00:5e:00:01:3c, where 3c is the hexadecimal representation of 60. 
   .PARAMETER priority 
       Base priority (BP), in an active-active mode configuration, which ordinarily determines the master VIP address. 
   .PARAMETER preemption 
       In an active-active mode configuration, make a backup VIP address the master if its priority becomes higher than that of a master VIP address bound to this VMAC address.  
       If you disable pre-emption while a backup VIP address is the master, the backup VIP address remains master until the original master VIP's priority becomes higher than that of the current master.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER sharing 
       In an active-active mode configuration, enable the backup VIP address to process any traffic instead of dropping it.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER tracking 
       The effective priority (EP) value, relative to the base priority (BP) value in an active-active mode configuration. When EP is set to a value other than None, it is EP, not BP, which determines the master VIP address.  
       Available settings function as follows:  
       * NONE - No tracking. EP = BP  
       * ALL - If the status of all virtual servers is UP, EP = BP. Otherwise, EP = 0.  
       * ONE - If the status of at least one virtual server is UP, EP = BP. Otherwise, EP = 0.  
       * PROGRESSIVE - If the status of all virtual servers is UP, EP = BP. If the status of all virtual servers is DOWN, EP = 0. Otherwise EP = BP (1 - K/N), where N is the total number of virtual servers associated with the VIP address and K is the number of virtual servers for which the status is DOWN.  
       Default: NONE.  
       Possible values = NONE, ONE, ALL, PROGRESSIVE 
   .PARAMETER ownernode 
       In a cluster setup, assign a cluster node as the owner of this VMAC address for IP based VRRP configuration. If no owner is configured, owner node is displayed as ALL and one node is dynamically elected as the owner. 
   .PARAMETER trackifnumpriority 
       Priority by which the Effective priority will be reduced if any of the tracked interfaces goes down in an active-active configuration. 
   .PARAMETER preemptiondelaytimer 
       Preemption delay time, in seconds, in an active-active configuration. If any high priority node will come in network, it will wait for these many seconds before becoming master.
    .EXAMPLE
        Invoke-ADCUnsetVrid -id <double>
    .NOTES
        File Name : Invoke-ADCUnsetVrid
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vrid
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateRange(1, 255)]
        [double]$id ,

        [Boolean]$priority ,

        [Boolean]$preemption ,

        [Boolean]$sharing ,

        [Boolean]$tracking ,

        [Boolean]$ownernode ,

        [Boolean]$trackifnumpriority ,

        [Boolean]$preemptiondelaytimer 
    )
    begin {
        Write-Verbose "Invoke-ADCUnsetVrid: Starting"
    }
    process {
        try {
            $Payload = @{
                id = $id
            }
            if ($PSBoundParameters.ContainsKey('priority')) { $Payload.Add('priority', $priority) }
            if ($PSBoundParameters.ContainsKey('preemption')) { $Payload.Add('preemption', $preemption) }
            if ($PSBoundParameters.ContainsKey('sharing')) { $Payload.Add('sharing', $sharing) }
            if ($PSBoundParameters.ContainsKey('tracking')) { $Payload.Add('tracking', $tracking) }
            if ($PSBoundParameters.ContainsKey('ownernode')) { $Payload.Add('ownernode', $ownernode) }
            if ($PSBoundParameters.ContainsKey('trackifnumpriority')) { $Payload.Add('trackifnumpriority', $trackifnumpriority) }
            if ($PSBoundParameters.ContainsKey('preemptiondelaytimer')) { $Payload.Add('preemptiondelaytimer', $preemptiondelaytimer) }
            if ($PSCmdlet.ShouldProcess("$id", "Unset Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type vrid -NitroPath nitro/v1/config -Action unset -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUnsetVrid: Finished"
    }
}

function Invoke-ADCGetVrid {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER id 
       Integer that uniquely identifies the VMAC address. The generic VMAC address is in the form of 00:00:5e:00:01:<VRID>. For example, if you add a VRID with a value of 60 and bind it to an interface, the resulting VMAC address is 00:00:5e:00:01:3c, where 3c is the hexadecimal representation of 60. 
    .PARAMETER GetAll 
        Retreive all vrid object(s)
    .PARAMETER Count
        If specified, the count of the vrid object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetVrid
    .EXAMPLE 
        Invoke-ADCGetVrid -GetAll 
    .EXAMPLE 
        Invoke-ADCGetVrid -Count
    .EXAMPLE
        Invoke-ADCGetVrid -name <string>
    .EXAMPLE
        Invoke-ADCGetVrid -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetVrid
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vrid/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateRange(1, 255)]
        [double]$id,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll,

        [Parameter(ParameterSetName = 'GetAll')]
        [Parameter(ParameterSetName = 'Get')]
        [Switch]$ViewSummary

    )
    begin {
        Write-Verbose "Invoke-ADCGetVrid: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all vrid objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vrid -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for vrid objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vrid -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving vrid objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vrid -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving vrid configuration for property 'id'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vrid -NitroPath nitro/v1/config -Resource $id -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving vrid configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vrid -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetVrid: Ended"
    }
}

function Invoke-ADCAddVrid6 {
<#
    .SYNOPSIS
        Add Network configuration Object
    .DESCRIPTION
        Add Network configuration Object 
    .PARAMETER id 
        Integer value that uniquely identifies a VMAC6 address.  
        Minimum value = 1  
        Maximum value = 255 
    .PARAMETER priority 
        Base priority (BP), in an active-active mode configuration, which ordinarily determines the master VIP address.  
        Default value: 255  
        Minimum value = 0  
        Maximum value = 255 
    .PARAMETER preemption 
        In an active-active mode configuration, make a backup VIP address the master if its priority becomes higher than that of a master VIP address bound to this VMAC address.  
        If you disable pre-emption while a backup VIP address is the master, the backup VIP address remains master until the original master VIP's priority becomes higher than that of the current master.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER sharing 
        In an active-active mode configuration, enable the backup VIP address to process any traffic instead of dropping it.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER tracking 
        The effective priority (EP) value, relative to the base priority (BP) value in an active-active mode configuration. When EP is set to a value other than None, it is EP, not BP, which determines the master VIP address.  
        Available settings function as follows:  
        * NONE - No tracking. EP = BP  
        * ALL - If the status of all virtual servers is UP, EP = BP. Otherwise, EP = 0.  
        * ONE - If the status of at least one virtual server is UP, EP = BP. Otherwise, EP = 0.  
        * PROGRESSIVE - If the status of all virtual servers is UP, EP = BP. If the status of all virtual servers is DOWN, EP = 0. Otherwise EP = BP (1 - K/N), where N is the total number of virtual servers associated with the VIP address and K is the number of virtual servers for which the status is DOWN.  
        Default: NONE.  
        Default value: NONE  
        Possible values = NONE, ONE, ALL, PROGRESSIVE 
    .PARAMETER preemptiondelaytimer 
        Preemption delay time in seconds, in an active-active configuration. If any high priority node will come in network, it will wait for these many seconds before becoming master.  
        Default value: 0  
        Minimum value = 1  
        Maximum value = 36000 
    .PARAMETER trackifnumpriority 
        Priority by which the Effective priority will be reduced if any of the tracked interfaces goes down in an active-active configuration.  
        Default value: 0  
        Minimum value = 1  
        Maximum value = 255 
    .PARAMETER ownernode 
        In a cluster setup, assign a cluster node as the owner of this VMAC address for IP based VRRP configuration. If no owner is configured, ow ner node is displayed as ALL and one node is dynamically elected as the owner.  
        Minimum value = 0  
        Maximum value = 31 
    .PARAMETER PassThru 
        Return details about the created vrid6 item.
    .EXAMPLE
        Invoke-ADCAddVrid6 -id <double>
    .NOTES
        File Name : Invoke-ADCAddVrid6
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vrid6/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateRange(1, 255)]
        [double]$id ,

        [ValidateRange(0, 255)]
        [double]$priority = '255' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$preemption = 'ENABLED' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$sharing = 'DISABLED' ,

        [ValidateSet('NONE', 'ONE', 'ALL', 'PROGRESSIVE')]
        [string]$tracking = 'NONE' ,

        [ValidateRange(1, 36000)]
        [double]$preemptiondelaytimer = '0' ,

        [ValidateRange(1, 255)]
        [double]$trackifnumpriority = '0' ,

        [ValidateRange(0, 31)]
        [double]$ownernode ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddVrid6: Starting"
    }
    process {
        try {
            $Payload = @{
                id = $id
            }
            if ($PSBoundParameters.ContainsKey('priority')) { $Payload.Add('priority', $priority) }
            if ($PSBoundParameters.ContainsKey('preemption')) { $Payload.Add('preemption', $preemption) }
            if ($PSBoundParameters.ContainsKey('sharing')) { $Payload.Add('sharing', $sharing) }
            if ($PSBoundParameters.ContainsKey('tracking')) { $Payload.Add('tracking', $tracking) }
            if ($PSBoundParameters.ContainsKey('preemptiondelaytimer')) { $Payload.Add('preemptiondelaytimer', $preemptiondelaytimer) }
            if ($PSBoundParameters.ContainsKey('trackifnumpriority')) { $Payload.Add('trackifnumpriority', $trackifnumpriority) }
            if ($PSBoundParameters.ContainsKey('ownernode')) { $Payload.Add('ownernode', $ownernode) }
 
            if ($PSCmdlet.ShouldProcess("vrid6", "Add Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -NitroPath nitro/v1/config -Type vrid6 -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetVrid6 -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddVrid6: Finished"
    }
}

function Invoke-ADCDeleteVrid6 {
<#
    .SYNOPSIS
        Delete Network configuration Object
    .DESCRIPTION
        Delete Network configuration Object
    .PARAMETER id 
       Integer value that uniquely identifies a VMAC6 address.  
       Minimum value = 1  
       Maximum value = 255    .PARAMETER all 
       Remove all configured VMAC6 addresses from the Citrix ADC.
    .EXAMPLE
        Invoke-ADCDeleteVrid6 -id <double>
    .NOTES
        File Name : Invoke-ADCDeleteVrid6
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vrid6/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [double]$id ,

        [boolean]$all 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteVrid6: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }
            if ($PSBoundParameters.ContainsKey('all')) { $Arguments.Add('all', $all) }
            if ($PSCmdlet.ShouldProcess("$id", "Delete Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type vrid6 -NitroPath nitro/v1/config -Resource $id -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteVrid6: Finished"
    }
}

function Invoke-ADCUpdateVrid6 {
<#
    .SYNOPSIS
        Update Network configuration Object
    .DESCRIPTION
        Update Network configuration Object 
    .PARAMETER id 
        Integer value that uniquely identifies a VMAC6 address.  
        Minimum value = 1  
        Maximum value = 255 
    .PARAMETER priority 
        Base priority (BP), in an active-active mode configuration, which ordinarily determines the master VIP address.  
        Default value: 255  
        Minimum value = 0  
        Maximum value = 255 
    .PARAMETER preemption 
        In an active-active mode configuration, make a backup VIP address the master if its priority becomes higher than that of a master VIP address bound to this VMAC address.  
        If you disable pre-emption while a backup VIP address is the master, the backup VIP address remains master until the original master VIP's priority becomes higher than that of the current master.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER sharing 
        In an active-active mode configuration, enable the backup VIP address to process any traffic instead of dropping it.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER tracking 
        The effective priority (EP) value, relative to the base priority (BP) value in an active-active mode configuration. When EP is set to a value other than None, it is EP, not BP, which determines the master VIP address.  
        Available settings function as follows:  
        * NONE - No tracking. EP = BP  
        * ALL - If the status of all virtual servers is UP, EP = BP. Otherwise, EP = 0.  
        * ONE - If the status of at least one virtual server is UP, EP = BP. Otherwise, EP = 0.  
        * PROGRESSIVE - If the status of all virtual servers is UP, EP = BP. If the status of all virtual servers is DOWN, EP = 0. Otherwise EP = BP (1 - K/N), where N is the total number of virtual servers associated with the VIP address and K is the number of virtual servers for which the status is DOWN.  
        Default: NONE.  
        Default value: NONE  
        Possible values = NONE, ONE, ALL, PROGRESSIVE 
    .PARAMETER preemptiondelaytimer 
        Preemption delay time in seconds, in an active-active configuration. If any high priority node will come in network, it will wait for these many seconds before becoming master.  
        Default value: 0  
        Minimum value = 1  
        Maximum value = 36000 
    .PARAMETER trackifnumpriority 
        Priority by which the Effective priority will be reduced if any of the tracked interfaces goes down in an active-active configuration.  
        Default value: 0  
        Minimum value = 1  
        Maximum value = 255 
    .PARAMETER ownernode 
        In a cluster setup, assign a cluster node as the owner of this VMAC address for IP based VRRP configuration. If no owner is configured, ow ner node is displayed as ALL and one node is dynamically elected as the owner.  
        Minimum value = 0  
        Maximum value = 31 
    .PARAMETER PassThru 
        Return details about the created vrid6 item.
    .EXAMPLE
        Invoke-ADCUpdateVrid6 -id <double>
    .NOTES
        File Name : Invoke-ADCUpdateVrid6
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vrid6/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateRange(1, 255)]
        [double]$id ,

        [ValidateRange(0, 255)]
        [double]$priority ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$preemption ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$sharing ,

        [ValidateSet('NONE', 'ONE', 'ALL', 'PROGRESSIVE')]
        [string]$tracking ,

        [ValidateRange(1, 36000)]
        [double]$preemptiondelaytimer ,

        [ValidateRange(1, 255)]
        [double]$trackifnumpriority ,

        [ValidateRange(0, 31)]
        [double]$ownernode ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCUpdateVrid6: Starting"
    }
    process {
        try {
            $Payload = @{
                id = $id
            }
            if ($PSBoundParameters.ContainsKey('priority')) { $Payload.Add('priority', $priority) }
            if ($PSBoundParameters.ContainsKey('preemption')) { $Payload.Add('preemption', $preemption) }
            if ($PSBoundParameters.ContainsKey('sharing')) { $Payload.Add('sharing', $sharing) }
            if ($PSBoundParameters.ContainsKey('tracking')) { $Payload.Add('tracking', $tracking) }
            if ($PSBoundParameters.ContainsKey('preemptiondelaytimer')) { $Payload.Add('preemptiondelaytimer', $preemptiondelaytimer) }
            if ($PSBoundParameters.ContainsKey('trackifnumpriority')) { $Payload.Add('trackifnumpriority', $trackifnumpriority) }
            if ($PSBoundParameters.ContainsKey('ownernode')) { $Payload.Add('ownernode', $ownernode) }
 
            if ($PSCmdlet.ShouldProcess("vrid6", "Update Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -NitroPath nitro/v1/config -Type vrid6 -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetVrid6 -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUpdateVrid6: Finished"
    }
}

function Invoke-ADCUnsetVrid6 {
<#
    .SYNOPSIS
        Unset Network configuration Object
    .DESCRIPTION
        Unset Network configuration Object 
   .PARAMETER id 
       Integer value that uniquely identifies a VMAC6 address. 
   .PARAMETER priority 
       Base priority (BP), in an active-active mode configuration, which ordinarily determines the master VIP address. 
   .PARAMETER preemption 
       In an active-active mode configuration, make a backup VIP address the master if its priority becomes higher than that of a master VIP address bound to this VMAC address.  
       If you disable pre-emption while a backup VIP address is the master, the backup VIP address remains master until the original master VIP's priority becomes higher than that of the current master.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER sharing 
       In an active-active mode configuration, enable the backup VIP address to process any traffic instead of dropping it.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER tracking 
       The effective priority (EP) value, relative to the base priority (BP) value in an active-active mode configuration. When EP is set to a value other than None, it is EP, not BP, which determines the master VIP address.  
       Available settings function as follows:  
       * NONE - No tracking. EP = BP  
       * ALL - If the status of all virtual servers is UP, EP = BP. Otherwise, EP = 0.  
       * ONE - If the status of at least one virtual server is UP, EP = BP. Otherwise, EP = 0.  
       * PROGRESSIVE - If the status of all virtual servers is UP, EP = BP. If the status of all virtual servers is DOWN, EP = 0. Otherwise EP = BP (1 - K/N), where N is the total number of virtual servers associated with the VIP address and K is the number of virtual servers for which the status is DOWN.  
       Default: NONE.  
       Possible values = NONE, ONE, ALL, PROGRESSIVE 
   .PARAMETER preemptiondelaytimer 
       Preemption delay time in seconds, in an active-active configuration. If any high priority node will come in network, it will wait for these many seconds before becoming master. 
   .PARAMETER trackifnumpriority 
       Priority by which the Effective priority will be reduced if any of the tracked interfaces goes down in an active-active configuration. 
   .PARAMETER ownernode 
       In a cluster setup, assign a cluster node as the owner of this VMAC address for IP based VRRP configuration. If no owner is configured, ow ner node is displayed as ALL and one node is dynamically elected as the owner.
    .EXAMPLE
        Invoke-ADCUnsetVrid6 -id <double>
    .NOTES
        File Name : Invoke-ADCUnsetVrid6
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vrid6
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateRange(1, 255)]
        [double]$id ,

        [Boolean]$priority ,

        [Boolean]$preemption ,

        [Boolean]$sharing ,

        [Boolean]$tracking ,

        [Boolean]$preemptiondelaytimer ,

        [Boolean]$trackifnumpriority ,

        [Boolean]$ownernode 
    )
    begin {
        Write-Verbose "Invoke-ADCUnsetVrid6: Starting"
    }
    process {
        try {
            $Payload = @{
                id = $id
            }
            if ($PSBoundParameters.ContainsKey('priority')) { $Payload.Add('priority', $priority) }
            if ($PSBoundParameters.ContainsKey('preemption')) { $Payload.Add('preemption', $preemption) }
            if ($PSBoundParameters.ContainsKey('sharing')) { $Payload.Add('sharing', $sharing) }
            if ($PSBoundParameters.ContainsKey('tracking')) { $Payload.Add('tracking', $tracking) }
            if ($PSBoundParameters.ContainsKey('preemptiondelaytimer')) { $Payload.Add('preemptiondelaytimer', $preemptiondelaytimer) }
            if ($PSBoundParameters.ContainsKey('trackifnumpriority')) { $Payload.Add('trackifnumpriority', $trackifnumpriority) }
            if ($PSBoundParameters.ContainsKey('ownernode')) { $Payload.Add('ownernode', $ownernode) }
            if ($PSCmdlet.ShouldProcess("$id", "Unset Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type vrid6 -NitroPath nitro/v1/config -Action unset -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUnsetVrid6: Finished"
    }
}

function Invoke-ADCGetVrid6 {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER id 
       Integer value that uniquely identifies a VMAC6 address. 
    .PARAMETER GetAll 
        Retreive all vrid6 object(s)
    .PARAMETER Count
        If specified, the count of the vrid6 object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetVrid6
    .EXAMPLE 
        Invoke-ADCGetVrid6 -GetAll 
    .EXAMPLE 
        Invoke-ADCGetVrid6 -Count
    .EXAMPLE
        Invoke-ADCGetVrid6 -name <string>
    .EXAMPLE
        Invoke-ADCGetVrid6 -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetVrid6
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vrid6/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateRange(1, 255)]
        [double]$id,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll,

        [Parameter(ParameterSetName = 'GetAll')]
        [Parameter(ParameterSetName = 'Get')]
        [Switch]$ViewSummary

    )
    begin {
        Write-Verbose "Invoke-ADCGetVrid6: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all vrid6 objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vrid6 -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for vrid6 objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vrid6 -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving vrid6 objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vrid6 -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving vrid6 configuration for property 'id'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vrid6 -NitroPath nitro/v1/config -Resource $id -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving vrid6 configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vrid6 -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetVrid6: Ended"
    }
}

function Invoke-ADCGetVrid6binding {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER id 
       Integer value that uniquely identifies a VMAC6 address. 
    .PARAMETER GetAll 
        Retreive all vrid6_binding object(s)
    .PARAMETER Count
        If specified, the count of the vrid6_binding object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetVrid6binding
    .EXAMPLE 
        Invoke-ADCGetVrid6binding -GetAll
    .EXAMPLE
        Invoke-ADCGetVrid6binding -name <string>
    .EXAMPLE
        Invoke-ADCGetVrid6binding -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetVrid6binding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vrid6_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateRange(1, 255)]
        [double]$id,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetVrid6binding: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ 
                    bulkbindings = 'yes'
                }
                Write-Verbose "Retrieving all vrid6_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vrid6_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for vrid6_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vrid6_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving vrid6_binding objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vrid6_binding -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving vrid6_binding configuration for property 'id'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vrid6_binding -NitroPath nitro/v1/config -Resource $id -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving vrid6_binding configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vrid6_binding -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetVrid6binding: Ended"
    }
}

function Invoke-ADCAddVrid6channelbinding {
<#
    .SYNOPSIS
        Add Network configuration Object
    .DESCRIPTION
        Add Network configuration Object 
    .PARAMETER id 
        Integer value that uniquely identifies a VMAC6 address.  
        Minimum value = 1  
        Maximum value = 255 
    .PARAMETER ifnum 
        Interfaces to bind to the VMAC6, specified in (slot/port) notation (for example, 1/2).Use spaces to separate multiple entries. 
    .PARAMETER PassThru 
        Return details about the created vrid6_channel_binding item.
    .EXAMPLE
        Invoke-ADCAddVrid6channelbinding -id <double>
    .NOTES
        File Name : Invoke-ADCAddVrid6channelbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vrid6_channel_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateRange(1, 255)]
        [double]$id ,

        [string]$ifnum ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddVrid6channelbinding: Starting"
    }
    process {
        try {
            $Payload = @{
                id = $id
            }
            if ($PSBoundParameters.ContainsKey('ifnum')) { $Payload.Add('ifnum', $ifnum) }
 
            if ($PSCmdlet.ShouldProcess("vrid6_channel_binding", "Add Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -NitroPath nitro/v1/config -Type vrid6_channel_binding -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetVrid6channelbinding -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddVrid6channelbinding: Finished"
    }
}

function Invoke-ADCDeleteVrid6channelbinding {
<#
    .SYNOPSIS
        Delete Network configuration Object
    .DESCRIPTION
        Delete Network configuration Object
    .PARAMETER id 
       Integer value that uniquely identifies a VMAC6 address.  
       Minimum value = 1  
       Maximum value = 255    .PARAMETER ifnum 
       Interfaces to bind to the VMAC6, specified in (slot/port) notation (for example, 1/2).Use spaces to separate multiple entries.
    .EXAMPLE
        Invoke-ADCDeleteVrid6channelbinding -id <double>
    .NOTES
        File Name : Invoke-ADCDeleteVrid6channelbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vrid6_channel_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [double]$id ,

        [string]$ifnum 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteVrid6channelbinding: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }
            if ($PSBoundParameters.ContainsKey('ifnum')) { $Arguments.Add('ifnum', $ifnum) }
            if ($PSCmdlet.ShouldProcess("$id", "Delete Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type vrid6_channel_binding -NitroPath nitro/v1/config -Resource $id -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteVrid6channelbinding: Finished"
    }
}

function Invoke-ADCGetVrid6channelbinding {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER id 
       Integer value that uniquely identifies a VMAC6 address. 
    .PARAMETER GetAll 
        Retreive all vrid6_channel_binding object(s)
    .PARAMETER Count
        If specified, the count of the vrid6_channel_binding object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetVrid6channelbinding
    .EXAMPLE 
        Invoke-ADCGetVrid6channelbinding -GetAll 
    .EXAMPLE 
        Invoke-ADCGetVrid6channelbinding -Count
    .EXAMPLE
        Invoke-ADCGetVrid6channelbinding -name <string>
    .EXAMPLE
        Invoke-ADCGetVrid6channelbinding -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetVrid6channelbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vrid6_channel_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateRange(1, 255)]
        [double]$id,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetVrid6channelbinding: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ 
                    bulkbindings = 'yes'
                }
                Write-Verbose "Retrieving all vrid6_channel_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vrid6_channel_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for vrid6_channel_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vrid6_channel_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving vrid6_channel_binding objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vrid6_channel_binding -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving vrid6_channel_binding configuration for property 'id'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vrid6_channel_binding -NitroPath nitro/v1/config -Resource $id -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving vrid6_channel_binding configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vrid6_channel_binding -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetVrid6channelbinding: Ended"
    }
}

function Invoke-ADCAddVrid6interfacebinding {
<#
    .SYNOPSIS
        Add Network configuration Object
    .DESCRIPTION
        Add Network configuration Object 
    .PARAMETER id 
        Integer value that uniquely identifies a VMAC6 address.  
        Minimum value = 1  
        Maximum value = 255 
    .PARAMETER ifnum 
        Interfaces to bind to the VMAC6, specified in (slot/port) notation (for example, 1/2).Use spaces to separate multiple entries. 
    .PARAMETER PassThru 
        Return details about the created vrid6_interface_binding item.
    .EXAMPLE
        Invoke-ADCAddVrid6interfacebinding -id <double>
    .NOTES
        File Name : Invoke-ADCAddVrid6interfacebinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vrid6_interface_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateRange(1, 255)]
        [double]$id ,

        [string]$ifnum ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddVrid6interfacebinding: Starting"
    }
    process {
        try {
            $Payload = @{
                id = $id
            }
            if ($PSBoundParameters.ContainsKey('ifnum')) { $Payload.Add('ifnum', $ifnum) }
 
            if ($PSCmdlet.ShouldProcess("vrid6_interface_binding", "Add Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -NitroPath nitro/v1/config -Type vrid6_interface_binding -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetVrid6interfacebinding -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddVrid6interfacebinding: Finished"
    }
}

function Invoke-ADCDeleteVrid6interfacebinding {
<#
    .SYNOPSIS
        Delete Network configuration Object
    .DESCRIPTION
        Delete Network configuration Object
    .PARAMETER id 
       Integer value that uniquely identifies a VMAC6 address.  
       Minimum value = 1  
       Maximum value = 255    .PARAMETER ifnum 
       Interfaces to bind to the VMAC6, specified in (slot/port) notation (for example, 1/2).Use spaces to separate multiple entries.
    .EXAMPLE
        Invoke-ADCDeleteVrid6interfacebinding -id <double>
    .NOTES
        File Name : Invoke-ADCDeleteVrid6interfacebinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vrid6_interface_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [double]$id ,

        [string]$ifnum 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteVrid6interfacebinding: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }
            if ($PSBoundParameters.ContainsKey('ifnum')) { $Arguments.Add('ifnum', $ifnum) }
            if ($PSCmdlet.ShouldProcess("$id", "Delete Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type vrid6_interface_binding -NitroPath nitro/v1/config -Resource $id -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteVrid6interfacebinding: Finished"
    }
}

function Invoke-ADCGetVrid6interfacebinding {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER id 
       Integer value that uniquely identifies a VMAC6 address. 
    .PARAMETER GetAll 
        Retreive all vrid6_interface_binding object(s)
    .PARAMETER Count
        If specified, the count of the vrid6_interface_binding object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetVrid6interfacebinding
    .EXAMPLE 
        Invoke-ADCGetVrid6interfacebinding -GetAll 
    .EXAMPLE 
        Invoke-ADCGetVrid6interfacebinding -Count
    .EXAMPLE
        Invoke-ADCGetVrid6interfacebinding -name <string>
    .EXAMPLE
        Invoke-ADCGetVrid6interfacebinding -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetVrid6interfacebinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vrid6_interface_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateRange(1, 255)]
        [double]$id,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetVrid6interfacebinding: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ 
                    bulkbindings = 'yes'
                }
                Write-Verbose "Retrieving all vrid6_interface_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vrid6_interface_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for vrid6_interface_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vrid6_interface_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving vrid6_interface_binding objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vrid6_interface_binding -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving vrid6_interface_binding configuration for property 'id'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vrid6_interface_binding -NitroPath nitro/v1/config -Resource $id -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving vrid6_interface_binding configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vrid6_interface_binding -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetVrid6interfacebinding: Ended"
    }
}

function Invoke-ADCGetVrid6nsip6binding {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER id 
       Integer value that uniquely identifies a VMAC6 address. 
    .PARAMETER GetAll 
        Retreive all vrid6_nsip6_binding object(s)
    .PARAMETER Count
        If specified, the count of the vrid6_nsip6_binding object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetVrid6nsip6binding
    .EXAMPLE 
        Invoke-ADCGetVrid6nsip6binding -GetAll 
    .EXAMPLE 
        Invoke-ADCGetVrid6nsip6binding -Count
    .EXAMPLE
        Invoke-ADCGetVrid6nsip6binding -name <string>
    .EXAMPLE
        Invoke-ADCGetVrid6nsip6binding -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetVrid6nsip6binding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vrid6_nsip6_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateRange(1, 255)]
        [double]$id,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetVrid6nsip6binding: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ 
                    bulkbindings = 'yes'
                }
                Write-Verbose "Retrieving all vrid6_nsip6_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vrid6_nsip6_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for vrid6_nsip6_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vrid6_nsip6_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving vrid6_nsip6_binding objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vrid6_nsip6_binding -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving vrid6_nsip6_binding configuration for property 'id'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vrid6_nsip6_binding -NitroPath nitro/v1/config -Resource $id -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving vrid6_nsip6_binding configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vrid6_nsip6_binding -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetVrid6nsip6binding: Ended"
    }
}

function Invoke-ADCGetVrid6nsipbinding {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER id 
       Integer value that uniquely identifies a VMAC6 address. 
    .PARAMETER GetAll 
        Retreive all vrid6_nsip_binding object(s)
    .PARAMETER Count
        If specified, the count of the vrid6_nsip_binding object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetVrid6nsipbinding
    .EXAMPLE 
        Invoke-ADCGetVrid6nsipbinding -GetAll 
    .EXAMPLE 
        Invoke-ADCGetVrid6nsipbinding -Count
    .EXAMPLE
        Invoke-ADCGetVrid6nsipbinding -name <string>
    .EXAMPLE
        Invoke-ADCGetVrid6nsipbinding -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetVrid6nsipbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vrid6_nsip_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateRange(1, 255)]
        [double]$id,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetVrid6nsipbinding: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ 
                    bulkbindings = 'yes'
                }
                Write-Verbose "Retrieving all vrid6_nsip_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vrid6_nsip_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for vrid6_nsip_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vrid6_nsip_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving vrid6_nsip_binding objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vrid6_nsip_binding -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving vrid6_nsip_binding configuration for property 'id'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vrid6_nsip_binding -NitroPath nitro/v1/config -Resource $id -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving vrid6_nsip_binding configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vrid6_nsip_binding -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetVrid6nsipbinding: Ended"
    }
}

function Invoke-ADCAddVrid6trackinterfacebinding {
<#
    .SYNOPSIS
        Add Network configuration Object
    .DESCRIPTION
        Add Network configuration Object 
    .PARAMETER id 
        Integer value that uniquely identifies a VMAC6 address.  
        Minimum value = 1  
        Maximum value = 255 
    .PARAMETER trackifnum 
        Interfaces which need to be tracked for this vrID. 
    .PARAMETER PassThru 
        Return details about the created vrid6_trackinterface_binding item.
    .EXAMPLE
        Invoke-ADCAddVrid6trackinterfacebinding -id <double>
    .NOTES
        File Name : Invoke-ADCAddVrid6trackinterfacebinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vrid6_trackinterface_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateRange(1, 255)]
        [double]$id ,

        [string]$trackifnum ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddVrid6trackinterfacebinding: Starting"
    }
    process {
        try {
            $Payload = @{
                id = $id
            }
            if ($PSBoundParameters.ContainsKey('trackifnum')) { $Payload.Add('trackifnum', $trackifnum) }
 
            if ($PSCmdlet.ShouldProcess("vrid6_trackinterface_binding", "Add Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -NitroPath nitro/v1/config -Type vrid6_trackinterface_binding -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetVrid6trackinterfacebinding -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddVrid6trackinterfacebinding: Finished"
    }
}

function Invoke-ADCDeleteVrid6trackinterfacebinding {
<#
    .SYNOPSIS
        Delete Network configuration Object
    .DESCRIPTION
        Delete Network configuration Object
    .PARAMETER id 
       Integer value that uniquely identifies a VMAC6 address.  
       Minimum value = 1  
       Maximum value = 255    .PARAMETER trackifnum 
       Interfaces which need to be tracked for this vrID.
    .EXAMPLE
        Invoke-ADCDeleteVrid6trackinterfacebinding -id <double>
    .NOTES
        File Name : Invoke-ADCDeleteVrid6trackinterfacebinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vrid6_trackinterface_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [double]$id ,

        [string]$trackifnum 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteVrid6trackinterfacebinding: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }
            if ($PSBoundParameters.ContainsKey('trackifnum')) { $Arguments.Add('trackifnum', $trackifnum) }
            if ($PSCmdlet.ShouldProcess("$id", "Delete Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type vrid6_trackinterface_binding -NitroPath nitro/v1/config -Resource $id -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteVrid6trackinterfacebinding: Finished"
    }
}

function Invoke-ADCGetVrid6trackinterfacebinding {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER id 
       Integer value that uniquely identifies a VMAC6 address. 
    .PARAMETER GetAll 
        Retreive all vrid6_trackinterface_binding object(s)
    .PARAMETER Count
        If specified, the count of the vrid6_trackinterface_binding object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetVrid6trackinterfacebinding
    .EXAMPLE 
        Invoke-ADCGetVrid6trackinterfacebinding -GetAll 
    .EXAMPLE 
        Invoke-ADCGetVrid6trackinterfacebinding -Count
    .EXAMPLE
        Invoke-ADCGetVrid6trackinterfacebinding -name <string>
    .EXAMPLE
        Invoke-ADCGetVrid6trackinterfacebinding -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetVrid6trackinterfacebinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vrid6_trackinterface_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateRange(1, 255)]
        [double]$id,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetVrid6trackinterfacebinding: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ 
                    bulkbindings = 'yes'
                }
                Write-Verbose "Retrieving all vrid6_trackinterface_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vrid6_trackinterface_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for vrid6_trackinterface_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vrid6_trackinterface_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving vrid6_trackinterface_binding objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vrid6_trackinterface_binding -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving vrid6_trackinterface_binding configuration for property 'id'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vrid6_trackinterface_binding -NitroPath nitro/v1/config -Resource $id -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving vrid6_trackinterface_binding configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vrid6_trackinterface_binding -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetVrid6trackinterfacebinding: Ended"
    }
}

function Invoke-ADCUpdateVridparam {
<#
    .SYNOPSIS
        Update Network configuration Object
    .DESCRIPTION
        Update Network configuration Object 
    .PARAMETER sendtomaster 
        Forward packets to the master node, in an active-active mode configuration, if the virtual server is in the backup state and sharing is disabled.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER hellointerval 
        Interval, in milliseconds, between vrrp advertisement messages sent to the peer node in active-active mode.  
        Default value: 1000  
        Minimum value = 200  
        Maximum value = 1000 
    .PARAMETER deadinterval 
        Number of seconds after which a peer node in active-active mode is marked down if vrrp advertisements are not received from the peer node.  
        Default value: 3  
        Minimum value = 1  
        Maximum value = 60
    .EXAMPLE
        Invoke-ADCUpdateVridparam 
    .NOTES
        File Name : Invoke-ADCUpdateVridparam
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vridparam/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$sendtomaster ,

        [ValidateRange(200, 1000)]
        [double]$hellointerval ,

        [ValidateRange(1, 60)]
        [double]$deadinterval 

    )
    begin {
        Write-Verbose "Invoke-ADCUpdateVridparam: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('sendtomaster')) { $Payload.Add('sendtomaster', $sendtomaster) }
            if ($PSBoundParameters.ContainsKey('hellointerval')) { $Payload.Add('hellointerval', $hellointerval) }
            if ($PSBoundParameters.ContainsKey('deadinterval')) { $Payload.Add('deadinterval', $deadinterval) }
 
            if ($PSCmdlet.ShouldProcess("vridparam", "Update Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -NitroPath nitro/v1/config -Type vridparam -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
            Write-Output $result

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUpdateVridparam: Finished"
    }
}

function Invoke-ADCUnsetVridparam {
<#
    .SYNOPSIS
        Unset Network configuration Object
    .DESCRIPTION
        Unset Network configuration Object 
   .PARAMETER sendtomaster 
       Forward packets to the master node, in an active-active mode configuration, if the virtual server is in the backup state and sharing is disabled.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER hellointerval 
       Interval, in milliseconds, between vrrp advertisement messages sent to the peer node in active-active mode. 
   .PARAMETER deadinterval 
       Number of seconds after which a peer node in active-active mode is marked down if vrrp advertisements are not received from the peer node.
    .EXAMPLE
        Invoke-ADCUnsetVridparam 
    .NOTES
        File Name : Invoke-ADCUnsetVridparam
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vridparam
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Boolean]$sendtomaster ,

        [Boolean]$hellointerval ,

        [Boolean]$deadinterval 
    )
    begin {
        Write-Verbose "Invoke-ADCUnsetVridparam: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('sendtomaster')) { $Payload.Add('sendtomaster', $sendtomaster) }
            if ($PSBoundParameters.ContainsKey('hellointerval')) { $Payload.Add('hellointerval', $hellointerval) }
            if ($PSBoundParameters.ContainsKey('deadinterval')) { $Payload.Add('deadinterval', $deadinterval) }
            if ($PSCmdlet.ShouldProcess("vridparam", "Unset Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type vridparam -NitroPath nitro/v1/config -Action unset -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUnsetVridparam: Finished"
    }
}

function Invoke-ADCGetVridparam {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER GetAll 
        Retreive all vridparam object(s)
    .PARAMETER Count
        If specified, the count of the vridparam object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetVridparam
    .EXAMPLE 
        Invoke-ADCGetVridparam -GetAll
    .EXAMPLE
        Invoke-ADCGetVridparam -name <string>
    .EXAMPLE
        Invoke-ADCGetVridparam -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetVridparam
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vridparam/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetVridparam: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all vridparam objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vridparam -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for vridparam objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vridparam -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving vridparam objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vridparam -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving vridparam configuration for property ''"

            } else {
                Write-Verbose "Retrieving vridparam configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vridparam -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetVridparam: Ended"
    }
}

function Invoke-ADCGetVridbinding {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER id 
       Integer value that uniquely identifies the VMAC address. 
    .PARAMETER GetAll 
        Retreive all vrid_binding object(s)
    .PARAMETER Count
        If specified, the count of the vrid_binding object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetVridbinding
    .EXAMPLE 
        Invoke-ADCGetVridbinding -GetAll
    .EXAMPLE
        Invoke-ADCGetVridbinding -name <string>
    .EXAMPLE
        Invoke-ADCGetVridbinding -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetVridbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vrid_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateRange(1, 255)]
        [double]$id,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetVridbinding: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ 
                    bulkbindings = 'yes'
                }
                Write-Verbose "Retrieving all vrid_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vrid_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for vrid_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vrid_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving vrid_binding objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vrid_binding -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving vrid_binding configuration for property 'id'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vrid_binding -NitroPath nitro/v1/config -Resource $id -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving vrid_binding configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vrid_binding -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetVridbinding: Ended"
    }
}

function Invoke-ADCAddVridchannelbinding {
<#
    .SYNOPSIS
        Add Network configuration Object
    .DESCRIPTION
        Add Network configuration Object 
    .PARAMETER id 
        Integer that uniquely identifies the VMAC address. The generic VMAC address is in the form of 00:00:5e:00:01:<VRID>. For example, if you add a VRID with a value of 60 and bind it to an interface, the resulting VMAC address is 00:00:5e:00:01:3c, where 3c is the hexadecimal representation of 60.  
        Minimum value = 1  
        Maximum value = 255 
    .PARAMETER ifnum 
        Interfaces to bind to the VMAC, specified in (slot/port) notation (for example, 1/2).Use spaces to separate multiple entries. 
    .PARAMETER PassThru 
        Return details about the created vrid_channel_binding item.
    .EXAMPLE
        Invoke-ADCAddVridchannelbinding -id <double>
    .NOTES
        File Name : Invoke-ADCAddVridchannelbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vrid_channel_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateRange(1, 255)]
        [double]$id ,

        [string]$ifnum ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddVridchannelbinding: Starting"
    }
    process {
        try {
            $Payload = @{
                id = $id
            }
            if ($PSBoundParameters.ContainsKey('ifnum')) { $Payload.Add('ifnum', $ifnum) }
 
            if ($PSCmdlet.ShouldProcess("vrid_channel_binding", "Add Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -NitroPath nitro/v1/config -Type vrid_channel_binding -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetVridchannelbinding -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddVridchannelbinding: Finished"
    }
}

function Invoke-ADCDeleteVridchannelbinding {
<#
    .SYNOPSIS
        Delete Network configuration Object
    .DESCRIPTION
        Delete Network configuration Object
    .PARAMETER id 
       Integer that uniquely identifies the VMAC address. The generic VMAC address is in the form of 00:00:5e:00:01:<VRID>. For example, if you add a VRID with a value of 60 and bind it to an interface, the resulting VMAC address is 00:00:5e:00:01:3c, where 3c is the hexadecimal representation of 60.  
       Minimum value = 1  
       Maximum value = 255    .PARAMETER ifnum 
       Interfaces to bind to the VMAC, specified in (slot/port) notation (for example, 1/2).Use spaces to separate multiple entries.
    .EXAMPLE
        Invoke-ADCDeleteVridchannelbinding -id <double>
    .NOTES
        File Name : Invoke-ADCDeleteVridchannelbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vrid_channel_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [double]$id ,

        [string]$ifnum 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteVridchannelbinding: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }
            if ($PSBoundParameters.ContainsKey('ifnum')) { $Arguments.Add('ifnum', $ifnum) }
            if ($PSCmdlet.ShouldProcess("$id", "Delete Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type vrid_channel_binding -NitroPath nitro/v1/config -Resource $id -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteVridchannelbinding: Finished"
    }
}

function Invoke-ADCGetVridchannelbinding {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER id 
       Integer that uniquely identifies the VMAC address. The generic VMAC address is in the form of 00:00:5e:00:01:<VRID>. For example, if you add a VRID with a value of 60 and bind it to an interface, the resulting VMAC address is 00:00:5e:00:01:3c, where 3c is the hexadecimal representation of 60. 
    .PARAMETER GetAll 
        Retreive all vrid_channel_binding object(s)
    .PARAMETER Count
        If specified, the count of the vrid_channel_binding object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetVridchannelbinding
    .EXAMPLE 
        Invoke-ADCGetVridchannelbinding -GetAll 
    .EXAMPLE 
        Invoke-ADCGetVridchannelbinding -Count
    .EXAMPLE
        Invoke-ADCGetVridchannelbinding -name <string>
    .EXAMPLE
        Invoke-ADCGetVridchannelbinding -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetVridchannelbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vrid_channel_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateRange(1, 255)]
        [double]$id,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetVridchannelbinding: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ 
                    bulkbindings = 'yes'
                }
                Write-Verbose "Retrieving all vrid_channel_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vrid_channel_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for vrid_channel_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vrid_channel_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving vrid_channel_binding objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vrid_channel_binding -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving vrid_channel_binding configuration for property 'id'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vrid_channel_binding -NitroPath nitro/v1/config -Resource $id -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving vrid_channel_binding configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vrid_channel_binding -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetVridchannelbinding: Ended"
    }
}

function Invoke-ADCAddVridinterfacebinding {
<#
    .SYNOPSIS
        Add Network configuration Object
    .DESCRIPTION
        Add Network configuration Object 
    .PARAMETER id 
        Integer that uniquely identifies the VMAC address. The generic VMAC address is in the form of 00:00:5e:00:01:<VRID>. For example, if you add a VRID with a value of 60 and bind it to an interface, the resulting VMAC address is 00:00:5e:00:01:3c, where 3c is the hexadecimal representation of 60.  
        Minimum value = 1  
        Maximum value = 255 
    .PARAMETER ifnum 
        Interfaces to bind to the VMAC, specified in (slot/port) notation (for example, 1/2).Use spaces to separate multiple entries. 
    .PARAMETER PassThru 
        Return details about the created vrid_interface_binding item.
    .EXAMPLE
        Invoke-ADCAddVridinterfacebinding -id <double>
    .NOTES
        File Name : Invoke-ADCAddVridinterfacebinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vrid_interface_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateRange(1, 255)]
        [double]$id ,

        [string]$ifnum ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddVridinterfacebinding: Starting"
    }
    process {
        try {
            $Payload = @{
                id = $id
            }
            if ($PSBoundParameters.ContainsKey('ifnum')) { $Payload.Add('ifnum', $ifnum) }
 
            if ($PSCmdlet.ShouldProcess("vrid_interface_binding", "Add Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -NitroPath nitro/v1/config -Type vrid_interface_binding -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetVridinterfacebinding -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddVridinterfacebinding: Finished"
    }
}

function Invoke-ADCDeleteVridinterfacebinding {
<#
    .SYNOPSIS
        Delete Network configuration Object
    .DESCRIPTION
        Delete Network configuration Object
    .PARAMETER id 
       Integer that uniquely identifies the VMAC address. The generic VMAC address is in the form of 00:00:5e:00:01:<VRID>. For example, if you add a VRID with a value of 60 and bind it to an interface, the resulting VMAC address is 00:00:5e:00:01:3c, where 3c is the hexadecimal representation of 60.  
       Minimum value = 1  
       Maximum value = 255    .PARAMETER ifnum 
       Interfaces to bind to the VMAC, specified in (slot/port) notation (for example, 1/2).Use spaces to separate multiple entries.
    .EXAMPLE
        Invoke-ADCDeleteVridinterfacebinding -id <double>
    .NOTES
        File Name : Invoke-ADCDeleteVridinterfacebinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vrid_interface_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [double]$id ,

        [string]$ifnum 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteVridinterfacebinding: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }
            if ($PSBoundParameters.ContainsKey('ifnum')) { $Arguments.Add('ifnum', $ifnum) }
            if ($PSCmdlet.ShouldProcess("$id", "Delete Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type vrid_interface_binding -NitroPath nitro/v1/config -Resource $id -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteVridinterfacebinding: Finished"
    }
}

function Invoke-ADCGetVridinterfacebinding {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER id 
       Integer that uniquely identifies the VMAC address. The generic VMAC address is in the form of 00:00:5e:00:01:<VRID>. For example, if you add a VRID with a value of 60 and bind it to an interface, the resulting VMAC address is 00:00:5e:00:01:3c, where 3c is the hexadecimal representation of 60. 
    .PARAMETER GetAll 
        Retreive all vrid_interface_binding object(s)
    .PARAMETER Count
        If specified, the count of the vrid_interface_binding object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetVridinterfacebinding
    .EXAMPLE 
        Invoke-ADCGetVridinterfacebinding -GetAll 
    .EXAMPLE 
        Invoke-ADCGetVridinterfacebinding -Count
    .EXAMPLE
        Invoke-ADCGetVridinterfacebinding -name <string>
    .EXAMPLE
        Invoke-ADCGetVridinterfacebinding -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetVridinterfacebinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vrid_interface_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateRange(1, 255)]
        [double]$id,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetVridinterfacebinding: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ 
                    bulkbindings = 'yes'
                }
                Write-Verbose "Retrieving all vrid_interface_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vrid_interface_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for vrid_interface_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vrid_interface_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving vrid_interface_binding objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vrid_interface_binding -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving vrid_interface_binding configuration for property 'id'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vrid_interface_binding -NitroPath nitro/v1/config -Resource $id -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving vrid_interface_binding configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vrid_interface_binding -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetVridinterfacebinding: Ended"
    }
}

function Invoke-ADCGetVridnsip6binding {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER id 
       Integer that uniquely identifies the VMAC address. The generic VMAC address is in the form of 00:00:5e:00:01:<VRID>. For example, if you add a VRID with a value of 60 and bind it to an interface, the resulting VMAC address is 00:00:5e:00:01:3c, where 3c is the hexadecimal representation of 60. 
    .PARAMETER GetAll 
        Retreive all vrid_nsip6_binding object(s)
    .PARAMETER Count
        If specified, the count of the vrid_nsip6_binding object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetVridnsip6binding
    .EXAMPLE 
        Invoke-ADCGetVridnsip6binding -GetAll 
    .EXAMPLE 
        Invoke-ADCGetVridnsip6binding -Count
    .EXAMPLE
        Invoke-ADCGetVridnsip6binding -name <string>
    .EXAMPLE
        Invoke-ADCGetVridnsip6binding -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetVridnsip6binding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vrid_nsip6_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateRange(1, 255)]
        [double]$id,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetVridnsip6binding: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ 
                    bulkbindings = 'yes'
                }
                Write-Verbose "Retrieving all vrid_nsip6_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vrid_nsip6_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for vrid_nsip6_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vrid_nsip6_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving vrid_nsip6_binding objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vrid_nsip6_binding -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving vrid_nsip6_binding configuration for property 'id'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vrid_nsip6_binding -NitroPath nitro/v1/config -Resource $id -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving vrid_nsip6_binding configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vrid_nsip6_binding -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetVridnsip6binding: Ended"
    }
}

function Invoke-ADCGetVridnsipbinding {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER id 
       Integer that uniquely identifies the VMAC address. The generic VMAC address is in the form of 00:00:5e:00:01:<VRID>. For example, if you add a VRID with a value of 60 and bind it to an interface, the resulting VMAC address is 00:00:5e:00:01:3c, where 3c is the hexadecimal representation of 60. 
    .PARAMETER GetAll 
        Retreive all vrid_nsip_binding object(s)
    .PARAMETER Count
        If specified, the count of the vrid_nsip_binding object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetVridnsipbinding
    .EXAMPLE 
        Invoke-ADCGetVridnsipbinding -GetAll 
    .EXAMPLE 
        Invoke-ADCGetVridnsipbinding -Count
    .EXAMPLE
        Invoke-ADCGetVridnsipbinding -name <string>
    .EXAMPLE
        Invoke-ADCGetVridnsipbinding -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetVridnsipbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vrid_nsip_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateRange(1, 255)]
        [double]$id,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetVridnsipbinding: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ 
                    bulkbindings = 'yes'
                }
                Write-Verbose "Retrieving all vrid_nsip_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vrid_nsip_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for vrid_nsip_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vrid_nsip_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving vrid_nsip_binding objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vrid_nsip_binding -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving vrid_nsip_binding configuration for property 'id'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vrid_nsip_binding -NitroPath nitro/v1/config -Resource $id -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving vrid_nsip_binding configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vrid_nsip_binding -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetVridnsipbinding: Ended"
    }
}

function Invoke-ADCAddVridtrackinterfacebinding {
<#
    .SYNOPSIS
        Add Network configuration Object
    .DESCRIPTION
        Add Network configuration Object 
    .PARAMETER id 
        Integer that uniquely identifies the VMAC address. The generic VMAC address is in the form of 00:00:5e:00:01:<VRID>. For example, if you add a VRID with a value of 60 and bind it to an interface, the resulting VMAC address is 00:00:5e:00:01:3c, where 3c is the hexadecimal representation of 60.  
        Minimum value = 1  
        Maximum value = 255 
    .PARAMETER trackifnum 
        Interfaces which need to be tracked for this vrID. 
    .PARAMETER PassThru 
        Return details about the created vrid_trackinterface_binding item.
    .EXAMPLE
        Invoke-ADCAddVridtrackinterfacebinding -id <double>
    .NOTES
        File Name : Invoke-ADCAddVridtrackinterfacebinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vrid_trackinterface_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateRange(1, 255)]
        [double]$id ,

        [string]$trackifnum ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddVridtrackinterfacebinding: Starting"
    }
    process {
        try {
            $Payload = @{
                id = $id
            }
            if ($PSBoundParameters.ContainsKey('trackifnum')) { $Payload.Add('trackifnum', $trackifnum) }
 
            if ($PSCmdlet.ShouldProcess("vrid_trackinterface_binding", "Add Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -NitroPath nitro/v1/config -Type vrid_trackinterface_binding -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetVridtrackinterfacebinding -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddVridtrackinterfacebinding: Finished"
    }
}

function Invoke-ADCDeleteVridtrackinterfacebinding {
<#
    .SYNOPSIS
        Delete Network configuration Object
    .DESCRIPTION
        Delete Network configuration Object
    .PARAMETER id 
       Integer that uniquely identifies the VMAC address. The generic VMAC address is in the form of 00:00:5e:00:01:<VRID>. For example, if you add a VRID with a value of 60 and bind it to an interface, the resulting VMAC address is 00:00:5e:00:01:3c, where 3c is the hexadecimal representation of 60.  
       Minimum value = 1  
       Maximum value = 255    .PARAMETER trackifnum 
       Interfaces which need to be tracked for this vrID.
    .EXAMPLE
        Invoke-ADCDeleteVridtrackinterfacebinding -id <double>
    .NOTES
        File Name : Invoke-ADCDeleteVridtrackinterfacebinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vrid_trackinterface_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [double]$id ,

        [string]$trackifnum 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteVridtrackinterfacebinding: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }
            if ($PSBoundParameters.ContainsKey('trackifnum')) { $Arguments.Add('trackifnum', $trackifnum) }
            if ($PSCmdlet.ShouldProcess("$id", "Delete Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type vrid_trackinterface_binding -NitroPath nitro/v1/config -Resource $id -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteVridtrackinterfacebinding: Finished"
    }
}

function Invoke-ADCGetVridtrackinterfacebinding {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER id 
       Integer that uniquely identifies the VMAC address. The generic VMAC address is in the form of 00:00:5e:00:01:<VRID>. For example, if you add a VRID with a value of 60 and bind it to an interface, the resulting VMAC address is 00:00:5e:00:01:3c, where 3c is the hexadecimal representation of 60. 
    .PARAMETER GetAll 
        Retreive all vrid_trackinterface_binding object(s)
    .PARAMETER Count
        If specified, the count of the vrid_trackinterface_binding object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetVridtrackinterfacebinding
    .EXAMPLE 
        Invoke-ADCGetVridtrackinterfacebinding -GetAll 
    .EXAMPLE 
        Invoke-ADCGetVridtrackinterfacebinding -Count
    .EXAMPLE
        Invoke-ADCGetVridtrackinterfacebinding -name <string>
    .EXAMPLE
        Invoke-ADCGetVridtrackinterfacebinding -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetVridtrackinterfacebinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vrid_trackinterface_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateRange(1, 255)]
        [double]$id,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetVridtrackinterfacebinding: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ 
                    bulkbindings = 'yes'
                }
                Write-Verbose "Retrieving all vrid_trackinterface_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vrid_trackinterface_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for vrid_trackinterface_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vrid_trackinterface_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving vrid_trackinterface_binding objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vrid_trackinterface_binding -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving vrid_trackinterface_binding configuration for property 'id'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vrid_trackinterface_binding -NitroPath nitro/v1/config -Resource $id -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving vrid_trackinterface_binding configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vrid_trackinterface_binding -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetVridtrackinterfacebinding: Ended"
    }
}

function Invoke-ADCAddVxlan {
<#
    .SYNOPSIS
        Add Network configuration Object
    .DESCRIPTION
        Add Network configuration Object 
    .PARAMETER id 
        A positive integer, which is also called VXLAN Network Identifier (VNI), that uniquely identifies a VXLAN.  
        Minimum value = 1  
        Maximum value = 16777215 
    .PARAMETER vlan 
        ID of VLANs whose traffic is allowed over this VXLAN. If you do not specify any VLAN IDs, the Citrix ADC allows traffic of all VLANs that are not part of any other VXLANs.  
        Minimum value = 2  
        Maximum value = 4094 
    .PARAMETER port 
        Specifies UDP destination port for VXLAN packets.  
        Default value: 4789  
        Minimum value = 1  
        Maximum value = 65534 
    .PARAMETER dynamicrouting 
        Enable dynamic routing on this VXLAN.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER ipv6dynamicrouting 
        Enable all IPv6 dynamic routing protocols on this VXLAN. Note: For the ENABLED setting to work, you must configure IPv6 dynamic routing protocols from the VTYSH command line.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER type 
        VXLAN encapsulation type. VXLAN, VXLANGPE.  
        Default value: VXLAN  
        Possible values = VXLAN, VXLANGPE 
    .PARAMETER protocol 
        VXLAN-GPE next protocol. RESERVED, IPv4, IPv6, ETHERNET, NSH.  
        Default value: ETHERNET  
        Possible values = IPv4, IPv6, ETHERNET, NSH 
    .PARAMETER innervlantagging 
        Specifies whether Citrix ADC should generate VXLAN packets with inner VLAN tag.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER PassThru 
        Return details about the created vxlan item.
    .EXAMPLE
        Invoke-ADCAddVxlan -id <double>
    .NOTES
        File Name : Invoke-ADCAddVxlan
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vxlan/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateRange(1, 16777215)]
        [double]$id ,

        [ValidateRange(2, 4094)]
        [double]$vlan ,

        [ValidateRange(1, 65534)]
        [int]$port = '4789' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$dynamicrouting = 'DISABLED' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$ipv6dynamicrouting = 'DISABLED' ,

        [ValidateSet('VXLAN', 'VXLANGPE')]
        [string]$type = 'VXLAN' ,

        [ValidateSet('IPv4', 'IPv6', 'ETHERNET', 'NSH')]
        [string]$protocol = 'ETHERNET' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$innervlantagging = 'DISABLED' ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddVxlan: Starting"
    }
    process {
        try {
            $Payload = @{
                id = $id
            }
            if ($PSBoundParameters.ContainsKey('vlan')) { $Payload.Add('vlan', $vlan) }
            if ($PSBoundParameters.ContainsKey('port')) { $Payload.Add('port', $port) }
            if ($PSBoundParameters.ContainsKey('dynamicrouting')) { $Payload.Add('dynamicrouting', $dynamicrouting) }
            if ($PSBoundParameters.ContainsKey('ipv6dynamicrouting')) { $Payload.Add('ipv6dynamicrouting', $ipv6dynamicrouting) }
            if ($PSBoundParameters.ContainsKey('type')) { $Payload.Add('type', $type) }
            if ($PSBoundParameters.ContainsKey('protocol')) { $Payload.Add('protocol', $protocol) }
            if ($PSBoundParameters.ContainsKey('innervlantagging')) { $Payload.Add('innervlantagging', $innervlantagging) }
 
            if ($PSCmdlet.ShouldProcess("vxlan", "Add Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -NitroPath nitro/v1/config -Type vxlan -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetVxlan -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddVxlan: Finished"
    }
}

function Invoke-ADCDeleteVxlan {
<#
    .SYNOPSIS
        Delete Network configuration Object
    .DESCRIPTION
        Delete Network configuration Object
    .PARAMETER id 
       A positive integer, which is also called VXLAN Network Identifier (VNI), that uniquely identifies a VXLAN.  
       Minimum value = 1  
       Maximum value = 16777215 
    .EXAMPLE
        Invoke-ADCDeleteVxlan -id <double>
    .NOTES
        File Name : Invoke-ADCDeleteVxlan
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vxlan/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [double]$id 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteVxlan: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }

            if ($PSCmdlet.ShouldProcess("$id", "Delete Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type vxlan -NitroPath nitro/v1/config -Resource $id -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteVxlan: Finished"
    }
}

function Invoke-ADCUpdateVxlan {
<#
    .SYNOPSIS
        Update Network configuration Object
    .DESCRIPTION
        Update Network configuration Object 
    .PARAMETER id 
        A positive integer, which is also called VXLAN Network Identifier (VNI), that uniquely identifies a VXLAN.  
        Minimum value = 1  
        Maximum value = 16777215 
    .PARAMETER vlan 
        ID of VLANs whose traffic is allowed over this VXLAN. If you do not specify any VLAN IDs, the Citrix ADC allows traffic of all VLANs that are not part of any other VXLANs.  
        Minimum value = 2  
        Maximum value = 4094 
    .PARAMETER port 
        Specifies UDP destination port for VXLAN packets.  
        Default value: 4789  
        Minimum value = 1  
        Maximum value = 65534 
    .PARAMETER dynamicrouting 
        Enable dynamic routing on this VXLAN.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER ipv6dynamicrouting 
        Enable all IPv6 dynamic routing protocols on this VXLAN. Note: For the ENABLED setting to work, you must configure IPv6 dynamic routing protocols from the VTYSH command line.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER innervlantagging 
        Specifies whether Citrix ADC should generate VXLAN packets with inner VLAN tag.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER PassThru 
        Return details about the created vxlan item.
    .EXAMPLE
        Invoke-ADCUpdateVxlan -id <double>
    .NOTES
        File Name : Invoke-ADCUpdateVxlan
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vxlan/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateRange(1, 16777215)]
        [double]$id ,

        [ValidateRange(2, 4094)]
        [double]$vlan ,

        [ValidateRange(1, 65534)]
        [int]$port ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$dynamicrouting ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$ipv6dynamicrouting ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$innervlantagging ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCUpdateVxlan: Starting"
    }
    process {
        try {
            $Payload = @{
                id = $id
            }
            if ($PSBoundParameters.ContainsKey('vlan')) { $Payload.Add('vlan', $vlan) }
            if ($PSBoundParameters.ContainsKey('port')) { $Payload.Add('port', $port) }
            if ($PSBoundParameters.ContainsKey('dynamicrouting')) { $Payload.Add('dynamicrouting', $dynamicrouting) }
            if ($PSBoundParameters.ContainsKey('ipv6dynamicrouting')) { $Payload.Add('ipv6dynamicrouting', $ipv6dynamicrouting) }
            if ($PSBoundParameters.ContainsKey('innervlantagging')) { $Payload.Add('innervlantagging', $innervlantagging) }
 
            if ($PSCmdlet.ShouldProcess("vxlan", "Update Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -NitroPath nitro/v1/config -Type vxlan -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetVxlan -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUpdateVxlan: Finished"
    }
}

function Invoke-ADCUnsetVxlan {
<#
    .SYNOPSIS
        Unset Network configuration Object
    .DESCRIPTION
        Unset Network configuration Object 
   .PARAMETER id 
       A positive integer, which is also called VXLAN Network Identifier (VNI), that uniquely identifies a VXLAN. 
   .PARAMETER vlan 
       ID of VLANs whose traffic is allowed over this VXLAN. If you do not specify any VLAN IDs, the Citrix ADC allows traffic of all VLANs that are not part of any other VXLANs. 
   .PARAMETER port 
       Specifies UDP destination port for VXLAN packets. 
   .PARAMETER dynamicrouting 
       Enable dynamic routing on this VXLAN.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER ipv6dynamicrouting 
       Enable all IPv6 dynamic routing protocols on this VXLAN. Note: For the ENABLED setting to work, you must configure IPv6 dynamic routing protocols from the VTYSH command line.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER innervlantagging 
       Specifies whether Citrix ADC should generate VXLAN packets with inner VLAN tag.  
       Possible values = ENABLED, DISABLED
    .EXAMPLE
        Invoke-ADCUnsetVxlan -id <double>
    .NOTES
        File Name : Invoke-ADCUnsetVxlan
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vxlan
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateRange(1, 16777215)]
        [double]$id ,

        [Boolean]$vlan ,

        [Boolean]$port ,

        [Boolean]$dynamicrouting ,

        [Boolean]$ipv6dynamicrouting ,

        [Boolean]$innervlantagging 
    )
    begin {
        Write-Verbose "Invoke-ADCUnsetVxlan: Starting"
    }
    process {
        try {
            $Payload = @{
                id = $id
            }
            if ($PSBoundParameters.ContainsKey('vlan')) { $Payload.Add('vlan', $vlan) }
            if ($PSBoundParameters.ContainsKey('port')) { $Payload.Add('port', $port) }
            if ($PSBoundParameters.ContainsKey('dynamicrouting')) { $Payload.Add('dynamicrouting', $dynamicrouting) }
            if ($PSBoundParameters.ContainsKey('ipv6dynamicrouting')) { $Payload.Add('ipv6dynamicrouting', $ipv6dynamicrouting) }
            if ($PSBoundParameters.ContainsKey('innervlantagging')) { $Payload.Add('innervlantagging', $innervlantagging) }
            if ($PSCmdlet.ShouldProcess("$id", "Unset Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type vxlan -NitroPath nitro/v1/config -Action unset -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUnsetVxlan: Finished"
    }
}

function Invoke-ADCGetVxlan {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER id 
       A positive integer, which is also called VXLAN Network Identifier (VNI), that uniquely identifies a VXLAN. 
    .PARAMETER GetAll 
        Retreive all vxlan object(s)
    .PARAMETER Count
        If specified, the count of the vxlan object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetVxlan
    .EXAMPLE 
        Invoke-ADCGetVxlan -GetAll 
    .EXAMPLE 
        Invoke-ADCGetVxlan -Count
    .EXAMPLE
        Invoke-ADCGetVxlan -name <string>
    .EXAMPLE
        Invoke-ADCGetVxlan -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetVxlan
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vxlan/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateRange(1, 16777215)]
        [double]$id,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll,

        [Parameter(ParameterSetName = 'GetAll')]
        [Parameter(ParameterSetName = 'Get')]
        [Switch]$ViewSummary

    )
    begin {
        Write-Verbose "Invoke-ADCGetVxlan: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all vxlan objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vxlan -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for vxlan objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vxlan -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving vxlan objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vxlan -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving vxlan configuration for property 'id'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vxlan -NitroPath nitro/v1/config -Resource $id -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving vxlan configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vxlan -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetVxlan: Ended"
    }
}

function Invoke-ADCAddVxlanvlanmap {
<#
    .SYNOPSIS
        Add Network configuration Object
    .DESCRIPTION
        Add Network configuration Object 
    .PARAMETER name 
        Name of the mapping table.  
        Minimum length = 1 
    .PARAMETER PassThru 
        Return details about the created vxlanvlanmap item.
    .EXAMPLE
        Invoke-ADCAddVxlanvlanmap -name <string>
    .NOTES
        File Name : Invoke-ADCAddVxlanvlanmap
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vxlanvlanmap/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddVxlanvlanmap: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
            }

 
            if ($PSCmdlet.ShouldProcess("vxlanvlanmap", "Add Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -NitroPath nitro/v1/config -Type vxlanvlanmap -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetVxlanvlanmap -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddVxlanvlanmap: Finished"
    }
}

function Invoke-ADCDeleteVxlanvlanmap {
<#
    .SYNOPSIS
        Delete Network configuration Object
    .DESCRIPTION
        Delete Network configuration Object
    .PARAMETER name 
       Name of the mapping table.  
       Minimum length = 1 
    .EXAMPLE
        Invoke-ADCDeleteVxlanvlanmap -name <string>
    .NOTES
        File Name : Invoke-ADCDeleteVxlanvlanmap
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vxlanvlanmap/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$name 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteVxlanvlanmap: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }

            if ($PSCmdlet.ShouldProcess("$name", "Delete Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type vxlanvlanmap -NitroPath nitro/v1/config -Resource $name -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteVxlanvlanmap: Finished"
    }
}

function Invoke-ADCGetVxlanvlanmap {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER name 
       Name of the mapping table. 
    .PARAMETER GetAll 
        Retreive all vxlanvlanmap object(s)
    .PARAMETER Count
        If specified, the count of the vxlanvlanmap object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetVxlanvlanmap
    .EXAMPLE 
        Invoke-ADCGetVxlanvlanmap -GetAll 
    .EXAMPLE 
        Invoke-ADCGetVxlanvlanmap -Count
    .EXAMPLE
        Invoke-ADCGetVxlanvlanmap -name <string>
    .EXAMPLE
        Invoke-ADCGetVxlanvlanmap -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetVxlanvlanmap
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vxlanvlanmap/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll,

        [Parameter(ParameterSetName = 'GetAll')]
        [Parameter(ParameterSetName = 'Get')]
        [Switch]$ViewSummary

    )
    begin {
        Write-Verbose "Invoke-ADCGetVxlanvlanmap: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all vxlanvlanmap objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vxlanvlanmap -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for vxlanvlanmap objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vxlanvlanmap -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving vxlanvlanmap objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vxlanvlanmap -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving vxlanvlanmap configuration for property 'name'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vxlanvlanmap -NitroPath nitro/v1/config -Resource $name -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving vxlanvlanmap configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vxlanvlanmap -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetVxlanvlanmap: Ended"
    }
}

function Invoke-ADCGetVxlanvlanmapbinding {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER name 
       Name of the mapping table. 
    .PARAMETER GetAll 
        Retreive all vxlanvlanmap_binding object(s)
    .PARAMETER Count
        If specified, the count of the vxlanvlanmap_binding object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetVxlanvlanmapbinding
    .EXAMPLE 
        Invoke-ADCGetVxlanvlanmapbinding -GetAll
    .EXAMPLE
        Invoke-ADCGetVxlanvlanmapbinding -name <string>
    .EXAMPLE
        Invoke-ADCGetVxlanvlanmapbinding -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetVxlanvlanmapbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vxlanvlanmap_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetVxlanvlanmapbinding: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ 
                    bulkbindings = 'yes'
                }
                Write-Verbose "Retrieving all vxlanvlanmap_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vxlanvlanmap_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for vxlanvlanmap_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vxlanvlanmap_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving vxlanvlanmap_binding objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vxlanvlanmap_binding -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving vxlanvlanmap_binding configuration for property 'name'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vxlanvlanmap_binding -NitroPath nitro/v1/config -Resource $name -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving vxlanvlanmap_binding configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vxlanvlanmap_binding -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetVxlanvlanmapbinding: Ended"
    }
}

function Invoke-ADCAddVxlanvlanmapvxlanbinding {
<#
    .SYNOPSIS
        Add Network configuration Object
    .DESCRIPTION
        Add Network configuration Object 
    .PARAMETER name 
        Name of the mapping table.  
        Minimum length = 1 
    .PARAMETER vxlan 
        The VXLAN assigned to the vlan inside the cloud.  
        Minimum value = 1  
        Maximum value = 16777215 
    .PARAMETER vlan 
        The vlan id or the range of vlan ids in the on-premise network.  
        Minimum length = 1  
        Maximum length = 4094 
    .PARAMETER PassThru 
        Return details about the created vxlanvlanmap_vxlan_binding item.
    .EXAMPLE
        Invoke-ADCAddVxlanvlanmapvxlanbinding -name <string>
    .NOTES
        File Name : Invoke-ADCAddVxlanvlanmapvxlanbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vxlanvlanmap_vxlan_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name ,

        [ValidateRange(1, 16777215)]
        [double]$vxlan ,

        [ValidateLength(1, 4094)]
        [string[]]$vlan ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddVxlanvlanmapvxlanbinding: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
            }
            if ($PSBoundParameters.ContainsKey('vxlan')) { $Payload.Add('vxlan', $vxlan) }
            if ($PSBoundParameters.ContainsKey('vlan')) { $Payload.Add('vlan', $vlan) }
 
            if ($PSCmdlet.ShouldProcess("vxlanvlanmap_vxlan_binding", "Add Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -NitroPath nitro/v1/config -Type vxlanvlanmap_vxlan_binding -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetVxlanvlanmapvxlanbinding -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddVxlanvlanmapvxlanbinding: Finished"
    }
}

function Invoke-ADCDeleteVxlanvlanmapvxlanbinding {
<#
    .SYNOPSIS
        Delete Network configuration Object
    .DESCRIPTION
        Delete Network configuration Object
    .PARAMETER name 
       Name of the mapping table.  
       Minimum length = 1    .PARAMETER vxlan 
       The VXLAN assigned to the vlan inside the cloud.  
       Minimum value = 1  
       Maximum value = 16777215
    .EXAMPLE
        Invoke-ADCDeleteVxlanvlanmapvxlanbinding -name <string>
    .NOTES
        File Name : Invoke-ADCDeleteVxlanvlanmapvxlanbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vxlanvlanmap_vxlan_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$name ,

        [double]$vxlan 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteVxlanvlanmapvxlanbinding: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }
            if ($PSBoundParameters.ContainsKey('vxlan')) { $Arguments.Add('vxlan', $vxlan) }
            if ($PSCmdlet.ShouldProcess("$name", "Delete Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type vxlanvlanmap_vxlan_binding -NitroPath nitro/v1/config -Resource $name -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteVxlanvlanmapvxlanbinding: Finished"
    }
}

function Invoke-ADCGetVxlanvlanmapvxlanbinding {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER name 
       Name of the mapping table. 
    .PARAMETER GetAll 
        Retreive all vxlanvlanmap_vxlan_binding object(s)
    .PARAMETER Count
        If specified, the count of the vxlanvlanmap_vxlan_binding object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetVxlanvlanmapvxlanbinding
    .EXAMPLE 
        Invoke-ADCGetVxlanvlanmapvxlanbinding -GetAll 
    .EXAMPLE 
        Invoke-ADCGetVxlanvlanmapvxlanbinding -Count
    .EXAMPLE
        Invoke-ADCGetVxlanvlanmapvxlanbinding -name <string>
    .EXAMPLE
        Invoke-ADCGetVxlanvlanmapvxlanbinding -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetVxlanvlanmapvxlanbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vxlanvlanmap_vxlan_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetVxlanvlanmapvxlanbinding: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ 
                    bulkbindings = 'yes'
                }
                Write-Verbose "Retrieving all vxlanvlanmap_vxlan_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vxlanvlanmap_vxlan_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for vxlanvlanmap_vxlan_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vxlanvlanmap_vxlan_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving vxlanvlanmap_vxlan_binding objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vxlanvlanmap_vxlan_binding -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving vxlanvlanmap_vxlan_binding configuration for property 'name'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vxlanvlanmap_vxlan_binding -NitroPath nitro/v1/config -Resource $name -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving vxlanvlanmap_vxlan_binding configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vxlanvlanmap_vxlan_binding -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetVxlanvlanmapvxlanbinding: Ended"
    }
}

function Invoke-ADCGetVxlanbinding {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER id 
       A positive integer, which is also called VXLAN Network Identifier (VNI), that uniquely identifies a VXLAN. 
    .PARAMETER GetAll 
        Retreive all vxlan_binding object(s)
    .PARAMETER Count
        If specified, the count of the vxlan_binding object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetVxlanbinding
    .EXAMPLE 
        Invoke-ADCGetVxlanbinding -GetAll
    .EXAMPLE
        Invoke-ADCGetVxlanbinding -name <string>
    .EXAMPLE
        Invoke-ADCGetVxlanbinding -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetVxlanbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vxlan_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateRange(1, 16777215)]
        [double]$id,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetVxlanbinding: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ 
                    bulkbindings = 'yes'
                }
                Write-Verbose "Retrieving all vxlan_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vxlan_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for vxlan_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vxlan_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving vxlan_binding objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vxlan_binding -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving vxlan_binding configuration for property 'id'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vxlan_binding -NitroPath nitro/v1/config -Resource $id -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving vxlan_binding configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vxlan_binding -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetVxlanbinding: Ended"
    }
}

function Invoke-ADCGetVxlaniptunnelbinding {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER id 
       A positive integer, which is also called VXLAN Network Identifier (VNI), that uniquely identifies a VXLAN. 
    .PARAMETER GetAll 
        Retreive all vxlan_iptunnel_binding object(s)
    .PARAMETER Count
        If specified, the count of the vxlan_iptunnel_binding object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetVxlaniptunnelbinding
    .EXAMPLE 
        Invoke-ADCGetVxlaniptunnelbinding -GetAll 
    .EXAMPLE 
        Invoke-ADCGetVxlaniptunnelbinding -Count
    .EXAMPLE
        Invoke-ADCGetVxlaniptunnelbinding -name <string>
    .EXAMPLE
        Invoke-ADCGetVxlaniptunnelbinding -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetVxlaniptunnelbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vxlan_iptunnel_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateRange(1, 16777215)]
        [double]$id,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetVxlaniptunnelbinding: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ 
                    bulkbindings = 'yes'
                }
                Write-Verbose "Retrieving all vxlan_iptunnel_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vxlan_iptunnel_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for vxlan_iptunnel_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vxlan_iptunnel_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving vxlan_iptunnel_binding objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vxlan_iptunnel_binding -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving vxlan_iptunnel_binding configuration for property 'id'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vxlan_iptunnel_binding -NitroPath nitro/v1/config -Resource $id -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving vxlan_iptunnel_binding configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vxlan_iptunnel_binding -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetVxlaniptunnelbinding: Ended"
    }
}

function Invoke-ADCAddVxlannsip6binding {
<#
    .SYNOPSIS
        Add Network configuration Object
    .DESCRIPTION
        Add Network configuration Object 
    .PARAMETER id 
        A positive integer, which is also called VXLAN Network Identifier (VNI), that uniquely identifies a VXLAN.  
        Minimum value = 1  
        Maximum value = 16777215 
    .PARAMETER ipaddress 
        The IP address assigned to the VXLAN. 
    .PARAMETER netmask 
        Subnet mask for the network address defined for this VXLAN.  
        Minimum length = 1 
    .PARAMETER PassThru 
        Return details about the created vxlan_nsip6_binding item.
    .EXAMPLE
        Invoke-ADCAddVxlannsip6binding -id <double>
    .NOTES
        File Name : Invoke-ADCAddVxlannsip6binding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vxlan_nsip6_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateRange(1, 16777215)]
        [double]$id ,

        [string]$ipaddress ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$netmask ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddVxlannsip6binding: Starting"
    }
    process {
        try {
            $Payload = @{
                id = $id
            }
            if ($PSBoundParameters.ContainsKey('ipaddress')) { $Payload.Add('ipaddress', $ipaddress) }
            if ($PSBoundParameters.ContainsKey('netmask')) { $Payload.Add('netmask', $netmask) }
 
            if ($PSCmdlet.ShouldProcess("vxlan_nsip6_binding", "Add Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -NitroPath nitro/v1/config -Type vxlan_nsip6_binding -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetVxlannsip6binding -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddVxlannsip6binding: Finished"
    }
}

function Invoke-ADCDeleteVxlannsip6binding {
<#
    .SYNOPSIS
        Delete Network configuration Object
    .DESCRIPTION
        Delete Network configuration Object
    .PARAMETER id 
       A positive integer, which is also called VXLAN Network Identifier (VNI), that uniquely identifies a VXLAN.  
       Minimum value = 1  
       Maximum value = 16777215    .PARAMETER ipaddress 
       The IP address assigned to the VXLAN.    .PARAMETER netmask 
       Subnet mask for the network address defined for this VXLAN.  
       Minimum length = 1
    .EXAMPLE
        Invoke-ADCDeleteVxlannsip6binding -id <double>
    .NOTES
        File Name : Invoke-ADCDeleteVxlannsip6binding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vxlan_nsip6_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [double]$id ,

        [string]$ipaddress ,

        [string]$netmask 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteVxlannsip6binding: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }
            if ($PSBoundParameters.ContainsKey('ipaddress')) { $Arguments.Add('ipaddress', $ipaddress) }
            if ($PSBoundParameters.ContainsKey('netmask')) { $Arguments.Add('netmask', $netmask) }
            if ($PSCmdlet.ShouldProcess("$id", "Delete Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type vxlan_nsip6_binding -NitroPath nitro/v1/config -Resource $id -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteVxlannsip6binding: Finished"
    }
}

function Invoke-ADCGetVxlannsip6binding {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER id 
       A positive integer, which is also called VXLAN Network Identifier (VNI), that uniquely identifies a VXLAN. 
    .PARAMETER GetAll 
        Retreive all vxlan_nsip6_binding object(s)
    .PARAMETER Count
        If specified, the count of the vxlan_nsip6_binding object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetVxlannsip6binding
    .EXAMPLE 
        Invoke-ADCGetVxlannsip6binding -GetAll 
    .EXAMPLE 
        Invoke-ADCGetVxlannsip6binding -Count
    .EXAMPLE
        Invoke-ADCGetVxlannsip6binding -name <string>
    .EXAMPLE
        Invoke-ADCGetVxlannsip6binding -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetVxlannsip6binding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vxlan_nsip6_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateRange(1, 16777215)]
        [double]$id,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetVxlannsip6binding: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ 
                    bulkbindings = 'yes'
                }
                Write-Verbose "Retrieving all vxlan_nsip6_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vxlan_nsip6_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for vxlan_nsip6_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vxlan_nsip6_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving vxlan_nsip6_binding objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vxlan_nsip6_binding -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving vxlan_nsip6_binding configuration for property 'id'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vxlan_nsip6_binding -NitroPath nitro/v1/config -Resource $id -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving vxlan_nsip6_binding configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vxlan_nsip6_binding -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetVxlannsip6binding: Ended"
    }
}

function Invoke-ADCAddVxlannsipbinding {
<#
    .SYNOPSIS
        Add Network configuration Object
    .DESCRIPTION
        Add Network configuration Object 
    .PARAMETER id 
        A positive integer, which is also called VXLAN Network Identifier (VNI), that uniquely identifies a VXLAN.  
        Minimum value = 1  
        Maximum value = 16777215 
    .PARAMETER ipaddress 
        The IP address assigned to the VXLAN. 
    .PARAMETER netmask 
        Subnet mask for the network address defined for this VXLAN. 
    .PARAMETER PassThru 
        Return details about the created vxlan_nsip_binding item.
    .EXAMPLE
        Invoke-ADCAddVxlannsipbinding -id <double>
    .NOTES
        File Name : Invoke-ADCAddVxlannsipbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vxlan_nsip_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateRange(1, 16777215)]
        [double]$id ,

        [string]$ipaddress ,

        [string]$netmask ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddVxlannsipbinding: Starting"
    }
    process {
        try {
            $Payload = @{
                id = $id
            }
            if ($PSBoundParameters.ContainsKey('ipaddress')) { $Payload.Add('ipaddress', $ipaddress) }
            if ($PSBoundParameters.ContainsKey('netmask')) { $Payload.Add('netmask', $netmask) }
 
            if ($PSCmdlet.ShouldProcess("vxlan_nsip_binding", "Add Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -NitroPath nitro/v1/config -Type vxlan_nsip_binding -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetVxlannsipbinding -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddVxlannsipbinding: Finished"
    }
}

function Invoke-ADCDeleteVxlannsipbinding {
<#
    .SYNOPSIS
        Delete Network configuration Object
    .DESCRIPTION
        Delete Network configuration Object
    .PARAMETER id 
       A positive integer, which is also called VXLAN Network Identifier (VNI), that uniquely identifies a VXLAN.  
       Minimum value = 1  
       Maximum value = 16777215    .PARAMETER ipaddress 
       The IP address assigned to the VXLAN.    .PARAMETER netmask 
       Subnet mask for the network address defined for this VXLAN.
    .EXAMPLE
        Invoke-ADCDeleteVxlannsipbinding -id <double>
    .NOTES
        File Name : Invoke-ADCDeleteVxlannsipbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vxlan_nsip_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [double]$id ,

        [string]$ipaddress ,

        [string]$netmask 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteVxlannsipbinding: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }
            if ($PSBoundParameters.ContainsKey('ipaddress')) { $Arguments.Add('ipaddress', $ipaddress) }
            if ($PSBoundParameters.ContainsKey('netmask')) { $Arguments.Add('netmask', $netmask) }
            if ($PSCmdlet.ShouldProcess("$id", "Delete Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type vxlan_nsip_binding -NitroPath nitro/v1/config -Resource $id -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteVxlannsipbinding: Finished"
    }
}

function Invoke-ADCGetVxlannsipbinding {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER id 
       A positive integer, which is also called VXLAN Network Identifier (VNI), that uniquely identifies a VXLAN. 
    .PARAMETER GetAll 
        Retreive all vxlan_nsip_binding object(s)
    .PARAMETER Count
        If specified, the count of the vxlan_nsip_binding object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetVxlannsipbinding
    .EXAMPLE 
        Invoke-ADCGetVxlannsipbinding -GetAll 
    .EXAMPLE 
        Invoke-ADCGetVxlannsipbinding -Count
    .EXAMPLE
        Invoke-ADCGetVxlannsipbinding -name <string>
    .EXAMPLE
        Invoke-ADCGetVxlannsipbinding -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetVxlannsipbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vxlan_nsip_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateRange(1, 16777215)]
        [double]$id,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetVxlannsipbinding: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ 
                    bulkbindings = 'yes'
                }
                Write-Verbose "Retrieving all vxlan_nsip_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vxlan_nsip_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for vxlan_nsip_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vxlan_nsip_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving vxlan_nsip_binding objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vxlan_nsip_binding -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving vxlan_nsip_binding configuration for property 'id'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vxlan_nsip_binding -NitroPath nitro/v1/config -Resource $id -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving vxlan_nsip_binding configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vxlan_nsip_binding -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetVxlannsipbinding: Ended"
    }
}

function Invoke-ADCAddVxlansrcipbinding {
<#
    .SYNOPSIS
        Add Network configuration Object
    .DESCRIPTION
        Add Network configuration Object 
    .PARAMETER id 
        A positive integer, which is also called VXLAN Network Identifier (VNI), that uniquely identifies a VXLAN.  
        Minimum value = 1  
        Maximum value = 16777215 
    .PARAMETER srcip 
        The source IP address to use in outgoing vxlan packets.  
        Minimum length = 1 
    .PARAMETER PassThru 
        Return details about the created vxlan_srcip_binding item.
    .EXAMPLE
        Invoke-ADCAddVxlansrcipbinding -id <double>
    .NOTES
        File Name : Invoke-ADCAddVxlansrcipbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vxlan_srcip_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateRange(1, 16777215)]
        [double]$id ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$srcip ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddVxlansrcipbinding: Starting"
    }
    process {
        try {
            $Payload = @{
                id = $id
            }
            if ($PSBoundParameters.ContainsKey('srcip')) { $Payload.Add('srcip', $srcip) }
 
            if ($PSCmdlet.ShouldProcess("vxlan_srcip_binding", "Add Network configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -NitroPath nitro/v1/config -Type vxlan_srcip_binding -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetVxlansrcipbinding -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddVxlansrcipbinding: Finished"
    }
}

function Invoke-ADCDeleteVxlansrcipbinding {
<#
    .SYNOPSIS
        Delete Network configuration Object
    .DESCRIPTION
        Delete Network configuration Object
    .PARAMETER id 
       A positive integer, which is also called VXLAN Network Identifier (VNI), that uniquely identifies a VXLAN.  
       Minimum value = 1  
       Maximum value = 16777215    .PARAMETER srcip 
       The source IP address to use in outgoing vxlan packets.  
       Minimum length = 1
    .EXAMPLE
        Invoke-ADCDeleteVxlansrcipbinding -id <double>
    .NOTES
        File Name : Invoke-ADCDeleteVxlansrcipbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vxlan_srcip_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [double]$id ,

        [string]$srcip 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteVxlansrcipbinding: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }
            if ($PSBoundParameters.ContainsKey('srcip')) { $Arguments.Add('srcip', $srcip) }
            if ($PSCmdlet.ShouldProcess("$id", "Delete Network configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type vxlan_srcip_binding -NitroPath nitro/v1/config -Resource $id -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteVxlansrcipbinding: Finished"
    }
}

function Invoke-ADCGetVxlansrcipbinding {
<#
    .SYNOPSIS
        Get Network configuration object(s)
    .DESCRIPTION
        Get Network configuration object(s)
    .PARAMETER id 
       A positive integer, which is also called VXLAN Network Identifier (VNI), that uniquely identifies a VXLAN. 
    .PARAMETER GetAll 
        Retreive all vxlan_srcip_binding object(s)
    .PARAMETER Count
        If specified, the count of the vxlan_srcip_binding object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetVxlansrcipbinding
    .EXAMPLE 
        Invoke-ADCGetVxlansrcipbinding -GetAll 
    .EXAMPLE 
        Invoke-ADCGetVxlansrcipbinding -Count
    .EXAMPLE
        Invoke-ADCGetVxlansrcipbinding -name <string>
    .EXAMPLE
        Invoke-ADCGetVxlansrcipbinding -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetVxlansrcipbinding
        Version   : v2106.2309
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/network/vxlan_srcip_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateRange(1, 16777215)]
        [double]$id,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetVxlansrcipbinding: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ 
                    bulkbindings = 'yes'
                }
                Write-Verbose "Retrieving all vxlan_srcip_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vxlan_srcip_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for vxlan_srcip_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vxlan_srcip_binding -NitroPath nitro/v1/config -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving vxlan_srcip_binding objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vxlan_srcip_binding -NitroPath nitro/v1/config -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving vxlan_srcip_binding configuration for property 'id'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vxlan_srcip_binding -NitroPath nitro/v1/config -Resource $id -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving vxlan_srcip_binding configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type vxlan_srcip_binding -NitroPath nitro/v1/config -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetVxlansrcipbinding: Ended"
    }
}


