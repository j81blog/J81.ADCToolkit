function Invoke-ADCAddNsacl {
<#
    .SYNOPSIS
        Add NS configuration Object
    .DESCRIPTION
        Add NS configuration Object 
    .PARAMETER aclname 
        Name for the extended ACL rule. Must begin with an ASCII alphabetic or underscore (_) character, and must contain only ASCII alphanumeric, underscore, hash (#), period (.), space, colon (:), at (@), equals (=), and hyphen (-) characters.  
        Minimum length = 1 
    .PARAMETER aclaction 
        Action to perform on incoming IPv4 packets that match the extended ACL rule.  
        Available settings function as follows:  
        * ALLOW - The Citrix ADC processes the packet.  
        * BRIDGE - The Citrix ADC bridges the packet to the destination without processing it.  
        * DENY - The Citrix ADC drops the packet.  
        Possible values = BRIDGE, DENY, ALLOW 
    .PARAMETER td 
        Integer value that uniquely identifies the traffic domain in which you want to configure the entity. If you do not specify an ID, the entity becomes part of the default traffic domain, which has an ID of 0.  
        Minimum value = 0  
        Maximum value = 4094 
    .PARAMETER srcip 
        IP address or range of IP addresses to match against the source IP address of an incoming IPv4 packet. In the command line interface, separate the range with a hyphen. For example: 10.102.29.30-10.102.29.189. 
    .PARAMETER srcipop 
        Either the equals (=) or does not equal (!=) logical operator.  
        Possible values = =, !=, EQ, NEQ 
    .PARAMETER srcipval 
        IP address or range of IP addresses to match against the source IP address of an incoming IPv4 packet. In the command line interface, separate the range with a hyphen. For example:10.102.29.30-10.102.29.189. 
    .PARAMETER srcport 
        Port number or range of port numbers to match against the source port number of an incoming IPv4 packet. In the command line interface, separate the range with a hyphen. For example: 40-90. 
    .PARAMETER srcportop 
        Either the equals (=) or does not equal (!=) logical operator.  
        Possible values = =, !=, EQ, NEQ 
    .PARAMETER srcportval 
        Port number or range of port numbers to match against the source port number of an incoming IPv4 packet. In the command line interface, separate the range with a hyphen. For example: 40-90.  
        Maximum length = 65535 
    .PARAMETER destip 
        IP address or range of IP addresses to match against the destination IP address of an incoming IPv4 packet. In the command line interface, separate the range with a hyphen. For example: 10.102.29.30-10.102.29.189. 
    .PARAMETER destipop 
        Either the equals (=) or does not equal (!=) logical operator.  
        Possible values = =, !=, EQ, NEQ 
    .PARAMETER destipval 
        IP address or range of IP addresses to match against the destination IP address of an incoming IPv4 packet. In the command line interface, separate the range with a hyphen. For example: 10.102.29.30-10.102.29.189. 
    .PARAMETER destport 
        Port number or range of port numbers to match against the destination port number of an incoming IPv4 packet. In the command line interface, separate the range with a hyphen. For example: 40-90.  
        Note: The destination port can be specified only for TCP and UDP protocols. 
    .PARAMETER destportop 
        Either the equals (=) or does not equal (!=) logical operator.  
        Possible values = =, !=, EQ, NEQ 
    .PARAMETER destportval 
        Port number or range of port numbers to match against the destination port number of an incoming IPv4 packet. In the command line interface, separate the range with a hyphen. For example: 40-90.  
        Note: The destination port can be specified only for TCP and UDP protocols.  
        Maximum length = 65535 
    .PARAMETER ttl 
        Number of seconds, in multiples of four, after which the extended ACL rule expires. If you do not want the extended ACL rule to expire, do not specify a TTL value.  
        Minimum value = 1  
        Maximum value = 2147483647 
    .PARAMETER srcmac 
        MAC address to match against the source MAC address of an incoming IPv4 packet. 
    .PARAMETER srcmacmask 
        Used to define range of Source MAC address. It takes string of 0 and 1, 0s are for exact match and 1s for wildcard. For matching first 3 bytes of MAC address, srcMacMask value "000000111111". .  
        Default value: "000000000000" 
    .PARAMETER protocol 
        Protocol to match against the protocol of an incoming IPv4 packet.  
        Possible values = ICMP, IGMP, TCP, EGP, IGP, ARGUS, UDP, RDP, RSVP, EIGRP, L2TP, ISIS, GGP, IPoverIP, ST, CBT, BBN-RCC-M, NVP-II, PUP, EMCON, XNET, CHAOS, MUX, DCN-MEAS, HMP, PRM, XNS-IDP, TRUNK-1, TRUNK-2, LEAF-1, LEAF-2, IRTP, ISO-TP4, NETBLT, MFE-NSP, MERIT-INP, SEP, 3PC, IDPR, XTP, DDP, IDPR-CMTP, TP++, IL, IPv6, SDRP, IPv6-Route, IPv6-Frag, IDRP, GRE, MHRP, BNA, ESP, AH, I-NLSP, SWIPE, NARP, MOBILE, TLSP, SKIP, ICMPV6, IPv6-NoNx, IPv6-Opts, Any-Host-Internal-Protocol, CFTP, Any-Local-Network, SAT-EXPAK, KRYPTOLAN, RVD, IPPC, Any-Distributed-File-System, TFTP, VISA, IPCV, CPNX, CPHB, WSN, PVP, BR-SAT-MO, SUN-ND, WB-MON, WB-EXPAK, ISO-IP, VMTP, SECURE-VM, VINES, TTP, NSFNET-IG, DGP, TCF, OSPFIGP, Sprite-RP, LARP, MTP, AX.25, IPIP, MICP, SCC-SP, ETHERIP, Any-Private-Encryption-Scheme, GMTP, IFMP, PNNI, PIM, ARIS, SCPS, QNX, A/N, IPComp, SNP, Compaq-Pe, IPX-in-IP, VRRP, PGM, Any-0-Hop-Protocol, ENCAP, DDX, IATP, STP, SRP, UTI, SMP, SM, PTP, FIRE, CRTP, CRUDP, SSCOPMCE, IPLT, SPS, PIPE, SCTP, FC, RSVP-E2E-IGNORE, Mobility-Header, UDPLite 
    .PARAMETER protocolnumber 
        Protocol to match against the protocol of an incoming IPv4 packet.  
        Minimum value = 1  
        Maximum value = 255 
    .PARAMETER vlan 
        ID of the VLAN. The Citrix ADC applies the ACL rule only to the incoming packets of the specified VLAN. If you do not specify a VLAN ID, the appliance applies the ACL rule to the incoming packets on all VLANs.  
        Minimum value = 1  
        Maximum value = 4094 
    .PARAMETER vxlan 
        ID of the VXLAN. The Citrix ADC applies the ACL rule only to the incoming packets of the specified VXLAN. If you do not specify a VXLAN ID, the appliance applies the ACL rule to the incoming packets on all VXLANs.  
        Minimum value = 1  
        Maximum value = 16777215 
    .PARAMETER Interface 
        ID of an interface. The Citrix ADC applies the ACL rule only to the incoming packets from the specified interface. If you do not specify any value, the appliance applies the ACL rule to the incoming packets of all interfaces. 
    .PARAMETER established 
        Allow only incoming TCP packets that have the ACK or RST bit set, if the action set for the ACL rule is ALLOW and these packets match the other conditions in the ACL rule. 
    .PARAMETER icmptype 
        ICMP Message type to match against the message type of an incoming ICMP packet. For example, to block DESTINATION UNREACHABLE messages, you must specify 3 as the ICMP type.  
        Note: This parameter can be specified only for the ICMP protocol.  
        Minimum value = 0  
        Maximum value = 65536 
    .PARAMETER icmpcode 
        Code of a particular ICMP message type to match against the ICMP code of an incoming ICMP packet. For example, to block DESTINATION HOST UNREACHABLE messages, specify 3 as the ICMP type and 1 as the ICMP code.  
        If you set this parameter, you must set the ICMP Type parameter.  
        Minimum value = 0  
        Maximum value = 65536 
    .PARAMETER priority 
        Priority for the extended ACL rule that determines the order in which it is evaluated relative to the other extended ACL rules. If you do not specify priorities while creating extended ACL rules, the ACL rules are evaluated in the order in which they are created.  
        Minimum value = 1  
        Maximum value = 100000 
    .PARAMETER state 
        Enable or disable the extended ACL rule. After you apply the extended ACL rules, the Citrix ADC compares incoming packets against the enabled extended ACL rules.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER logstate 
        Enable or disable logging of events related to the extended ACL rule. The log messages are stored in the configured syslog or auditlog server.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER ratelimit 
        Maximum number of log messages to be generated per second. If you set this parameter, you must enable the Log State parameter.  
        Default value: 100  
        Minimum value = 1  
        Maximum value = 10000 
    .PARAMETER type 
        Type of the acl ,default will be CLASSIC.  
        Available options as follows:  
        * CLASSIC - specifies the regular extended acls.  
        * DFD - cluster specific acls,specifies hashmethod for steering of the packet in cluster .  
        Default value: CLASSIC  
        Possible values = CLASSIC, DFD 
    .PARAMETER dfdhash 
        Specifies the type hashmethod to be applied, to steer the packet to the FP of the packet.  
        Possible values = SIP-SPORT-DIP-DPORT, SIP, DIP, SIP-DIP, SIP-SPORT, DIP-DPORT 
    .PARAMETER stateful 
        If stateful option is enabled, transparent sessions are created for the traffic hitting this ACL and not hitting any other features like LB, INAT etc. .  
        Default value: NO  
        Possible values = YES, NO 
    .PARAMETER PassThru 
        Return details about the created nsacl item.
    .EXAMPLE
        Invoke-ADCAddNsacl -aclname <string> -aclaction <string>
    .NOTES
        File Name : Invoke-ADCAddNsacl
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsacl/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [ValidatePattern('^(([a-zA-Z0-9]|[_])+([a-zA-Z0-9]|[_])+)$')]
        [string]$aclname ,

        [Parameter(Mandatory = $true)]
        [ValidateSet('BRIDGE', 'DENY', 'ALLOW')]
        [string]$aclaction ,

        [ValidateRange(0, 4094)]
        [double]$td ,

        [ValidateRange(30, 10)]
        [boolean]$srcip ,

        [ValidateSet('=', '!=', 'EQ', 'NEQ')]
        [string]$srcipop ,

        [ValidateRange(30, 10)]
        [string]$srcipval ,

        [ValidateRange(40, 90)]
        [boolean]$srcport ,

        [ValidateSet('=', '!=', 'EQ', 'NEQ')]
        [string]$srcportop ,

        [ValidateRange(40, 90)]
        [string]$srcportval ,

        [ValidateRange(30, 10)]
        [boolean]$destip ,

        [ValidateSet('=', '!=', 'EQ', 'NEQ')]
        [string]$destipop ,

        [ValidateRange(30, 10)]
        [string]$destipval ,

        [ValidateRange(40, 90)]
        [boolean]$destport ,

        [ValidateSet('=', '!=', 'EQ', 'NEQ')]
        [string]$destportop ,

        [ValidateRange(40, 90)]
        [string]$destportval ,

        [ValidateRange(1, 2147483647)]
        [double]$ttl ,

        [string]$srcmac ,

        [string]$srcmacmask = '"000000000000"' ,

        [ValidateSet('ICMP', 'IGMP', 'TCP', 'EGP', 'IGP', 'ARGUS', 'UDP', 'RDP', 'RSVP', 'EIGRP', 'L2TP', 'ISIS', 'GGP', 'IPoverIP', 'ST', 'CBT', 'BBN-RCC-M', 'NVP-II', 'PUP', 'EMCON', 'XNET', 'CHAOS', 'MUX', 'DCN-MEAS', 'HMP', 'PRM', 'XNS-IDP', 'TRUNK-1', 'TRUNK-2', 'LEAF-1', 'LEAF-2', 'IRTP', 'ISO-TP4', 'NETBLT', 'MFE-NSP', 'MERIT-INP', 'SEP', '3PC', 'IDPR', 'XTP', 'DDP', 'IDPR-CMTP', 'TP++', 'IL', 'IPv6', 'SDRP', 'IPv6-Route', 'IPv6-Frag', 'IDRP', 'GRE', 'MHRP', 'BNA', 'ESP', 'AH', 'I-NLSP', 'SWIPE', 'NARP', 'MOBILE', 'TLSP', 'SKIP', 'ICMPV6', 'IPv6-NoNx', 'IPv6-Opts', 'Any-Host-Internal-Protocol', 'CFTP', 'Any-Local-Network', 'SAT-EXPAK', 'KRYPTOLAN', 'RVD', 'IPPC', 'Any-Distributed-File-System', 'TFTP', 'VISA', 'IPCV', 'CPNX', 'CPHB', 'WSN', 'PVP', 'BR-SAT-MO', 'SUN-ND', 'WB-MON', 'WB-EXPAK', 'ISO-IP', 'VMTP', 'SECURE-VM', 'VINES', 'TTP', 'NSFNET-IG', 'DGP', 'TCF', 'OSPFIGP', 'Sprite-RP', 'LARP', 'MTP', 'AX.25', 'IPIP', 'MICP', 'SCC-SP', 'ETHERIP', 'Any-Private-Encryption-Scheme', 'GMTP', 'IFMP', 'PNNI', 'PIM', 'ARIS', 'SCPS', 'QNX', 'A/N', 'IPComp', 'SNP', 'Compaq-Pe', 'IPX-in-IP', 'VRRP', 'PGM', 'Any-0-Hop-Protocol', 'ENCAP', 'DDX', 'IATP', 'STP', 'SRP', 'UTI', 'SMP', 'SM', 'PTP', 'FIRE', 'CRTP', 'CRUDP', 'SSCOPMCE', 'IPLT', 'SPS', 'PIPE', 'SCTP', 'FC', 'RSVP-E2E-IGNORE', 'Mobility-Header', 'UDPLite')]
        [string]$protocol ,

        [ValidateRange(1, 255)]
        [double]$protocolnumber ,

        [ValidateRange(1, 4094)]
        [double]$vlan ,

        [ValidateRange(1, 16777215)]
        [double]$vxlan ,

        [string]$Interface ,

        [boolean]$established ,

        [ValidateRange(0, 65536)]
        [double]$icmptype ,

        [ValidateRange(0, 65536)]
        [double]$icmpcode ,

        [ValidateRange(1, 100000)]
        [double]$priority ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$state = 'ENABLED' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$logstate = 'DISABLED' ,

        [ValidateRange(1, 10000)]
        [double]$ratelimit = '100' ,

        [ValidateSet('CLASSIC', 'DFD')]
        [string]$type = 'CLASSIC' ,

        [ValidateSet('SIP-SPORT-DIP-DPORT', 'SIP', 'DIP', 'SIP-DIP', 'SIP-SPORT', 'DIP-DPORT')]
        [string]$dfdhash ,

        [ValidateSet('YES', 'NO')]
        [string]$stateful = 'NO' ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddNsacl: Starting"
    }
    process {
        try {
            $Payload = @{
                aclname = $aclname
                aclaction = $aclaction
            }
            if ($PSBoundParameters.ContainsKey('td')) { $Payload.Add('td', $td) }
            if ($PSBoundParameters.ContainsKey('srcip')) { $Payload.Add('srcip', $srcip) }
            if ($PSBoundParameters.ContainsKey('srcipop')) { $Payload.Add('srcipop', $srcipop) }
            if ($PSBoundParameters.ContainsKey('srcipval')) { $Payload.Add('srcipval', $srcipval) }
            if ($PSBoundParameters.ContainsKey('srcport')) { $Payload.Add('srcport', $srcport) }
            if ($PSBoundParameters.ContainsKey('srcportop')) { $Payload.Add('srcportop', $srcportop) }
            if ($PSBoundParameters.ContainsKey('srcportval')) { $Payload.Add('srcportval', $srcportval) }
            if ($PSBoundParameters.ContainsKey('destip')) { $Payload.Add('destip', $destip) }
            if ($PSBoundParameters.ContainsKey('destipop')) { $Payload.Add('destipop', $destipop) }
            if ($PSBoundParameters.ContainsKey('destipval')) { $Payload.Add('destipval', $destipval) }
            if ($PSBoundParameters.ContainsKey('destport')) { $Payload.Add('destport', $destport) }
            if ($PSBoundParameters.ContainsKey('destportop')) { $Payload.Add('destportop', $destportop) }
            if ($PSBoundParameters.ContainsKey('destportval')) { $Payload.Add('destportval', $destportval) }
            if ($PSBoundParameters.ContainsKey('ttl')) { $Payload.Add('ttl', $ttl) }
            if ($PSBoundParameters.ContainsKey('srcmac')) { $Payload.Add('srcmac', $srcmac) }
            if ($PSBoundParameters.ContainsKey('srcmacmask')) { $Payload.Add('srcmacmask', $srcmacmask) }
            if ($PSBoundParameters.ContainsKey('protocol')) { $Payload.Add('protocol', $protocol) }
            if ($PSBoundParameters.ContainsKey('protocolnumber')) { $Payload.Add('protocolnumber', $protocolnumber) }
            if ($PSBoundParameters.ContainsKey('vlan')) { $Payload.Add('vlan', $vlan) }
            if ($PSBoundParameters.ContainsKey('vxlan')) { $Payload.Add('vxlan', $vxlan) }
            if ($PSBoundParameters.ContainsKey('Interface')) { $Payload.Add('Interface', $Interface) }
            if ($PSBoundParameters.ContainsKey('established')) { $Payload.Add('established', $established) }
            if ($PSBoundParameters.ContainsKey('icmptype')) { $Payload.Add('icmptype', $icmptype) }
            if ($PSBoundParameters.ContainsKey('icmpcode')) { $Payload.Add('icmpcode', $icmpcode) }
            if ($PSBoundParameters.ContainsKey('priority')) { $Payload.Add('priority', $priority) }
            if ($PSBoundParameters.ContainsKey('state')) { $Payload.Add('state', $state) }
            if ($PSBoundParameters.ContainsKey('logstate')) { $Payload.Add('logstate', $logstate) }
            if ($PSBoundParameters.ContainsKey('ratelimit')) { $Payload.Add('ratelimit', $ratelimit) }
            if ($PSBoundParameters.ContainsKey('type')) { $Payload.Add('type', $type) }
            if ($PSBoundParameters.ContainsKey('dfdhash')) { $Payload.Add('dfdhash', $dfdhash) }
            if ($PSBoundParameters.ContainsKey('stateful')) { $Payload.Add('stateful', $stateful) }
 
            if ($PSCmdlet.ShouldProcess("nsacl", "Add NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nsacl -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetNsacl -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddNsacl: Finished"
    }
}

function Invoke-ADCDeleteNsacl {
<#
    .SYNOPSIS
        Delete NS configuration Object
    .DESCRIPTION
        Delete NS configuration Object
    .PARAMETER aclname 
       Name for the extended ACL rule. Must begin with an ASCII alphabetic or underscore (_) character, and must contain only ASCII alphanumeric, underscore, hash (#), period (.), space, colon (:), at (@), equals (=), and hyphen (-) characters.  
       Minimum length = 1 
    .EXAMPLE
        Invoke-ADCDeleteNsacl -aclname <string>
    .NOTES
        File Name : Invoke-ADCDeleteNsacl
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsacl/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$aclname 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteNsacl: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }

            if ($PSCmdlet.ShouldProcess("$aclname", "Delete NS configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type nsacl -Resource $aclname -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteNsacl: Finished"
    }
}

function Invoke-ADCUpdateNsacl {
<#
    .SYNOPSIS
        Update NS configuration Object
    .DESCRIPTION
        Update NS configuration Object 
    .PARAMETER aclname 
        Name for the extended ACL rule. Must begin with an ASCII alphabetic or underscore (_) character, and must contain only ASCII alphanumeric, underscore, hash (#), period (.), space, colon (:), at (@), equals (=), and hyphen (-) characters.  
        Minimum length = 1 
    .PARAMETER aclaction 
        Action to perform on incoming IPv4 packets that match the extended ACL rule.  
        Available settings function as follows:  
        * ALLOW - The Citrix ADC processes the packet.  
        * BRIDGE - The Citrix ADC bridges the packet to the destination without processing it.  
        * DENY - The Citrix ADC drops the packet.  
        Possible values = BRIDGE, DENY, ALLOW 
    .PARAMETER srcip 
        IP address or range of IP addresses to match against the source IP address of an incoming IPv4 packet. In the command line interface, separate the range with a hyphen. For example: 10.102.29.30-10.102.29.189. 
    .PARAMETER srcipop 
        Either the equals (=) or does not equal (!=) logical operator.  
        Possible values = =, !=, EQ, NEQ 
    .PARAMETER srcipval 
        IP address or range of IP addresses to match against the source IP address of an incoming IPv4 packet. In the command line interface, separate the range with a hyphen. For example:10.102.29.30-10.102.29.189. 
    .PARAMETER srcport 
        Port number or range of port numbers to match against the source port number of an incoming IPv4 packet. In the command line interface, separate the range with a hyphen. For example: 40-90. 
    .PARAMETER srcportop 
        Either the equals (=) or does not equal (!=) logical operator.  
        Possible values = =, !=, EQ, NEQ 
    .PARAMETER srcportval 
        Port number or range of port numbers to match against the source port number of an incoming IPv4 packet. In the command line interface, separate the range with a hyphen. For example: 40-90.  
        Maximum length = 65535 
    .PARAMETER destip 
        IP address or range of IP addresses to match against the destination IP address of an incoming IPv4 packet. In the command line interface, separate the range with a hyphen. For example: 10.102.29.30-10.102.29.189. 
    .PARAMETER destipop 
        Either the equals (=) or does not equal (!=) logical operator.  
        Possible values = =, !=, EQ, NEQ 
    .PARAMETER destipval 
        IP address or range of IP addresses to match against the destination IP address of an incoming IPv4 packet. In the command line interface, separate the range with a hyphen. For example: 10.102.29.30-10.102.29.189. 
    .PARAMETER destport 
        Port number or range of port numbers to match against the destination port number of an incoming IPv4 packet. In the command line interface, separate the range with a hyphen. For example: 40-90.  
        Note: The destination port can be specified only for TCP and UDP protocols. 
    .PARAMETER destportop 
        Either the equals (=) or does not equal (!=) logical operator.  
        Possible values = =, !=, EQ, NEQ 
    .PARAMETER destportval 
        Port number or range of port numbers to match against the destination port number of an incoming IPv4 packet. In the command line interface, separate the range with a hyphen. For example: 40-90.  
        Note: The destination port can be specified only for TCP and UDP protocols.  
        Maximum length = 65535 
    .PARAMETER srcmac 
        MAC address to match against the source MAC address of an incoming IPv4 packet. 
    .PARAMETER srcmacmask 
        Used to define range of Source MAC address. It takes string of 0 and 1, 0s are for exact match and 1s for wildcard. For matching first 3 bytes of MAC address, srcMacMask value "000000111111". .  
        Default value: "000000000000" 
    .PARAMETER protocol 
        Protocol to match against the protocol of an incoming IPv4 packet.  
        Possible values = ICMP, IGMP, TCP, EGP, IGP, ARGUS, UDP, RDP, RSVP, EIGRP, L2TP, ISIS, GGP, IPoverIP, ST, CBT, BBN-RCC-M, NVP-II, PUP, EMCON, XNET, CHAOS, MUX, DCN-MEAS, HMP, PRM, XNS-IDP, TRUNK-1, TRUNK-2, LEAF-1, LEAF-2, IRTP, ISO-TP4, NETBLT, MFE-NSP, MERIT-INP, SEP, 3PC, IDPR, XTP, DDP, IDPR-CMTP, TP++, IL, IPv6, SDRP, IPv6-Route, IPv6-Frag, IDRP, GRE, MHRP, BNA, ESP, AH, I-NLSP, SWIPE, NARP, MOBILE, TLSP, SKIP, ICMPV6, IPv6-NoNx, IPv6-Opts, Any-Host-Internal-Protocol, CFTP, Any-Local-Network, SAT-EXPAK, KRYPTOLAN, RVD, IPPC, Any-Distributed-File-System, TFTP, VISA, IPCV, CPNX, CPHB, WSN, PVP, BR-SAT-MO, SUN-ND, WB-MON, WB-EXPAK, ISO-IP, VMTP, SECURE-VM, VINES, TTP, NSFNET-IG, DGP, TCF, OSPFIGP, Sprite-RP, LARP, MTP, AX.25, IPIP, MICP, SCC-SP, ETHERIP, Any-Private-Encryption-Scheme, GMTP, IFMP, PNNI, PIM, ARIS, SCPS, QNX, A/N, IPComp, SNP, Compaq-Pe, IPX-in-IP, VRRP, PGM, Any-0-Hop-Protocol, ENCAP, DDX, IATP, STP, SRP, UTI, SMP, SM, PTP, FIRE, CRTP, CRUDP, SSCOPMCE, IPLT, SPS, PIPE, SCTP, FC, RSVP-E2E-IGNORE, Mobility-Header, UDPLite 
    .PARAMETER protocolnumber 
        Protocol to match against the protocol of an incoming IPv4 packet.  
        Minimum value = 1  
        Maximum value = 255 
    .PARAMETER icmptype 
        ICMP Message type to match against the message type of an incoming ICMP packet. For example, to block DESTINATION UNREACHABLE messages, you must specify 3 as the ICMP type.  
        Note: This parameter can be specified only for the ICMP protocol.  
        Minimum value = 0  
        Maximum value = 65536 
    .PARAMETER icmpcode 
        Code of a particular ICMP message type to match against the ICMP code of an incoming ICMP packet. For example, to block DESTINATION HOST UNREACHABLE messages, specify 3 as the ICMP type and 1 as the ICMP code.  
        If you set this parameter, you must set the ICMP Type parameter.  
        Minimum value = 0  
        Maximum value = 65536 
    .PARAMETER vlan 
        ID of the VLAN. The Citrix ADC applies the ACL rule only to the incoming packets of the specified VLAN. If you do not specify a VLAN ID, the appliance applies the ACL rule to the incoming packets on all VLANs.  
        Minimum value = 1  
        Maximum value = 4094 
    .PARAMETER vxlan 
        ID of the VXLAN. The Citrix ADC applies the ACL rule only to the incoming packets of the specified VXLAN. If you do not specify a VXLAN ID, the appliance applies the ACL rule to the incoming packets on all VXLANs.  
        Minimum value = 1  
        Maximum value = 16777215 
    .PARAMETER Interface 
        ID of an interface. The Citrix ADC applies the ACL rule only to the incoming packets from the specified interface. If you do not specify any value, the appliance applies the ACL rule to the incoming packets of all interfaces. 
    .PARAMETER priority 
        Priority for the extended ACL rule that determines the order in which it is evaluated relative to the other extended ACL rules. If you do not specify priorities while creating extended ACL rules, the ACL rules are evaluated in the order in which they are created.  
        Minimum value = 1  
        Maximum value = 100000 
    .PARAMETER logstate 
        Enable or disable logging of events related to the extended ACL rule. The log messages are stored in the configured syslog or auditlog server.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER ratelimit 
        Maximum number of log messages to be generated per second. If you set this parameter, you must enable the Log State parameter.  
        Default value: 100  
        Minimum value = 1  
        Maximum value = 10000 
    .PARAMETER established 
        Allow only incoming TCP packets that have the ACK or RST bit set, if the action set for the ACL rule is ALLOW and these packets match the other conditions in the ACL rule. 
    .PARAMETER dfdhash 
        Specifies the type hashmethod to be applied, to steer the packet to the FP of the packet.  
        Possible values = SIP-SPORT-DIP-DPORT, SIP, DIP, SIP-DIP, SIP-SPORT, DIP-DPORT 
    .PARAMETER stateful 
        If stateful option is enabled, transparent sessions are created for the traffic hitting this ACL and not hitting any other features like LB, INAT etc. .  
        Default value: NO  
        Possible values = YES, NO 
    .PARAMETER PassThru 
        Return details about the created nsacl item.
    .EXAMPLE
        Invoke-ADCUpdateNsacl -aclname <string>
    .NOTES
        File Name : Invoke-ADCUpdateNsacl
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsacl/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [ValidatePattern('^(([a-zA-Z0-9]|[_])+([a-zA-Z0-9]|[_])+)$')]
        [string]$aclname ,

        [ValidateSet('BRIDGE', 'DENY', 'ALLOW')]
        [string]$aclaction ,

        [ValidateRange(30, 10)]
        [boolean]$srcip ,

        [ValidateSet('=', '!=', 'EQ', 'NEQ')]
        [string]$srcipop ,

        [ValidateRange(30, 10)]
        [string]$srcipval ,

        [ValidateRange(40, 90)]
        [boolean]$srcport ,

        [ValidateSet('=', '!=', 'EQ', 'NEQ')]
        [string]$srcportop ,

        [ValidateRange(40, 90)]
        [string]$srcportval ,

        [ValidateRange(30, 10)]
        [boolean]$destip ,

        [ValidateSet('=', '!=', 'EQ', 'NEQ')]
        [string]$destipop ,

        [ValidateRange(30, 10)]
        [string]$destipval ,

        [ValidateRange(40, 90)]
        [boolean]$destport ,

        [ValidateSet('=', '!=', 'EQ', 'NEQ')]
        [string]$destportop ,

        [ValidateRange(40, 90)]
        [string]$destportval ,

        [string]$srcmac ,

        [string]$srcmacmask ,

        [ValidateSet('ICMP', 'IGMP', 'TCP', 'EGP', 'IGP', 'ARGUS', 'UDP', 'RDP', 'RSVP', 'EIGRP', 'L2TP', 'ISIS', 'GGP', 'IPoverIP', 'ST', 'CBT', 'BBN-RCC-M', 'NVP-II', 'PUP', 'EMCON', 'XNET', 'CHAOS', 'MUX', 'DCN-MEAS', 'HMP', 'PRM', 'XNS-IDP', 'TRUNK-1', 'TRUNK-2', 'LEAF-1', 'LEAF-2', 'IRTP', 'ISO-TP4', 'NETBLT', 'MFE-NSP', 'MERIT-INP', 'SEP', '3PC', 'IDPR', 'XTP', 'DDP', 'IDPR-CMTP', 'TP++', 'IL', 'IPv6', 'SDRP', 'IPv6-Route', 'IPv6-Frag', 'IDRP', 'GRE', 'MHRP', 'BNA', 'ESP', 'AH', 'I-NLSP', 'SWIPE', 'NARP', 'MOBILE', 'TLSP', 'SKIP', 'ICMPV6', 'IPv6-NoNx', 'IPv6-Opts', 'Any-Host-Internal-Protocol', 'CFTP', 'Any-Local-Network', 'SAT-EXPAK', 'KRYPTOLAN', 'RVD', 'IPPC', 'Any-Distributed-File-System', 'TFTP', 'VISA', 'IPCV', 'CPNX', 'CPHB', 'WSN', 'PVP', 'BR-SAT-MO', 'SUN-ND', 'WB-MON', 'WB-EXPAK', 'ISO-IP', 'VMTP', 'SECURE-VM', 'VINES', 'TTP', 'NSFNET-IG', 'DGP', 'TCF', 'OSPFIGP', 'Sprite-RP', 'LARP', 'MTP', 'AX.25', 'IPIP', 'MICP', 'SCC-SP', 'ETHERIP', 'Any-Private-Encryption-Scheme', 'GMTP', 'IFMP', 'PNNI', 'PIM', 'ARIS', 'SCPS', 'QNX', 'A/N', 'IPComp', 'SNP', 'Compaq-Pe', 'IPX-in-IP', 'VRRP', 'PGM', 'Any-0-Hop-Protocol', 'ENCAP', 'DDX', 'IATP', 'STP', 'SRP', 'UTI', 'SMP', 'SM', 'PTP', 'FIRE', 'CRTP', 'CRUDP', 'SSCOPMCE', 'IPLT', 'SPS', 'PIPE', 'SCTP', 'FC', 'RSVP-E2E-IGNORE', 'Mobility-Header', 'UDPLite')]
        [string]$protocol ,

        [ValidateRange(1, 255)]
        [double]$protocolnumber ,

        [ValidateRange(0, 65536)]
        [double]$icmptype ,

        [ValidateRange(0, 65536)]
        [double]$icmpcode ,

        [ValidateRange(1, 4094)]
        [double]$vlan ,

        [ValidateRange(1, 16777215)]
        [double]$vxlan ,

        [string]$Interface ,

        [ValidateRange(1, 100000)]
        [double]$priority ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$logstate ,

        [ValidateRange(1, 10000)]
        [double]$ratelimit ,

        [boolean]$established ,

        [ValidateSet('SIP-SPORT-DIP-DPORT', 'SIP', 'DIP', 'SIP-DIP', 'SIP-SPORT', 'DIP-DPORT')]
        [string]$dfdhash ,

        [ValidateSet('YES', 'NO')]
        [string]$stateful ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCUpdateNsacl: Starting"
    }
    process {
        try {
            $Payload = @{
                aclname = $aclname
            }
            if ($PSBoundParameters.ContainsKey('aclaction')) { $Payload.Add('aclaction', $aclaction) }
            if ($PSBoundParameters.ContainsKey('srcip')) { $Payload.Add('srcip', $srcip) }
            if ($PSBoundParameters.ContainsKey('srcipop')) { $Payload.Add('srcipop', $srcipop) }
            if ($PSBoundParameters.ContainsKey('srcipval')) { $Payload.Add('srcipval', $srcipval) }
            if ($PSBoundParameters.ContainsKey('srcport')) { $Payload.Add('srcport', $srcport) }
            if ($PSBoundParameters.ContainsKey('srcportop')) { $Payload.Add('srcportop', $srcportop) }
            if ($PSBoundParameters.ContainsKey('srcportval')) { $Payload.Add('srcportval', $srcportval) }
            if ($PSBoundParameters.ContainsKey('destip')) { $Payload.Add('destip', $destip) }
            if ($PSBoundParameters.ContainsKey('destipop')) { $Payload.Add('destipop', $destipop) }
            if ($PSBoundParameters.ContainsKey('destipval')) { $Payload.Add('destipval', $destipval) }
            if ($PSBoundParameters.ContainsKey('destport')) { $Payload.Add('destport', $destport) }
            if ($PSBoundParameters.ContainsKey('destportop')) { $Payload.Add('destportop', $destportop) }
            if ($PSBoundParameters.ContainsKey('destportval')) { $Payload.Add('destportval', $destportval) }
            if ($PSBoundParameters.ContainsKey('srcmac')) { $Payload.Add('srcmac', $srcmac) }
            if ($PSBoundParameters.ContainsKey('srcmacmask')) { $Payload.Add('srcmacmask', $srcmacmask) }
            if ($PSBoundParameters.ContainsKey('protocol')) { $Payload.Add('protocol', $protocol) }
            if ($PSBoundParameters.ContainsKey('protocolnumber')) { $Payload.Add('protocolnumber', $protocolnumber) }
            if ($PSBoundParameters.ContainsKey('icmptype')) { $Payload.Add('icmptype', $icmptype) }
            if ($PSBoundParameters.ContainsKey('icmpcode')) { $Payload.Add('icmpcode', $icmpcode) }
            if ($PSBoundParameters.ContainsKey('vlan')) { $Payload.Add('vlan', $vlan) }
            if ($PSBoundParameters.ContainsKey('vxlan')) { $Payload.Add('vxlan', $vxlan) }
            if ($PSBoundParameters.ContainsKey('Interface')) { $Payload.Add('Interface', $Interface) }
            if ($PSBoundParameters.ContainsKey('priority')) { $Payload.Add('priority', $priority) }
            if ($PSBoundParameters.ContainsKey('logstate')) { $Payload.Add('logstate', $logstate) }
            if ($PSBoundParameters.ContainsKey('ratelimit')) { $Payload.Add('ratelimit', $ratelimit) }
            if ($PSBoundParameters.ContainsKey('established')) { $Payload.Add('established', $established) }
            if ($PSBoundParameters.ContainsKey('dfdhash')) { $Payload.Add('dfdhash', $dfdhash) }
            if ($PSBoundParameters.ContainsKey('stateful')) { $Payload.Add('stateful', $stateful) }
 
            if ($PSCmdlet.ShouldProcess("nsacl", "Update NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -Type nsacl -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetNsacl -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUpdateNsacl: Finished"
    }
}

function Invoke-ADCUnsetNsacl {
<#
    .SYNOPSIS
        Unset NS configuration Object
    .DESCRIPTION
        Unset NS configuration Object 
   .PARAMETER aclname 
       Name for the extended ACL rule. Must begin with an ASCII alphabetic or underscore (_) character, and must contain only ASCII alphanumeric, underscore, hash (#), period (.), space, colon (:), at (@), equals (=), and hyphen (-) characters. 
   .PARAMETER srcip 
       IP address or .102.29.189. 
   .PARAMETER srcport 
       Port number or . 
   .PARAMETER destip 
       IP address or .102.29.189. 
   .PARAMETER destport 
       Port number or .  
       Note: The destination port can be specified only for TCP and UDP protocols. 
   .PARAMETER srcmac 
       MAC address to match against the source MAC address of an incoming IPv4 packet. 
   .PARAMETER srcmacmask 
       Used to define range of Source MAC address. It takes string of 0 and 1, 0s are for exact match and 1s for wildcard. For matching first 3 bytes of MAC address, srcMacMask value "000000111111". . 
   .PARAMETER protocol 
       Protocol to match against the protocol of an incoming IPv4 packet.  
       Possible values = ICMP, IGMP, TCP, EGP, IGP, ARGUS, UDP, RDP, RSVP, EIGRP, L2TP, ISIS, GGP, IPoverIP, ST, CBT, BBN-RCC-M, NVP-II, PUP, EMCON, XNET, CHAOS, MUX, DCN-MEAS, HMP, PRM, XNS-IDP, TRUNK-1, TRUNK-2, LEAF-1, LEAF-2, IRTP, ISO-TP4, NETBLT, MFE-NSP, MERIT-INP, SEP, 3PC, IDPR, XTP, DDP, IDPR-CMTP, TP++, IL, IPv6, SDRP, IPv6-Route, IPv6-Frag, IDRP, GRE, MHRP, BNA, ESP, AH, I-NLSP, SWIPE, NARP, MOBILE, TLSP, SKIP, ICMPV6, IPv6-NoNx, IPv6-Opts, Any-Host-Internal-Protocol, CFTP, Any-Local-Network, SAT-EXPAK, KRYPTOLAN, RVD, IPPC, Any-Distributed-File-System, TFTP, VISA, IPCV, CPNX, CPHB, WSN, PVP, BR-SAT-MO, SUN-ND, WB-MON, WB-EXPAK, ISO-IP, VMTP, SECURE-VM, VINES, TTP, NSFNET-IG, DGP, TCF, OSPFIGP, Sprite-RP, LARP, MTP, AX.25, IPIP, MICP, SCC-SP, ETHERIP, Any-Private-Encryption-Scheme, GMTP, IFMP, PNNI, PIM, ARIS, SCPS, QNX, A/N, IPComp, SNP, Compaq-Pe, IPX-in-IP, VRRP, PGM, Any-0-Hop-Protocol, ENCAP, DDX, IATP, STP, SRP, UTI, SMP, SM, PTP, FIRE, CRTP, CRUDP, SSCOPMCE, IPLT, SPS, PIPE, SCTP, FC, RSVP-E2E-IGNORE, Mobility-Header, UDPLite 
   .PARAMETER icmptype 
       ICMP Message type to match against the message type of an incoming ICMP packet. For example, to block DESTINATION UNREACHABLE messages, you must specify 3 as the ICMP type.  
       Note: This parameter can be specified only for the ICMP protocol. 
   .PARAMETER icmpcode 
       Code of a particular ICMP message type to match against the ICMP code of an incoming ICMP packet. For example, to block DESTINATION HOST UNREACHABLE messages, specify 3 as the ICMP type and 1 as the ICMP code.  
       If you set this parameter, you must set the ICMP Type parameter. 
   .PARAMETER vlan 
       ID of the VLAN. The Citrix ADC applies the ACL rule only to the incoming packets of the specified VLAN. If you do not specify a VLAN ID, the appliance applies the ACL rule to the incoming packets on all VLANs. 
   .PARAMETER vxlan 
       ID of the VXLAN. The Citrix ADC applies the ACL rule only to the incoming packets of the specified VXLAN. If you do not specify a VXLAN ID, the appliance applies the ACL rule to the incoming packets on all VXLANs. 
   .PARAMETER Interface 
       ID of an interface. The Citrix ADC applies the ACL rule only to the incoming packets from the specified interface. If you do not specify any value, the appliance applies the ACL rule to the incoming packets of all interfaces. 
   .PARAMETER logstate 
       Enable or disable logging of events related to the extended ACL rule. The log messages are stored in the configured syslog or auditlog server.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER ratelimit 
       Maximum number of log messages to be generated per second. If you set this parameter, you must enable the Log State parameter. 
   .PARAMETER established 
       Allow only incoming TCP packets that have the ACK or RST bit set, if the action set for the ACL rule is ALLOW and these packets match the other conditions in the ACL rule. 
   .PARAMETER stateful 
       If stateful option is enabled, transparent sessions are created for the traffic hitting this ACL and not hitting any other features like LB, INAT etc. .  
       Possible values = YES, NO 
   .PARAMETER dfdhash 
       Specifies the type hashmethod to be applied, to steer the packet to the FP of the packet.  
       Possible values = SIP-SPORT-DIP-DPORT, SIP, DIP, SIP-DIP, SIP-SPORT, DIP-DPORT
    .EXAMPLE
        Invoke-ADCUnsetNsacl -aclname <string>
    .NOTES
        File Name : Invoke-ADCUnsetNsacl
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsacl
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [ValidatePattern('^(([a-zA-Z0-9]|[_])+([a-zA-Z0-9]|[_])+)$')]
        [string]$aclname ,

        [Boolean]$srcip ,

        [Boolean]$srcport ,

        [Boolean]$destip ,

        [Boolean]$destport ,

        [Boolean]$srcmac ,

        [Boolean]$srcmacmask ,

        [Boolean]$protocol ,

        [Boolean]$icmptype ,

        [Boolean]$icmpcode ,

        [Boolean]$vlan ,

        [Boolean]$vxlan ,

        [Boolean]$Interface ,

        [Boolean]$logstate ,

        [Boolean]$ratelimit ,

        [Boolean]$established ,

        [Boolean]$stateful ,

        [Boolean]$dfdhash 
    )
    begin {
        Write-Verbose "Invoke-ADCUnsetNsacl: Starting"
    }
    process {
        try {
            $Payload = @{
                aclname = $aclname
            }
            if ($PSBoundParameters.ContainsKey('srcip')) { $Payload.Add('srcip', $srcip) }
            if ($PSBoundParameters.ContainsKey('srcport')) { $Payload.Add('srcport', $srcport) }
            if ($PSBoundParameters.ContainsKey('destip')) { $Payload.Add('destip', $destip) }
            if ($PSBoundParameters.ContainsKey('destport')) { $Payload.Add('destport', $destport) }
            if ($PSBoundParameters.ContainsKey('srcmac')) { $Payload.Add('srcmac', $srcmac) }
            if ($PSBoundParameters.ContainsKey('srcmacmask')) { $Payload.Add('srcmacmask', $srcmacmask) }
            if ($PSBoundParameters.ContainsKey('protocol')) { $Payload.Add('protocol', $protocol) }
            if ($PSBoundParameters.ContainsKey('icmptype')) { $Payload.Add('icmptype', $icmptype) }
            if ($PSBoundParameters.ContainsKey('icmpcode')) { $Payload.Add('icmpcode', $icmpcode) }
            if ($PSBoundParameters.ContainsKey('vlan')) { $Payload.Add('vlan', $vlan) }
            if ($PSBoundParameters.ContainsKey('vxlan')) { $Payload.Add('vxlan', $vxlan) }
            if ($PSBoundParameters.ContainsKey('Interface')) { $Payload.Add('Interface', $Interface) }
            if ($PSBoundParameters.ContainsKey('logstate')) { $Payload.Add('logstate', $logstate) }
            if ($PSBoundParameters.ContainsKey('ratelimit')) { $Payload.Add('ratelimit', $ratelimit) }
            if ($PSBoundParameters.ContainsKey('established')) { $Payload.Add('established', $established) }
            if ($PSBoundParameters.ContainsKey('stateful')) { $Payload.Add('stateful', $stateful) }
            if ($PSBoundParameters.ContainsKey('dfdhash')) { $Payload.Add('dfdhash', $dfdhash) }
            if ($PSCmdlet.ShouldProcess("$aclname", "Unset NS configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nsacl -Action unset -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUnsetNsacl: Finished"
    }
}

function Invoke-ADCEnableNsacl {
<#
    .SYNOPSIS
        Enable NS configuration Object
    .DESCRIPTION
        Enable NS configuration Object 
    .PARAMETER aclname 
        Name for the extended ACL rule. Must begin with an ASCII alphabetic or underscore (_) character, and must contain only ASCII alphanumeric, underscore, hash (#), period (.), space, colon (:), at (@), equals (=), and hyphen (-) characters.
    .EXAMPLE
        Invoke-ADCEnableNsacl -aclname <string>
    .NOTES
        File Name : Invoke-ADCEnableNsacl
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsacl/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [ValidatePattern('^(([a-zA-Z0-9]|[_])+([a-zA-Z0-9]|[_])+)$')]
        [string]$aclname 

    )
    begin {
        Write-Verbose "Invoke-ADCEnableNsacl: Starting"
    }
    process {
        try {
            $Payload = @{
                aclname = $aclname
            }

            if ($PSCmdlet.ShouldProcess($Name, "Enable NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nsacl -Action enable -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $result
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCEnableNsacl: Finished"
    }
}

function Invoke-ADCDisableNsacl {
<#
    .SYNOPSIS
        Disable NS configuration Object
    .DESCRIPTION
        Disable NS configuration Object 
    .PARAMETER aclname 
        Name for the extended ACL rule. Must begin with an ASCII alphabetic or underscore (_) character, and must contain only ASCII alphanumeric, underscore, hash (#), period (.), space, colon (:), at (@), equals (=), and hyphen (-) characters.
    .EXAMPLE
        Invoke-ADCDisableNsacl -aclname <string>
    .NOTES
        File Name : Invoke-ADCDisableNsacl
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsacl/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [ValidatePattern('^(([a-zA-Z0-9]|[_])+([a-zA-Z0-9]|[_])+)$')]
        [string]$aclname 

    )
    begin {
        Write-Verbose "Invoke-ADCDisableNsacl: Starting"
    }
    process {
        try {
            $Payload = @{
                aclname = $aclname
            }

            if ($PSCmdlet.ShouldProcess($Name, "Disable NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nsacl -Action disable -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $result
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDisableNsacl: Finished"
    }
}

function Invoke-ADCRenameNsacl {
<#
    .SYNOPSIS
        Rename NS configuration Object
    .DESCRIPTION
        Rename NS configuration Object 
    .PARAMETER aclname 
        Name for the extended ACL rule. Must begin with an ASCII alphabetic or underscore (_) character, and must contain only ASCII alphanumeric, underscore, hash (#), period (.), space, colon (:), at (@), equals (=), and hyphen (-) characters.  
        Minimum length = 1 
    .PARAMETER newname 
        New name for the extended ACL rule. Must begin with an ASCII alphabetic or underscore (_) character, and must contain only ASCII alphanumeric, underscore, hash (#), period (.), space, colon (:), at (@), equals (=), and hyphen (-) characters.  
        Minimum length = 1 
    .PARAMETER PassThru 
        Return details about the created nsacl item.
    .EXAMPLE
        Invoke-ADCRenameNsacl -aclname <string> -newname <string>
    .NOTES
        File Name : Invoke-ADCRenameNsacl
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsacl/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [ValidatePattern('^(([a-zA-Z0-9]|[_])+([a-zA-Z0-9]|[_])+)$')]
        [string]$aclname ,

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [ValidatePattern('^(([a-zA-Z0-9]|[_])+([a-zA-Z0-9]|[_])+)$')]
        [string]$newname ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCRenameNsacl: Starting"
    }
    process {
        try {
            $Payload = @{
                aclname = $aclname
                newname = $newname
            }

 
            if ($PSCmdlet.ShouldProcess("nsacl", "Rename NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nsacl -Action rename -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetNsacl -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCRenameNsacl: Finished"
    }
}

function Invoke-ADCGetNsacl {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER aclname 
       Name for the extended ACL rule. Must begin with an ASCII alphabetic or underscore (_) character, and must contain only ASCII alphanumeric, underscore, hash (#), period (.), space, colon (:), at (@), equals (=), and hyphen (-) characters. 
    .PARAMETER GetAll 
        Retreive all nsacl object(s)
    .PARAMETER Count
        If specified, the count of the nsacl object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNsacl
    .EXAMPLE 
        Invoke-ADCGetNsacl -GetAll 
    .EXAMPLE 
        Invoke-ADCGetNsacl -Count
    .EXAMPLE
        Invoke-ADCGetNsacl -name <string>
    .EXAMPLE
        Invoke-ADCGetNsacl -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNsacl
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsacl/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateScript({ $_.Length -gt 1 })]
        [ValidatePattern('^(([a-zA-Z0-9]|[_])+([a-zA-Z0-9]|[_])+)$')]
        [string]$aclname,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll,

        [Parameter(ParameterSetName = 'GetAll')]
        [Parameter(ParameterSetName = 'Get')]
        [Switch]$ViewSummary

    )
    begin {
        Write-Verbose "Invoke-ADCGetNsacl: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all nsacl objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsacl -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nsacl objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsacl -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nsacl objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsacl -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nsacl configuration for property 'aclname'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsacl -Resource $aclname -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving nsacl configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsacl -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNsacl: Ended"
    }
}

function Invoke-ADCAddNsacl6 {
<#
    .SYNOPSIS
        Add NS configuration Object
    .DESCRIPTION
        Add NS configuration Object 
    .PARAMETER acl6name 
        Name for the ACL6 rule. Must begin with an ASCII alphabetic or underscore (_) character, and must contain only ASCII alphanumeric, underscore, hash (#), period (.), space, colon (:), at (@), equals (=), and hyphen (-) characters.  
        Minimum length = 1 
    .PARAMETER acl6action 
        Action to perform on the incoming IPv6 packets that match the ACL6 rule.  
        Available settings function as follows:  
        * ALLOW - The Citrix ADC processes the packet.  
        * BRIDGE - The Citrix ADC bridges the packet to the destination without processing it.  
        * DENY - The Citrix ADC drops the packet.  
        Possible values = BRIDGE, DENY, ALLOW 
    .PARAMETER td 
        Integer value that uniquely identifies the traffic domain in which you want to configure the entity. If you do not specify an ID, the entity becomes part of the default traffic domain, which has an ID of 0.  
        Minimum value = 0  
        Maximum value = 4094 
    .PARAMETER srcipv6 
        IP address or range of IP addresses to match against the source IP address of an incoming IPv6 packet. In the command line interface, separate the range with a hyphen. 
    .PARAMETER srcipop 
        Either the equals (=) or does not equal (!=) logical operator.  
        Possible values = =, !=, EQ, NEQ 
    .PARAMETER srcipv6val 
        Source IPv6 address (range). 
    .PARAMETER srcport 
        Port number or range of port numbers to match against the source port number of an incoming IPv6 packet. In the command line interface, separate the range with a hyphen. For example: 40-90.  
        Note: The destination port can be specified only for TCP and UDP protocols. 
    .PARAMETER srcportop 
        Either the equals (=) or does not equal (!=) logical operator.  
        Possible values = =, !=, EQ, NEQ 
    .PARAMETER srcportval 
        Source port (range).  
        Maximum length = 65535 
    .PARAMETER destipv6 
        IP address or range of IP addresses to match against the destination IP address of an incoming IPv6 packet. In the command line interface, separate the range with a hyphen. 
    .PARAMETER destipop 
        Either the equals (=) or does not equal (!=) logical operator.  
        Possible values = =, !=, EQ, NEQ 
    .PARAMETER destipv6val 
        Destination IPv6 address (range). 
    .PARAMETER destport 
        Port number or range of port numbers to match against the destination port number of an incoming IPv6 packet. In the command line interface, separate the range with a hyphen. For example: 40-90.  
        Note: The destination port can be specified only for TCP and UDP protocols. 
    .PARAMETER destportop 
        Either the equals (=) or does not equal (!=) logical operator.  
        Possible values = =, !=, EQ, NEQ 
    .PARAMETER destportval 
        Destination port (range).  
        Maximum length = 65535 
    .PARAMETER ttl 
        Time to expire this ACL6 (in seconds).  
        Minimum value = 1  
        Maximum value = 2147483647 
    .PARAMETER srcmac 
        MAC address to match against the source MAC address of an incoming IPv6 packet. 
    .PARAMETER srcmacmask 
        Used to define range of Source MAC address. It takes string of 0 and 1, 0s are for exact match and 1s for wildcard. For matching first 3 bytes of MAC address, srcMacMask value "000000111111". .  
        Default value: "000000000000" 
    .PARAMETER protocol 
        Protocol, identified by protocol name, to match against the protocol of an incoming IPv6 packet.  
        Possible values = ICMPV6, TCP, UDP, ICMP, IGMP, EGP, IGP, ARGUS, RDP, RSVP, EIGRP, L2TP, ISIS, GGP, IPoverIP, ST, CBT, BBN-RCC-M, NVP-II, PUP, EMCON, XNET, CHAOS, MUX, DCN-MEAS, HMP, PRM, XNS-IDP, TRUNK-1, TRUNK-2, LEAF-1, LEAF-2, IRTP, ISO-TP4, NETBLT, MFE-NSP, MERIT-INP, SEP, 3PC, IDPR, XTP, DDP, IDPR-CMTP, TP++, IL, IPv6, SDRP, IPv6-Route, IPv6-Frag, IDRP, GRE, MHRP, BNA, ESP, AH, I-NLSP, SWIPE, NARP, MOBILE, TLSP, SKIP, IPv6-NoNx, IPv6-Opts, Any-Host-Internal-Protocol, CFTP, Any-Local-Network, SAT-EXPAK, KRYPTOLAN, RVD, IPPC, Any-Distributed-File-System, TFTP, VISA, IPCV, CPNX, CPHB, WSN, PVP, BR-SAT-MO, SUN-ND, WB-MON, WB-EXPAK, ISO-IP, VMTP, SECURE-VM, VINES, TTP, NSFNET-IG, DGP, TCF, OSPFIGP, Sprite-RP, LARP, MTP, AX.25, IPIP, MICP, SCC-SP, ETHERIP, Any-Private-Encryption-Scheme, GMTP, IFMP, PNNI, PIM, ARIS, SCPS, QNX, A/N, IPComp, SNP, Compaq-Pe, IPX-in-IP, VRRP, PGM, Any-0-Hop-Protocol, ENCAP, DDX, IATP, STP, SRP, UTI, SMP, SM, PTP, FIRE, CRTP, CRUDP, SSCOPMCE, IPLT, SPS, PIPE, SCTP, FC, RSVP-E2E-IGNORE, Mobility-Header, UDPLite 
    .PARAMETER protocolnumber 
        Protocol, identified by protocol number, to match against the protocol of an incoming IPv6 packet.  
        Minimum value = 1  
        Maximum value = 255 
    .PARAMETER vlan 
        ID of the VLAN. The Citrix ADC applies the ACL6 rule only to the incoming packets on the specified VLAN. If you do not specify a VLAN ID, the appliance applies the ACL6 rule to the incoming packets on all VLANs.  
        Minimum value = 1  
        Maximum value = 4094 
    .PARAMETER vxlan 
        ID of the VXLAN. The Citrix ADC applies the ACL6 rule only to the incoming packets on the specified VXLAN. If you do not specify a VXLAN ID, the appliance applies the ACL6 rule to the incoming packets on all VXLANs.  
        Minimum value = 1  
        Maximum value = 16777215 
    .PARAMETER Interface 
        ID of an interface. The Citrix ADC applies the ACL6 rule only to the incoming packets from the specified interface. If you do not specify any value, the appliance applies the ACL6 rule to the incoming packets from all interfaces. 
    .PARAMETER established 
        Allow only incoming TCP packets that have the ACK or RST bit set if the action set for the ACL6 rule is ALLOW and these packets match the other conditions in the ACL6 rule. 
    .PARAMETER icmptype 
        ICMP Message type to match against the message type of an incoming IPv6 ICMP packet. For example, to block DESTINATION UNREACHABLE messages, you must specify 3 as the ICMP type.  
        Note: This parameter can be specified only for the ICMP protocol.  
        Minimum value = 0  
        Maximum value = 65536 
    .PARAMETER icmpcode 
        Code of a particular ICMP message type to match against the ICMP code of an incoming IPv6 ICMP packet. For example, to block DESTINATION HOST UNREACHABLE messages, specify 3 as the ICMP type and 1 as the ICMP code.  
        If you set this parameter, you must set the ICMP Type parameter.  
        Minimum value = 0  
        Maximum value = 65536 
    .PARAMETER priority 
        Priority for the ACL6 rule, which determines the order in which it is evaluated relative to the other ACL6 rules. If you do not specify priorities while creating ACL6 rules, the ACL6 rules are evaluated in the order in which they are created.  
        Minimum value = 1  
        Maximum value = 81920 
    .PARAMETER state 
        State of the ACL6.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER type 
        Type of the acl6 ,default will be CLASSIC.  
        Available options as follows:  
        * CLASSIC - specifies the regular extended acls.  
        * DFD - cluster specific acls,specifies hashmethod for steering of the packet in cluster .  
        Default value: CLASSIC  
        Possible values = CLASSIC, DFD 
    .PARAMETER dfdhash 
        Specifies the type of hashmethod to be applied, to steer the packet to the FP of the packet.  
        Possible values = SIP-SPORT-DIP-DPORT, SIP, DIP, SIP-DIP, SIP-SPORT, DIP-DPORT 
    .PARAMETER dfdprefix 
        hashprefix to be applied to SIP/DIP to generate rsshash FP.eg 128 => hash calculated on the complete IP.  
        Default value: 128  
        Minimum value = 1  
        Maximum value = 128 
    .PARAMETER stateful 
        If stateful option is enabled, transparent sessions are created for the traffic hitting this ACL6 and not hitting any other features like LB, INAT etc. .  
        Default value: NO  
        Possible values = YES, NO 
    .PARAMETER logstate 
        Enable or disable logging of events related to the ACL6 rule. The log messages are stored in the configured syslog or auditlog server.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER ratelimit 
        Maximum number of log messages to be generated per second. If you set this parameter, you must enable the Log State parameter.  
        Default value: 100  
        Minimum value = 1  
        Maximum value = 10000 
    .PARAMETER PassThru 
        Return details about the created nsacl6 item.
    .EXAMPLE
        Invoke-ADCAddNsacl6 -acl6name <string> -acl6action <string>
    .NOTES
        File Name : Invoke-ADCAddNsacl6
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsacl6/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [ValidatePattern('^(([a-zA-Z0-9]|[_])+([a-zA-Z0-9]|[_])+)$')]
        [string]$acl6name ,

        [Parameter(Mandatory = $true)]
        [ValidateSet('BRIDGE', 'DENY', 'ALLOW')]
        [string]$acl6action ,

        [ValidateRange(0, 4094)]
        [double]$td ,

        [boolean]$srcipv6 ,

        [ValidateSet('=', '!=', 'EQ', 'NEQ')]
        [string]$srcipop ,

        [string]$srcipv6val ,

        [ValidateRange(40, 90)]
        [boolean]$srcport ,

        [ValidateSet('=', '!=', 'EQ', 'NEQ')]
        [string]$srcportop ,

        [string]$srcportval ,

        [boolean]$destipv6 ,

        [ValidateSet('=', '!=', 'EQ', 'NEQ')]
        [string]$destipop ,

        [string]$destipv6val ,

        [ValidateRange(40, 90)]
        [boolean]$destport ,

        [ValidateSet('=', '!=', 'EQ', 'NEQ')]
        [string]$destportop ,

        [string]$destportval ,

        [ValidateRange(1, 2147483647)]
        [double]$ttl ,

        [string]$srcmac ,

        [string]$srcmacmask = '"000000000000"' ,

        [ValidateSet('ICMPV6', 'TCP', 'UDP', 'ICMP', 'IGMP', 'EGP', 'IGP', 'ARGUS', 'RDP', 'RSVP', 'EIGRP', 'L2TP', 'ISIS', 'GGP', 'IPoverIP', 'ST', 'CBT', 'BBN-RCC-M', 'NVP-II', 'PUP', 'EMCON', 'XNET', 'CHAOS', 'MUX', 'DCN-MEAS', 'HMP', 'PRM', 'XNS-IDP', 'TRUNK-1', 'TRUNK-2', 'LEAF-1', 'LEAF-2', 'IRTP', 'ISO-TP4', 'NETBLT', 'MFE-NSP', 'MERIT-INP', 'SEP', '3PC', 'IDPR', 'XTP', 'DDP', 'IDPR-CMTP', 'TP++', 'IL', 'IPv6', 'SDRP', 'IPv6-Route', 'IPv6-Frag', 'IDRP', 'GRE', 'MHRP', 'BNA', 'ESP', 'AH', 'I-NLSP', 'SWIPE', 'NARP', 'MOBILE', 'TLSP', 'SKIP', 'IPv6-NoNx', 'IPv6-Opts', 'Any-Host-Internal-Protocol', 'CFTP', 'Any-Local-Network', 'SAT-EXPAK', 'KRYPTOLAN', 'RVD', 'IPPC', 'Any-Distributed-File-System', 'TFTP', 'VISA', 'IPCV', 'CPNX', 'CPHB', 'WSN', 'PVP', 'BR-SAT-MO', 'SUN-ND', 'WB-MON', 'WB-EXPAK', 'ISO-IP', 'VMTP', 'SECURE-VM', 'VINES', 'TTP', 'NSFNET-IG', 'DGP', 'TCF', 'OSPFIGP', 'Sprite-RP', 'LARP', 'MTP', 'AX.25', 'IPIP', 'MICP', 'SCC-SP', 'ETHERIP', 'Any-Private-Encryption-Scheme', 'GMTP', 'IFMP', 'PNNI', 'PIM', 'ARIS', 'SCPS', 'QNX', 'A/N', 'IPComp', 'SNP', 'Compaq-Pe', 'IPX-in-IP', 'VRRP', 'PGM', 'Any-0-Hop-Protocol', 'ENCAP', 'DDX', 'IATP', 'STP', 'SRP', 'UTI', 'SMP', 'SM', 'PTP', 'FIRE', 'CRTP', 'CRUDP', 'SSCOPMCE', 'IPLT', 'SPS', 'PIPE', 'SCTP', 'FC', 'RSVP-E2E-IGNORE', 'Mobility-Header', 'UDPLite')]
        [string]$protocol ,

        [ValidateRange(1, 255)]
        [double]$protocolnumber ,

        [ValidateRange(1, 4094)]
        [double]$vlan ,

        [ValidateRange(1, 16777215)]
        [double]$vxlan ,

        [string]$Interface ,

        [boolean]$established ,

        [ValidateRange(0, 65536)]
        [double]$icmptype ,

        [ValidateRange(0, 65536)]
        [double]$icmpcode ,

        [ValidateRange(1, 81920)]
        [double]$priority ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$state = 'ENABLED' ,

        [ValidateSet('CLASSIC', 'DFD')]
        [string]$type = 'CLASSIC' ,

        [ValidateSet('SIP-SPORT-DIP-DPORT', 'SIP', 'DIP', 'SIP-DIP', 'SIP-SPORT', 'DIP-DPORT')]
        [string]$dfdhash ,

        [ValidateRange(1, 128)]
        [double]$dfdprefix = '128' ,

        [ValidateSet('YES', 'NO')]
        [string]$stateful = 'NO' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$logstate = 'DISABLED' ,

        [ValidateRange(1, 10000)]
        [double]$ratelimit = '100' ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddNsacl6: Starting"
    }
    process {
        try {
            $Payload = @{
                acl6name = $acl6name
                acl6action = $acl6action
            }
            if ($PSBoundParameters.ContainsKey('td')) { $Payload.Add('td', $td) }
            if ($PSBoundParameters.ContainsKey('srcipv6')) { $Payload.Add('srcipv6', $srcipv6) }
            if ($PSBoundParameters.ContainsKey('srcipop')) { $Payload.Add('srcipop', $srcipop) }
            if ($PSBoundParameters.ContainsKey('srcipv6val')) { $Payload.Add('srcipv6val', $srcipv6val) }
            if ($PSBoundParameters.ContainsKey('srcport')) { $Payload.Add('srcport', $srcport) }
            if ($PSBoundParameters.ContainsKey('srcportop')) { $Payload.Add('srcportop', $srcportop) }
            if ($PSBoundParameters.ContainsKey('srcportval')) { $Payload.Add('srcportval', $srcportval) }
            if ($PSBoundParameters.ContainsKey('destipv6')) { $Payload.Add('destipv6', $destipv6) }
            if ($PSBoundParameters.ContainsKey('destipop')) { $Payload.Add('destipop', $destipop) }
            if ($PSBoundParameters.ContainsKey('destipv6val')) { $Payload.Add('destipv6val', $destipv6val) }
            if ($PSBoundParameters.ContainsKey('destport')) { $Payload.Add('destport', $destport) }
            if ($PSBoundParameters.ContainsKey('destportop')) { $Payload.Add('destportop', $destportop) }
            if ($PSBoundParameters.ContainsKey('destportval')) { $Payload.Add('destportval', $destportval) }
            if ($PSBoundParameters.ContainsKey('ttl')) { $Payload.Add('ttl', $ttl) }
            if ($PSBoundParameters.ContainsKey('srcmac')) { $Payload.Add('srcmac', $srcmac) }
            if ($PSBoundParameters.ContainsKey('srcmacmask')) { $Payload.Add('srcmacmask', $srcmacmask) }
            if ($PSBoundParameters.ContainsKey('protocol')) { $Payload.Add('protocol', $protocol) }
            if ($PSBoundParameters.ContainsKey('protocolnumber')) { $Payload.Add('protocolnumber', $protocolnumber) }
            if ($PSBoundParameters.ContainsKey('vlan')) { $Payload.Add('vlan', $vlan) }
            if ($PSBoundParameters.ContainsKey('vxlan')) { $Payload.Add('vxlan', $vxlan) }
            if ($PSBoundParameters.ContainsKey('Interface')) { $Payload.Add('Interface', $Interface) }
            if ($PSBoundParameters.ContainsKey('established')) { $Payload.Add('established', $established) }
            if ($PSBoundParameters.ContainsKey('icmptype')) { $Payload.Add('icmptype', $icmptype) }
            if ($PSBoundParameters.ContainsKey('icmpcode')) { $Payload.Add('icmpcode', $icmpcode) }
            if ($PSBoundParameters.ContainsKey('priority')) { $Payload.Add('priority', $priority) }
            if ($PSBoundParameters.ContainsKey('state')) { $Payload.Add('state', $state) }
            if ($PSBoundParameters.ContainsKey('type')) { $Payload.Add('type', $type) }
            if ($PSBoundParameters.ContainsKey('dfdhash')) { $Payload.Add('dfdhash', $dfdhash) }
            if ($PSBoundParameters.ContainsKey('dfdprefix')) { $Payload.Add('dfdprefix', $dfdprefix) }
            if ($PSBoundParameters.ContainsKey('stateful')) { $Payload.Add('stateful', $stateful) }
            if ($PSBoundParameters.ContainsKey('logstate')) { $Payload.Add('logstate', $logstate) }
            if ($PSBoundParameters.ContainsKey('ratelimit')) { $Payload.Add('ratelimit', $ratelimit) }
 
            if ($PSCmdlet.ShouldProcess("nsacl6", "Add NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nsacl6 -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetNsacl6 -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddNsacl6: Finished"
    }
}

function Invoke-ADCDeleteNsacl6 {
<#
    .SYNOPSIS
        Delete NS configuration Object
    .DESCRIPTION
        Delete NS configuration Object
    .PARAMETER acl6name 
       Name for the ACL6 rule. Must begin with an ASCII alphabetic or underscore (_) character, and must contain only ASCII alphanumeric, underscore, hash (#), period (.), space, colon (:), at (@), equals (=), and hyphen (-) characters.  
       Minimum length = 1 
    .EXAMPLE
        Invoke-ADCDeleteNsacl6 -acl6name <string>
    .NOTES
        File Name : Invoke-ADCDeleteNsacl6
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsacl6/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$acl6name 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteNsacl6: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }

            if ($PSCmdlet.ShouldProcess("$acl6name", "Delete NS configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type nsacl6 -Resource $acl6name -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteNsacl6: Finished"
    }
}

function Invoke-ADCUpdateNsacl6 {
<#
    .SYNOPSIS
        Update NS configuration Object
    .DESCRIPTION
        Update NS configuration Object 
    .PARAMETER acl6name 
        Name for the ACL6 rule. Must begin with an ASCII alphabetic or underscore (_) character, and must contain only ASCII alphanumeric, underscore, hash (#), period (.), space, colon (:), at (@), equals (=), and hyphen (-) characters.  
        Minimum length = 1 
    .PARAMETER aclaction 
        Action associated with the ACL6.  
        Possible values = BRIDGE, DENY, ALLOW 
    .PARAMETER srcipv6 
        IP address or range of IP addresses to match against the source IP address of an incoming IPv6 packet. In the command line interface, separate the range with a hyphen. 
    .PARAMETER srcipop 
        Either the equals (=) or does not equal (!=) logical operator.  
        Possible values = =, !=, EQ, NEQ 
    .PARAMETER srcipv6val 
        Source IPv6 address (range). 
    .PARAMETER srcport 
        Port number or range of port numbers to match against the source port number of an incoming IPv6 packet. In the command line interface, separate the range with a hyphen. For example: 40-90.  
        Note: The destination port can be specified only for TCP and UDP protocols. 
    .PARAMETER srcportop 
        Either the equals (=) or does not equal (!=) logical operator.  
        Possible values = =, !=, EQ, NEQ 
    .PARAMETER srcportval 
        Source port (range).  
        Maximum length = 65535 
    .PARAMETER destipv6 
        IP address or range of IP addresses to match against the destination IP address of an incoming IPv6 packet. In the command line interface, separate the range with a hyphen. 
    .PARAMETER destipop 
        Either the equals (=) or does not equal (!=) logical operator.  
        Possible values = =, !=, EQ, NEQ 
    .PARAMETER destipv6val 
        Destination IPv6 address (range). 
    .PARAMETER destport 
        Port number or range of port numbers to match against the destination port number of an incoming IPv6 packet. In the command line interface, separate the range with a hyphen. For example: 40-90.  
        Note: The destination port can be specified only for TCP and UDP protocols. 
    .PARAMETER destportop 
        Either the equals (=) or does not equal (!=) logical operator.  
        Possible values = =, !=, EQ, NEQ 
    .PARAMETER destportval 
        Destination port (range).  
        Maximum length = 65535 
    .PARAMETER srcmac 
        MAC address to match against the source MAC address of an incoming IPv6 packet. 
    .PARAMETER srcmacmask 
        Used to define range of Source MAC address. It takes string of 0 and 1, 0s are for exact match and 1s for wildcard. For matching first 3 bytes of MAC address, srcMacMask value "000000111111". .  
        Default value: "000000000000" 
    .PARAMETER protocol 
        Protocol, identified by protocol name, to match against the protocol of an incoming IPv6 packet.  
        Possible values = ICMPV6, TCP, UDP, ICMP, IGMP, EGP, IGP, ARGUS, RDP, RSVP, EIGRP, L2TP, ISIS, GGP, IPoverIP, ST, CBT, BBN-RCC-M, NVP-II, PUP, EMCON, XNET, CHAOS, MUX, DCN-MEAS, HMP, PRM, XNS-IDP, TRUNK-1, TRUNK-2, LEAF-1, LEAF-2, IRTP, ISO-TP4, NETBLT, MFE-NSP, MERIT-INP, SEP, 3PC, IDPR, XTP, DDP, IDPR-CMTP, TP++, IL, IPv6, SDRP, IPv6-Route, IPv6-Frag, IDRP, GRE, MHRP, BNA, ESP, AH, I-NLSP, SWIPE, NARP, MOBILE, TLSP, SKIP, IPv6-NoNx, IPv6-Opts, Any-Host-Internal-Protocol, CFTP, Any-Local-Network, SAT-EXPAK, KRYPTOLAN, RVD, IPPC, Any-Distributed-File-System, TFTP, VISA, IPCV, CPNX, CPHB, WSN, PVP, BR-SAT-MO, SUN-ND, WB-MON, WB-EXPAK, ISO-IP, VMTP, SECURE-VM, VINES, TTP, NSFNET-IG, DGP, TCF, OSPFIGP, Sprite-RP, LARP, MTP, AX.25, IPIP, MICP, SCC-SP, ETHERIP, Any-Private-Encryption-Scheme, GMTP, IFMP, PNNI, PIM, ARIS, SCPS, QNX, A/N, IPComp, SNP, Compaq-Pe, IPX-in-IP, VRRP, PGM, Any-0-Hop-Protocol, ENCAP, DDX, IATP, STP, SRP, UTI, SMP, SM, PTP, FIRE, CRTP, CRUDP, SSCOPMCE, IPLT, SPS, PIPE, SCTP, FC, RSVP-E2E-IGNORE, Mobility-Header, UDPLite 
    .PARAMETER protocolnumber 
        Protocol, identified by protocol number, to match against the protocol of an incoming IPv6 packet.  
        Minimum value = 1  
        Maximum value = 255 
    .PARAMETER icmptype 
        ICMP Message type to match against the message type of an incoming IPv6 ICMP packet. For example, to block DESTINATION UNREACHABLE messages, you must specify 3 as the ICMP type.  
        Note: This parameter can be specified only for the ICMP protocol.  
        Minimum value = 0  
        Maximum value = 65536 
    .PARAMETER icmpcode 
        Code of a particular ICMP message type to match against the ICMP code of an incoming IPv6 ICMP packet. For example, to block DESTINATION HOST UNREACHABLE messages, specify 3 as the ICMP type and 1 as the ICMP code.  
        If you set this parameter, you must set the ICMP Type parameter.  
        Minimum value = 0  
        Maximum value = 65536 
    .PARAMETER vlan 
        ID of the VLAN. The Citrix ADC applies the ACL6 rule only to the incoming packets on the specified VLAN. If you do not specify a VLAN ID, the appliance applies the ACL6 rule to the incoming packets on all VLANs.  
        Minimum value = 1  
        Maximum value = 4094 
    .PARAMETER vxlan 
        ID of the VXLAN. The Citrix ADC applies the ACL6 rule only to the incoming packets on the specified VXLAN. If you do not specify a VXLAN ID, the appliance applies the ACL6 rule to the incoming packets on all VXLANs.  
        Minimum value = 1  
        Maximum value = 16777215 
    .PARAMETER Interface 
        ID of an interface. The Citrix ADC applies the ACL6 rule only to the incoming packets from the specified interface. If you do not specify any value, the appliance applies the ACL6 rule to the incoming packets from all interfaces. 
    .PARAMETER priority 
        Priority for the ACL6 rule, which determines the order in which it is evaluated relative to the other ACL6 rules. If you do not specify priorities while creating ACL6 rules, the ACL6 rules are evaluated in the order in which they are created.  
        Minimum value = 1  
        Maximum value = 81920 
    .PARAMETER logstate 
        Enable or disable logging of events related to the ACL6 rule. The log messages are stored in the configured syslog or auditlog server.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER ratelimit 
        Maximum number of log messages to be generated per second. If you set this parameter, you must enable the Log State parameter.  
        Default value: 100  
        Minimum value = 1  
        Maximum value = 10000 
    .PARAMETER established 
        Allow only incoming TCP packets that have the ACK or RST bit set if the action set for the ACL6 rule is ALLOW and these packets match the other conditions in the ACL6 rule. 
    .PARAMETER dfdhash 
        Specifies the type of hashmethod to be applied, to steer the packet to the FP of the packet.  
        Possible values = SIP-SPORT-DIP-DPORT, SIP, DIP, SIP-DIP, SIP-SPORT, DIP-DPORT 
    .PARAMETER dfdprefix 
        hashprefix to be applied to SIP/DIP to generate rsshash FP.eg 128 => hash calculated on the complete IP.  
        Default value: 128  
        Minimum value = 1  
        Maximum value = 128 
    .PARAMETER stateful 
        If stateful option is enabled, transparent sessions are created for the traffic hitting this ACL6 and not hitting any other features like LB, INAT etc. .  
        Default value: NO  
        Possible values = YES, NO 
    .PARAMETER PassThru 
        Return details about the created nsacl6 item.
    .EXAMPLE
        Invoke-ADCUpdateNsacl6 -acl6name <string>
    .NOTES
        File Name : Invoke-ADCUpdateNsacl6
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsacl6/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [ValidatePattern('^(([a-zA-Z0-9]|[_])+([a-zA-Z0-9]|[_])+)$')]
        [string]$acl6name ,

        [ValidateSet('BRIDGE', 'DENY', 'ALLOW')]
        [string]$aclaction ,

        [boolean]$srcipv6 ,

        [ValidateSet('=', '!=', 'EQ', 'NEQ')]
        [string]$srcipop ,

        [string]$srcipv6val ,

        [ValidateRange(40, 90)]
        [boolean]$srcport ,

        [ValidateSet('=', '!=', 'EQ', 'NEQ')]
        [string]$srcportop ,

        [string]$srcportval ,

        [boolean]$destipv6 ,

        [ValidateSet('=', '!=', 'EQ', 'NEQ')]
        [string]$destipop ,

        [string]$destipv6val ,

        [ValidateRange(40, 90)]
        [boolean]$destport ,

        [ValidateSet('=', '!=', 'EQ', 'NEQ')]
        [string]$destportop ,

        [string]$destportval ,

        [string]$srcmac ,

        [string]$srcmacmask ,

        [ValidateSet('ICMPV6', 'TCP', 'UDP', 'ICMP', 'IGMP', 'EGP', 'IGP', 'ARGUS', 'RDP', 'RSVP', 'EIGRP', 'L2TP', 'ISIS', 'GGP', 'IPoverIP', 'ST', 'CBT', 'BBN-RCC-M', 'NVP-II', 'PUP', 'EMCON', 'XNET', 'CHAOS', 'MUX', 'DCN-MEAS', 'HMP', 'PRM', 'XNS-IDP', 'TRUNK-1', 'TRUNK-2', 'LEAF-1', 'LEAF-2', 'IRTP', 'ISO-TP4', 'NETBLT', 'MFE-NSP', 'MERIT-INP', 'SEP', '3PC', 'IDPR', 'XTP', 'DDP', 'IDPR-CMTP', 'TP++', 'IL', 'IPv6', 'SDRP', 'IPv6-Route', 'IPv6-Frag', 'IDRP', 'GRE', 'MHRP', 'BNA', 'ESP', 'AH', 'I-NLSP', 'SWIPE', 'NARP', 'MOBILE', 'TLSP', 'SKIP', 'IPv6-NoNx', 'IPv6-Opts', 'Any-Host-Internal-Protocol', 'CFTP', 'Any-Local-Network', 'SAT-EXPAK', 'KRYPTOLAN', 'RVD', 'IPPC', 'Any-Distributed-File-System', 'TFTP', 'VISA', 'IPCV', 'CPNX', 'CPHB', 'WSN', 'PVP', 'BR-SAT-MO', 'SUN-ND', 'WB-MON', 'WB-EXPAK', 'ISO-IP', 'VMTP', 'SECURE-VM', 'VINES', 'TTP', 'NSFNET-IG', 'DGP', 'TCF', 'OSPFIGP', 'Sprite-RP', 'LARP', 'MTP', 'AX.25', 'IPIP', 'MICP', 'SCC-SP', 'ETHERIP', 'Any-Private-Encryption-Scheme', 'GMTP', 'IFMP', 'PNNI', 'PIM', 'ARIS', 'SCPS', 'QNX', 'A/N', 'IPComp', 'SNP', 'Compaq-Pe', 'IPX-in-IP', 'VRRP', 'PGM', 'Any-0-Hop-Protocol', 'ENCAP', 'DDX', 'IATP', 'STP', 'SRP', 'UTI', 'SMP', 'SM', 'PTP', 'FIRE', 'CRTP', 'CRUDP', 'SSCOPMCE', 'IPLT', 'SPS', 'PIPE', 'SCTP', 'FC', 'RSVP-E2E-IGNORE', 'Mobility-Header', 'UDPLite')]
        [string]$protocol ,

        [ValidateRange(1, 255)]
        [double]$protocolnumber ,

        [ValidateRange(0, 65536)]
        [double]$icmptype ,

        [ValidateRange(0, 65536)]
        [double]$icmpcode ,

        [ValidateRange(1, 4094)]
        [double]$vlan ,

        [ValidateRange(1, 16777215)]
        [double]$vxlan ,

        [string]$Interface ,

        [ValidateRange(1, 81920)]
        [double]$priority ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$logstate ,

        [ValidateRange(1, 10000)]
        [double]$ratelimit ,

        [boolean]$established ,

        [ValidateSet('SIP-SPORT-DIP-DPORT', 'SIP', 'DIP', 'SIP-DIP', 'SIP-SPORT', 'DIP-DPORT')]
        [string]$dfdhash ,

        [ValidateRange(1, 128)]
        [double]$dfdprefix ,

        [ValidateSet('YES', 'NO')]
        [string]$stateful ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCUpdateNsacl6: Starting"
    }
    process {
        try {
            $Payload = @{
                acl6name = $acl6name
            }
            if ($PSBoundParameters.ContainsKey('aclaction')) { $Payload.Add('aclaction', $aclaction) }
            if ($PSBoundParameters.ContainsKey('srcipv6')) { $Payload.Add('srcipv6', $srcipv6) }
            if ($PSBoundParameters.ContainsKey('srcipop')) { $Payload.Add('srcipop', $srcipop) }
            if ($PSBoundParameters.ContainsKey('srcipv6val')) { $Payload.Add('srcipv6val', $srcipv6val) }
            if ($PSBoundParameters.ContainsKey('srcport')) { $Payload.Add('srcport', $srcport) }
            if ($PSBoundParameters.ContainsKey('srcportop')) { $Payload.Add('srcportop', $srcportop) }
            if ($PSBoundParameters.ContainsKey('srcportval')) { $Payload.Add('srcportval', $srcportval) }
            if ($PSBoundParameters.ContainsKey('destipv6')) { $Payload.Add('destipv6', $destipv6) }
            if ($PSBoundParameters.ContainsKey('destipop')) { $Payload.Add('destipop', $destipop) }
            if ($PSBoundParameters.ContainsKey('destipv6val')) { $Payload.Add('destipv6val', $destipv6val) }
            if ($PSBoundParameters.ContainsKey('destport')) { $Payload.Add('destport', $destport) }
            if ($PSBoundParameters.ContainsKey('destportop')) { $Payload.Add('destportop', $destportop) }
            if ($PSBoundParameters.ContainsKey('destportval')) { $Payload.Add('destportval', $destportval) }
            if ($PSBoundParameters.ContainsKey('srcmac')) { $Payload.Add('srcmac', $srcmac) }
            if ($PSBoundParameters.ContainsKey('srcmacmask')) { $Payload.Add('srcmacmask', $srcmacmask) }
            if ($PSBoundParameters.ContainsKey('protocol')) { $Payload.Add('protocol', $protocol) }
            if ($PSBoundParameters.ContainsKey('protocolnumber')) { $Payload.Add('protocolnumber', $protocolnumber) }
            if ($PSBoundParameters.ContainsKey('icmptype')) { $Payload.Add('icmptype', $icmptype) }
            if ($PSBoundParameters.ContainsKey('icmpcode')) { $Payload.Add('icmpcode', $icmpcode) }
            if ($PSBoundParameters.ContainsKey('vlan')) { $Payload.Add('vlan', $vlan) }
            if ($PSBoundParameters.ContainsKey('vxlan')) { $Payload.Add('vxlan', $vxlan) }
            if ($PSBoundParameters.ContainsKey('Interface')) { $Payload.Add('Interface', $Interface) }
            if ($PSBoundParameters.ContainsKey('priority')) { $Payload.Add('priority', $priority) }
            if ($PSBoundParameters.ContainsKey('logstate')) { $Payload.Add('logstate', $logstate) }
            if ($PSBoundParameters.ContainsKey('ratelimit')) { $Payload.Add('ratelimit', $ratelimit) }
            if ($PSBoundParameters.ContainsKey('established')) { $Payload.Add('established', $established) }
            if ($PSBoundParameters.ContainsKey('dfdhash')) { $Payload.Add('dfdhash', $dfdhash) }
            if ($PSBoundParameters.ContainsKey('dfdprefix')) { $Payload.Add('dfdprefix', $dfdprefix) }
            if ($PSBoundParameters.ContainsKey('stateful')) { $Payload.Add('stateful', $stateful) }
 
            if ($PSCmdlet.ShouldProcess("nsacl6", "Update NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -Type nsacl6 -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetNsacl6 -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUpdateNsacl6: Finished"
    }
}

function Invoke-ADCUnsetNsacl6 {
<#
    .SYNOPSIS
        Unset NS configuration Object
    .DESCRIPTION
        Unset NS configuration Object 
   .PARAMETER acl6name 
       Name for the ACL6 rule. Must begin with an ASCII alphabetic or underscore (_) character, and must contain only ASCII alphanumeric, underscore, hash (#), period (.), space, colon (:), at (@), equals (=), and hyphen (-) characters. 
   .PARAMETER srcipv6 
       IP address or range of IP addresses to match against the source IP address of an incoming IPv6 packet. In the command line interface, separate the range with a hyphen. 
   .PARAMETER srcport 
       Port number or .  
       Note: The destination port can be specified only for TCP and UDP protocols. 
   .PARAMETER destipv6 
       IP address or range of IP addresses to match against the destination IP address of an incoming IPv6 packet. In the command line interface, separate the range with a hyphen. 
   .PARAMETER destport 
       Port number or .  
       Note: The destination port can be specified only for TCP and UDP protocols. 
   .PARAMETER srcmac 
       MAC address to match against the source MAC address of an incoming IPv6 packet. 
   .PARAMETER srcmacmask 
       Used to define range of Source MAC address. It takes string of 0 and 1, 0s are for exact match and 1s for wildcard. For matching first 3 bytes of MAC address, srcMacMask value "000000111111". . 
   .PARAMETER protocol 
       Protocol, identified by protocol name, to match against the protocol of an incoming IPv6 packet.  
       Possible values = ICMPV6, TCP, UDP, ICMP, IGMP, EGP, IGP, ARGUS, RDP, RSVP, EIGRP, L2TP, ISIS, GGP, IPoverIP, ST, CBT, BBN-RCC-M, NVP-II, PUP, EMCON, XNET, CHAOS, MUX, DCN-MEAS, HMP, PRM, XNS-IDP, TRUNK-1, TRUNK-2, LEAF-1, LEAF-2, IRTP, ISO-TP4, NETBLT, MFE-NSP, MERIT-INP, SEP, 3PC, IDPR, XTP, DDP, IDPR-CMTP, TP++, IL, IPv6, SDRP, IPv6-Route, IPv6-Frag, IDRP, GRE, MHRP, BNA, ESP, AH, I-NLSP, SWIPE, NARP, MOBILE, TLSP, SKIP, IPv6-NoNx, IPv6-Opts, Any-Host-Internal-Protocol, CFTP, Any-Local-Network, SAT-EXPAK, KRYPTOLAN, RVD, IPPC, Any-Distributed-File-System, TFTP, VISA, IPCV, CPNX, CPHB, WSN, PVP, BR-SAT-MO, SUN-ND, WB-MON, WB-EXPAK, ISO-IP, VMTP, SECURE-VM, VINES, TTP, NSFNET-IG, DGP, TCF, OSPFIGP, Sprite-RP, LARP, MTP, AX.25, IPIP, MICP, SCC-SP, ETHERIP, Any-Private-Encryption-Scheme, GMTP, IFMP, PNNI, PIM, ARIS, SCPS, QNX, A/N, IPComp, SNP, Compaq-Pe, IPX-in-IP, VRRP, PGM, Any-0-Hop-Protocol, ENCAP, DDX, IATP, STP, SRP, UTI, SMP, SM, PTP, FIRE, CRTP, CRUDP, SSCOPMCE, IPLT, SPS, PIPE, SCTP, FC, RSVP-E2E-IGNORE, Mobility-Header, UDPLite 
   .PARAMETER icmptype 
       ICMP Message type to match against the message type of an incoming IPv6 ICMP packet. For example, to block DESTINATION UNREACHABLE messages, you must specify 3 as the ICMP type.  
       Note: This parameter can be specified only for the ICMP protocol. 
   .PARAMETER icmpcode 
       Code of a particular ICMP message type to match against the ICMP code of an incoming IPv6 ICMP packet. For example, to block DESTINATION HOST UNREACHABLE messages, specify 3 as the ICMP type and 1 as the ICMP code.  
       If you set this parameter, you must set the ICMP Type parameter. 
   .PARAMETER vlan 
       ID of the VLAN. The Citrix ADC applies the ACL6 rule only to the incoming packets on the specified VLAN. If you do not specify a VLAN ID, the appliance applies the ACL6 rule to the incoming packets on all VLANs. 
   .PARAMETER vxlan 
       ID of the VXLAN. The Citrix ADC applies the ACL6 rule only to the incoming packets on the specified VXLAN. If you do not specify a VXLAN ID, the appliance applies the ACL6 rule to the incoming packets on all VXLANs. 
   .PARAMETER Interface 
       ID of an interface. The Citrix ADC applies the ACL6 rule only to the incoming packets from the specified interface. If you do not specify any value, the appliance applies the ACL6 rule to the incoming packets from all interfaces. 
   .PARAMETER logstate 
       Enable or disable logging of events related to the ACL6 rule. The log messages are stored in the configured syslog or auditlog server.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER ratelimit 
       Maximum number of log messages to be generated per second. If you set this parameter, you must enable the Log State parameter. 
   .PARAMETER established 
       Allow only incoming TCP packets that have the ACK or RST bit set if the action set for the ACL6 rule is ALLOW and these packets match the other conditions in the ACL6 rule. 
   .PARAMETER stateful 
       If stateful option is enabled, transparent sessions are created for the traffic hitting this ACL6 and not hitting any other features like LB, INAT etc. .  
       Possible values = YES, NO 
   .PARAMETER dfdhash 
       Specifies the type of hashmethod to be applied, to steer the packet to the FP of the packet.  
       Possible values = SIP-SPORT-DIP-DPORT, SIP, DIP, SIP-DIP, SIP-SPORT, DIP-DPORT 
   .PARAMETER dfdprefix 
       hashprefix to be applied to SIP/DIP to generate rsshash FP.eg 128 => hash calculated on the complete IP.
    .EXAMPLE
        Invoke-ADCUnsetNsacl6 -acl6name <string>
    .NOTES
        File Name : Invoke-ADCUnsetNsacl6
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsacl6
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [ValidatePattern('^(([a-zA-Z0-9]|[_])+([a-zA-Z0-9]|[_])+)$')]
        [string]$acl6name ,

        [Boolean]$srcipv6 ,

        [Boolean]$srcport ,

        [Boolean]$destipv6 ,

        [Boolean]$destport ,

        [Boolean]$srcmac ,

        [Boolean]$srcmacmask ,

        [Boolean]$protocol ,

        [Boolean]$icmptype ,

        [Boolean]$icmpcode ,

        [Boolean]$vlan ,

        [Boolean]$vxlan ,

        [Boolean]$Interface ,

        [Boolean]$logstate ,

        [Boolean]$ratelimit ,

        [Boolean]$established ,

        [Boolean]$stateful ,

        [Boolean]$dfdhash ,

        [Boolean]$dfdprefix 
    )
    begin {
        Write-Verbose "Invoke-ADCUnsetNsacl6: Starting"
    }
    process {
        try {
            $Payload = @{
                acl6name = $acl6name
            }
            if ($PSBoundParameters.ContainsKey('srcipv6')) { $Payload.Add('srcipv6', $srcipv6) }
            if ($PSBoundParameters.ContainsKey('srcport')) { $Payload.Add('srcport', $srcport) }
            if ($PSBoundParameters.ContainsKey('destipv6')) { $Payload.Add('destipv6', $destipv6) }
            if ($PSBoundParameters.ContainsKey('destport')) { $Payload.Add('destport', $destport) }
            if ($PSBoundParameters.ContainsKey('srcmac')) { $Payload.Add('srcmac', $srcmac) }
            if ($PSBoundParameters.ContainsKey('srcmacmask')) { $Payload.Add('srcmacmask', $srcmacmask) }
            if ($PSBoundParameters.ContainsKey('protocol')) { $Payload.Add('protocol', $protocol) }
            if ($PSBoundParameters.ContainsKey('icmptype')) { $Payload.Add('icmptype', $icmptype) }
            if ($PSBoundParameters.ContainsKey('icmpcode')) { $Payload.Add('icmpcode', $icmpcode) }
            if ($PSBoundParameters.ContainsKey('vlan')) { $Payload.Add('vlan', $vlan) }
            if ($PSBoundParameters.ContainsKey('vxlan')) { $Payload.Add('vxlan', $vxlan) }
            if ($PSBoundParameters.ContainsKey('Interface')) { $Payload.Add('Interface', $Interface) }
            if ($PSBoundParameters.ContainsKey('logstate')) { $Payload.Add('logstate', $logstate) }
            if ($PSBoundParameters.ContainsKey('ratelimit')) { $Payload.Add('ratelimit', $ratelimit) }
            if ($PSBoundParameters.ContainsKey('established')) { $Payload.Add('established', $established) }
            if ($PSBoundParameters.ContainsKey('stateful')) { $Payload.Add('stateful', $stateful) }
            if ($PSBoundParameters.ContainsKey('dfdhash')) { $Payload.Add('dfdhash', $dfdhash) }
            if ($PSBoundParameters.ContainsKey('dfdprefix')) { $Payload.Add('dfdprefix', $dfdprefix) }
            if ($PSCmdlet.ShouldProcess("$acl6name", "Unset NS configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nsacl6 -Action unset -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUnsetNsacl6: Finished"
    }
}

function Invoke-ADCEnableNsacl6 {
<#
    .SYNOPSIS
        Enable NS configuration Object
    .DESCRIPTION
        Enable NS configuration Object 
    .PARAMETER acl6name 
        Name for the ACL6 rule. Must begin with an ASCII alphabetic or underscore (_) character, and must contain only ASCII alphanumeric, underscore, hash (#), period (.), space, colon (:), at (@), equals (=), and hyphen (-) characters.
    .EXAMPLE
        Invoke-ADCEnableNsacl6 -acl6name <string>
    .NOTES
        File Name : Invoke-ADCEnableNsacl6
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsacl6/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [ValidatePattern('^(([a-zA-Z0-9]|[_])+([a-zA-Z0-9]|[_])+)$')]
        [string]$acl6name 

    )
    begin {
        Write-Verbose "Invoke-ADCEnableNsacl6: Starting"
    }
    process {
        try {
            $Payload = @{
                acl6name = $acl6name
            }

            if ($PSCmdlet.ShouldProcess($Name, "Enable NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nsacl6 -Action enable -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $result
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCEnableNsacl6: Finished"
    }
}

function Invoke-ADCDisableNsacl6 {
<#
    .SYNOPSIS
        Disable NS configuration Object
    .DESCRIPTION
        Disable NS configuration Object 
    .PARAMETER acl6name 
        Name for the ACL6 rule. Must begin with an ASCII alphabetic or underscore (_) character, and must contain only ASCII alphanumeric, underscore, hash (#), period (.), space, colon (:), at (@), equals (=), and hyphen (-) characters.
    .EXAMPLE
        Invoke-ADCDisableNsacl6 -acl6name <string>
    .NOTES
        File Name : Invoke-ADCDisableNsacl6
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsacl6/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [ValidatePattern('^(([a-zA-Z0-9]|[_])+([a-zA-Z0-9]|[_])+)$')]
        [string]$acl6name 

    )
    begin {
        Write-Verbose "Invoke-ADCDisableNsacl6: Starting"
    }
    process {
        try {
            $Payload = @{
                acl6name = $acl6name
            }

            if ($PSCmdlet.ShouldProcess($Name, "Disable NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nsacl6 -Action disable -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $result
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDisableNsacl6: Finished"
    }
}

function Invoke-ADCRenameNsacl6 {
<#
    .SYNOPSIS
        Rename NS configuration Object
    .DESCRIPTION
        Rename NS configuration Object 
    .PARAMETER acl6name 
        Name for the ACL6 rule. Must begin with an ASCII alphabetic or underscore (_) character, and must contain only ASCII alphanumeric, underscore, hash (#), period (.), space, colon (:), at (@), equals (=), and hyphen (-) characters.  
        Minimum length = 1 
    .PARAMETER newname 
        New name for the ACL6 rule. Must begin with an ASCII alphabetic or underscore \(_\) character, and must contain only ASCII alphanumeric, underscore, hash \(\#\), period \(.\), space, colon \(:\), at \(@\), equals \(=\), and hyphen \(-\) characters.  
        Minimum length = 1 
    .PARAMETER PassThru 
        Return details about the created nsacl6 item.
    .EXAMPLE
        Invoke-ADCRenameNsacl6 -acl6name <string> -newname <string>
    .NOTES
        File Name : Invoke-ADCRenameNsacl6
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsacl6/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [ValidatePattern('^(([a-zA-Z0-9]|[_])+([a-zA-Z0-9]|[_])+)$')]
        [string]$acl6name ,

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$newname ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCRenameNsacl6: Starting"
    }
    process {
        try {
            $Payload = @{
                acl6name = $acl6name
                newname = $newname
            }

 
            if ($PSCmdlet.ShouldProcess("nsacl6", "Rename NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nsacl6 -Action rename -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetNsacl6 -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCRenameNsacl6: Finished"
    }
}

function Invoke-ADCGetNsacl6 {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER acl6name 
       Name for the ACL6 rule. Must begin with an ASCII alphabetic or underscore (_) character, and must contain only ASCII alphanumeric, underscore, hash (#), period (.), space, colon (:), at (@), equals (=), and hyphen (-) characters. 
    .PARAMETER GetAll 
        Retreive all nsacl6 object(s)
    .PARAMETER Count
        If specified, the count of the nsacl6 object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNsacl6
    .EXAMPLE 
        Invoke-ADCGetNsacl6 -GetAll 
    .EXAMPLE 
        Invoke-ADCGetNsacl6 -Count
    .EXAMPLE
        Invoke-ADCGetNsacl6 -name <string>
    .EXAMPLE
        Invoke-ADCGetNsacl6 -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNsacl6
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsacl6/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateScript({ $_.Length -gt 1 })]
        [ValidatePattern('^(([a-zA-Z0-9]|[_])+([a-zA-Z0-9]|[_])+)$')]
        [string]$acl6name,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll,

        [Parameter(ParameterSetName = 'GetAll')]
        [Parameter(ParameterSetName = 'Get')]
        [Switch]$ViewSummary

    )
    begin {
        Write-Verbose "Invoke-ADCGetNsacl6: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all nsacl6 objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsacl6 -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nsacl6 objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsacl6 -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nsacl6 objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsacl6 -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nsacl6 configuration for property 'acl6name'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsacl6 -Resource $acl6name -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving nsacl6 configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsacl6 -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNsacl6: Ended"
    }
}

function Invoke-ADCRenumberNsacls {
<#
    .SYNOPSIS
        Renumber NS configuration Object
    .DESCRIPTION
        Renumber NS configuration Object 
    .PARAMETER type 
        Type of the acl ,default will be CLASSIC.  
        Available options as follows:  
        * CLASSIC - specifies the regular extended acls.  
        * DFD - cluster specific acls,specifies hashmethod for steering of the packet in cluster .  
        Possible values = CLASSIC, DFD
    .EXAMPLE
        Invoke-ADCRenumberNsacls 
    .NOTES
        File Name : Invoke-ADCRenumberNsacls
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsacls/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [ValidateSet('CLASSIC', 'DFD')]
        [string]$type 

    )
    begin {
        Write-Verbose "Invoke-ADCRenumberNsacls: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('type')) { $Payload.Add('type', $type) }
            if ($PSCmdlet.ShouldProcess($Name, "Renumber NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nsacls -Action renumber -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $result
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCRenumberNsacls: Finished"
    }
}

function Invoke-ADCClearNsacls {
<#
    .SYNOPSIS
        Clear NS configuration Object
    .DESCRIPTION
        Clear NS configuration Object 
    .PARAMETER type 
        Type of the acl ,default will be CLASSIC.  
        Available options as follows:  
        * CLASSIC - specifies the regular extended acls.  
        * DFD - cluster specific acls,specifies hashmethod for steering of the packet in cluster .  
        Possible values = CLASSIC, DFD
    .EXAMPLE
        Invoke-ADCClearNsacls 
    .NOTES
        File Name : Invoke-ADCClearNsacls
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsacls/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [ValidateSet('CLASSIC', 'DFD')]
        [string]$type 

    )
    begin {
        Write-Verbose "Invoke-ADCClearNsacls: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('type')) { $Payload.Add('type', $type) }
            if ($PSCmdlet.ShouldProcess($Name, "Clear NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nsacls -Action clear -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $result
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCClearNsacls: Finished"
    }
}

function Invoke-ADCApplyNsacls {
<#
    .SYNOPSIS
        Apply NS configuration Object
    .DESCRIPTION
        Apply NS configuration Object 
    .PARAMETER type 
        Type of the acl ,default will be CLASSIC.  
        Available options as follows:  
        * CLASSIC - specifies the regular extended acls.  
        * DFD - cluster specific acls,specifies hashmethod for steering of the packet in cluster .  
        Possible values = CLASSIC, DFD
    .EXAMPLE
        Invoke-ADCApplyNsacls 
    .NOTES
        File Name : Invoke-ADCApplyNsacls
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsacls/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [ValidateSet('CLASSIC', 'DFD')]
        [string]$type 

    )
    begin {
        Write-Verbose "Invoke-ADCApplyNsacls: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('type')) { $Payload.Add('type', $type) }
            if ($PSCmdlet.ShouldProcess($Name, "Apply NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nsacls -Action apply -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $result
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCApplyNsacls: Finished"
    }
}

function Invoke-ADCClearNsacls6 {
<#
    .SYNOPSIS
        Clear NS configuration Object
    .DESCRIPTION
        Clear NS configuration Object 
    .PARAMETER type 
        Type of the acl ,default will be CLASSIC.  
        Available options as follows:  
        * CLASSIC - specifies the regular extended acls.  
        * DFD - cluster specific acls,specifies hashmethod for steering of the packet in cluster .  
        Possible values = CLASSIC, DFD
    .EXAMPLE
        Invoke-ADCClearNsacls6 
    .NOTES
        File Name : Invoke-ADCClearNsacls6
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsacls6/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [ValidateSet('CLASSIC', 'DFD')]
        [string]$type 

    )
    begin {
        Write-Verbose "Invoke-ADCClearNsacls6: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('type')) { $Payload.Add('type', $type) }
            if ($PSCmdlet.ShouldProcess($Name, "Clear NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nsacls6 -Action clear -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $result
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCClearNsacls6: Finished"
    }
}

function Invoke-ADCApplyNsacls6 {
<#
    .SYNOPSIS
        Apply NS configuration Object
    .DESCRIPTION
        Apply NS configuration Object 
    .PARAMETER type 
        Type of the acl ,default will be CLASSIC.  
        Available options as follows:  
        * CLASSIC - specifies the regular extended acls.  
        * DFD - cluster specific acls,specifies hashmethod for steering of the packet in cluster .  
        Possible values = CLASSIC, DFD
    .EXAMPLE
        Invoke-ADCApplyNsacls6 
    .NOTES
        File Name : Invoke-ADCApplyNsacls6
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsacls6/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [ValidateSet('CLASSIC', 'DFD')]
        [string]$type 

    )
    begin {
        Write-Verbose "Invoke-ADCApplyNsacls6: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('type')) { $Payload.Add('type', $type) }
            if ($PSCmdlet.ShouldProcess($Name, "Apply NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nsacls6 -Action apply -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $result
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCApplyNsacls6: Finished"
    }
}

function Invoke-ADCRenumberNsacls6 {
<#
    .SYNOPSIS
        Renumber NS configuration Object
    .DESCRIPTION
        Renumber NS configuration Object 
    .PARAMETER type 
        Type of the acl ,default will be CLASSIC.  
        Available options as follows:  
        * CLASSIC - specifies the regular extended acls.  
        * DFD - cluster specific acls,specifies hashmethod for steering of the packet in cluster .  
        Possible values = CLASSIC, DFD
    .EXAMPLE
        Invoke-ADCRenumberNsacls6 
    .NOTES
        File Name : Invoke-ADCRenumberNsacls6
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsacls6/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [ValidateSet('CLASSIC', 'DFD')]
        [string]$type 

    )
    begin {
        Write-Verbose "Invoke-ADCRenumberNsacls6: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('type')) { $Payload.Add('type', $type) }
            if ($PSCmdlet.ShouldProcess($Name, "Renumber NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nsacls6 -Action renumber -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $result
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCRenumberNsacls6: Finished"
    }
}

function Invoke-ADCAddNsappflowcollector {
<#
    .SYNOPSIS
        Add NS configuration Object
    .DESCRIPTION
        Add NS configuration Object 
    .PARAMETER name 
        Name of the AppFlow collector.  
        Minimum length = 1  
        Maximum length = 127 
    .PARAMETER ipaddress 
        The IPv4 address of the AppFlow collector. 
    .PARAMETER port 
        The UDP port on which the AppFlow collector is listening.  
        Default value: 4739 
    .PARAMETER PassThru 
        Return details about the created nsappflowcollector item.
    .EXAMPLE
        Invoke-ADCAddNsappflowcollector -name <string> -ipaddress <string>
    .NOTES
        File Name : Invoke-ADCAddNsappflowcollector
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsappflowcollector/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateLength(1, 127)]
        [string]$name ,

        [Parameter(Mandatory = $true)]
        [string]$ipaddress ,

        [int]$port = '4739' ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddNsappflowcollector: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
                ipaddress = $ipaddress
            }
            if ($PSBoundParameters.ContainsKey('port')) { $Payload.Add('port', $port) }
 
            if ($PSCmdlet.ShouldProcess("nsappflowcollector", "Add NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nsappflowcollector -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetNsappflowcollector -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddNsappflowcollector: Finished"
    }
}

function Invoke-ADCDeleteNsappflowcollector {
<#
    .SYNOPSIS
        Delete NS configuration Object
    .DESCRIPTION
        Delete NS configuration Object
    .PARAMETER name 
       Name of the AppFlow collector.  
       Minimum length = 1  
       Maximum length = 127 
    .EXAMPLE
        Invoke-ADCDeleteNsappflowcollector -name <string>
    .NOTES
        File Name : Invoke-ADCDeleteNsappflowcollector
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsappflowcollector/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$name 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteNsappflowcollector: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }

            if ($PSCmdlet.ShouldProcess("$name", "Delete NS configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type nsappflowcollector -Resource $name -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteNsappflowcollector: Finished"
    }
}

function Invoke-ADCGetNsappflowcollector {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER name 
       Name of the AppFlow collector. 
    .PARAMETER GetAll 
        Retreive all nsappflowcollector object(s)
    .PARAMETER Count
        If specified, the count of the nsappflowcollector object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNsappflowcollector
    .EXAMPLE 
        Invoke-ADCGetNsappflowcollector -GetAll 
    .EXAMPLE 
        Invoke-ADCGetNsappflowcollector -Count
    .EXAMPLE
        Invoke-ADCGetNsappflowcollector -name <string>
    .EXAMPLE
        Invoke-ADCGetNsappflowcollector -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNsappflowcollector
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsappflowcollector/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateLength(1, 127)]
        [string]$name,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll,

        [Parameter(ParameterSetName = 'GetAll')]
        [Parameter(ParameterSetName = 'Get')]
        [Switch]$ViewSummary

    )
    begin {
        Write-Verbose "Invoke-ADCGetNsappflowcollector: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all nsappflowcollector objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsappflowcollector -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nsappflowcollector objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsappflowcollector -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nsappflowcollector objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsappflowcollector -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nsappflowcollector configuration for property 'name'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsappflowcollector -Resource $name -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving nsappflowcollector configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsappflowcollector -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNsappflowcollector: Ended"
    }
}

function Invoke-ADCUpdateNsappflowparam {
<#
    .SYNOPSIS
        Update NS configuration Object
    .DESCRIPTION
        Update NS configuration Object 
    .PARAMETER templaterefresh 
        IPFIX template refresh interval (in seconds).  
        Default value: 600  
        Minimum value = 60  
        Maximum value = 3600 
    .PARAMETER udppmtu 
        MTU to be used for IPFIX UDP packets.  
        Default value: 1472  
        Minimum value = 128  
        Maximum value = 1472 
    .PARAMETER httpurl 
        Enable AppFlow HTTP URL logging.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER httpcookie 
        Enable AppFlow HTTP cookie logging.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER httpreferer 
        Enable AppFlow HTTP referer logging.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER httpmethod 
        Enable AppFlow HTTP method logging.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER httphost 
        Enable AppFlow HTTP host logging.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER httpuseragent 
        Enable AppFlow HTTP user-agent logging.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER clienttrafficonly 
        Control whether AppFlow records should be generated only for client-side traffic.  
        Default value: NO  
        Possible values = YES, NO
    .EXAMPLE
        Invoke-ADCUpdateNsappflowparam 
    .NOTES
        File Name : Invoke-ADCUpdateNsappflowparam
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsappflowparam/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [ValidateRange(60, 3600)]
        [double]$templaterefresh ,

        [ValidateRange(128, 1472)]
        [double]$udppmtu ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$httpurl ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$httpcookie ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$httpreferer ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$httpmethod ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$httphost ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$httpuseragent ,

        [ValidateSet('YES', 'NO')]
        [string]$clienttrafficonly 

    )
    begin {
        Write-Verbose "Invoke-ADCUpdateNsappflowparam: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('templaterefresh')) { $Payload.Add('templaterefresh', $templaterefresh) }
            if ($PSBoundParameters.ContainsKey('udppmtu')) { $Payload.Add('udppmtu', $udppmtu) }
            if ($PSBoundParameters.ContainsKey('httpurl')) { $Payload.Add('httpurl', $httpurl) }
            if ($PSBoundParameters.ContainsKey('httpcookie')) { $Payload.Add('httpcookie', $httpcookie) }
            if ($PSBoundParameters.ContainsKey('httpreferer')) { $Payload.Add('httpreferer', $httpreferer) }
            if ($PSBoundParameters.ContainsKey('httpmethod')) { $Payload.Add('httpmethod', $httpmethod) }
            if ($PSBoundParameters.ContainsKey('httphost')) { $Payload.Add('httphost', $httphost) }
            if ($PSBoundParameters.ContainsKey('httpuseragent')) { $Payload.Add('httpuseragent', $httpuseragent) }
            if ($PSBoundParameters.ContainsKey('clienttrafficonly')) { $Payload.Add('clienttrafficonly', $clienttrafficonly) }
 
            if ($PSCmdlet.ShouldProcess("nsappflowparam", "Update NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -Type nsappflowparam -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
            Write-Output $result

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUpdateNsappflowparam: Finished"
    }
}

function Invoke-ADCUnsetNsappflowparam {
<#
    .SYNOPSIS
        Unset NS configuration Object
    .DESCRIPTION
        Unset NS configuration Object 
   .PARAMETER templaterefresh 
       IPFIX template refresh interval (in seconds). 
   .PARAMETER udppmtu 
       MTU to be used for IPFIX UDP packets. 
   .PARAMETER httpurl 
       Enable AppFlow HTTP URL logging.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER httpcookie 
       Enable AppFlow HTTP cookie logging.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER httpreferer 
       Enable AppFlow HTTP referer logging.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER httpmethod 
       Enable AppFlow HTTP method logging.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER httphost 
       Enable AppFlow HTTP host logging.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER httpuseragent 
       Enable AppFlow HTTP user-agent logging.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER clienttrafficonly 
       Control whether AppFlow records should be generated only for client-side traffic.  
       Possible values = YES, NO
    .EXAMPLE
        Invoke-ADCUnsetNsappflowparam 
    .NOTES
        File Name : Invoke-ADCUnsetNsappflowparam
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsappflowparam
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Boolean]$templaterefresh ,

        [Boolean]$udppmtu ,

        [Boolean]$httpurl ,

        [Boolean]$httpcookie ,

        [Boolean]$httpreferer ,

        [Boolean]$httpmethod ,

        [Boolean]$httphost ,

        [Boolean]$httpuseragent ,

        [Boolean]$clienttrafficonly 
    )
    begin {
        Write-Verbose "Invoke-ADCUnsetNsappflowparam: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('templaterefresh')) { $Payload.Add('templaterefresh', $templaterefresh) }
            if ($PSBoundParameters.ContainsKey('udppmtu')) { $Payload.Add('udppmtu', $udppmtu) }
            if ($PSBoundParameters.ContainsKey('httpurl')) { $Payload.Add('httpurl', $httpurl) }
            if ($PSBoundParameters.ContainsKey('httpcookie')) { $Payload.Add('httpcookie', $httpcookie) }
            if ($PSBoundParameters.ContainsKey('httpreferer')) { $Payload.Add('httpreferer', $httpreferer) }
            if ($PSBoundParameters.ContainsKey('httpmethod')) { $Payload.Add('httpmethod', $httpmethod) }
            if ($PSBoundParameters.ContainsKey('httphost')) { $Payload.Add('httphost', $httphost) }
            if ($PSBoundParameters.ContainsKey('httpuseragent')) { $Payload.Add('httpuseragent', $httpuseragent) }
            if ($PSBoundParameters.ContainsKey('clienttrafficonly')) { $Payload.Add('clienttrafficonly', $clienttrafficonly) }
            if ($PSCmdlet.ShouldProcess("nsappflowparam", "Unset NS configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nsappflowparam -Action unset -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUnsetNsappflowparam: Finished"
    }
}

function Invoke-ADCGetNsappflowparam {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER GetAll 
        Retreive all nsappflowparam object(s)
    .PARAMETER Count
        If specified, the count of the nsappflowparam object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNsappflowparam
    .EXAMPLE 
        Invoke-ADCGetNsappflowparam -GetAll
    .EXAMPLE
        Invoke-ADCGetNsappflowparam -name <string>
    .EXAMPLE
        Invoke-ADCGetNsappflowparam -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNsappflowparam
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsappflowparam/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetNsappflowparam: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all nsappflowparam objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsappflowparam -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nsappflowparam objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsappflowparam -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nsappflowparam objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsappflowparam -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nsappflowparam configuration for property ''"

            } else {
                Write-Verbose "Retrieving nsappflowparam configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsappflowparam -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNsappflowparam: Ended"
    }
}

function Invoke-ADCChangeNsaptlicense {
<#
    .SYNOPSIS
        Change NS configuration Object
    .DESCRIPTION
        Change NS configuration Object 
    .PARAMETER id 
        License ID. 
    .PARAMETER sessionid 
        Session ID. 
    .PARAMETER bindtype 
        Bind type. 
    .PARAMETER countavailable 
        The user can allocate one or more licenses. Ensure the value is less than (for partial allocation) or equal to the total number of available licenses. 
    .PARAMETER licensedir 
        License Directory. 
    .PARAMETER useproxy 
        Specifies whether to use the licenseproxyserver to reach the internet. Make sure to configure licenseproxyserver to use this option.  
        Default value: NO  
        Possible values = YES, NO
    .EXAMPLE
        Invoke-ADCChangeNsaptlicense -id <string> -sessionid <string> -bindtype <string> -countavailable <string>
    .NOTES
        File Name : Invoke-ADCChangeNsaptlicense
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsaptlicense/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$id ,

        [Parameter(Mandatory = $true)]
        [string]$sessionid ,

        [Parameter(Mandatory = $true)]
        [string]$bindtype ,

        [Parameter(Mandatory = $true)]
        [string]$countavailable ,

        [string]$licensedir ,

        [ValidateSet('YES', 'NO')]
        [string]$useproxy 

    )
    begin {
        Write-Verbose "Invoke-ADCChangeNsaptlicense: Starting"
    }
    process {
        try {
            $Payload = @{
                id = $id
                sessionid = $sessionid
                bindtype = $bindtype
                countavailable = $countavailable
            }
            if ($PSBoundParameters.ContainsKey('licensedir')) { $Payload.Add('licensedir', $licensedir) }
            if ($PSBoundParameters.ContainsKey('useproxy')) { $Payload.Add('useproxy', $useproxy) }
 
            if ($PSCmdlet.ShouldProcess("nsaptlicense", "Change NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nsaptlicense -Action update -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
            Write-Output $result

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCChangeNsaptlicense: Finished"
    }
}

function Invoke-ADCGetNsaptlicense {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER serialno 
       Hardware Serial Number/License Activation Code(LAC). 
    .PARAMETER useproxy 
       Specifies whether to use the licenseproxyserver to reach the internet. Make sure to configure licenseproxyserver to use this option.  
       Possible values = YES, NO 
    .PARAMETER GetAll 
        Retreive all nsaptlicense object(s)
    .PARAMETER Count
        If specified, the count of the nsaptlicense object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNsaptlicense
    .EXAMPLE 
        Invoke-ADCGetNsaptlicense -GetAll 
    .EXAMPLE 
        Invoke-ADCGetNsaptlicense -Count
    .EXAMPLE
        Invoke-ADCGetNsaptlicense -name <string>
    .EXAMPLE
        Invoke-ADCGetNsaptlicense -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNsaptlicense
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsaptlicense/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByArgument')]
        [string]$serialno ,

        [Parameter(ParameterSetName = 'GetByArgument')]
        [ValidateSet('YES', 'NO')]
        [string]$useproxy,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetNsaptlicense: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all nsaptlicense objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsaptlicense -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nsaptlicense objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsaptlicense -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nsaptlicense objects by arguments"
                $Arguments = @{ } 
                if ($PSBoundParameters.ContainsKey('serialno')) { $Arguments.Add('serialno', $serialno) } 
                if ($PSBoundParameters.ContainsKey('useproxy')) { $Arguments.Add('useproxy', $useproxy) }
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsaptlicense -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nsaptlicense configuration for property ''"

            } else {
                Write-Verbose "Retrieving nsaptlicense configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsaptlicense -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNsaptlicense: Ended"
    }
}

function Invoke-ADCAddNsassignment {
<#
    .SYNOPSIS
        Add NS configuration Object
    .DESCRIPTION
        Add NS configuration Object 
    .PARAMETER name 
        Name for the assignment. Must begin with a letter, number, or the underscore character (_), and must contain only letters, numbers, and the hyphen (-), period (.) hash (#), space ( ), at (@), equals (=), colon (:), and underscore characters. Can be changed after the assignment is added. 
    .PARAMETER variable 
        Left hand side of the assigment, of the form $variable-name (for a singleton variabled) or $variable-name[key-expression], where key-expression is an expression that evaluates to a text string and provides the key to select a map entry. 
    .PARAMETER set 
        Right hand side of the assignment. The expression is evaluated and assigned to the left hand variable. 
    .PARAMETER Add 
        Right hand side of the assignment. The expression is evaluated and added to the left hand variable. 
    .PARAMETER sub 
        Right hand side of the assignment. The expression is evaluated and subtracted from the left hand variable. 
    .PARAMETER append 
        Right hand side of the assignment. The expression is evaluated and appended to the left hand variable. 
    .PARAMETER clear 
        Clear the variable value. Deallocates a text value, and for a map, the text key. 
    .PARAMETER comment 
        Comment. Can be used to preserve information about this rewrite action. 
    .PARAMETER PassThru 
        Return details about the created nsassignment item.
    .EXAMPLE
        Invoke-ADCAddNsassignment -name <string> -variable <string>
    .NOTES
        File Name : Invoke-ADCAddNsassignment
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsassignment/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$name ,

        [Parameter(Mandatory = $true)]
        [string]$variable ,

        [string]$set ,

        [string]$Add ,

        [string]$sub ,

        [string]$append ,

        [boolean]$clear ,

        [string]$comment ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddNsassignment: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
                variable = $variable
            }
            if ($PSBoundParameters.ContainsKey('set')) { $Payload.Add('set', $set) }
            if ($PSBoundParameters.ContainsKey('Add')) { $Payload.Add('Add', $Add) }
            if ($PSBoundParameters.ContainsKey('sub')) { $Payload.Add('sub', $sub) }
            if ($PSBoundParameters.ContainsKey('append')) { $Payload.Add('append', $append) }
            if ($PSBoundParameters.ContainsKey('clear')) { $Payload.Add('clear', $clear) }
            if ($PSBoundParameters.ContainsKey('comment')) { $Payload.Add('comment', $comment) }
 
            if ($PSCmdlet.ShouldProcess("nsassignment", "Add NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nsassignment -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetNsassignment -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddNsassignment: Finished"
    }
}

function Invoke-ADCUpdateNsassignment {
<#
    .SYNOPSIS
        Update NS configuration Object
    .DESCRIPTION
        Update NS configuration Object 
    .PARAMETER name 
        Name for the assignment. Must begin with a letter, number, or the underscore character (_), and must contain only letters, numbers, and the hyphen (-), period (.) hash (#), space ( ), at (@), equals (=), colon (:), and underscore characters. Can be changed after the assignment is added. 
    .PARAMETER variable 
        Left hand side of the assigment, of the form $variable-name (for a singleton variabled) or $variable-name[key-expression], where key-expression is an expression that evaluates to a text string and provides the key to select a map entry. 
    .PARAMETER set 
        Right hand side of the assignment. The expression is evaluated and assigned to the left hand variable. 
    .PARAMETER Add 
        Right hand side of the assignment. The expression is evaluated and added to the left hand variable. 
    .PARAMETER sub 
        Right hand side of the assignment. The expression is evaluated and subtracted from the left hand variable. 
    .PARAMETER append 
        Right hand side of the assignment. The expression is evaluated and appended to the left hand variable. 
    .PARAMETER clear 
        Clear the variable value. Deallocates a text value, and for a map, the text key. 
    .PARAMETER comment 
        Comment. Can be used to preserve information about this rewrite action. 
    .PARAMETER PassThru 
        Return details about the created nsassignment item.
    .EXAMPLE
        Invoke-ADCUpdateNsassignment -name <string>
    .NOTES
        File Name : Invoke-ADCUpdateNsassignment
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsassignment/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$name ,

        [string]$variable ,

        [string]$set ,

        [string]$Add ,

        [string]$sub ,

        [string]$append ,

        [boolean]$clear ,

        [string]$comment ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCUpdateNsassignment: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
            }
            if ($PSBoundParameters.ContainsKey('variable')) { $Payload.Add('variable', $variable) }
            if ($PSBoundParameters.ContainsKey('set')) { $Payload.Add('set', $set) }
            if ($PSBoundParameters.ContainsKey('Add')) { $Payload.Add('Add', $Add) }
            if ($PSBoundParameters.ContainsKey('sub')) { $Payload.Add('sub', $sub) }
            if ($PSBoundParameters.ContainsKey('append')) { $Payload.Add('append', $append) }
            if ($PSBoundParameters.ContainsKey('clear')) { $Payload.Add('clear', $clear) }
            if ($PSBoundParameters.ContainsKey('comment')) { $Payload.Add('comment', $comment) }
 
            if ($PSCmdlet.ShouldProcess("nsassignment", "Update NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -Type nsassignment -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetNsassignment -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUpdateNsassignment: Finished"
    }
}

function Invoke-ADCUnsetNsassignment {
<#
    .SYNOPSIS
        Unset NS configuration Object
    .DESCRIPTION
        Unset NS configuration Object 
   .PARAMETER name 
       Name for the assignment. Must begin with a letter, number, or the underscore character (_), and must contain only letters, numbers, and the hyphen (-), period (.) hash (#), space ( ), at (@), equals (=), colon (:), and underscore characters. Can be changed after the assignment is added. 
   .PARAMETER comment 
       Comment. Can be used to preserve information about this rewrite action.
    .EXAMPLE
        Invoke-ADCUnsetNsassignment -name <string>
    .NOTES
        File Name : Invoke-ADCUnsetNsassignment
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsassignment
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$name ,

        [Boolean]$comment 
    )
    begin {
        Write-Verbose "Invoke-ADCUnsetNsassignment: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
            }
            if ($PSBoundParameters.ContainsKey('comment')) { $Payload.Add('comment', $comment) }
            if ($PSCmdlet.ShouldProcess("$name", "Unset NS configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nsassignment -Action unset -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUnsetNsassignment: Finished"
    }
}

function Invoke-ADCDeleteNsassignment {
<#
    .SYNOPSIS
        Delete NS configuration Object
    .DESCRIPTION
        Delete NS configuration Object
    .PARAMETER name 
       Name for the assignment. Must begin with a letter, number, or the underscore character (_), and must contain only letters, numbers, and the hyphen (-), period (.) hash (#), space ( ), at (@), equals (=), colon (:), and underscore characters. Can be changed after the assignment is added. 
    .EXAMPLE
        Invoke-ADCDeleteNsassignment -name <string>
    .NOTES
        File Name : Invoke-ADCDeleteNsassignment
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsassignment/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$name 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteNsassignment: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }

            if ($PSCmdlet.ShouldProcess("$name", "Delete NS configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type nsassignment -Resource $name -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteNsassignment: Finished"
    }
}

function Invoke-ADCRenameNsassignment {
<#
    .SYNOPSIS
        Rename NS configuration Object
    .DESCRIPTION
        Rename NS configuration Object 
    .PARAMETER name 
        Name for the assignment. Must begin with a letter, number, or the underscore character (_), and must contain only letters, numbers, and the hyphen (-), period (.) hash (#), space ( ), at (@), equals (=), colon (:), and underscore characters. Can be changed after the assignment is added. 
    .PARAMETER newname 
        New name for the assignment.  
        Must begin with a letter, number, or the underscore character (_), and must contain only letters, numbers, and the hyphen (-), period (.) hash (#), space ( ), at (@), equals (=), colon (:), and underscore characters. Can be changed after the rewrite policy is added. 
    .PARAMETER PassThru 
        Return details about the created nsassignment item.
    .EXAMPLE
        Invoke-ADCRenameNsassignment -name <string> -newname <string>
    .NOTES
        File Name : Invoke-ADCRenameNsassignment
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsassignment/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$name ,

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$newname ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCRenameNsassignment: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
                newname = $newname
            }

 
            if ($PSCmdlet.ShouldProcess("nsassignment", "Rename NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nsassignment -Action rename -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetNsassignment -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCRenameNsassignment: Finished"
    }
}

function Invoke-ADCGetNsassignment {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER name 
       Name for the assignment. Must begin with a letter, number, or the underscore character (_), and must contain only letters, numbers, and the hyphen (-), period (.) hash (#), space ( ), at (@), equals (=), colon (:), and underscore characters. Can be changed after the assignment is added. 
    .PARAMETER GetAll 
        Retreive all nsassignment object(s)
    .PARAMETER Count
        If specified, the count of the nsassignment object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNsassignment
    .EXAMPLE 
        Invoke-ADCGetNsassignment -GetAll 
    .EXAMPLE 
        Invoke-ADCGetNsassignment -Count
    .EXAMPLE
        Invoke-ADCGetNsassignment -name <string>
    .EXAMPLE
        Invoke-ADCGetNsassignment -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNsassignment
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsassignment/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [string]$name,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll,

        [Parameter(ParameterSetName = 'GetAll')]
        [Parameter(ParameterSetName = 'Get')]
        [Switch]$ViewSummary

    )
    begin {
        Write-Verbose "Invoke-ADCGetNsassignment: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all nsassignment objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsassignment -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nsassignment objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsassignment -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nsassignment objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsassignment -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nsassignment configuration for property 'name'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsassignment -Resource $name -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving nsassignment configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsassignment -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNsassignment: Ended"
    }
}

function Invoke-ADCUpdateNscapacity {
<#
    .SYNOPSIS
        Update NS configuration Object
    .DESCRIPTION
        Update NS configuration Object 
    .PARAMETER bandwidth 
        System bandwidth limit. 
    .PARAMETER platform 
        appliance platform type.  
        Possible values = VS10, VE10, VP10, VS25, VE25, VP25, VS200, VE200, VP200, VS1000, VE1000, VP1000, VS3000, VE3000, VP3000, VS5000, VE5000, VP5000, VS8000, VE8000, VP8000, VS10000, VE10000, VP10000, VS15000, VE15000, VP15000, VS25000, VE25000, VP25000, VS40000, VE40000, VP40000, VS100000, VE100000, VP100000, CP1000 
    .PARAMETER vcpu 
        licensed using vcpu pool. 
    .PARAMETER edition 
        Product edition.  
        Possible values = Standard, Enterprise, Platinum 
    .PARAMETER unit 
        Bandwidth unit.  
        Possible values = Gbps, Mbps
    .EXAMPLE
        Invoke-ADCUpdateNscapacity 
    .NOTES
        File Name : Invoke-ADCUpdateNscapacity
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nscapacity/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [double]$bandwidth ,

        [ValidateSet('VS10', 'VE10', 'VP10', 'VS25', 'VE25', 'VP25', 'VS200', 'VE200', 'VP200', 'VS1000', 'VE1000', 'VP1000', 'VS3000', 'VE3000', 'VP3000', 'VS5000', 'VE5000', 'VP5000', 'VS8000', 'VE8000', 'VP8000', 'VS10000', 'VE10000', 'VP10000', 'VS15000', 'VE15000', 'VP15000', 'VS25000', 'VE25000', 'VP25000', 'VS40000', 'VE40000', 'VP40000', 'VS100000', 'VE100000', 'VP100000', 'CP1000')]
        [string]$platform ,

        [boolean]$vcpu ,

        [ValidateSet('Standard', 'Enterprise', 'Platinum')]
        [string]$edition ,

        [ValidateSet('Gbps', 'Mbps')]
        [string]$unit 

    )
    begin {
        Write-Verbose "Invoke-ADCUpdateNscapacity: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('bandwidth')) { $Payload.Add('bandwidth', $bandwidth) }
            if ($PSBoundParameters.ContainsKey('platform')) { $Payload.Add('platform', $platform) }
            if ($PSBoundParameters.ContainsKey('vcpu')) { $Payload.Add('vcpu', $vcpu) }
            if ($PSBoundParameters.ContainsKey('edition')) { $Payload.Add('edition', $edition) }
            if ($PSBoundParameters.ContainsKey('unit')) { $Payload.Add('unit', $unit) }
 
            if ($PSCmdlet.ShouldProcess("nscapacity", "Update NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -Type nscapacity -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
            Write-Output $result

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUpdateNscapacity: Finished"
    }
}

function Invoke-ADCUnsetNscapacity {
<#
    .SYNOPSIS
        Unset NS configuration Object
    .DESCRIPTION
        Unset NS configuration Object 
   .PARAMETER bandwidth 
       System bandwidth limit. 
   .PARAMETER platform 
       appliance platform type.  
       Possible values = VS10, VE10, VP10, VS25, VE25, VP25, VS200, VE200, VP200, VS1000, VE1000, VP1000, VS3000, VE3000, VP3000, VS5000, VE5000, VP5000, VS8000, VE8000, VP8000, VS10000, VE10000, VP10000, VS15000, VE15000, VP15000, VS25000, VE25000, VP25000, VS40000, VE40000, VP40000, VS100000, VE100000, VP100000, CP1000 
   .PARAMETER vcpu 
       licensed using vcpu pool.
    .EXAMPLE
        Invoke-ADCUnsetNscapacity 
    .NOTES
        File Name : Invoke-ADCUnsetNscapacity
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nscapacity
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Boolean]$bandwidth ,

        [Boolean]$platform ,

        [Boolean]$vcpu 
    )
    begin {
        Write-Verbose "Invoke-ADCUnsetNscapacity: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('bandwidth')) { $Payload.Add('bandwidth', $bandwidth) }
            if ($PSBoundParameters.ContainsKey('platform')) { $Payload.Add('platform', $platform) }
            if ($PSBoundParameters.ContainsKey('vcpu')) { $Payload.Add('vcpu', $vcpu) }
            if ($PSCmdlet.ShouldProcess("nscapacity", "Unset NS configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nscapacity -Action unset -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUnsetNscapacity: Finished"
    }
}

function Invoke-ADCGetNscapacity {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER nodeid 
       Unique number that identifies the cluster node. 
    .PARAMETER GetAll 
        Retreive all nscapacity object(s)
    .PARAMETER Count
        If specified, the count of the nscapacity object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNscapacity
    .EXAMPLE 
        Invoke-ADCGetNscapacity -GetAll
    .EXAMPLE
        Invoke-ADCGetNscapacity -name <string>
    .EXAMPLE
        Invoke-ADCGetNscapacity -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNscapacity
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nscapacity/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByArgument')]
        [ValidateRange(0, 31)]
        [double]$nodeid,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetNscapacity: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all nscapacity objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nscapacity -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nscapacity objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nscapacity -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nscapacity objects by arguments"
                $Arguments = @{ } 
                if ($PSBoundParameters.ContainsKey('nodeid')) { $Arguments.Add('nodeid', $nodeid) }
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nscapacity -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nscapacity configuration for property ''"

            } else {
                Write-Verbose "Retrieving nscapacity configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nscapacity -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNscapacity: Ended"
    }
}

function Invoke-ADCAddNscentralmanagementserver {
<#
    .SYNOPSIS
        Add NS configuration Object
    .DESCRIPTION
        Add NS configuration Object 
    .PARAMETER type 
        Type of the central management server. Must be either CLOUD or ONPREM depending on whether the server is on the cloud or on premise.  
        Possible values = CLOUD, ONPREM 
    .PARAMETER username 
        Username for access to central management server. Must begin with a letter, number, or the underscore character (_), and must contain only letters, numbers, and the hyphen (-), period (.) pound (#), space ( ), at (@), equals (=), colon (:), and underscore characters. 
    .PARAMETER password 
        Password for access to central management server. Required for any user account.  
        Minimum length = 1  
        Maximum length = 127 
    .PARAMETER ipaddress 
        Ip Address of central management server.  
        Minimum length = 1 
    .PARAMETER servername 
        Fully qualified domain name of the central management server. 
    .PARAMETER validatecert 
        validate the server certificate for secure SSL connections.  
        Default value: YES  
        Possible values = YES, NO 
    .PARAMETER deviceprofilename 
        Device profile is created on ADM and contains the user name and password of the instance(s).  
        Default value: "ns_nsroot_profile"  
        Minimum length = 1  
        Maximum length = 127 
    .PARAMETER PassThru 
        Return details about the created nscentralmanagementserver item.
    .EXAMPLE
        Invoke-ADCAddNscentralmanagementserver -type <string> -username <string> -password <string>
    .NOTES
        File Name : Invoke-ADCAddNscentralmanagementserver
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nscentralmanagementserver/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateSet('CLOUD', 'ONPREM')]
        [string]$type ,

        [Parameter(Mandatory = $true)]
        [ValidateLength(1, 127)]
        [string]$username ,

        [Parameter(Mandatory = $true)]
        [ValidateLength(1, 127)]
        [string]$password ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$ipaddress ,

        [string]$servername ,

        [ValidateSet('YES', 'NO')]
        [string]$validatecert = 'YES' ,

        [ValidateLength(1, 127)]
        [string]$deviceprofilename = '"ns_nsroot_profile"' ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddNscentralmanagementserver: Starting"
    }
    process {
        try {
            $Payload = @{
                type = $type
                username = $username
                password = $password
            }
            if ($PSBoundParameters.ContainsKey('ipaddress')) { $Payload.Add('ipaddress', $ipaddress) }
            if ($PSBoundParameters.ContainsKey('servername')) { $Payload.Add('servername', $servername) }
            if ($PSBoundParameters.ContainsKey('validatecert')) { $Payload.Add('validatecert', $validatecert) }
            if ($PSBoundParameters.ContainsKey('deviceprofilename')) { $Payload.Add('deviceprofilename', $deviceprofilename) }
 
            if ($PSCmdlet.ShouldProcess("nscentralmanagementserver", "Add NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nscentralmanagementserver -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetNscentralmanagementserver -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddNscentralmanagementserver: Finished"
    }
}

function Invoke-ADCDeleteNscentralmanagementserver {
<#
    .SYNOPSIS
        Delete NS configuration Object
    .DESCRIPTION
        Delete NS configuration Object
    .PARAMETER type 
       Type of the central management server. Must be either CLOUD or ONPREM depending on whether the server is on the cloud or on premise.  
       Possible values = CLOUD, ONPREM 
    .EXAMPLE
        Invoke-ADCDeleteNscentralmanagementserver -type <string>
    .NOTES
        File Name : Invoke-ADCDeleteNscentralmanagementserver
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nscentralmanagementserver/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$type 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteNscentralmanagementserver: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }

            if ($PSCmdlet.ShouldProcess("$type", "Delete NS configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type nscentralmanagementserver -Resource $type -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteNscentralmanagementserver: Finished"
    }
}

function Invoke-ADCGetNscentralmanagementserver {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER type 
       Type of the central management server. Must be either CLOUD or ONPREM depending on whether the server is on the cloud or on premise.  
       Possible values = CLOUD, ONPREM 
    .PARAMETER GetAll 
        Retreive all nscentralmanagementserver object(s)
    .PARAMETER Count
        If specified, the count of the nscentralmanagementserver object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNscentralmanagementserver
    .EXAMPLE 
        Invoke-ADCGetNscentralmanagementserver -GetAll 
    .EXAMPLE 
        Invoke-ADCGetNscentralmanagementserver -Count
    .EXAMPLE
        Invoke-ADCGetNscentralmanagementserver -name <string>
    .EXAMPLE
        Invoke-ADCGetNscentralmanagementserver -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNscentralmanagementserver
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nscentralmanagementserver/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateSet('CLOUD', 'ONPREM')]
        [string]$type,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll,

        [Parameter(ParameterSetName = 'GetAll')]
        [Parameter(ParameterSetName = 'Get')]
        [Switch]$ViewSummary

    )
    begin {
        Write-Verbose "Invoke-ADCGetNscentralmanagementserver: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all nscentralmanagementserver objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nscentralmanagementserver -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nscentralmanagementserver objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nscentralmanagementserver -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nscentralmanagementserver objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nscentralmanagementserver -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nscentralmanagementserver configuration for property 'type'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nscentralmanagementserver -Resource $type -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving nscentralmanagementserver configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nscentralmanagementserver -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNscentralmanagementserver: Ended"
    }
}

function Invoke-ADCClearNsconfig {
<#
    .SYNOPSIS
        Clear NS configuration Object
    .DESCRIPTION
        Clear NS configuration Object 
    .PARAMETER force 
        Configurations will be cleared without prompting for confirmation. 
    .PARAMETER level 
        Types of configurations to be cleared.  
        * basic: Clears all configurations except the following:  
        - NSIP, default route (gateway), static routes, MIPs, and SNIPs  
        - Network settings (DG, VLAN, RHI and DNS settings)  
        - Cluster settings  
        - HA node definitions  
        - Feature and mode settings  
        - nsroot password  
        * extended: Clears the same configurations as the 'basic' option. In addition, it clears the feature and mode settings.  
        * full: Clears all configurations except NSIP, default route, and interface settings.  
        Note: When you clear the configurations through the cluster IP address, by specifying the level as 'full', the cluster is deleted and all cluster nodes become standalone appliances. The 'basic' and 'extended' levels are propagated to the cluster nodes.  
        Possible values = basic, extended, full 
    .PARAMETER rbaconfig 
        RBA configurations and TACACS policies bound to system global will not be cleared if RBA is set to NO.This option is applicable only for BASIC level of clear configuration.Default is YES, which will clear rba configurations.  
        Possible values = YES, NO
    .EXAMPLE
        Invoke-ADCClearNsconfig -level <string>
    .NOTES
        File Name : Invoke-ADCClearNsconfig
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsconfig/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [boolean]$force ,

        [Parameter(Mandatory = $true)]
        [ValidateSet('basic', 'extended', 'full')]
        [string]$level ,

        [ValidateSet('YES', 'NO')]
        [string]$rbaconfig 

    )
    begin {
        Write-Verbose "Invoke-ADCClearNsconfig: Starting"
    }
    process {
        try {
            $Payload = @{
                level = $level
            }
            if ($PSBoundParameters.ContainsKey('force')) { $Payload.Add('force', $force) }
            if ($PSBoundParameters.ContainsKey('rbaconfig')) { $Payload.Add('rbaconfig', $rbaconfig) }
            if ($PSCmdlet.ShouldProcess($Name, "Clear NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nsconfig -Action clear -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $result
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCClearNsconfig: Finished"
    }
}

function Invoke-ADCUpdateNsconfig {
<#
    .SYNOPSIS
        Update NS configuration Object
    .DESCRIPTION
        Update NS configuration Object 
    .PARAMETER ipaddress 
        IP address of the Citrix ADC. Commonly referred to as NSIP address. This parameter is mandatory to bring up the appliance.  
        Minimum length = 1 
    .PARAMETER netmask 
        Netmask corresponding to the IP address. This parameter is mandatory to bring up the appliance. 
    .PARAMETER nsvlan 
        VLAN (NSVLAN) for the subnet on which the IP address resides.  
        Minimum value = 2  
        Maximum value = 4094 
    .PARAMETER ifnum 
        Interfaces of the appliances that must be bound to the NSVLAN.  
        Minimum length = 1 
    .PARAMETER tagged 
        Specifies that the interfaces will be added as 802.1q tagged interfaces. Packets sent on these interface on this VLAN will have an additional 4-byte 802.1q tag which identifies the VLAN.  
        To use 802.1q tagging, the switch connected to the appliance's interfaces must also be configured for tagging.  
        Default value: YES  
        Possible values = YES, NO 
    .PARAMETER httpport 
        The HTTP ports on the Web server. This allows the system to perform connection off-load for any client request that has a destination port matching one of these configured ports.  
        Minimum value = 1 
    .PARAMETER maxconn 
        The maximum number of connections that will be made from the system to the web server(s) attached to it. The value entered here is applied globally to all attached servers.  
        Minimum value = 0  
        Maximum value = 4294967294 
    .PARAMETER maxreq 
        The maximum number of requests that the system can pass on a particular connection between the system and a server attached to it. Setting this value to 0 allows an unlimited number of requests to be passed.  
        Minimum value = 0  
        Maximum value = 65535 
    .PARAMETER cip 
        The option to control (enable or disable) the insertion of the actual client IP address into the HTTP header request passed from the client to one, some, or all servers attached to the system.  
        The passed address can then be accessed through a minor modification to the server.  
        l If cipHeader is specified, it will be used as the client IP header.  
        l If it is not specified, then the value that has been set by the set ns config CLI command will be used as the client IP header.  
        Possible values = ENABLED, DISABLED 
    .PARAMETER cipheader 
        The text that will be used as the client IP header.  
        Minimum length = 1 
    .PARAMETER cookieversion 
        The version of the cookie inserted by system.  
        Possible values = 0, 1 
    .PARAMETER securecookie 
        enable/disable secure flag for persistence cookie.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER pmtumin 
        The minimum Path MTU.  
        Default value: 576  
        Minimum value = 168  
        Maximum value = 1500 
    .PARAMETER pmtutimeout 
        The timeout value in minutes.  
        Default value: 10  
        Minimum value = 1  
        Maximum value = 1440 
    .PARAMETER ftpportrange 
        Port range configured for FTP services.  
        Minimum length = 1024  
        Maximum length = 64000 
    .PARAMETER crportrange 
        Port range for cache redirection services.  
        Minimum length = 1  
        Maximum length = 65535 
    .PARAMETER timezone 
        Name of the timezone.  
        Default value: CoordinatedUniversalTime  
        Minimum length = 1  
        Maximum length = 64 
    .PARAMETER grantquotamaxclient 
        The percentage of shared quota to be granted at a time for maxClient.  
        Default value: 10  
        Minimum value = 0  
        Maximum value = 100 
    .PARAMETER exclusivequotamaxclient 
        The percentage of maxClient to be given to PEs.  
        Default value: 80  
        Minimum value = 0  
        Maximum value = 100 
    .PARAMETER grantquotaspillover 
        The percentage of shared quota to be granted at a time for spillover.  
        Default value: 10  
        Minimum value = 0  
        Maximum value = 100 
    .PARAMETER exclusivequotaspillover 
        The percentage of max limit to be given to PEs.  
        Default value: 80  
        Minimum value = 0  
        Maximum value = 100
    .EXAMPLE
        Invoke-ADCUpdateNsconfig 
    .NOTES
        File Name : Invoke-ADCUpdateNsconfig
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsconfig/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$ipaddress ,

        [string]$netmask ,

        [ValidateRange(2, 4094)]
        [double]$nsvlan ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string[]]$ifnum ,

        [ValidateSet('YES', 'NO')]
        [string]$tagged ,

        [int[]]$httpport ,

        [ValidateRange(0, 4294967294)]
        [double]$maxconn ,

        [ValidateRange(0, 65535)]
        [double]$maxreq ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$cip ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$cipheader ,

        [ValidateSet('0', '1')]
        [string]$cookieversion ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$securecookie ,

        [ValidateRange(168, 1500)]
        [double]$pmtumin ,

        [ValidateRange(1, 1440)]
        [double]$pmtutimeout ,

        [ValidateLength(1024, 64000)]
        [string]$ftpportrange ,

        [ValidateLength(1, 65535)]
        [string]$crportrange ,

        [ValidateLength(1, 64)]
        [string]$timezone ,

        [ValidateRange(0, 100)]
        [double]$grantquotamaxclient ,

        [ValidateRange(0, 100)]
        [double]$exclusivequotamaxclient ,

        [ValidateRange(0, 100)]
        [double]$grantquotaspillover ,

        [ValidateRange(0, 100)]
        [double]$exclusivequotaspillover 

    )
    begin {
        Write-Verbose "Invoke-ADCUpdateNsconfig: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('ipaddress')) { $Payload.Add('ipaddress', $ipaddress) }
            if ($PSBoundParameters.ContainsKey('netmask')) { $Payload.Add('netmask', $netmask) }
            if ($PSBoundParameters.ContainsKey('nsvlan')) { $Payload.Add('nsvlan', $nsvlan) }
            if ($PSBoundParameters.ContainsKey('ifnum')) { $Payload.Add('ifnum', $ifnum) }
            if ($PSBoundParameters.ContainsKey('tagged')) { $Payload.Add('tagged', $tagged) }
            if ($PSBoundParameters.ContainsKey('httpport')) { $Payload.Add('httpport', $httpport) }
            if ($PSBoundParameters.ContainsKey('maxconn')) { $Payload.Add('maxconn', $maxconn) }
            if ($PSBoundParameters.ContainsKey('maxreq')) { $Payload.Add('maxreq', $maxreq) }
            if ($PSBoundParameters.ContainsKey('cip')) { $Payload.Add('cip', $cip) }
            if ($PSBoundParameters.ContainsKey('cipheader')) { $Payload.Add('cipheader', $cipheader) }
            if ($PSBoundParameters.ContainsKey('cookieversion')) { $Payload.Add('cookieversion', $cookieversion) }
            if ($PSBoundParameters.ContainsKey('securecookie')) { $Payload.Add('securecookie', $securecookie) }
            if ($PSBoundParameters.ContainsKey('pmtumin')) { $Payload.Add('pmtumin', $pmtumin) }
            if ($PSBoundParameters.ContainsKey('pmtutimeout')) { $Payload.Add('pmtutimeout', $pmtutimeout) }
            if ($PSBoundParameters.ContainsKey('ftpportrange')) { $Payload.Add('ftpportrange', $ftpportrange) }
            if ($PSBoundParameters.ContainsKey('crportrange')) { $Payload.Add('crportrange', $crportrange) }
            if ($PSBoundParameters.ContainsKey('timezone')) { $Payload.Add('timezone', $timezone) }
            if ($PSBoundParameters.ContainsKey('grantquotamaxclient')) { $Payload.Add('grantquotamaxclient', $grantquotamaxclient) }
            if ($PSBoundParameters.ContainsKey('exclusivequotamaxclient')) { $Payload.Add('exclusivequotamaxclient', $exclusivequotamaxclient) }
            if ($PSBoundParameters.ContainsKey('grantquotaspillover')) { $Payload.Add('grantquotaspillover', $grantquotaspillover) }
            if ($PSBoundParameters.ContainsKey('exclusivequotaspillover')) { $Payload.Add('exclusivequotaspillover', $exclusivequotaspillover) }
 
            if ($PSCmdlet.ShouldProcess("nsconfig", "Update NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -Type nsconfig -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
            Write-Output $result

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUpdateNsconfig: Finished"
    }
}

function Invoke-ADCUnsetNsconfig {
<#
    .SYNOPSIS
        Unset NS configuration Object
    .DESCRIPTION
        Unset NS configuration Object 
   .PARAMETER nsvlan 
       VLAN (NSVLAN) for the subnet on which the IP address resides. 
   .PARAMETER ftpportrange 
       Port range configured for FTP services. 
   .PARAMETER crportrange 
       Port range for cache redirection services. 
   .PARAMETER timezone 
       Name of the timezone. 
   .PARAMETER ipaddress 
       IP address of the Citrix ADC. Commonly referred to as NSIP address. This parameter is mandatory to bring up the appliance. 
   .PARAMETER netmask 
       Netmask corresponding to the IP address. This parameter is mandatory to bring up the appliance. 
   .PARAMETER ifnum 
       Interfaces of the appliances that must be bound to the NSVLAN. 
   .PARAMETER tagged 
       Specifies that the interfaces will be added as 802.1q tagged interfaces. Packets sent on these interface on this VLAN will have an additional 4-byte 802.1q tag which identifies the VLAN.  
       To use 802.1q tagging, the switch connected to the appliance's interfaces must also be configured for tagging.  
       Possible values = YES, NO 
   .PARAMETER httpport 
       The HTTP ports on the Web server. This allows the system to perform connection off-load for any client request that has a destination port matching one of these configured ports. 
   .PARAMETER maxconn 
       The maximum number of connections that will be made from the system to the web server(s) attached to it. The value entered here is applied globally to all attached servers. 
   .PARAMETER maxreq 
       The maximum number of requests that the system can pass on a particular connection between the system and a server attached to it. Setting this value to 0 allows an unlimited number of requests to be passed. 
   .PARAMETER cip 
       The option to control (enable or disable) the insertion of the actual client IP address into the HTTP header request passed from the client to one, some, or all servers attached to the system.  
       The passed address can then be accessed through a minor modification to the server.  
       l If cipHeader is specified, it will be used as the client IP header.  
       l If it is not specified, then the value that has been set by the set ns config CLI command will be used as the client IP header.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER cipheader 
       The text that will be used as the client IP header. 
   .PARAMETER cookieversion 
       The version of the cookie inserted by system.  
       Possible values = 0, 1 
   .PARAMETER securecookie 
       enable/disable secure flag for persistence cookie.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER pmtumin 
       The minimum Path MTU. 
   .PARAMETER pmtutimeout 
       The timeout value in minutes. 
   .PARAMETER grantquotamaxclient 
       The percentage of shared quota to be granted at a time for maxClient. 
   .PARAMETER exclusivequotamaxclient 
       The percentage of maxClient to be given to PEs. 
   .PARAMETER grantquotaspillover 
       The percentage of shared quota to be granted at a time for spillover. 
   .PARAMETER exclusivequotaspillover 
       The percentage of max limit to be given to PEs.
    .EXAMPLE
        Invoke-ADCUnsetNsconfig 
    .NOTES
        File Name : Invoke-ADCUnsetNsconfig
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsconfig
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Boolean]$nsvlan ,

        [Boolean]$ftpportrange ,

        [Boolean]$crportrange ,

        [Boolean]$timezone ,

        [Boolean]$ipaddress ,

        [Boolean]$netmask ,

        [Boolean]$ifnum ,

        [Boolean]$tagged ,

        [Boolean]$httpport ,

        [Boolean]$maxconn ,

        [Boolean]$maxreq ,

        [Boolean]$cip ,

        [Boolean]$cipheader ,

        [Boolean]$cookieversion ,

        [Boolean]$securecookie ,

        [Boolean]$pmtumin ,

        [Boolean]$pmtutimeout ,

        [Boolean]$grantquotamaxclient ,

        [Boolean]$exclusivequotamaxclient ,

        [Boolean]$grantquotaspillover ,

        [Boolean]$exclusivequotaspillover 
    )
    begin {
        Write-Verbose "Invoke-ADCUnsetNsconfig: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('nsvlan')) { $Payload.Add('nsvlan', $nsvlan) }
            if ($PSBoundParameters.ContainsKey('ftpportrange')) { $Payload.Add('ftpportrange', $ftpportrange) }
            if ($PSBoundParameters.ContainsKey('crportrange')) { $Payload.Add('crportrange', $crportrange) }
            if ($PSBoundParameters.ContainsKey('timezone')) { $Payload.Add('timezone', $timezone) }
            if ($PSBoundParameters.ContainsKey('ipaddress')) { $Payload.Add('ipaddress', $ipaddress) }
            if ($PSBoundParameters.ContainsKey('netmask')) { $Payload.Add('netmask', $netmask) }
            if ($PSBoundParameters.ContainsKey('ifnum')) { $Payload.Add('ifnum', $ifnum) }
            if ($PSBoundParameters.ContainsKey('tagged')) { $Payload.Add('tagged', $tagged) }
            if ($PSBoundParameters.ContainsKey('httpport')) { $Payload.Add('httpport', $httpport) }
            if ($PSBoundParameters.ContainsKey('maxconn')) { $Payload.Add('maxconn', $maxconn) }
            if ($PSBoundParameters.ContainsKey('maxreq')) { $Payload.Add('maxreq', $maxreq) }
            if ($PSBoundParameters.ContainsKey('cip')) { $Payload.Add('cip', $cip) }
            if ($PSBoundParameters.ContainsKey('cipheader')) { $Payload.Add('cipheader', $cipheader) }
            if ($PSBoundParameters.ContainsKey('cookieversion')) { $Payload.Add('cookieversion', $cookieversion) }
            if ($PSBoundParameters.ContainsKey('securecookie')) { $Payload.Add('securecookie', $securecookie) }
            if ($PSBoundParameters.ContainsKey('pmtumin')) { $Payload.Add('pmtumin', $pmtumin) }
            if ($PSBoundParameters.ContainsKey('pmtutimeout')) { $Payload.Add('pmtutimeout', $pmtutimeout) }
            if ($PSBoundParameters.ContainsKey('grantquotamaxclient')) { $Payload.Add('grantquotamaxclient', $grantquotamaxclient) }
            if ($PSBoundParameters.ContainsKey('exclusivequotamaxclient')) { $Payload.Add('exclusivequotamaxclient', $exclusivequotamaxclient) }
            if ($PSBoundParameters.ContainsKey('grantquotaspillover')) { $Payload.Add('grantquotaspillover', $grantquotaspillover) }
            if ($PSBoundParameters.ContainsKey('exclusivequotaspillover')) { $Payload.Add('exclusivequotaspillover', $exclusivequotaspillover) }
            if ($PSCmdlet.ShouldProcess("nsconfig", "Unset NS configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nsconfig -Action unset -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUnsetNsconfig: Finished"
    }
}

function Invoke-ADCSaveNsconfig {
<#
    .SYNOPSIS
        Save NS configuration Object
    .DESCRIPTION
        Save NS configuration Object 
    .PARAMETER all 
        Use this option to do saveconfig for all partitions.
    .EXAMPLE
        Invoke-ADCSaveNsconfig 
    .NOTES
        File Name : Invoke-ADCSaveNsconfig
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsconfig/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [boolean]$all 

    )
    begin {
        Write-Verbose "Invoke-ADCSaveNsconfig: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('all')) { $Payload.Add('all', $all) }
            if ($PSCmdlet.ShouldProcess($Name, "Save NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nsconfig -Action save -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $result
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCSaveNsconfig: Finished"
    }
}

function Invoke-ADCDiffNsconfig {
<#
    .SYNOPSIS
        Diff NS configuration Object
    .DESCRIPTION
        Diff NS configuration Object 
    .PARAMETER config1 
        Location of the configurations. 
    .PARAMETER config2 
        Location of the configurations. 
    .PARAMETER outtype 
        Format to display the difference in configurations.  
        Possible values = cli, xml 
    .PARAMETER template 
        File that contains the commands to be compared. 
    .PARAMETER ignoredevicespecific 
        Suppress device specific differences.
    .EXAMPLE
        Invoke-ADCDiffNsconfig 
    .NOTES
        File Name : Invoke-ADCDiffNsconfig
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsconfig/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [string]$config1 ,

        [string]$config2 ,

        [ValidateSet('cli', 'xml')]
        [string]$outtype ,

        [boolean]$template ,

        [boolean]$ignoredevicespecific 

    )
    begin {
        Write-Verbose "Invoke-ADCDiffNsconfig: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('config1')) { $Payload.Add('config1', $config1) }
            if ($PSBoundParameters.ContainsKey('config2')) { $Payload.Add('config2', $config2) }
            if ($PSBoundParameters.ContainsKey('outtype')) { $Payload.Add('outtype', $outtype) }
            if ($PSBoundParameters.ContainsKey('template')) { $Payload.Add('template', $template) }
            if ($PSBoundParameters.ContainsKey('ignoredevicespecific')) { $Payload.Add('ignoredevicespecific', $ignoredevicespecific) }
            if ($PSCmdlet.ShouldProcess($Name, "Diff NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nsconfig -Action diff -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $result
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDiffNsconfig: Finished"
    }
}

function Invoke-ADCGetNsconfig {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER GetAll 
        Retreive all nsconfig object(s)
    .PARAMETER Count
        If specified, the count of the nsconfig object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNsconfig
    .EXAMPLE 
        Invoke-ADCGetNsconfig -GetAll
    .EXAMPLE
        Invoke-ADCGetNsconfig -name <string>
    .EXAMPLE
        Invoke-ADCGetNsconfig -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNsconfig
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsconfig/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetNsconfig: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all nsconfig objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsconfig -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nsconfig objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsconfig -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nsconfig objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsconfig -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nsconfig configuration for property ''"

            } else {
                Write-Verbose "Retrieving nsconfig configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsconfig -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNsconfig: Ended"
    }
}

function Invoke-ADCGetNsconnectiontable {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER filterexpression 
       The maximum length of filter expression is 255 and it can be of following format:  
       <expression> [<relop> <expression>]  
       <relop> = ( ;; | || )  
       <expression> =:  
       CONNECTION.<qualifier>.<qualifier-method>.(<qualifier-value>)  
       <qualifier> = SRCIP  
       <qualifier-method> = [ EQ | NE ]  
       <qualifier-value> = A valid IPv4 address  
       example = CONNECTION.SRCIP.EQ(127.0.0.1)  
       <qualifier> = DSTIP  
       <qualifier-method> = [ EQ | NE ]  
       <qualifier-value> = A valid IPv4 address.  
       example = CONNECTION.DSTIP.EQ(127.0.0.1)  
       <qualifier> = IP  
       <qualifier-method> = [ EQ | NE ]  
       <qualifier-value> = A valid IPv4 address.  
       example = CONNECTION.IP.EQ(127.0.0.1)  
       <qualifier> = SRCIPv6  
       <qualifier-method> = [ EQ | NE ]  
       <qualifier-value> = A valid IPv6 address.  
       example = CONNECTION.SRCIPv6.EQ(2001:db8:0:0:1::1)  
       <qualifier> = DSTIPv6  
       <qualifier-method> = [ EQ | NE ]  
       <qualifier-value> = A valid IPv6 address.  
       example = CONNECTION.DSTIPv6.EQ(2001:db8:0:0:1::1)  
       <qualifier> = IPv6  
       <qualifier-method> = [ EQ | NE ]  
       <qualifier-value> = A valid IPv6 address.  
       example = CONNECTION.IPv6.EQ(2001:db8:0:0:1::1)  
       <qualifier> = SRCPORT  
       <qualifier-method> = [ EQ | NE | GT | GE | LT | LE  
       | BETWEEN ]  
       <qualifier-value> = A valid port number.  
       example = CONNECTION.SRCPORT.EQ(80)  
       <qualifier> = DSTPORT  
       <qualifier-method> = [ EQ | NE | GT | GE | LT | LE  
       | BETWEEN ]  
       <qualifier-value> = A valid port number.  
       example = CONNECTION.DSTPORT.EQ(80)  
       <qualifier> = PORT  
       <qualifier-method> = [ EQ | NE | GT | GE | LT | LE  
       | BETWEEN ]  
       <qualifier-value> = A valid port number.  
       example = CONNECTION.PORT.EQ(80)  
       <qualifier> = SVCNAME  
       <qualifier-method> = [ EQ | NE | CONTAINS | STARTSWITH  
       | ENDSWITH ]  
       <qualifier-value> = service name.  
       example = CONNECTION.SVCNAME.EQ("name")  
       <qualifier> = LB_VSERVER.NAME  
       <qualifier-method> = [ EQ | NE | CONTAINS | STARTSWITH  
       | ENDSWITH ]  
       <qualifier-value> = LB vserver name.  
       example = CONNECTION.LB_VSERVER.NAME.EQ("name")  
       <qualifier> = CS_VSERVER.NAME  
       <qualifier-method> = [ EQ | NE | CONTAINS | STARTSWITH  
       | ENDSWITH ]  
       <qualifier-value> = CS vserver name.  
       example = CONNECTION.CS_VSERVER.NAME.EQ("name")  
       <qualifier> = INTF  
       <qualifier-method> = [ EQ | NE ]  
       <qualifier-value> = A valid interface id in the form of  
       x/y (n/x/y in case of cluster interface).  
       examle = CONNECTION.INTF.EQ("0/1/1")  
       <qualifier> = VLANID  
       <qualifier-method> = [ EQ | NE | GT | GE | LT | LE  
       | BETWEEN ]  
       <qualifier-value> = A valid VLAN ID.  
       example = CONNECTION.VLANID.EQ(0)  
       <qualifier> = CONNID  
       <qualifier-method> = [ EQ | NE | GT | GE | LT | LE  
       | BETWEEN ]  
       <qualifier-value> = A valid PCB dev number.  
       example = CONNECTION.CONNID.EQ(0)  
       <qualifier> = PPEID  
       <qualifier-method> = [ EQ | NE | GT | GE | LT | LE  
       | BETWEEN ]  
       <qualifier-value> = A valid core ID.  
       example = CONNECTION.PPEID.EQ(0)  
       <qualifier> = IDLETIME  
       <qualifier-method> = [ EQ | NE | GT | GE | LT | LE  
       | BETWEEN ]  
       <qualifier-value> = A positive integer indicating the  
       idletime.  
       example = CONNECTION.IDLETIME.LT(100)  
       <qualifier> = TCPSTATE  
       <qualifier-method> = [ EQ | NE ]  
       <qualifier-value> = ( CLOSE_WAIT | CLOSED | CLOSING |  
       ESTABLISHED | FIN_WAIT_1 | FIN_WAIT_2 | LAST_ACK |  
       LISTEN | SYN_RECEIVED | SYN_SENT | TIME_WAIT |  
       NOT_APPLICABLE)  
       example = CONNECTION.TCPSTATE.EQ(LISTEN)  
       <qualifier> = SERVICE_TYPE  
       <qualifier-method> = [ EQ | NE ]  
       <qualifier-value> = ( SVC_HTTP | FTP | TCP | UDP | SSL |  
       SSL_BRIDGE | SSL_TCP | NNTP | RPCSVR | RPCSVRS |  
       RPCCLNT | SVC_DNS | ADNS | SNMP | RTSP | DHCPRA | NAT | ANY |  
       MONITOR | MONITOR_UDP | MONITOR_PING | SIP_UDP |  
       SVC_MYSQL | SVC_MSSQL | SERVICE_UNKNOWN )  
       example = CONNECTION.SERVICE_TYPE.EQ(ANY)  
       <qualifier> = TRAFFIC_DOMAIN_ID  
       <qualifier-method> = [ EQ | NE | GT | GE | LT | LE  
       | BETWEEN ]  
       <qualifier-value> = A valid traffic domain ID.  
       example = CONNECTION.TRAFFIC_DOMAIN_ID.EQ(0)  
       common usecases:  
       Filtering out loopback connections and view present  
       connections through netscaler  
       show connectiontable "CONNECTION.IP.NE(127.0.0.1) ;;  
       CONNECTION.TCPSTATE.EQ(ESTABLISHED)" -detail full  
       show connections from a particular sourceip and targeted  
       to port 80  
       show connectiontable "CONNECTION.SRCIP.EQ(10.102.1.91) ;;  
       CONNECTION.DSTPORT.EQ(80)"  
       show connection particular to a service and its linked  
       client connections  
       show connectiontable CONNECTION.SVCNAME.EQ("S1")  
       -detail link  
       show connections for a particular servicetype(e.g.http)  
       show connectiontable CONNECTION.SERVICE_TYPE.EQ(TCP)  
       viewing connections that have been idle for a long time  
       show connectiontable CONNECTION.IDLETIME.GT(100)  
       show connections particular to a service and idle  
       for a long time  
       show connectiontable "CONNECTION.SVCNAME.EQ(\\"S1\\") ;;  
       CONNECTION.IDLETIME.GT(100)"  
       show connections for a particular interface  
       show connectiontable CONNECTION.INTF.EQ("1/1")  
       show connections for a particular interface and vlan  
       show connectiontable "CONNECTION.INTF.EQ(\\"1/1\\") ;;  
       CONNECTION.VLANID.EQ(1)"  
       . 
    .PARAMETER link 
       Display link information if available. 
    .PARAMETER filtername 
       Display name instead of IP for local entities. 
    .PARAMETER detail 
       Specify display options for the connection table.  
       * LINK - Displays the linked PCB (Protocol Control Block).  
       * NAME - Displays along with the service name.  
       * CONNFAILOVER - Displays PCB with connection failover.  
       * FULL - Displays all available details.  
       Possible values = LINK, NAME, CONNFAILOVER, FULL, NNM, FULL+ 
    .PARAMETER listen 
       Display listening services only. 
    .PARAMETER nodeid 
       Unique number that identifies the cluster node. 
    .PARAMETER GetAll 
        Retreive all nsconnectiontable object(s)
    .PARAMETER Count
        If specified, the count of the nsconnectiontable object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNsconnectiontable
    .EXAMPLE 
        Invoke-ADCGetNsconnectiontable -GetAll 
    .EXAMPLE 
        Invoke-ADCGetNsconnectiontable -Count
    .EXAMPLE
        Invoke-ADCGetNsconnectiontable -name <string>
    .EXAMPLE
        Invoke-ADCGetNsconnectiontable -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNsconnectiontable
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsconnectiontable/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByArgument')]
        [string]$filterexpression ,

        [Parameter(ParameterSetName = 'GetByArgument')]
        [boolean]$link ,

        [Parameter(ParameterSetName = 'GetByArgument')]
        [boolean]$filtername ,

        [Parameter(ParameterSetName = 'GetByArgument')]
        [ValidateSet('LINK', 'NAME', 'CONNFAILOVER', 'FULL', 'NNM', 'FULL+')]
        [string[]]$detail ,

        [Parameter(ParameterSetName = 'GetByArgument')]
        [boolean]$listen ,

        [Parameter(ParameterSetName = 'GetByArgument')]
        [ValidateRange(0, 31)]
        [double]$nodeid,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll,

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$ViewSummary

    )
    begin {
        Write-Verbose "Invoke-ADCGetNsconnectiontable: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all nsconnectiontable objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsconnectiontable -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nsconnectiontable objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsconnectiontable -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nsconnectiontable objects by arguments"
                $Arguments = @{ } 
                if ($PSBoundParameters.ContainsKey('filterexpression')) { $Arguments.Add('filterexpression', $filterexpression) } 
                if ($PSBoundParameters.ContainsKey('link')) { $Arguments.Add('link', $link) } 
                if ($PSBoundParameters.ContainsKey('filtername')) { $Arguments.Add('filtername', $filtername) } 
                if ($PSBoundParameters.ContainsKey('detail')) { $Arguments.Add('detail', $detail) } 
                if ($PSBoundParameters.ContainsKey('listen')) { $Arguments.Add('listen', $listen) } 
                if ($PSBoundParameters.ContainsKey('nodeid')) { $Arguments.Add('nodeid', $nodeid) }
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsconnectiontable -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nsconnectiontable configuration for property ''"

            } else {
                Write-Verbose "Retrieving nsconnectiontable configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsconnectiontable -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNsconnectiontable: Ended"
    }
}

function Invoke-ADCUpdateNsconsoleloginprompt {
<#
    .SYNOPSIS
        Update NS configuration Object
    .DESCRIPTION
        Update NS configuration Object 
    .PARAMETER promptstring 
        Console login prompt string.
    .EXAMPLE
        Invoke-ADCUpdateNsconsoleloginprompt 
    .NOTES
        File Name : Invoke-ADCUpdateNsconsoleloginprompt
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsconsoleloginprompt/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [string]$promptstring 

    )
    begin {
        Write-Verbose "Invoke-ADCUpdateNsconsoleloginprompt: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('promptstring')) { $Payload.Add('promptstring', $promptstring) }
 
            if ($PSCmdlet.ShouldProcess("nsconsoleloginprompt", "Update NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -Type nsconsoleloginprompt -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
            Write-Output $result

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUpdateNsconsoleloginprompt: Finished"
    }
}

function Invoke-ADCUnsetNsconsoleloginprompt {
<#
    .SYNOPSIS
        Unset NS configuration Object
    .DESCRIPTION
        Unset NS configuration Object 
   .PARAMETER promptstring 
       Console login prompt string.
    .EXAMPLE
        Invoke-ADCUnsetNsconsoleloginprompt 
    .NOTES
        File Name : Invoke-ADCUnsetNsconsoleloginprompt
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsconsoleloginprompt
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Boolean]$promptstring 
    )
    begin {
        Write-Verbose "Invoke-ADCUnsetNsconsoleloginprompt: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('promptstring')) { $Payload.Add('promptstring', $promptstring) }
            if ($PSCmdlet.ShouldProcess("nsconsoleloginprompt", "Unset NS configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nsconsoleloginprompt -Action unset -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUnsetNsconsoleloginprompt: Finished"
    }
}

function Invoke-ADCGetNsconsoleloginprompt {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER GetAll 
        Retreive all nsconsoleloginprompt object(s)
    .PARAMETER Count
        If specified, the count of the nsconsoleloginprompt object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNsconsoleloginprompt
    .EXAMPLE 
        Invoke-ADCGetNsconsoleloginprompt -GetAll
    .EXAMPLE
        Invoke-ADCGetNsconsoleloginprompt -name <string>
    .EXAMPLE
        Invoke-ADCGetNsconsoleloginprompt -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNsconsoleloginprompt
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsconsoleloginprompt/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetNsconsoleloginprompt: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all nsconsoleloginprompt objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsconsoleloginprompt -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nsconsoleloginprompt objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsconsoleloginprompt -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nsconsoleloginprompt objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsconsoleloginprompt -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nsconsoleloginprompt configuration for property ''"

            } else {
                Write-Verbose "Retrieving nsconsoleloginprompt configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsconsoleloginprompt -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNsconsoleloginprompt: Ended"
    }
}

function Invoke-ADCUpdateNscqaparam {
<#
    .SYNOPSIS
        Update NS configuration Object
    .DESCRIPTION
        Update NS configuration Object 
    .PARAMETER harqretxdelay 
        HARQ retransmission delay (in ms).  
        Default value: 0  
        Minimum value = 1  
        Maximum value = 64000 
    .PARAMETER net1label 
        Name of the network label.  
        Maximum length = 15 
    .PARAMETER minrttnet1 
        MIN RTT (in ms) for the first network.  
        Default value: 0  
        Minimum value = 0  
        Maximum value = 6400 
    .PARAMETER lr1coeflist 
        coefficients values for Label1. 
    .PARAMETER lr1probthresh 
        Probability threshold values for LR model to differentiate between NET1 and reset(NET2 and NET3).  
        Default value: 0  
        Minimum value = 0  
        Maximum value = 1 
    .PARAMETER net1cclscale 
        Three congestion level scores limits corresponding to None, Low, Medium. 
    .PARAMETER net1csqscale 
        Three signal quality level scores limits corresponding to Excellent, Good, Fair. 
    .PARAMETER net1logcoef 
        Connection quality ranking Log coefficients of network 1. 
    .PARAMETER net2label 
        Name of the network label 2.  
        Maximum length = 15 
    .PARAMETER minrttnet2 
        MIN RTT (in ms) for the second network.  
        Default value: 0  
        Minimum value = 0  
        Maximum value = 6400 
    .PARAMETER lr2coeflist 
        coefficients values for Label 2. 
    .PARAMETER lr2probthresh 
        Probability threshold values for LR model to differentiate between NET2 and NET3.  
        Default value: 0  
        Minimum value = 0  
        Maximum value = 1 
    .PARAMETER net2cclscale 
        Three congestion level scores limits corresponding to None, Low, Medium. 
    .PARAMETER net2csqscale 
        Three signal quality level scores limits corresponding to Excellent, Good, Fair. 
    .PARAMETER net2logcoef 
        Connnection quality ranking Log coefficients of network 2. 
    .PARAMETER net3label 
        Name of the network label 3.  
        Maximum length = 15 
    .PARAMETER minrttnet3 
        MIN RTT (in ms) for the third network.  
        Default value: 0  
        Minimum value = 0  
        Maximum value = 6400 
    .PARAMETER net3cclscale 
        Three congestion level scores limits corresponding to None, Low, Medium. 
    .PARAMETER net3csqscale 
        Three signal quality level scores limits corresponding to Excellent, Good, Fair. 
    .PARAMETER net3logcoef 
        Connection quality ranking Log coefficients of network 3.
    .EXAMPLE
        Invoke-ADCUpdateNscqaparam 
    .NOTES
        File Name : Invoke-ADCUpdateNscqaparam
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nscqaparam/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [ValidateRange(1, 64000)]
        [double]$harqretxdelay ,

        [string]$net1label ,

        [ValidateRange(0, 6400)]
        [double]$minrttnet1 ,

        [string]$lr1coeflist ,

        [ValidateRange(0, 1)]
        [double]$lr1probthresh ,

        [string]$net1cclscale ,

        [string]$net1csqscale ,

        [string]$net1logcoef ,

        [string]$net2label ,

        [ValidateRange(0, 6400)]
        [double]$minrttnet2 ,

        [string]$lr2coeflist ,

        [ValidateRange(0, 1)]
        [double]$lr2probthresh ,

        [string]$net2cclscale ,

        [string]$net2csqscale ,

        [string]$net2logcoef ,

        [string]$net3label ,

        [ValidateRange(0, 6400)]
        [double]$minrttnet3 ,

        [string]$net3cclscale ,

        [string]$net3csqscale ,

        [string]$net3logcoef 

    )
    begin {
        Write-Verbose "Invoke-ADCUpdateNscqaparam: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('harqretxdelay')) { $Payload.Add('harqretxdelay', $harqretxdelay) }
            if ($PSBoundParameters.ContainsKey('net1label')) { $Payload.Add('net1label', $net1label) }
            if ($PSBoundParameters.ContainsKey('minrttnet1')) { $Payload.Add('minrttnet1', $minrttnet1) }
            if ($PSBoundParameters.ContainsKey('lr1coeflist')) { $Payload.Add('lr1coeflist', $lr1coeflist) }
            if ($PSBoundParameters.ContainsKey('lr1probthresh')) { $Payload.Add('lr1probthresh', $lr1probthresh) }
            if ($PSBoundParameters.ContainsKey('net1cclscale')) { $Payload.Add('net1cclscale', $net1cclscale) }
            if ($PSBoundParameters.ContainsKey('net1csqscale')) { $Payload.Add('net1csqscale', $net1csqscale) }
            if ($PSBoundParameters.ContainsKey('net1logcoef')) { $Payload.Add('net1logcoef', $net1logcoef) }
            if ($PSBoundParameters.ContainsKey('net2label')) { $Payload.Add('net2label', $net2label) }
            if ($PSBoundParameters.ContainsKey('minrttnet2')) { $Payload.Add('minrttnet2', $minrttnet2) }
            if ($PSBoundParameters.ContainsKey('lr2coeflist')) { $Payload.Add('lr2coeflist', $lr2coeflist) }
            if ($PSBoundParameters.ContainsKey('lr2probthresh')) { $Payload.Add('lr2probthresh', $lr2probthresh) }
            if ($PSBoundParameters.ContainsKey('net2cclscale')) { $Payload.Add('net2cclscale', $net2cclscale) }
            if ($PSBoundParameters.ContainsKey('net2csqscale')) { $Payload.Add('net2csqscale', $net2csqscale) }
            if ($PSBoundParameters.ContainsKey('net2logcoef')) { $Payload.Add('net2logcoef', $net2logcoef) }
            if ($PSBoundParameters.ContainsKey('net3label')) { $Payload.Add('net3label', $net3label) }
            if ($PSBoundParameters.ContainsKey('minrttnet3')) { $Payload.Add('minrttnet3', $minrttnet3) }
            if ($PSBoundParameters.ContainsKey('net3cclscale')) { $Payload.Add('net3cclscale', $net3cclscale) }
            if ($PSBoundParameters.ContainsKey('net3csqscale')) { $Payload.Add('net3csqscale', $net3csqscale) }
            if ($PSBoundParameters.ContainsKey('net3logcoef')) { $Payload.Add('net3logcoef', $net3logcoef) }
 
            if ($PSCmdlet.ShouldProcess("nscqaparam", "Update NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -Type nscqaparam -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
            Write-Output $result

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUpdateNscqaparam: Finished"
    }
}

function Invoke-ADCUnsetNscqaparam {
<#
    .SYNOPSIS
        Unset NS configuration Object
    .DESCRIPTION
        Unset NS configuration Object 
   .PARAMETER harqretxdelay 
       HARQ retransmission delay (in ms). 
   .PARAMETER net1label 
       Name of the network label. 
   .PARAMETER minrttnet1 
       MIN RTT (in ms) for the first network. 
   .PARAMETER lr1coeflist 
       coefficients values for Label1. 
   .PARAMETER lr1probthresh 
       Probability threshold values for LR model to differentiate between NET1 and reset(NET2 and NET3). 
   .PARAMETER net1cclscale 
       Three congestion level scores limits corresponding to None, Low, Medium. 
   .PARAMETER net1csqscale 
       Three signal quality level scores limits corresponding to Excellent, Good, Fair. 
   .PARAMETER net1logcoef 
       Connection quality ranking Log coefficients of network 1. 
   .PARAMETER net2label 
       Name of the network label 2. 
   .PARAMETER minrttnet2 
       MIN RTT (in ms) for the second network. 
   .PARAMETER net2cclscale 
       Three congestion level scores limits corresponding to None, Low, Medium. 
   .PARAMETER net2csqscale 
       Three signal quality level scores limits corresponding to Excellent, Good, Fair. 
   .PARAMETER net2logcoef 
       Connnection quality ranking Log coefficients of network 2. 
   .PARAMETER net3label 
       Name of the network label 3. 
   .PARAMETER minrttnet3 
       MIN RTT (in ms) for the third network. 
   .PARAMETER net3cclscale 
       Three congestion level scores limits corresponding to None, Low, Medium. 
   .PARAMETER net3csqscale 
       Three signal quality level scores limits corresponding to Excellent, Good, Fair. 
   .PARAMETER net3logcoef 
       Connection quality ranking Log coefficients of network 3.
    .EXAMPLE
        Invoke-ADCUnsetNscqaparam 
    .NOTES
        File Name : Invoke-ADCUnsetNscqaparam
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nscqaparam
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Boolean]$harqretxdelay ,

        [Boolean]$net1label ,

        [Boolean]$minrttnet1 ,

        [Boolean]$lr1coeflist ,

        [Boolean]$lr1probthresh ,

        [Boolean]$net1cclscale ,

        [Boolean]$net1csqscale ,

        [Boolean]$net1logcoef ,

        [Boolean]$net2label ,

        [Boolean]$minrttnet2 ,

        [Boolean]$net2cclscale ,

        [Boolean]$net2csqscale ,

        [Boolean]$net2logcoef ,

        [Boolean]$net3label ,

        [Boolean]$minrttnet3 ,

        [Boolean]$net3cclscale ,

        [Boolean]$net3csqscale ,

        [Boolean]$net3logcoef 
    )
    begin {
        Write-Verbose "Invoke-ADCUnsetNscqaparam: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('harqretxdelay')) { $Payload.Add('harqretxdelay', $harqretxdelay) }
            if ($PSBoundParameters.ContainsKey('net1label')) { $Payload.Add('net1label', $net1label) }
            if ($PSBoundParameters.ContainsKey('minrttnet1')) { $Payload.Add('minrttnet1', $minrttnet1) }
            if ($PSBoundParameters.ContainsKey('lr1coeflist')) { $Payload.Add('lr1coeflist', $lr1coeflist) }
            if ($PSBoundParameters.ContainsKey('lr1probthresh')) { $Payload.Add('lr1probthresh', $lr1probthresh) }
            if ($PSBoundParameters.ContainsKey('net1cclscale')) { $Payload.Add('net1cclscale', $net1cclscale) }
            if ($PSBoundParameters.ContainsKey('net1csqscale')) { $Payload.Add('net1csqscale', $net1csqscale) }
            if ($PSBoundParameters.ContainsKey('net1logcoef')) { $Payload.Add('net1logcoef', $net1logcoef) }
            if ($PSBoundParameters.ContainsKey('net2label')) { $Payload.Add('net2label', $net2label) }
            if ($PSBoundParameters.ContainsKey('minrttnet2')) { $Payload.Add('minrttnet2', $minrttnet2) }
            if ($PSBoundParameters.ContainsKey('net2cclscale')) { $Payload.Add('net2cclscale', $net2cclscale) }
            if ($PSBoundParameters.ContainsKey('net2csqscale')) { $Payload.Add('net2csqscale', $net2csqscale) }
            if ($PSBoundParameters.ContainsKey('net2logcoef')) { $Payload.Add('net2logcoef', $net2logcoef) }
            if ($PSBoundParameters.ContainsKey('net3label')) { $Payload.Add('net3label', $net3label) }
            if ($PSBoundParameters.ContainsKey('minrttnet3')) { $Payload.Add('minrttnet3', $minrttnet3) }
            if ($PSBoundParameters.ContainsKey('net3cclscale')) { $Payload.Add('net3cclscale', $net3cclscale) }
            if ($PSBoundParameters.ContainsKey('net3csqscale')) { $Payload.Add('net3csqscale', $net3csqscale) }
            if ($PSBoundParameters.ContainsKey('net3logcoef')) { $Payload.Add('net3logcoef', $net3logcoef) }
            if ($PSCmdlet.ShouldProcess("nscqaparam", "Unset NS configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nscqaparam -Action unset -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUnsetNscqaparam: Finished"
    }
}

function Invoke-ADCGetNscqaparam {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER GetAll 
        Retreive all nscqaparam object(s)
    .PARAMETER Count
        If specified, the count of the nscqaparam object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNscqaparam
    .EXAMPLE 
        Invoke-ADCGetNscqaparam -GetAll
    .EXAMPLE
        Invoke-ADCGetNscqaparam -name <string>
    .EXAMPLE
        Invoke-ADCGetNscqaparam -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNscqaparam
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nscqaparam/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetNscqaparam: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all nscqaparam objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nscqaparam -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nscqaparam objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nscqaparam -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nscqaparam objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nscqaparam -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nscqaparam configuration for property ''"

            } else {
                Write-Verbose "Retrieving nscqaparam configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nscqaparam -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNscqaparam: Ended"
    }
}

function Invoke-ADCReleaseNsdhcpip {
<#
    .SYNOPSIS
        Release NS configuration Object
    .DESCRIPTION
        Release NS configuration Object 
    .EXAMPLE
        Invoke-ADCReleaseNsdhcpip 
    .NOTES
        File Name : Invoke-ADCReleaseNsdhcpip
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsdhcpip/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession) 

    )
    begin {
        Write-Verbose "Invoke-ADCReleaseNsdhcpip: Starting"
    }
    process {
        try {
            $Payload = @{

            }

            if ($PSCmdlet.ShouldProcess($Name, "Release NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nsdhcpip -Action release -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $result
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCReleaseNsdhcpip: Finished"
    }
}

function Invoke-ADCUpdateNsdhcpparams {
<#
    .SYNOPSIS
        Update NS configuration Object
    .DESCRIPTION
        Update NS configuration Object 
    .PARAMETER dhcpclient 
        Enables DHCP client to acquire IP address from the DHCP server in the next boot. When set to OFF, disables the DHCP client in the next boot.  
        Default value: OFF  
        Possible values = ON, OFF 
    .PARAMETER saveroute 
        DHCP acquired routes are saved on the Citrix ADC.  
        Default value: OFF  
        Possible values = ON, OFF
    .EXAMPLE
        Invoke-ADCUpdateNsdhcpparams 
    .NOTES
        File Name : Invoke-ADCUpdateNsdhcpparams
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsdhcpparams/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [ValidateSet('ON', 'OFF')]
        [string]$dhcpclient ,

        [ValidateSet('ON', 'OFF')]
        [string]$saveroute 

    )
    begin {
        Write-Verbose "Invoke-ADCUpdateNsdhcpparams: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('dhcpclient')) { $Payload.Add('dhcpclient', $dhcpclient) }
            if ($PSBoundParameters.ContainsKey('saveroute')) { $Payload.Add('saveroute', $saveroute) }
 
            if ($PSCmdlet.ShouldProcess("nsdhcpparams", "Update NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -Type nsdhcpparams -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
            Write-Output $result

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUpdateNsdhcpparams: Finished"
    }
}

function Invoke-ADCUnsetNsdhcpparams {
<#
    .SYNOPSIS
        Unset NS configuration Object
    .DESCRIPTION
        Unset NS configuration Object 
   .PARAMETER dhcpclient 
       Enables DHCP client to acquire IP address from the DHCP server in the next boot. When set to OFF, disables the DHCP client in the next boot.  
       Possible values = ON, OFF 
   .PARAMETER saveroute 
       DHCP acquired routes are saved on the Citrix ADC.  
       Possible values = ON, OFF
    .EXAMPLE
        Invoke-ADCUnsetNsdhcpparams 
    .NOTES
        File Name : Invoke-ADCUnsetNsdhcpparams
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsdhcpparams
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Boolean]$dhcpclient ,

        [Boolean]$saveroute 
    )
    begin {
        Write-Verbose "Invoke-ADCUnsetNsdhcpparams: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('dhcpclient')) { $Payload.Add('dhcpclient', $dhcpclient) }
            if ($PSBoundParameters.ContainsKey('saveroute')) { $Payload.Add('saveroute', $saveroute) }
            if ($PSCmdlet.ShouldProcess("nsdhcpparams", "Unset NS configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nsdhcpparams -Action unset -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUnsetNsdhcpparams: Finished"
    }
}

function Invoke-ADCGetNsdhcpparams {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER GetAll 
        Retreive all nsdhcpparams object(s)
    .PARAMETER Count
        If specified, the count of the nsdhcpparams object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNsdhcpparams
    .EXAMPLE 
        Invoke-ADCGetNsdhcpparams -GetAll
    .EXAMPLE
        Invoke-ADCGetNsdhcpparams -name <string>
    .EXAMPLE
        Invoke-ADCGetNsdhcpparams -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNsdhcpparams
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsdhcpparams/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetNsdhcpparams: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all nsdhcpparams objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsdhcpparams -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nsdhcpparams objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsdhcpparams -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nsdhcpparams objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsdhcpparams -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nsdhcpparams configuration for property ''"

            } else {
                Write-Verbose "Retrieving nsdhcpparams configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsdhcpparams -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNsdhcpparams: Ended"
    }
}

function Invoke-ADCUpdateNsdiameter {
<#
    .SYNOPSIS
        Update NS configuration Object
    .DESCRIPTION
        Update NS configuration Object 
    .PARAMETER identity 
        DiameterIdentity to be used by NS. DiameterIdentity is used to identify a Diameter node uniquely. Before setting up diameter configuration, Citrix ADC (as a Diameter node) MUST be assigned a unique DiameterIdentity.  
        example =>  
        set ns diameter -identity netscaler.com  
        Now whenever Citrix ADC needs to use identity in diameter messages. It will use 'netscaler.com' as Origin-Host AVP as defined in RFC3588  
        .  
        Minimum length = 1 
    .PARAMETER realm 
        Diameter Realm to be used by NS.  
        example =>  
        set ns diameter -realm com  
        Now whenever Citrix ADC system needs to use realm in diameter messages. It will use 'com' as Origin-Realm AVP as defined in RFC3588  
        .  
        Minimum length = 1 
    .PARAMETER serverclosepropagation 
        when a Server connection goes down, whether to close the corresponding client connection if there were requests pending on the server.  
        Default value: NO  
        Possible values = YES, NO 
    .PARAMETER ownernode 
        ID of the cluster node for which the diameter id is set, can be configured only through CLIP.  
        Default value: -1  
        Minimum value = 0  
        Maximum value = 31 
    .PARAMETER PassThru 
        Return details about the created nsdiameter item.
    .EXAMPLE
        Invoke-ADCUpdateNsdiameter 
    .NOTES
        File Name : Invoke-ADCUpdateNsdiameter
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsdiameter/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$identity ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$realm ,

        [ValidateSet('YES', 'NO')]
        [string]$serverclosepropagation ,

        [ValidateRange(0, 31)]
        [double]$ownernode ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCUpdateNsdiameter: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('identity')) { $Payload.Add('identity', $identity) }
            if ($PSBoundParameters.ContainsKey('realm')) { $Payload.Add('realm', $realm) }
            if ($PSBoundParameters.ContainsKey('serverclosepropagation')) { $Payload.Add('serverclosepropagation', $serverclosepropagation) }
            if ($PSBoundParameters.ContainsKey('ownernode')) { $Payload.Add('ownernode', $ownernode) }
 
            if ($PSCmdlet.ShouldProcess("nsdiameter", "Update NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -Type nsdiameter -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetNsdiameter -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUpdateNsdiameter: Finished"
    }
}

function Invoke-ADCUnsetNsdiameter {
<#
    .SYNOPSIS
        Unset NS configuration Object
    .DESCRIPTION
        Unset NS configuration Object 
   .PARAMETER serverclosepropagation 
       when a Server connection goes down, whether to close the corresponding client connection if there were requests pending on the server.  
       Possible values = YES, NO 
   .PARAMETER ownernode 
       ID of the cluster node for which the diameter id is set, can be configured only through CLIP.
    .EXAMPLE
        Invoke-ADCUnsetNsdiameter 
    .NOTES
        File Name : Invoke-ADCUnsetNsdiameter
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsdiameter
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Boolean]$serverclosepropagation ,

        [Boolean]$ownernode 
    )
    begin {
        Write-Verbose "Invoke-ADCUnsetNsdiameter: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('serverclosepropagation')) { $Payload.Add('serverclosepropagation', $serverclosepropagation) }
            if ($PSBoundParameters.ContainsKey('ownernode')) { $Payload.Add('ownernode', $ownernode) }
            if ($PSCmdlet.ShouldProcess("nsdiameter", "Unset NS configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nsdiameter -Action unset -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUnsetNsdiameter: Finished"
    }
}

function Invoke-ADCGetNsdiameter {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER ownernode 
       ID of the cluster node for which the diameter id is set, can be configured only through CLIP. 
    .PARAMETER GetAll 
        Retreive all nsdiameter object(s)
    .PARAMETER Count
        If specified, the count of the nsdiameter object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNsdiameter
    .EXAMPLE 
        Invoke-ADCGetNsdiameter -GetAll 
    .EXAMPLE 
        Invoke-ADCGetNsdiameter -Count
    .EXAMPLE
        Invoke-ADCGetNsdiameter -name <string>
    .EXAMPLE
        Invoke-ADCGetNsdiameter -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNsdiameter
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsdiameter/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateRange(0, 31)]
        [double]$ownernode,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll,

        [Parameter(ParameterSetName = 'GetAll')]
        [Parameter(ParameterSetName = 'Get')]
        [Switch]$ViewSummary

    )
    begin {
        Write-Verbose "Invoke-ADCGetNsdiameter: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all nsdiameter objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsdiameter -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nsdiameter objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsdiameter -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nsdiameter objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsdiameter -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nsdiameter configuration for property 'ownernode'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsdiameter -Resource $ownernode -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving nsdiameter configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsdiameter -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNsdiameter: Ended"
    }
}

function Invoke-ADCAddNsencryptionkey {
<#
    .SYNOPSIS
        Add NS configuration Object
    .DESCRIPTION
        Add NS configuration Object 
    .PARAMETER name 
        Key name. This follows the same syntax rules as other expression entity names:  
        It must begin with an alpha character (A-Z or a-z) or an underscore (_).  
        The rest of the characters must be alpha, numeric (0-9) or underscores.  
        It cannot be re or xp (reserved for regular and XPath expressions).  
        It cannot be an expression reserved word (e.g. SYS or HTTP).  
        It cannot be used for an existing expression object (HTTP callout, patset, dataset, stringmap, or named expression).  
        Minimum length = 1 
    .PARAMETER method 
        Cipher method to be used to encrypt and decrypt content.  
        NONE - no encryption or decryption is performed The output of ENCRYPT() and DECRYPT() is the same as the input.  
        RC4 - the RC4 stream cipher with a 128 bit (16 byte) key; RC4 is now considered insecure and should only be used if required by existing applciations.  
        DES[-<mode>] - the Data Encryption Standard (DES) block cipher with a 64-bit (8 byte) key, with 56 data bits and 8 parity bits. DES is considered less secure than DES3 or AES so it should only be used if required by an existing applicastion. The optional mode is described below; DES without a mode is equivalent to DES-CBC.  
        DES3[-<mode>] - the Triple Data Encryption Standard (DES) block cipher with a 192-bit (24 byte) key. The optional mode is described below; DES3 without a mode is equivalent to DES3-CBC.  
        AES<keysize>[-<mode>] - the Advanced Encryption Standard block cipher, available with 128 bit (16 byte), 192 bit (24 byte), and 256 bit (32 byte) keys. The optional mode is described below; AES<keysize> without a mode is equivalent to AES<keysize>-CBC.  
        For a block cipher, the <mode> specifies how multiple blocks of plaintext are encrypted and how the Initialization Vector (IV) is used. Choices are  
        CBC (Cipher Block Chaining) - Each block of plaintext is XORed with the previous ciphertext block, or IV for the first block, before being encrypted. Padding is required if the plaintext is not a multiple of the cipher block size.  
        CFB (Cipher Feedback) - The previous ciphertext block, or the IV for the first block, is encrypted and the output is XORed with the current plaintext block to create the current ciphertext block. The 128-bit version of CFB is provided. Padding is not required.  
        OFB (Output Feedback) - A keystream is generated by applying the cipher successfully to the IV and XORing the keystream blocks with the plaintext. Padding is not required.  
        ECB (Electronic Codebook) - Each block of plaintext is independently encrypted. An IV is not used. Padding is required. This mode is considered less secure than the other modes because the same plaintext always produces the same encrypted text and should only be used if required by an existing application.  
        Possible values = NONE, RC4, DES3, AES128, AES192, AES256, DES, DES-CBC, DES-CFB, DES-OFB, DES-ECB, DES3-CBC, DES3-CFB, DES3-OFB, DES3-ECB, AES128-CBC, AES128-CFB, AES128-OFB, AES128-ECB, AES192-CBC, AES192-CFB, AES192-OFB, AES192-ECB, AES256-CBC, AES256-CFB, AES256-OFB, AES256-ECB 
    .PARAMETER keyvalue 
        The hex-encoded key value. The length is determined by the cipher method:  
        RC4 - 16 bytes  
        DES - 8 bytes (all modes)  
        DES3 - 24 bytes (all modes)  
        AES128 - 16 bytes (all modes)  
        AES192 - 24 bytes (all modes)  
        AES256 - 32 bytes (all modes)  
        Note that the keyValue will be encrypted when it it is saved.  
        There is a special key value AUTO which generates a new random key for the specified method. This kind of key is  
        intended for use cases where the NetScaler both encrypts and decrypts the same data, such an HTTP header. 
    .PARAMETER padding 
        Enables or disables the padding of plaintext to meet the block size requirements of block ciphers:  
        ON - For encryption, PKCS5/7 padding is used, which appends n bytes of value n on the end of the plaintext to bring it to the cipher block lnegth. If the plaintext length is alraady a multiple of the block length, an additional block with bytes of value block_length will be added. For decryption, ISO 10126 padding is accepted, which expects the last byte of the block to be the number of added pad bytes. Note that this accepts PKCS5/7 padding, as well as ANSI_X923 padding. Padding ON is the default for the ECB and CBD modes.  
        OFF - No padding. An Undef error will occur with the ECB or CBC modes if the plaintext length is not a multitple of the cipher block size. This can be used with the CFB and OFB modes, and with the ECB and CBC modes if the plaintext will always be an integral number of blocks, or if custom padding is implemented using a policy extension function. Padding OFf is the default for CFB and OFB modes.  
        Default value: DEFAULT  
        Possible values = OFF, ON 
    .PARAMETER iv 
        The initalization voector (IV) for a block cipher, one block of data used to initialize the encryption. The best practice is to not specify an IV, in which case a new random IV will be generated for each encryption. The format must be iv_data or keyid_iv_data to include the generated IV in the encrypted data. The IV should only be specified if it cannot be included in the encrypted data. The IV length is the cipher block size:  
        RC4 - not used (error if IV is specified)  
        DES - 8 bytes (all modes)  
        DES3 - 8 bytes (all modes)  
        AES128 - 16 bytes (all modes)  
        AES192 - 16 bytes (all modes)  
        AES256 - 16 bytes (all modes). 
    .PARAMETER comment 
        Comments associated with this encryption key. 
    .PARAMETER PassThru 
        Return details about the created nsencryptionkey item.
    .EXAMPLE
        Invoke-ADCAddNsencryptionkey -name <string> -method <string>
    .NOTES
        File Name : Invoke-ADCAddNsencryptionkey
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsencryptionkey/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name ,

        [Parameter(Mandatory = $true)]
        [ValidateSet('NONE', 'RC4', 'DES3', 'AES128', 'AES192', 'AES256', 'DES', 'DES-CBC', 'DES-CFB', 'DES-OFB', 'DES-ECB', 'DES3-CBC', 'DES3-CFB', 'DES3-OFB', 'DES3-ECB', 'AES128-CBC', 'AES128-CFB', 'AES128-OFB', 'AES128-ECB', 'AES192-CBC', 'AES192-CFB', 'AES192-OFB', 'AES192-ECB', 'AES256-CBC', 'AES256-CFB', 'AES256-OFB', 'AES256-ECB')]
        [string]$method ,

        [string]$keyvalue ,

        [ValidateSet('OFF', 'ON')]
        [string]$padding = 'DEFAULT' ,

        [string]$iv ,

        [string]$comment ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddNsencryptionkey: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
                method = $method
            }
            if ($PSBoundParameters.ContainsKey('keyvalue')) { $Payload.Add('keyvalue', $keyvalue) }
            if ($PSBoundParameters.ContainsKey('padding')) { $Payload.Add('padding', $padding) }
            if ($PSBoundParameters.ContainsKey('iv')) { $Payload.Add('iv', $iv) }
            if ($PSBoundParameters.ContainsKey('comment')) { $Payload.Add('comment', $comment) }
 
            if ($PSCmdlet.ShouldProcess("nsencryptionkey", "Add NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nsencryptionkey -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetNsencryptionkey -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddNsencryptionkey: Finished"
    }
}

function Invoke-ADCUpdateNsencryptionkey {
<#
    .SYNOPSIS
        Update NS configuration Object
    .DESCRIPTION
        Update NS configuration Object 
    .PARAMETER name 
        Key name. This follows the same syntax rules as other expression entity names:  
        It must begin with an alpha character (A-Z or a-z) or an underscore (_).  
        The rest of the characters must be alpha, numeric (0-9) or underscores.  
        It cannot be re or xp (reserved for regular and XPath expressions).  
        It cannot be an expression reserved word (e.g. SYS or HTTP).  
        It cannot be used for an existing expression object (HTTP callout, patset, dataset, stringmap, or named expression).  
        Minimum length = 1 
    .PARAMETER method 
        Cipher method to be used to encrypt and decrypt content.  
        NONE - no encryption or decryption is performed The output of ENCRYPT() and DECRYPT() is the same as the input.  
        RC4 - the RC4 stream cipher with a 128 bit (16 byte) key; RC4 is now considered insecure and should only be used if required by existing applciations.  
        DES[-<mode>] - the Data Encryption Standard (DES) block cipher with a 64-bit (8 byte) key, with 56 data bits and 8 parity bits. DES is considered less secure than DES3 or AES so it should only be used if required by an existing applicastion. The optional mode is described below; DES without a mode is equivalent to DES-CBC.  
        DES3[-<mode>] - the Triple Data Encryption Standard (DES) block cipher with a 192-bit (24 byte) key. The optional mode is described below; DES3 without a mode is equivalent to DES3-CBC.  
        AES<keysize>[-<mode>] - the Advanced Encryption Standard block cipher, available with 128 bit (16 byte), 192 bit (24 byte), and 256 bit (32 byte) keys. The optional mode is described below; AES<keysize> without a mode is equivalent to AES<keysize>-CBC.  
        For a block cipher, the <mode> specifies how multiple blocks of plaintext are encrypted and how the Initialization Vector (IV) is used. Choices are  
        CBC (Cipher Block Chaining) - Each block of plaintext is XORed with the previous ciphertext block, or IV for the first block, before being encrypted. Padding is required if the plaintext is not a multiple of the cipher block size.  
        CFB (Cipher Feedback) - The previous ciphertext block, or the IV for the first block, is encrypted and the output is XORed with the current plaintext block to create the current ciphertext block. The 128-bit version of CFB is provided. Padding is not required.  
        OFB (Output Feedback) - A keystream is generated by applying the cipher successfully to the IV and XORing the keystream blocks with the plaintext. Padding is not required.  
        ECB (Electronic Codebook) - Each block of plaintext is independently encrypted. An IV is not used. Padding is required. This mode is considered less secure than the other modes because the same plaintext always produces the same encrypted text and should only be used if required by an existing application.  
        Possible values = NONE, RC4, DES3, AES128, AES192, AES256, DES, DES-CBC, DES-CFB, DES-OFB, DES-ECB, DES3-CBC, DES3-CFB, DES3-OFB, DES3-ECB, AES128-CBC, AES128-CFB, AES128-OFB, AES128-ECB, AES192-CBC, AES192-CFB, AES192-OFB, AES192-ECB, AES256-CBC, AES256-CFB, AES256-OFB, AES256-ECB 
    .PARAMETER keyvalue 
        The hex-encoded key value. The length is determined by the cipher method:  
        RC4 - 16 bytes  
        DES - 8 bytes (all modes)  
        DES3 - 24 bytes (all modes)  
        AES128 - 16 bytes (all modes)  
        AES192 - 24 bytes (all modes)  
        AES256 - 32 bytes (all modes)  
        Note that the keyValue will be encrypted when it it is saved.  
        There is a special key value AUTO which generates a new random key for the specified method. This kind of key is  
        intended for use cases where the NetScaler both encrypts and decrypts the same data, such an HTTP header. 
    .PARAMETER padding 
        Enables or disables the padding of plaintext to meet the block size requirements of block ciphers:  
        ON - For encryption, PKCS5/7 padding is used, which appends n bytes of value n on the end of the plaintext to bring it to the cipher block lnegth. If the plaintext length is alraady a multiple of the block length, an additional block with bytes of value block_length will be added. For decryption, ISO 10126 padding is accepted, which expects the last byte of the block to be the number of added pad bytes. Note that this accepts PKCS5/7 padding, as well as ANSI_X923 padding. Padding ON is the default for the ECB and CBD modes.  
        OFF - No padding. An Undef error will occur with the ECB or CBC modes if the plaintext length is not a multitple of the cipher block size. This can be used with the CFB and OFB modes, and with the ECB and CBC modes if the plaintext will always be an integral number of blocks, or if custom padding is implemented using a policy extension function. Padding OFf is the default for CFB and OFB modes.  
        Default value: DEFAULT  
        Possible values = OFF, ON 
    .PARAMETER iv 
        The initalization voector (IV) for a block cipher, one block of data used to initialize the encryption. The best practice is to not specify an IV, in which case a new random IV will be generated for each encryption. The format must be iv_data or keyid_iv_data to include the generated IV in the encrypted data. The IV should only be specified if it cannot be included in the encrypted data. The IV length is the cipher block size:  
        RC4 - not used (error if IV is specified)  
        DES - 8 bytes (all modes)  
        DES3 - 8 bytes (all modes)  
        AES128 - 16 bytes (all modes)  
        AES192 - 16 bytes (all modes)  
        AES256 - 16 bytes (all modes). 
    .PARAMETER comment 
        Comments associated with this encryption key. 
    .PARAMETER PassThru 
        Return details about the created nsencryptionkey item.
    .EXAMPLE
        Invoke-ADCUpdateNsencryptionkey -name <string>
    .NOTES
        File Name : Invoke-ADCUpdateNsencryptionkey
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsencryptionkey/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name ,

        [ValidateSet('NONE', 'RC4', 'DES3', 'AES128', 'AES192', 'AES256', 'DES', 'DES-CBC', 'DES-CFB', 'DES-OFB', 'DES-ECB', 'DES3-CBC', 'DES3-CFB', 'DES3-OFB', 'DES3-ECB', 'AES128-CBC', 'AES128-CFB', 'AES128-OFB', 'AES128-ECB', 'AES192-CBC', 'AES192-CFB', 'AES192-OFB', 'AES192-ECB', 'AES256-CBC', 'AES256-CFB', 'AES256-OFB', 'AES256-ECB')]
        [string]$method ,

        [string]$keyvalue ,

        [ValidateSet('OFF', 'ON')]
        [string]$padding ,

        [string]$iv ,

        [string]$comment ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCUpdateNsencryptionkey: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
            }
            if ($PSBoundParameters.ContainsKey('method')) { $Payload.Add('method', $method) }
            if ($PSBoundParameters.ContainsKey('keyvalue')) { $Payload.Add('keyvalue', $keyvalue) }
            if ($PSBoundParameters.ContainsKey('padding')) { $Payload.Add('padding', $padding) }
            if ($PSBoundParameters.ContainsKey('iv')) { $Payload.Add('iv', $iv) }
            if ($PSBoundParameters.ContainsKey('comment')) { $Payload.Add('comment', $comment) }
 
            if ($PSCmdlet.ShouldProcess("nsencryptionkey", "Update NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -Type nsencryptionkey -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetNsencryptionkey -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUpdateNsencryptionkey: Finished"
    }
}

function Invoke-ADCUnsetNsencryptionkey {
<#
    .SYNOPSIS
        Unset NS configuration Object
    .DESCRIPTION
        Unset NS configuration Object 
   .PARAMETER name 
       Key name. This follows the same syntax rules as other expression entity names:  
       It must begin with an alpha character (A-Z or a-z) or an underscore (_).  
       The rest of the characters must be alpha, numeric (0-9) or underscores.  
       It cannot be re or xp (reserved for regular and XPath expressions).  
       It cannot be an expression reserved word (e.g. SYS or HTTP).  
       It cannot be used for an existing expression object (HTTP callout, patset, dataset, stringmap, or named expression). 
   .PARAMETER padding 
       Enables or disables the padding of plaintext to meet the block size requirements of block ciphers:  
       ON - For encryption, PKCS5/7 padding is used, which appends n bytes of value n on the end of the plaintext to bring it to the cipher block lnegth. If the plaintext length is alraady a multiple of the block length, an additional block with bytes of value block_length will be added. For decryption, ISO 10126 padding is accepted, which expects the last byte of the block to be the number of added pad bytes. Note that this accepts PKCS5/7 padding, as well as ANSI_X923 padding. Padding ON is the default for the ECB and CBD modes.  
       OFF - No padding. An Undef error will occur with the ECB or CBC modes if the plaintext length is not a multitple of the cipher block size. This can be used with the CFB and OFB modes, and with the ECB and CBC modes if the plaintext will always be an integral number of blocks, or if custom padding is implemented using a policy extension function. Padding OFf is the default for CFB and OFB modes.  
       Possible values = OFF, ON 
   .PARAMETER iv 
       The initalization voector (IV) for a block cipher, one block of data used to initialize the encryption. The best practice is to not specify an IV, in which case a new random IV will be generated for each encryption. The format must be iv_data or keyid_iv_data to include the generated IV in the encrypted data. The IV should only be specified if it cannot be included in the encrypted data. The IV length is the cipher block size:  
       RC4 - not used (error if IV is specified)  
       DES - 8 bytes (all modes)  
       DES3 - 8 bytes (all modes)  
       AES128 - 16 bytes (all modes)  
       AES192 - 16 bytes (all modes)  
       AES256 - 16 bytes (all modes). 
   .PARAMETER comment 
       Comments associated with this encryption key.
    .EXAMPLE
        Invoke-ADCUnsetNsencryptionkey -name <string>
    .NOTES
        File Name : Invoke-ADCUnsetNsencryptionkey
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsencryptionkey
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name ,

        [Boolean]$padding ,

        [Boolean]$iv ,

        [Boolean]$comment 
    )
    begin {
        Write-Verbose "Invoke-ADCUnsetNsencryptionkey: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
            }
            if ($PSBoundParameters.ContainsKey('padding')) { $Payload.Add('padding', $padding) }
            if ($PSBoundParameters.ContainsKey('iv')) { $Payload.Add('iv', $iv) }
            if ($PSBoundParameters.ContainsKey('comment')) { $Payload.Add('comment', $comment) }
            if ($PSCmdlet.ShouldProcess("$name", "Unset NS configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nsencryptionkey -Action unset -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUnsetNsencryptionkey: Finished"
    }
}

function Invoke-ADCDeleteNsencryptionkey {
<#
    .SYNOPSIS
        Delete NS configuration Object
    .DESCRIPTION
        Delete NS configuration Object
    .PARAMETER name 
       Key name. This follows the same syntax rules as other expression entity names:  
       It must begin with an alpha character (A-Z or a-z) or an underscore (_).  
       The rest of the characters must be alpha, numeric (0-9) or underscores.  
       It cannot be re or xp (reserved for regular and XPath expressions).  
       It cannot be an expression reserved word (e.g. SYS or HTTP).  
       It cannot be used for an existing expression object (HTTP callout, patset, dataset, stringmap, or named expression).  
       Minimum length = 1 
    .EXAMPLE
        Invoke-ADCDeleteNsencryptionkey -name <string>
    .NOTES
        File Name : Invoke-ADCDeleteNsencryptionkey
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsencryptionkey/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$name 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteNsencryptionkey: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }

            if ($PSCmdlet.ShouldProcess("$name", "Delete NS configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type nsencryptionkey -Resource $name -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteNsencryptionkey: Finished"
    }
}

function Invoke-ADCGetNsencryptionkey {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER name 
       Key name. This follows the same syntax rules as other expression entity names:  
       It must begin with an alpha character (A-Z or a-z) or an underscore (_).  
       The rest of the characters must be alpha, numeric (0-9) or underscores.  
       It cannot be re or xp (reserved for regular and XPath expressions).  
       It cannot be an expression reserved word (e.g. SYS or HTTP).  
       It cannot be used for an existing expression object (HTTP callout, patset, dataset, stringmap, or named expression). 
    .PARAMETER GetAll 
        Retreive all nsencryptionkey object(s)
    .PARAMETER Count
        If specified, the count of the nsencryptionkey object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNsencryptionkey
    .EXAMPLE 
        Invoke-ADCGetNsencryptionkey -GetAll 
    .EXAMPLE 
        Invoke-ADCGetNsencryptionkey -Count
    .EXAMPLE
        Invoke-ADCGetNsencryptionkey -name <string>
    .EXAMPLE
        Invoke-ADCGetNsencryptionkey -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNsencryptionkey
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsencryptionkey/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll,

        [Parameter(ParameterSetName = 'GetAll')]
        [Parameter(ParameterSetName = 'Get')]
        [Switch]$ViewSummary

    )
    begin {
        Write-Verbose "Invoke-ADCGetNsencryptionkey: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all nsencryptionkey objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsencryptionkey -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nsencryptionkey objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsencryptionkey -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nsencryptionkey objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsencryptionkey -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nsencryptionkey configuration for property 'name'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsencryptionkey -Resource $name -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving nsencryptionkey configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsencryptionkey -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNsencryptionkey: Ended"
    }
}

function Invoke-ADCUpdateNsencryptionparams {
<#
    .SYNOPSIS
        Update NS configuration Object
    .DESCRIPTION
        Update NS configuration Object 
    .PARAMETER method 
        Cipher method (and key length) to be used to encrypt and decrypt content. The default value is AES256.  
        Possible values = NONE, RC4, DES3, AES128, AES192, AES256, DES, DES-CBC, DES-CFB, DES-OFB, DES-ECB, DES3-CBC, DES3-CFB, DES3-OFB, DES3-ECB, AES128-CBC, AES128-CFB, AES128-OFB, AES128-ECB, AES192-CBC, AES192-CFB, AES192-OFB, AES192-ECB, AES256-CBC, AES256-CFB, AES256-OFB, AES256-ECB 
    .PARAMETER keyvalue 
        The base64-encoded key generation number, method, and key value.  
        Note:  
        * Do not include this argument if you are changing the encryption method.  
        * To generate a new key value for the current encryption method, specify an empty string \(""\) as the value of this parameter. The parameter is passed implicitly, with its automatically generated value, to the Citrix ADC packet engines even when it is not included in the command. Passing the parameter to the packet engines enables the appliance to save the key value to the configuration file and to propagate the key value to the secondary appliance in a high availability setup.
    .EXAMPLE
        Invoke-ADCUpdateNsencryptionparams -method <string>
    .NOTES
        File Name : Invoke-ADCUpdateNsencryptionparams
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsencryptionparams/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateSet('NONE', 'RC4', 'DES3', 'AES128', 'AES192', 'AES256', 'DES', 'DES-CBC', 'DES-CFB', 'DES-OFB', 'DES-ECB', 'DES3-CBC', 'DES3-CFB', 'DES3-OFB', 'DES3-ECB', 'AES128-CBC', 'AES128-CFB', 'AES128-OFB', 'AES128-ECB', 'AES192-CBC', 'AES192-CFB', 'AES192-OFB', 'AES192-ECB', 'AES256-CBC', 'AES256-CFB', 'AES256-OFB', 'AES256-ECB')]
        [string]$method ,

        [string]$keyvalue 

    )
    begin {
        Write-Verbose "Invoke-ADCUpdateNsencryptionparams: Starting"
    }
    process {
        try {
            $Payload = @{
                method = $method
            }
            if ($PSBoundParameters.ContainsKey('keyvalue')) { $Payload.Add('keyvalue', $keyvalue) }
 
            if ($PSCmdlet.ShouldProcess("nsencryptionparams", "Update NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -Type nsencryptionparams -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
            Write-Output $result

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUpdateNsencryptionparams: Finished"
    }
}

function Invoke-ADCGetNsencryptionparams {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER GetAll 
        Retreive all nsencryptionparams object(s)
    .PARAMETER Count
        If specified, the count of the nsencryptionparams object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNsencryptionparams
    .EXAMPLE 
        Invoke-ADCGetNsencryptionparams -GetAll
    .EXAMPLE
        Invoke-ADCGetNsencryptionparams -name <string>
    .EXAMPLE
        Invoke-ADCGetNsencryptionparams -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNsencryptionparams
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsencryptionparams/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetNsencryptionparams: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all nsencryptionparams objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsencryptionparams -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nsencryptionparams objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsencryptionparams -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nsencryptionparams objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsencryptionparams -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nsencryptionparams configuration for property ''"

            } else {
                Write-Verbose "Retrieving nsencryptionparams configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsencryptionparams -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNsencryptionparams: Ended"
    }
}

function Invoke-ADCGetNsevents {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER eventno 
       Event number starting from which events must be shown. 
    .PARAMETER GetAll 
        Retreive all nsevents object(s)
    .PARAMETER Count
        If specified, the count of the nsevents object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNsevents
    .EXAMPLE 
        Invoke-ADCGetNsevents -GetAll 
    .EXAMPLE 
        Invoke-ADCGetNsevents -Count
    .EXAMPLE
        Invoke-ADCGetNsevents -name <string>
    .EXAMPLE
        Invoke-ADCGetNsevents -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNsevents
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsevents/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByArgument')]
        [double]$eventno,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll,

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$ViewSummary

    )
    begin {
        Write-Verbose "Invoke-ADCGetNsevents: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all nsevents objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsevents -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nsevents objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsevents -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nsevents objects by arguments"
                $Arguments = @{ } 
                if ($PSBoundParameters.ContainsKey('eventno')) { $Arguments.Add('eventno', $eventno) }
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsevents -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nsevents configuration for property ''"

            } else {
                Write-Verbose "Retrieving nsevents configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsevents -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNsevents: Ended"
    }
}

function Invoke-ADCImportNsextension {
<#
    .SYNOPSIS
        Import NS configuration Object
    .DESCRIPTION
        Import NS configuration Object 
    .PARAMETER src 
        Local path to and name of, or URL (protocol, host, path, and file name) for, the file in which to store the imported extension.  
        NOTE: The import fails if the object to be imported is on an HTTPS server that requires client certificate authentication for access. 
    .PARAMETER name 
        Name to assign to the extension object on the Citrix ADC. 
    .PARAMETER comment 
        Any comments to preserve information about the extension object. 
    .PARAMETER overwrite 
        Overwrites the existing file.
    .EXAMPLE
        Invoke-ADCImportNsextension -src <string> -name <string>
    .NOTES
        File Name : Invoke-ADCImportNsextension
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsextension/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateLength(1, 2047)]
        [string]$src ,

        [Parameter(Mandatory = $true)]
        [ValidateLength(1, 31)]
        [string]$name ,

        [string]$comment ,

        [boolean]$overwrite 

    )
    begin {
        Write-Verbose "Invoke-ADCImportNsextension: Starting"
    }
    process {
        try {
            $Payload = @{
                src = $src
                name = $name
            }
            if ($PSBoundParameters.ContainsKey('comment')) { $Payload.Add('comment', $comment) }
            if ($PSBoundParameters.ContainsKey('overwrite')) { $Payload.Add('overwrite', $overwrite) }
            if ($PSCmdlet.ShouldProcess($Name, "Import NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nsextension -Action import -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $result
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCImportNsextension: Finished"
    }
}

function Invoke-ADCDeleteNsextension {
<#
    .SYNOPSIS
        Delete NS configuration Object
    .DESCRIPTION
        Delete NS configuration Object
    .PARAMETER name 
       Name to assign to the extension object on the Citrix ADC.  
       Minimum length = 1  
       Maximum length = 31 
    .EXAMPLE
        Invoke-ADCDeleteNsextension -name <string>
    .NOTES
        File Name : Invoke-ADCDeleteNsextension
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsextension/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$name 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteNsextension: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }

            if ($PSCmdlet.ShouldProcess("$name", "Delete NS configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type nsextension -Resource $name -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteNsextension: Finished"
    }
}

function Invoke-ADCAddNsextension {
<#
    .SYNOPSIS
        Add NS configuration Object
    .DESCRIPTION
        Add NS configuration Object 
    .PARAMETER name 
        Name to assign to the extension object on the Citrix ADC.  
        Minimum length = 1  
        Maximum length = 31 
    .PARAMETER comment 
        Any comments to preserve information about the extension object.  
        Maximum length = 128 
    .PARAMETER PassThru 
        Return details about the created nsextension item.
    .EXAMPLE
        Invoke-ADCAddNsextension -name <string>
    .NOTES
        File Name : Invoke-ADCAddNsextension
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsextension/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateLength(1, 31)]
        [string]$name ,

        [string]$comment ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddNsextension: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
            }
            if ($PSBoundParameters.ContainsKey('comment')) { $Payload.Add('comment', $comment) }
 
            if ($PSCmdlet.ShouldProcess("nsextension", "Add NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nsextension -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetNsextension -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddNsextension: Finished"
    }
}

function Invoke-ADCChangeNsextension {
<#
    .SYNOPSIS
        Change NS configuration Object
    .DESCRIPTION
        Change NS configuration Object 
    .PARAMETER PassThru 
        Return details about the created nsextension item.
    .EXAMPLE
        Invoke-ADCChangeNsextension 
    .NOTES
        File Name : Invoke-ADCChangeNsextension
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsextension/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCChangeNsextension: Starting"
    }
    process {
        try {
            $Payload = @{

            }

 
            if ($PSCmdlet.ShouldProcess("nsextension", "Change NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method  -Type nsextension -Payload $Payload -GetWarning
                #
                #
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetNsextension -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCChangeNsextension: Finished"
    }
}

function Invoke-ADCUpdateNsextension {
<#
    .SYNOPSIS
        Update NS configuration Object
    .DESCRIPTION
        Update NS configuration Object 
    .PARAMETER name 
        Name to assign to the extension object on the Citrix ADC.  
        Minimum length = 1  
        Maximum length = 31 
    .PARAMETER trace 
        Enables tracing to the NS log file of extension execution:  
        off - turns off tracing (equivalent to unset ns extension <extension-name> -trace)  
        calls - traces extension function calls with arguments and function returns with the first return value  
        lines - traces the above plus line numbers for executed extension lines  
        all - traces the above plus local variables changed by executed extension lines  
        Note that the DEBUG log level must be enabled to see extension tracing.  
        This can be done by set audit syslogParams -loglevel ALL or -loglevel DEBUG.  
        Default value: off  
        Possible values = off, calls, lines, all 
    .PARAMETER tracefunctions 
        Comma-separated list of extension functions to trace. By default, all extension functions are traced.  
        Maximum length = 256 
    .PARAMETER tracevariables 
        Comma-separated list of variables (in traced extension functions) to trace. By default, all variables are traced.  
        Maximum length = 256 
    .PARAMETER comment 
        Any comments to preserve information about the extension object.  
        Maximum length = 128 
    .PARAMETER PassThru 
        Return details about the created nsextension item.
    .EXAMPLE
        Invoke-ADCUpdateNsextension -name <string>
    .NOTES
        File Name : Invoke-ADCUpdateNsextension
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsextension/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateLength(1, 31)]
        [string]$name ,

        [ValidateSet('off', 'calls', 'lines', 'all')]
        [string]$trace ,

        [string]$tracefunctions ,

        [string]$tracevariables ,

        [string]$comment ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCUpdateNsextension: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
            }
            if ($PSBoundParameters.ContainsKey('trace')) { $Payload.Add('trace', $trace) }
            if ($PSBoundParameters.ContainsKey('tracefunctions')) { $Payload.Add('tracefunctions', $tracefunctions) }
            if ($PSBoundParameters.ContainsKey('tracevariables')) { $Payload.Add('tracevariables', $tracevariables) }
            if ($PSBoundParameters.ContainsKey('comment')) { $Payload.Add('comment', $comment) }
 
            if ($PSCmdlet.ShouldProcess("nsextension", "Update NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -Type nsextension -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetNsextension -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUpdateNsextension: Finished"
    }
}

function Invoke-ADCUnsetNsextension {
<#
    .SYNOPSIS
        Unset NS configuration Object
    .DESCRIPTION
        Unset NS configuration Object 
   .PARAMETER name 
       Name to assign to the extension object on the Citrix ADC. 
   .PARAMETER trace 
       Enables tracing to the NS log file of extension execution:  
       off - turns off tracing (equivalent to unset ns extension <extension-name> -trace)  
       calls - traces extension function calls with arguments and function returns with the first return value  
       lines - traces the above plus line numbers for executed extension lines  
       all - traces the above plus local variables changed by executed extension lines  
       Note that the DEBUG log level must be enabled to see extension tracing.  
       This can be done by set audit syslogParams -loglevel ALL or -loglevel DEBUG.  
       Possible values = off, calls, lines, all 
   .PARAMETER tracefunctions 
       Comma-separated list of extension functions to trace. By default, all extension functions are traced. 
   .PARAMETER tracevariables 
       Comma-separated list of variables (in traced extension functions) to trace. By default, all variables are traced. 
   .PARAMETER comment 
       Any comments to preserve information about the extension object.
    .EXAMPLE
        Invoke-ADCUnsetNsextension -name <string>
    .NOTES
        File Name : Invoke-ADCUnsetNsextension
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsextension
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateLength(1, 31)]
        [string]$name ,

        [Boolean]$trace ,

        [Boolean]$tracefunctions ,

        [Boolean]$tracevariables ,

        [Boolean]$comment 
    )
    begin {
        Write-Verbose "Invoke-ADCUnsetNsextension: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
            }
            if ($PSBoundParameters.ContainsKey('trace')) { $Payload.Add('trace', $trace) }
            if ($PSBoundParameters.ContainsKey('tracefunctions')) { $Payload.Add('tracefunctions', $tracefunctions) }
            if ($PSBoundParameters.ContainsKey('tracevariables')) { $Payload.Add('tracevariables', $tracevariables) }
            if ($PSBoundParameters.ContainsKey('comment')) { $Payload.Add('comment', $comment) }
            if ($PSCmdlet.ShouldProcess("$name", "Unset NS configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nsextension -Action unset -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUnsetNsextension: Finished"
    }
}

function Invoke-ADCGetNsextension {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER name 
       Name to assign to the extension object on the Citrix ADC. 
    .PARAMETER GetAll 
        Retreive all nsextension object(s)
    .PARAMETER Count
        If specified, the count of the nsextension object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNsextension
    .EXAMPLE 
        Invoke-ADCGetNsextension -GetAll 
    .EXAMPLE 
        Invoke-ADCGetNsextension -Count
    .EXAMPLE
        Invoke-ADCGetNsextension -name <string>
    .EXAMPLE
        Invoke-ADCGetNsextension -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNsextension
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsextension/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateLength(1, 31)]
        [string]$name,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll,

        [Parameter(ParameterSetName = 'GetAll')]
        [Parameter(ParameterSetName = 'Get')]
        [Switch]$ViewSummary

    )
    begin {
        Write-Verbose "Invoke-ADCGetNsextension: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all nsextension objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsextension -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nsextension objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsextension -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nsextension objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsextension -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nsextension configuration for property 'name'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsextension -Resource $name -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving nsextension configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsextension -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNsextension: Ended"
    }
}

function Invoke-ADCGetNsextensionbinding {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER name 
       Name of the extension object. 
    .PARAMETER GetAll 
        Retreive all nsextension_binding object(s)
    .PARAMETER Count
        If specified, the count of the nsextension_binding object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNsextensionbinding
    .EXAMPLE 
        Invoke-ADCGetNsextensionbinding -GetAll
    .EXAMPLE
        Invoke-ADCGetNsextensionbinding -name <string>
    .EXAMPLE
        Invoke-ADCGetNsextensionbinding -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNsextensionbinding
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsextension_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateLength(1, 31)]
        [string]$name,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetNsextensionbinding: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ 
                    bulkbindings = 'yes'
                }
                Write-Verbose "Retrieving all nsextension_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsextension_binding -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nsextension_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsextension_binding -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nsextension_binding objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsextension_binding -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nsextension_binding configuration for property 'name'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsextension_binding -Resource $name -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving nsextension_binding configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsextension_binding -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNsextensionbinding: Ended"
    }
}

function Invoke-ADCGetNsextensionextensionfunctionbinding {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER name 
       Name of the extension object. 
    .PARAMETER GetAll 
        Retreive all nsextension_extensionfunction_binding object(s)
    .PARAMETER Count
        If specified, the count of the nsextension_extensionfunction_binding object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNsextensionextensionfunctionbinding
    .EXAMPLE 
        Invoke-ADCGetNsextensionextensionfunctionbinding -GetAll 
    .EXAMPLE 
        Invoke-ADCGetNsextensionextensionfunctionbinding -Count
    .EXAMPLE
        Invoke-ADCGetNsextensionextensionfunctionbinding -name <string>
    .EXAMPLE
        Invoke-ADCGetNsextensionextensionfunctionbinding -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNsextensionextensionfunctionbinding
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsextension_extensionfunction_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateLength(1, 31)]
        [string]$name,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetNsextensionextensionfunctionbinding: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ 
                    bulkbindings = 'yes'
                }
                Write-Verbose "Retrieving all nsextension_extensionfunction_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsextension_extensionfunction_binding -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nsextension_extensionfunction_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsextension_extensionfunction_binding -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nsextension_extensionfunction_binding objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsextension_extensionfunction_binding -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nsextension_extensionfunction_binding configuration for property 'name'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsextension_extensionfunction_binding -Resource $name -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving nsextension_extensionfunction_binding configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsextension_extensionfunction_binding -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNsextensionextensionfunctionbinding: Ended"
    }
}

function Invoke-ADCEnableNsfeature {
<#
    .SYNOPSIS
        Enable NS configuration Object
    .DESCRIPTION
        Enable NS configuration Object 
    .PARAMETER feature 
        Feature to be enabled. Multiple features can be specified by providing a blank space between each feature.
    .EXAMPLE
        Invoke-ADCEnableNsfeature 
    .NOTES
        File Name : Invoke-ADCEnableNsfeature
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsfeature/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [string[]]$feature 

    )
    begin {
        Write-Verbose "Invoke-ADCEnableNsfeature: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('feature')) { $Payload.Add('feature', $feature) }
            if ($PSCmdlet.ShouldProcess($Name, "Enable NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nsfeature -Action enable -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $result
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCEnableNsfeature: Finished"
    }
}

function Invoke-ADCDisableNsfeature {
<#
    .SYNOPSIS
        Disable NS configuration Object
    .DESCRIPTION
        Disable NS configuration Object 
    .PARAMETER feature 
        Feature to be enabled. Multiple features can be specified by providing a blank space between each feature.
    .EXAMPLE
        Invoke-ADCDisableNsfeature 
    .NOTES
        File Name : Invoke-ADCDisableNsfeature
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsfeature/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [string[]]$feature 

    )
    begin {
        Write-Verbose "Invoke-ADCDisableNsfeature: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('feature')) { $Payload.Add('feature', $feature) }
            if ($PSCmdlet.ShouldProcess($Name, "Disable NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nsfeature -Action disable -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $result
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDisableNsfeature: Finished"
    }
}

function Invoke-ADCGetNsfeature {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER GetAll 
        Retreive all nsfeature object(s)
    .PARAMETER Count
        If specified, the count of the nsfeature object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNsfeature
    .EXAMPLE 
        Invoke-ADCGetNsfeature -GetAll
    .EXAMPLE
        Invoke-ADCGetNsfeature -name <string>
    .EXAMPLE
        Invoke-ADCGetNsfeature -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNsfeature
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsfeature/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetNsfeature: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all nsfeature objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsfeature -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nsfeature objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsfeature -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nsfeature objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsfeature -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nsfeature configuration for property ''"

            } else {
                Write-Verbose "Retrieving nsfeature configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsfeature -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNsfeature: Ended"
    }
}

function Invoke-ADCGetNshardware {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER GetAll 
        Retreive all nshardware object(s)
    .PARAMETER Count
        If specified, the count of the nshardware object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNshardware
    .EXAMPLE 
        Invoke-ADCGetNshardware -GetAll
    .EXAMPLE
        Invoke-ADCGetNshardware -name <string>
    .EXAMPLE
        Invoke-ADCGetNshardware -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNshardware
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nshardware/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetNshardware: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all nshardware objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nshardware -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nshardware objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nshardware -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nshardware objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nshardware -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nshardware configuration for property ''"

            } else {
                Write-Verbose "Retrieving nshardware configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nshardware -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNshardware: Ended"
    }
}

function Invoke-ADCAddNshmackey {
<#
    .SYNOPSIS
        Add NS configuration Object
    .DESCRIPTION
        Add NS configuration Object 
    .PARAMETER name 
        Key name. This follows the same syntax rules as other expression entity names:  
        It must begin with an alpha character (A-Z or a-z) or an underscore (_).  
        The rest of the characters must be alpha, numeric (0-9) or underscores.  
        It cannot be re or xp (reserved for regular and XPath expressions).  
        It cannot be an expression reserved word (e.g. SYS or HTTP).  
        It cannot be used for an existing expression object (HTTP callout, patset, dataset, stringmap, or named expression).  
        Minimum length = 1 
    .PARAMETER digest 
        Digest (hash) function to be used in the HMAC computation.  
        Possible values = MD2, MD4, MD5, SHA1, SHA224, SHA256, SHA384, SHA512 
    .PARAMETER keyvalue 
        The hex-encoded key to be used in the HMAC computation. The key can be any length (up to a Citrix ADC-imposed maximum of 255 bytes). If the length is less than the digest block size, it will be zero padded up to the block size. If it is greater than the block size, it will be hashed using the digest function to the block size. The block size for each digest is:  
        MD2 - 16 bytes  
        MD4 - 16 bytes  
        MD5 - 16 bytes  
        SHA1 - 20 bytes  
        SHA224 - 28 bytes  
        SHA256 - 32 bytes  
        SHA384 - 48 bytes  
        SHA512 - 64 bytes  
        Note that the key will be encrypted when it it is saved  
        There is a special key value AUTO which generates a new random key for the specified digest. This kind of key is  
        intended for use cases where the NetScaler both generates and verifies an HMAC on the same data. 
    .PARAMETER comment 
        Comments associated with this encryption key. 
    .PARAMETER PassThru 
        Return details about the created nshmackey item.
    .EXAMPLE
        Invoke-ADCAddNshmackey -name <string> -digest <string>
    .NOTES
        File Name : Invoke-ADCAddNshmackey
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nshmackey/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name ,

        [Parameter(Mandatory = $true)]
        [ValidateSet('MD2', 'MD4', 'MD5', 'SHA1', 'SHA224', 'SHA256', 'SHA384', 'SHA512')]
        [string]$digest ,

        [string]$keyvalue ,

        [string]$comment ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddNshmackey: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
                digest = $digest
            }
            if ($PSBoundParameters.ContainsKey('keyvalue')) { $Payload.Add('keyvalue', $keyvalue) }
            if ($PSBoundParameters.ContainsKey('comment')) { $Payload.Add('comment', $comment) }
 
            if ($PSCmdlet.ShouldProcess("nshmackey", "Add NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nshmackey -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetNshmackey -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddNshmackey: Finished"
    }
}

function Invoke-ADCUpdateNshmackey {
<#
    .SYNOPSIS
        Update NS configuration Object
    .DESCRIPTION
        Update NS configuration Object 
    .PARAMETER name 
        Key name. This follows the same syntax rules as other expression entity names:  
        It must begin with an alpha character (A-Z or a-z) or an underscore (_).  
        The rest of the characters must be alpha, numeric (0-9) or underscores.  
        It cannot be re or xp (reserved for regular and XPath expressions).  
        It cannot be an expression reserved word (e.g. SYS or HTTP).  
        It cannot be used for an existing expression object (HTTP callout, patset, dataset, stringmap, or named expression).  
        Minimum length = 1 
    .PARAMETER digest 
        Digest (hash) function to be used in the HMAC computation.  
        Possible values = MD2, MD4, MD5, SHA1, SHA224, SHA256, SHA384, SHA512 
    .PARAMETER keyvalue 
        The hex-encoded key to be used in the HMAC computation. The key can be any length (up to a Citrix ADC-imposed maximum of 255 bytes). If the length is less than the digest block size, it will be zero padded up to the block size. If it is greater than the block size, it will be hashed using the digest function to the block size. The block size for each digest is:  
        MD2 - 16 bytes  
        MD4 - 16 bytes  
        MD5 - 16 bytes  
        SHA1 - 20 bytes  
        SHA224 - 28 bytes  
        SHA256 - 32 bytes  
        SHA384 - 48 bytes  
        SHA512 - 64 bytes  
        Note that the key will be encrypted when it it is saved  
        There is a special key value AUTO which generates a new random key for the specified digest. This kind of key is  
        intended for use cases where the NetScaler both generates and verifies an HMAC on the same data. 
    .PARAMETER comment 
        Comments associated with this encryption key. 
    .PARAMETER PassThru 
        Return details about the created nshmackey item.
    .EXAMPLE
        Invoke-ADCUpdateNshmackey -name <string>
    .NOTES
        File Name : Invoke-ADCUpdateNshmackey
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nshmackey/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name ,

        [ValidateSet('MD2', 'MD4', 'MD5', 'SHA1', 'SHA224', 'SHA256', 'SHA384', 'SHA512')]
        [string]$digest ,

        [string]$keyvalue ,

        [string]$comment ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCUpdateNshmackey: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
            }
            if ($PSBoundParameters.ContainsKey('digest')) { $Payload.Add('digest', $digest) }
            if ($PSBoundParameters.ContainsKey('keyvalue')) { $Payload.Add('keyvalue', $keyvalue) }
            if ($PSBoundParameters.ContainsKey('comment')) { $Payload.Add('comment', $comment) }
 
            if ($PSCmdlet.ShouldProcess("nshmackey", "Update NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -Type nshmackey -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetNshmackey -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUpdateNshmackey: Finished"
    }
}

function Invoke-ADCUnsetNshmackey {
<#
    .SYNOPSIS
        Unset NS configuration Object
    .DESCRIPTION
        Unset NS configuration Object 
   .PARAMETER name 
       Key name. This follows the same syntax rules as other expression entity names:  
       It must begin with an alpha character (A-Z or a-z) or an underscore (_).  
       The rest of the characters must be alpha, numeric (0-9) or underscores.  
       It cannot be re or xp (reserved for regular and XPath expressions).  
       It cannot be an expression reserved word (e.g. SYS or HTTP).  
       It cannot be used for an existing expression object (HTTP callout, patset, dataset, stringmap, or named expression). 
   .PARAMETER comment 
       Comments associated with this encryption key.
    .EXAMPLE
        Invoke-ADCUnsetNshmackey -name <string>
    .NOTES
        File Name : Invoke-ADCUnsetNshmackey
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nshmackey
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name ,

        [Boolean]$comment 
    )
    begin {
        Write-Verbose "Invoke-ADCUnsetNshmackey: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
            }
            if ($PSBoundParameters.ContainsKey('comment')) { $Payload.Add('comment', $comment) }
            if ($PSCmdlet.ShouldProcess("$name", "Unset NS configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nshmackey -Action unset -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUnsetNshmackey: Finished"
    }
}

function Invoke-ADCDeleteNshmackey {
<#
    .SYNOPSIS
        Delete NS configuration Object
    .DESCRIPTION
        Delete NS configuration Object
    .PARAMETER name 
       Key name. This follows the same syntax rules as other expression entity names:  
       It must begin with an alpha character (A-Z or a-z) or an underscore (_).  
       The rest of the characters must be alpha, numeric (0-9) or underscores.  
       It cannot be re or xp (reserved for regular and XPath expressions).  
       It cannot be an expression reserved word (e.g. SYS or HTTP).  
       It cannot be used for an existing expression object (HTTP callout, patset, dataset, stringmap, or named expression).  
       Minimum length = 1 
    .EXAMPLE
        Invoke-ADCDeleteNshmackey -name <string>
    .NOTES
        File Name : Invoke-ADCDeleteNshmackey
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nshmackey/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$name 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteNshmackey: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }

            if ($PSCmdlet.ShouldProcess("$name", "Delete NS configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type nshmackey -Resource $name -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteNshmackey: Finished"
    }
}

function Invoke-ADCGetNshmackey {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER name 
       Key name. This follows the same syntax rules as other expression entity names:  
       It must begin with an alpha character (A-Z or a-z) or an underscore (_).  
       The rest of the characters must be alpha, numeric (0-9) or underscores.  
       It cannot be re or xp (reserved for regular and XPath expressions).  
       It cannot be an expression reserved word (e.g. SYS or HTTP).  
       It cannot be used for an existing expression object (HTTP callout, patset, dataset, stringmap, or named expression). 
    .PARAMETER GetAll 
        Retreive all nshmackey object(s)
    .PARAMETER Count
        If specified, the count of the nshmackey object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNshmackey
    .EXAMPLE 
        Invoke-ADCGetNshmackey -GetAll 
    .EXAMPLE 
        Invoke-ADCGetNshmackey -Count
    .EXAMPLE
        Invoke-ADCGetNshmackey -name <string>
    .EXAMPLE
        Invoke-ADCGetNshmackey -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNshmackey
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nshmackey/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll,

        [Parameter(ParameterSetName = 'GetAll')]
        [Parameter(ParameterSetName = 'Get')]
        [Switch]$ViewSummary

    )
    begin {
        Write-Verbose "Invoke-ADCGetNshmackey: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all nshmackey objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nshmackey -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nshmackey objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nshmackey -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nshmackey objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nshmackey -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nshmackey configuration for property 'name'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nshmackey -Resource $name -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving nshmackey configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nshmackey -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNshmackey: Ended"
    }
}

function Invoke-ADCUpdateNshostname {
<#
    .SYNOPSIS
        Update NS configuration Object
    .DESCRIPTION
        Update NS configuration Object 
    .PARAMETER hostname 
        Host name for the Citrix ADC.  
        Minimum length = 1  
        Maximum length = 255 
    .PARAMETER ownernode 
        ID of the cluster node for which you are setting the hostname. Can be configured only through the cluster IP address.  
        Default value: 255  
        Minimum value = 0  
        Maximum value = 31
    .EXAMPLE
        Invoke-ADCUpdateNshostname -hostname <string>
    .NOTES
        File Name : Invoke-ADCUpdateNshostname
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nshostname/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateLength(1, 255)]
        [string]$hostname ,

        [ValidateRange(0, 31)]
        [double]$ownernode 

    )
    begin {
        Write-Verbose "Invoke-ADCUpdateNshostname: Starting"
    }
    process {
        try {
            $Payload = @{
                hostname = $hostname
            }
            if ($PSBoundParameters.ContainsKey('ownernode')) { $Payload.Add('ownernode', $ownernode) }
 
            if ($PSCmdlet.ShouldProcess("nshostname", "Update NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -Type nshostname -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
            Write-Output $result

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUpdateNshostname: Finished"
    }
}

function Invoke-ADCGetNshostname {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER GetAll 
        Retreive all nshostname object(s)
    .PARAMETER Count
        If specified, the count of the nshostname object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNshostname
    .EXAMPLE 
        Invoke-ADCGetNshostname -GetAll 
    .EXAMPLE 
        Invoke-ADCGetNshostname -Count
    .EXAMPLE
        Invoke-ADCGetNshostname -name <string>
    .EXAMPLE
        Invoke-ADCGetNshostname -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNshostname
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nshostname/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll,

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$ViewSummary

    )
    begin {
        Write-Verbose "Invoke-ADCGetNshostname: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all nshostname objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nshostname -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nshostname objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nshostname -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nshostname objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nshostname -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nshostname configuration for property ''"

            } else {
                Write-Verbose "Retrieving nshostname configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nshostname -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNshostname: Ended"
    }
}

function Invoke-ADCUpdateNshttpparam {
<#
    .SYNOPSIS
        Update NS configuration Object
    .DESCRIPTION
        Update NS configuration Object 
    .PARAMETER dropinvalreqs 
        Drop invalid HTTP requests or responses.  
        Default value: OFF  
        Possible values = ON, OFF 
    .PARAMETER markhttp09inval 
        Mark HTTP/0.9 requests as invalid.  
        Default value: OFF  
        Possible values = ON, OFF 
    .PARAMETER markconnreqinval 
        Mark CONNECT requests as invalid.  
        Default value: OFF  
        Possible values = ON, OFF 
    .PARAMETER insnssrvrhdr 
        Enable or disable Citrix ADC server header insertion for Citrix ADC generated HTTP responses.  
        Default value: OFF  
        Possible values = ON, OFF 
    .PARAMETER nssrvrhdr 
        The server header value to be inserted. If no explicit header is specified then NSBUILD.RELEASE is used as default server header.  
        Minimum length = 1 
    .PARAMETER logerrresp 
        Server header value to be inserted.  
        Default value: ON  
        Possible values = ON, OFF 
    .PARAMETER conmultiplex 
        Reuse server connections for requests from more than one client connections.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER maxreusepool 
        Maximum limit on the number of connections, from the Citrix ADC to a particular server that are kept in the reuse pool. This setting is helpful for optimal memory utilization and for reducing the idle connections to the server just after the peak time.  
        Default value: 0  
        Minimum value = 0  
        Maximum value = 360000 
    .PARAMETER http2serverside 
        Enable/Disable HTTP/2 on server side.  
        Default value: OFF  
        Possible values = ON, OFF 
    .PARAMETER ignoreconnectcodingscheme 
        Ignore Coding scheme in CONNECT request.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED
    .EXAMPLE
        Invoke-ADCUpdateNshttpparam 
    .NOTES
        File Name : Invoke-ADCUpdateNshttpparam
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nshttpparam/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [ValidateSet('ON', 'OFF')]
        [string]$dropinvalreqs ,

        [ValidateSet('ON', 'OFF')]
        [string]$markhttp09inval ,

        [ValidateSet('ON', 'OFF')]
        [string]$markconnreqinval ,

        [ValidateSet('ON', 'OFF')]
        [string]$insnssrvrhdr ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$nssrvrhdr ,

        [ValidateSet('ON', 'OFF')]
        [string]$logerrresp ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$conmultiplex ,

        [ValidateRange(0, 360000)]
        [double]$maxreusepool ,

        [ValidateSet('ON', 'OFF')]
        [string]$http2serverside ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$ignoreconnectcodingscheme 

    )
    begin {
        Write-Verbose "Invoke-ADCUpdateNshttpparam: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('dropinvalreqs')) { $Payload.Add('dropinvalreqs', $dropinvalreqs) }
            if ($PSBoundParameters.ContainsKey('markhttp09inval')) { $Payload.Add('markhttp09inval', $markhttp09inval) }
            if ($PSBoundParameters.ContainsKey('markconnreqinval')) { $Payload.Add('markconnreqinval', $markconnreqinval) }
            if ($PSBoundParameters.ContainsKey('insnssrvrhdr')) { $Payload.Add('insnssrvrhdr', $insnssrvrhdr) }
            if ($PSBoundParameters.ContainsKey('nssrvrhdr')) { $Payload.Add('nssrvrhdr', $nssrvrhdr) }
            if ($PSBoundParameters.ContainsKey('logerrresp')) { $Payload.Add('logerrresp', $logerrresp) }
            if ($PSBoundParameters.ContainsKey('conmultiplex')) { $Payload.Add('conmultiplex', $conmultiplex) }
            if ($PSBoundParameters.ContainsKey('maxreusepool')) { $Payload.Add('maxreusepool', $maxreusepool) }
            if ($PSBoundParameters.ContainsKey('http2serverside')) { $Payload.Add('http2serverside', $http2serverside) }
            if ($PSBoundParameters.ContainsKey('ignoreconnectcodingscheme')) { $Payload.Add('ignoreconnectcodingscheme', $ignoreconnectcodingscheme) }
 
            if ($PSCmdlet.ShouldProcess("nshttpparam", "Update NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -Type nshttpparam -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
            Write-Output $result

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUpdateNshttpparam: Finished"
    }
}

function Invoke-ADCUnsetNshttpparam {
<#
    .SYNOPSIS
        Unset NS configuration Object
    .DESCRIPTION
        Unset NS configuration Object 
   .PARAMETER dropinvalreqs 
       Drop invalid HTTP requests or responses.  
       Possible values = ON, OFF 
   .PARAMETER markhttp09inval 
       Mark HTTP/0.9 requests as invalid.  
       Possible values = ON, OFF 
   .PARAMETER markconnreqinval 
       Mark CONNECT requests as invalid.  
       Possible values = ON, OFF 
   .PARAMETER insnssrvrhdr 
       Enable or disable Citrix ADC server header insertion for Citrix ADC generated HTTP responses.  
       Possible values = ON, OFF 
   .PARAMETER nssrvrhdr 
       The server header value to be inserted. If no explicit header is specified then NSBUILD.RELEASE is used as default server header. 
   .PARAMETER logerrresp 
       Server header value to be inserted.  
       Possible values = ON, OFF 
   .PARAMETER conmultiplex 
       Reuse server connections for requests from more than one client connections.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER maxreusepool 
       Maximum limit on the number of connections, from the Citrix ADC to a particular server that are kept in the reuse pool. This setting is helpful for optimal memory utilization and for reducing the idle connections to the server just after the peak time. 
   .PARAMETER http2serverside 
       Enable/Disable HTTP/2 on server side.  
       Possible values = ON, OFF 
   .PARAMETER ignoreconnectcodingscheme 
       Ignore Coding scheme in CONNECT request.  
       Possible values = ENABLED, DISABLED
    .EXAMPLE
        Invoke-ADCUnsetNshttpparam 
    .NOTES
        File Name : Invoke-ADCUnsetNshttpparam
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nshttpparam
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Boolean]$dropinvalreqs ,

        [Boolean]$markhttp09inval ,

        [Boolean]$markconnreqinval ,

        [Boolean]$insnssrvrhdr ,

        [Boolean]$nssrvrhdr ,

        [Boolean]$logerrresp ,

        [Boolean]$conmultiplex ,

        [Boolean]$maxreusepool ,

        [Boolean]$http2serverside ,

        [Boolean]$ignoreconnectcodingscheme 
    )
    begin {
        Write-Verbose "Invoke-ADCUnsetNshttpparam: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('dropinvalreqs')) { $Payload.Add('dropinvalreqs', $dropinvalreqs) }
            if ($PSBoundParameters.ContainsKey('markhttp09inval')) { $Payload.Add('markhttp09inval', $markhttp09inval) }
            if ($PSBoundParameters.ContainsKey('markconnreqinval')) { $Payload.Add('markconnreqinval', $markconnreqinval) }
            if ($PSBoundParameters.ContainsKey('insnssrvrhdr')) { $Payload.Add('insnssrvrhdr', $insnssrvrhdr) }
            if ($PSBoundParameters.ContainsKey('nssrvrhdr')) { $Payload.Add('nssrvrhdr', $nssrvrhdr) }
            if ($PSBoundParameters.ContainsKey('logerrresp')) { $Payload.Add('logerrresp', $logerrresp) }
            if ($PSBoundParameters.ContainsKey('conmultiplex')) { $Payload.Add('conmultiplex', $conmultiplex) }
            if ($PSBoundParameters.ContainsKey('maxreusepool')) { $Payload.Add('maxreusepool', $maxreusepool) }
            if ($PSBoundParameters.ContainsKey('http2serverside')) { $Payload.Add('http2serverside', $http2serverside) }
            if ($PSBoundParameters.ContainsKey('ignoreconnectcodingscheme')) { $Payload.Add('ignoreconnectcodingscheme', $ignoreconnectcodingscheme) }
            if ($PSCmdlet.ShouldProcess("nshttpparam", "Unset NS configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nshttpparam -Action unset -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUnsetNshttpparam: Finished"
    }
}

function Invoke-ADCGetNshttpparam {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER GetAll 
        Retreive all nshttpparam object(s)
    .PARAMETER Count
        If specified, the count of the nshttpparam object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNshttpparam
    .EXAMPLE 
        Invoke-ADCGetNshttpparam -GetAll
    .EXAMPLE
        Invoke-ADCGetNshttpparam -name <string>
    .EXAMPLE
        Invoke-ADCGetNshttpparam -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNshttpparam
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nshttpparam/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetNshttpparam: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all nshttpparam objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nshttpparam -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nshttpparam objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nshttpparam -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nshttpparam objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nshttpparam -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nshttpparam configuration for property ''"

            } else {
                Write-Verbose "Retrieving nshttpparam configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nshttpparam -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNshttpparam: Ended"
    }
}

function Invoke-ADCAddNshttpprofile {
<#
    .SYNOPSIS
        Add NS configuration Object
    .DESCRIPTION
        Add NS configuration Object 
    .PARAMETER name 
        Name for an HTTP profile. Must begin with a letter, number, or the underscore \(_\) character. Other characters allowed, after the first character, are the hyphen \(-\), period \(.\), hash \(\#\), space \( \), at \(@\), colon \(:\), and equal \(=\) characters. The name of a HTTP profile cannot be changed after it is created.  
        CLI Users: If the name includes one or more spaces, enclose the name in double or single quotation marks \(for example, "my http profile" or 'my http profile'\).  
        Minimum length = 1  
        Maximum length = 127 
    .PARAMETER dropinvalreqs 
        Drop invalid HTTP requests or responses.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER markhttp09inval 
        Mark HTTP/0.9 requests as invalid.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER markconnreqinval 
        Mark CONNECT requests as invalid.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER marktracereqinval 
        Mark TRACE requests as invalid.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER markrfc7230noncompliantinval 
        Mark RFC7230 non-compliant transaction as invalid.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER markhttpheaderextrawserror 
        Mark Http header with extra white space as invalid.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER cmponpush 
        Start data compression on receiving a TCP packet with PUSH flag set.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER conmultiplex 
        Reuse server connections for requests from more than one client connections.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER maxreusepool 
        Maximum limit on the number of connections, from the Citrix ADC to a particular server that are kept in the reuse pool. This setting is helpful for optimal memory utilization and for reducing the idle connections to the server just after the peak time. Zero implies no limit on reuse pool size. If non-zero value is given, it has to be greater than or equal to the number of running Packet Engines.  
        Default value: 0  
        Minimum value = 0  
        Maximum value = 360000 
    .PARAMETER dropextracrlf 
        Drop any extra 'CR' and 'LF' characters present after the header.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER incomphdrdelay 
        Maximum time to wait, in milliseconds, between incomplete header packets. If the header packets take longer to arrive at Citrix ADC, the connection is silently dropped.  
        Default value: 7000  
        Minimum value = 1  
        Maximum value = 360000 
    .PARAMETER websocket 
        HTTP connection to be upgraded to a web socket connection. Once upgraded, Citrix ADC does not process Layer 7 traffic on this connection.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER rtsptunnel 
        Allow RTSP tunnel in HTTP. Once application/x-rtsp-tunnelled is seen in Accept or Content-Type header, Citrix ADC does not process Layer 7 traffic on this connection.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER reqtimeout 
        Time, in seconds, within which the HTTP request must complete. If the request does not complete within this time, the specified request timeout action is executed. Zero disables the timeout.  
        Default value: 0  
        Minimum value = 0  
        Maximum value = 86400 
    .PARAMETER adpttimeout 
        Adapts the configured request timeout based on flow conditions. The timeout is increased or decreased internally and applied on the flow.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER reqtimeoutaction 
        Action to take when the HTTP request does not complete within the specified request timeout duration. You can configure the following actions:  
        * RESET - Send RST (reset) to client when timeout occurs.  
        * DROP - Drop silently when timeout occurs.  
        * Custom responder action - Name of the responder action to trigger when timeout occurs, used to send custom message. 
    .PARAMETER dropextradata 
        Drop any extra data when server sends more data than the specified content-length.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER weblog 
        Enable or disable web logging.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER clientiphdrexpr 
        Name of the header that contains the real client IP address. 
    .PARAMETER maxreq 
        Maximum number of requests allowed on a single connection. Zero implies no limit on the number of requests.  
        Default value: 0  
        Minimum value = 0  
        Maximum value = 65534 
    .PARAMETER persistentetag 
        Generate the persistent Citrix ADC specific ETag for the HTTP response with ETag header.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER spdy 
        Enable SPDYv2 or SPDYv3 or both over SSL vserver. SSL will advertise SPDY support either during NPN Handshake or when client will advertises SPDY support during ALPN handshake. Both SPDY versions are enabled when this parameter is set to ENABLED.  
        Default value: DISABLED  
        Possible values = DISABLED, ENABLED, V2, V3 
    .PARAMETER http2 
        Choose whether to enable support for HTTP/2.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER http2direct 
        Choose whether to enable support for Direct HTTP/2.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER http2strictcipher 
        Choose whether to enable strict HTTP/2 cipher selection.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER altsvc 
        Choose whether to enable support for Alternative Service.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER reusepooltimeout 
        Idle timeout (in seconds) for server connections in re-use pool. Connections in the re-use pool are flushed, if they remain idle for the configured timeout.  
        Default value: 0  
        Minimum value = 0  
        Maximum value = 31536000 
    .PARAMETER maxheaderlen 
        Number of bytes to be queued to look for complete header before returning error. If complete header is not obtained after queuing these many bytes, request will be marked as invalid and no L7 processing will be done for that TCP connection.  
        Default value: 24820  
        Minimum value = 2048  
        Maximum value = 61440 
    .PARAMETER minreusepool 
        Minimum limit on the number of connections, from the Citrix ADC to a particular server that are kept in the reuse pool. This setting is helpful for optimal memory utilization and for reducing the idle connections to the server just after the peak time. Zero implies no limit on reuse pool size.  
        Default value: 0  
        Minimum value = 0  
        Maximum value = 360000 
    .PARAMETER http2maxheaderlistsize 
        Maximum size of header list that the Citrix ADC is prepared to accept, in bytes. NOTE: The actual plain text header size that the Citrix ADC accepts is limited by maxHeaderLen. Please change maxHeaderLen parameter as well when modifying http2MaxHeaderListSize.  
        Default value: 24576  
        Minimum value = 8192  
        Maximum value = 65535 
    .PARAMETER http2maxframesize 
        Maximum size of the frame payload that the Citrix ADC is willing to receive, in bytes.  
        Default value: 16384  
        Minimum value = 16384  
        Maximum value = 32768 
    .PARAMETER http2maxconcurrentstreams 
        Maximum number of concurrent streams that is allowed per connection.  
        Default value: 100  
        Minimum value = 0  
        Maximum value = 1000 
    .PARAMETER http2initialwindowsize 
        Initial window size for stream level flow control, in bytes.  
        Default value: 65535  
        Minimum value = 8192  
        Maximum value = 20971520 
    .PARAMETER http2headertablesize 
        Maximum size of the header compression table used to decode header blocks, in bytes.  
        Default value: 4096  
        Minimum value = 0  
        Maximum value = 16384 
    .PARAMETER http2minseverconn 
        Minimum number of HTTP2 connections established to backend server, on receiving HTTP requests from client before multiplexing the streams into the available HTTP/2 connections.  
        Default value: 20  
        Minimum value = 1  
        Maximum value = 360000 
    .PARAMETER http2maxpingframespermin 
        Maximum number of ping frames allowed in HTTP2 connection per minute.  
        Default value: 60  
        Minimum value = 1  
        Maximum value = 360000 
    .PARAMETER http2maxsettingsframespermin 
        Maximum number of settings frames allowed in HTTP2 connection per minute.  
        Default value: 15  
        Minimum value = 1  
        Maximum value = 360000 
    .PARAMETER http2maxresetframespermin 
        Maximum number of reset frames allowed in HTTP/2 connection per minute.  
        Default value: 90  
        Minimum value = 1  
        Maximum value = 360000 
    .PARAMETER http2maxemptyframespermin 
        Maximum number of empty frames allowed in HTTP2 connection per minute.  
        Default value: 60  
        Minimum value = 1  
        Maximum value = 360000 
    .PARAMETER apdexcltresptimethreshold 
        This option sets the satisfactory threshold (T) for client response time in milliseconds to be used for APDEX calculations. This means a transaction responding in less than this threshold is considered satisfactory. Transaction responding between T and 4*T is considered tolerable. Any transaction responding in more than 4*T time is considered frustrating. Citrix ADC maintains stats for such tolerable and frustrating transcations. And client response time related apdex counters are only updated on a vserver which receives clients traffic.  
        Default value: 500  
        Minimum value = 1  
        Maximum value = 3600000 
    .PARAMETER PassThru 
        Return details about the created nshttpprofile item.
    .EXAMPLE
        Invoke-ADCAddNshttpprofile -name <string>
    .NOTES
        File Name : Invoke-ADCAddNshttpprofile
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nshttpprofile/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateLength(1, 127)]
        [string]$name ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$dropinvalreqs = 'DISABLED' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$markhttp09inval = 'DISABLED' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$markconnreqinval = 'DISABLED' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$marktracereqinval = 'DISABLED' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$markrfc7230noncompliantinval = 'DISABLED' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$markhttpheaderextrawserror = 'DISABLED' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$cmponpush = 'DISABLED' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$conmultiplex = 'ENABLED' ,

        [ValidateRange(0, 360000)]
        [double]$maxreusepool = '0' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$dropextracrlf = 'ENABLED' ,

        [ValidateRange(1, 360000)]
        [double]$incomphdrdelay = '7000' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$websocket = 'DISABLED' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$rtsptunnel = 'DISABLED' ,

        [ValidateRange(0, 86400)]
        [double]$reqtimeout = '0' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$adpttimeout = 'DISABLED' ,

        [string]$reqtimeoutaction ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$dropextradata = 'DISABLED' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$weblog = 'ENABLED' ,

        [string]$clientiphdrexpr ,

        [ValidateRange(0, 65534)]
        [double]$maxreq = '0' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$persistentetag = 'DISABLED' ,

        [ValidateSet('DISABLED', 'ENABLED', 'V2', 'V3')]
        [string]$spdy = 'DISABLED' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$http2 = 'DISABLED' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$http2direct = 'DISABLED' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$http2strictcipher = 'ENABLED' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$altsvc = 'DISABLED' ,

        [ValidateRange(0, 31536000)]
        [double]$reusepooltimeout = '0' ,

        [ValidateRange(2048, 61440)]
        [double]$maxheaderlen = '24820' ,

        [ValidateRange(0, 360000)]
        [double]$minreusepool = '0' ,

        [ValidateRange(8192, 65535)]
        [double]$http2maxheaderlistsize = '24576' ,

        [ValidateRange(16384, 32768)]
        [double]$http2maxframesize = '16384' ,

        [ValidateRange(0, 1000)]
        [double]$http2maxconcurrentstreams = '100' ,

        [ValidateRange(8192, 20971520)]
        [double]$http2initialwindowsize = '65535' ,

        [ValidateRange(0, 16384)]
        [double]$http2headertablesize = '4096' ,

        [ValidateRange(1, 360000)]
        [double]$http2minseverconn = '20' ,

        [ValidateRange(1, 360000)]
        [double]$http2maxpingframespermin = '60' ,

        [ValidateRange(1, 360000)]
        [double]$http2maxsettingsframespermin = '15' ,

        [ValidateRange(1, 360000)]
        [double]$http2maxresetframespermin = '90' ,

        [ValidateRange(1, 360000)]
        [double]$http2maxemptyframespermin = '60' ,

        [ValidateRange(1, 3600000)]
        [double]$apdexcltresptimethreshold = '500' ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddNshttpprofile: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
            }
            if ($PSBoundParameters.ContainsKey('dropinvalreqs')) { $Payload.Add('dropinvalreqs', $dropinvalreqs) }
            if ($PSBoundParameters.ContainsKey('markhttp09inval')) { $Payload.Add('markhttp09inval', $markhttp09inval) }
            if ($PSBoundParameters.ContainsKey('markconnreqinval')) { $Payload.Add('markconnreqinval', $markconnreqinval) }
            if ($PSBoundParameters.ContainsKey('marktracereqinval')) { $Payload.Add('marktracereqinval', $marktracereqinval) }
            if ($PSBoundParameters.ContainsKey('markrfc7230noncompliantinval')) { $Payload.Add('markrfc7230noncompliantinval', $markrfc7230noncompliantinval) }
            if ($PSBoundParameters.ContainsKey('markhttpheaderextrawserror')) { $Payload.Add('markhttpheaderextrawserror', $markhttpheaderextrawserror) }
            if ($PSBoundParameters.ContainsKey('cmponpush')) { $Payload.Add('cmponpush', $cmponpush) }
            if ($PSBoundParameters.ContainsKey('conmultiplex')) { $Payload.Add('conmultiplex', $conmultiplex) }
            if ($PSBoundParameters.ContainsKey('maxreusepool')) { $Payload.Add('maxreusepool', $maxreusepool) }
            if ($PSBoundParameters.ContainsKey('dropextracrlf')) { $Payload.Add('dropextracrlf', $dropextracrlf) }
            if ($PSBoundParameters.ContainsKey('incomphdrdelay')) { $Payload.Add('incomphdrdelay', $incomphdrdelay) }
            if ($PSBoundParameters.ContainsKey('websocket')) { $Payload.Add('websocket', $websocket) }
            if ($PSBoundParameters.ContainsKey('rtsptunnel')) { $Payload.Add('rtsptunnel', $rtsptunnel) }
            if ($PSBoundParameters.ContainsKey('reqtimeout')) { $Payload.Add('reqtimeout', $reqtimeout) }
            if ($PSBoundParameters.ContainsKey('adpttimeout')) { $Payload.Add('adpttimeout', $adpttimeout) }
            if ($PSBoundParameters.ContainsKey('reqtimeoutaction')) { $Payload.Add('reqtimeoutaction', $reqtimeoutaction) }
            if ($PSBoundParameters.ContainsKey('dropextradata')) { $Payload.Add('dropextradata', $dropextradata) }
            if ($PSBoundParameters.ContainsKey('weblog')) { $Payload.Add('weblog', $weblog) }
            if ($PSBoundParameters.ContainsKey('clientiphdrexpr')) { $Payload.Add('clientiphdrexpr', $clientiphdrexpr) }
            if ($PSBoundParameters.ContainsKey('maxreq')) { $Payload.Add('maxreq', $maxreq) }
            if ($PSBoundParameters.ContainsKey('persistentetag')) { $Payload.Add('persistentetag', $persistentetag) }
            if ($PSBoundParameters.ContainsKey('spdy')) { $Payload.Add('spdy', $spdy) }
            if ($PSBoundParameters.ContainsKey('http2')) { $Payload.Add('http2', $http2) }
            if ($PSBoundParameters.ContainsKey('http2direct')) { $Payload.Add('http2direct', $http2direct) }
            if ($PSBoundParameters.ContainsKey('http2strictcipher')) { $Payload.Add('http2strictcipher', $http2strictcipher) }
            if ($PSBoundParameters.ContainsKey('altsvc')) { $Payload.Add('altsvc', $altsvc) }
            if ($PSBoundParameters.ContainsKey('reusepooltimeout')) { $Payload.Add('reusepooltimeout', $reusepooltimeout) }
            if ($PSBoundParameters.ContainsKey('maxheaderlen')) { $Payload.Add('maxheaderlen', $maxheaderlen) }
            if ($PSBoundParameters.ContainsKey('minreusepool')) { $Payload.Add('minreusepool', $minreusepool) }
            if ($PSBoundParameters.ContainsKey('http2maxheaderlistsize')) { $Payload.Add('http2maxheaderlistsize', $http2maxheaderlistsize) }
            if ($PSBoundParameters.ContainsKey('http2maxframesize')) { $Payload.Add('http2maxframesize', $http2maxframesize) }
            if ($PSBoundParameters.ContainsKey('http2maxconcurrentstreams')) { $Payload.Add('http2maxconcurrentstreams', $http2maxconcurrentstreams) }
            if ($PSBoundParameters.ContainsKey('http2initialwindowsize')) { $Payload.Add('http2initialwindowsize', $http2initialwindowsize) }
            if ($PSBoundParameters.ContainsKey('http2headertablesize')) { $Payload.Add('http2headertablesize', $http2headertablesize) }
            if ($PSBoundParameters.ContainsKey('http2minseverconn')) { $Payload.Add('http2minseverconn', $http2minseverconn) }
            if ($PSBoundParameters.ContainsKey('http2maxpingframespermin')) { $Payload.Add('http2maxpingframespermin', $http2maxpingframespermin) }
            if ($PSBoundParameters.ContainsKey('http2maxsettingsframespermin')) { $Payload.Add('http2maxsettingsframespermin', $http2maxsettingsframespermin) }
            if ($PSBoundParameters.ContainsKey('http2maxresetframespermin')) { $Payload.Add('http2maxresetframespermin', $http2maxresetframespermin) }
            if ($PSBoundParameters.ContainsKey('http2maxemptyframespermin')) { $Payload.Add('http2maxemptyframespermin', $http2maxemptyframespermin) }
            if ($PSBoundParameters.ContainsKey('apdexcltresptimethreshold')) { $Payload.Add('apdexcltresptimethreshold', $apdexcltresptimethreshold) }
 
            if ($PSCmdlet.ShouldProcess("nshttpprofile", "Add NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nshttpprofile -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetNshttpprofile -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddNshttpprofile: Finished"
    }
}

function Invoke-ADCDeleteNshttpprofile {
<#
    .SYNOPSIS
        Delete NS configuration Object
    .DESCRIPTION
        Delete NS configuration Object
    .PARAMETER name 
       Name for an HTTP profile. Must begin with a letter, number, or the underscore \(_\) character. Other characters allowed, after the first character, are the hyphen \(-\), period \(.\), hash \(\#\), space \( \), at \(@\), colon \(:\), and equal \(=\) characters. The name of a HTTP profile cannot be changed after it is created.  
       CLI Users: If the name includes one or more spaces, enclose the name in double or single quotation marks \(for example, "my http profile" or 'my http profile'\).  
       Minimum length = 1  
       Maximum length = 127 
    .EXAMPLE
        Invoke-ADCDeleteNshttpprofile -name <string>
    .NOTES
        File Name : Invoke-ADCDeleteNshttpprofile
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nshttpprofile/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$name 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteNshttpprofile: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }

            if ($PSCmdlet.ShouldProcess("$name", "Delete NS configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type nshttpprofile -Resource $name -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteNshttpprofile: Finished"
    }
}

function Invoke-ADCUpdateNshttpprofile {
<#
    .SYNOPSIS
        Update NS configuration Object
    .DESCRIPTION
        Update NS configuration Object 
    .PARAMETER name 
        Name for an HTTP profile. Must begin with a letter, number, or the underscore \(_\) character. Other characters allowed, after the first character, are the hyphen \(-\), period \(.\), hash \(\#\), space \( \), at \(@\), colon \(:\), and equal \(=\) characters. The name of a HTTP profile cannot be changed after it is created.  
        CLI Users: If the name includes one or more spaces, enclose the name in double or single quotation marks \(for example, "my http profile" or 'my http profile'\).  
        Minimum length = 1  
        Maximum length = 127 
    .PARAMETER dropinvalreqs 
        Drop invalid HTTP requests or responses.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER markhttp09inval 
        Mark HTTP/0.9 requests as invalid.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER markconnreqinval 
        Mark CONNECT requests as invalid.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER marktracereqinval 
        Mark TRACE requests as invalid.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER markrfc7230noncompliantinval 
        Mark RFC7230 non-compliant transaction as invalid.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER markhttpheaderextrawserror 
        Mark Http header with extra white space as invalid.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER cmponpush 
        Start data compression on receiving a TCP packet with PUSH flag set.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER conmultiplex 
        Reuse server connections for requests from more than one client connections.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER maxreusepool 
        Maximum limit on the number of connections, from the Citrix ADC to a particular server that are kept in the reuse pool. This setting is helpful for optimal memory utilization and for reducing the idle connections to the server just after the peak time. Zero implies no limit on reuse pool size. If non-zero value is given, it has to be greater than or equal to the number of running Packet Engines.  
        Default value: 0  
        Minimum value = 0  
        Maximum value = 360000 
    .PARAMETER dropextracrlf 
        Drop any extra 'CR' and 'LF' characters present after the header.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER incomphdrdelay 
        Maximum time to wait, in milliseconds, between incomplete header packets. If the header packets take longer to arrive at Citrix ADC, the connection is silently dropped.  
        Default value: 7000  
        Minimum value = 1  
        Maximum value = 360000 
    .PARAMETER websocket 
        HTTP connection to be upgraded to a web socket connection. Once upgraded, Citrix ADC does not process Layer 7 traffic on this connection.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER rtsptunnel 
        Allow RTSP tunnel in HTTP. Once application/x-rtsp-tunnelled is seen in Accept or Content-Type header, Citrix ADC does not process Layer 7 traffic on this connection.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER reqtimeout 
        Time, in seconds, within which the HTTP request must complete. If the request does not complete within this time, the specified request timeout action is executed. Zero disables the timeout.  
        Default value: 0  
        Minimum value = 0  
        Maximum value = 86400 
    .PARAMETER adpttimeout 
        Adapts the configured request timeout based on flow conditions. The timeout is increased or decreased internally and applied on the flow.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER reqtimeoutaction 
        Action to take when the HTTP request does not complete within the specified request timeout duration. You can configure the following actions:  
        * RESET - Send RST (reset) to client when timeout occurs.  
        * DROP - Drop silently when timeout occurs.  
        * Custom responder action - Name of the responder action to trigger when timeout occurs, used to send custom message. 
    .PARAMETER dropextradata 
        Drop any extra data when server sends more data than the specified content-length.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER weblog 
        Enable or disable web logging.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER clientiphdrexpr 
        Name of the header that contains the real client IP address. 
    .PARAMETER maxreq 
        Maximum number of requests allowed on a single connection. Zero implies no limit on the number of requests.  
        Default value: 0  
        Minimum value = 0  
        Maximum value = 65534 
    .PARAMETER persistentetag 
        Generate the persistent Citrix ADC specific ETag for the HTTP response with ETag header.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER spdy 
        Enable SPDYv2 or SPDYv3 or both over SSL vserver. SSL will advertise SPDY support either during NPN Handshake or when client will advertises SPDY support during ALPN handshake. Both SPDY versions are enabled when this parameter is set to ENABLED.  
        Default value: DISABLED  
        Possible values = DISABLED, ENABLED, V2, V3 
    .PARAMETER http2 
        Choose whether to enable support for HTTP/2.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER http2direct 
        Choose whether to enable support for Direct HTTP/2.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER http2strictcipher 
        Choose whether to enable strict HTTP/2 cipher selection.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER altsvc 
        Choose whether to enable support for Alternative Service.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER http2maxheaderlistsize 
        Maximum size of header list that the Citrix ADC is prepared to accept, in bytes. NOTE: The actual plain text header size that the Citrix ADC accepts is limited by maxHeaderLen. Please change maxHeaderLen parameter as well when modifying http2MaxHeaderListSize.  
        Default value: 24576  
        Minimum value = 8192  
        Maximum value = 65535 
    .PARAMETER http2maxframesize 
        Maximum size of the frame payload that the Citrix ADC is willing to receive, in bytes.  
        Default value: 16384  
        Minimum value = 16384  
        Maximum value = 32768 
    .PARAMETER http2maxconcurrentstreams 
        Maximum number of concurrent streams that is allowed per connection.  
        Default value: 100  
        Minimum value = 0  
        Maximum value = 1000 
    .PARAMETER http2initialwindowsize 
        Initial window size for stream level flow control, in bytes.  
        Default value: 65535  
        Minimum value = 8192  
        Maximum value = 20971520 
    .PARAMETER http2headertablesize 
        Maximum size of the header compression table used to decode header blocks, in bytes.  
        Default value: 4096  
        Minimum value = 0  
        Maximum value = 16384 
    .PARAMETER http2minseverconn 
        Minimum number of HTTP2 connections established to backend server, on receiving HTTP requests from client before multiplexing the streams into the available HTTP/2 connections.  
        Default value: 20  
        Minimum value = 1  
        Maximum value = 360000 
    .PARAMETER http2maxpingframespermin 
        Maximum number of ping frames allowed in HTTP2 connection per minute.  
        Default value: 60  
        Minimum value = 1  
        Maximum value = 360000 
    .PARAMETER http2maxsettingsframespermin 
        Maximum number of settings frames allowed in HTTP2 connection per minute.  
        Default value: 15  
        Minimum value = 1  
        Maximum value = 360000 
    .PARAMETER http2maxresetframespermin 
        Maximum number of reset frames allowed in HTTP/2 connection per minute.  
        Default value: 90  
        Minimum value = 1  
        Maximum value = 360000 
    .PARAMETER http2maxemptyframespermin 
        Maximum number of empty frames allowed in HTTP2 connection per minute.  
        Default value: 60  
        Minimum value = 1  
        Maximum value = 360000 
    .PARAMETER reusepooltimeout 
        Idle timeout (in seconds) for server connections in re-use pool. Connections in the re-use pool are flushed, if they remain idle for the configured timeout.  
        Default value: 0  
        Minimum value = 0  
        Maximum value = 31536000 
    .PARAMETER maxheaderlen 
        Number of bytes to be queued to look for complete header before returning error. If complete header is not obtained after queuing these many bytes, request will be marked as invalid and no L7 processing will be done for that TCP connection.  
        Default value: 24820  
        Minimum value = 2048  
        Maximum value = 61440 
    .PARAMETER minreusepool 
        Minimum limit on the number of connections, from the Citrix ADC to a particular server that are kept in the reuse pool. This setting is helpful for optimal memory utilization and for reducing the idle connections to the server just after the peak time. Zero implies no limit on reuse pool size.  
        Default value: 0  
        Minimum value = 0  
        Maximum value = 360000 
    .PARAMETER apdexcltresptimethreshold 
        This option sets the satisfactory threshold (T) for client response time in milliseconds to be used for APDEX calculations. This means a transaction responding in less than this threshold is considered satisfactory. Transaction responding between T and 4*T is considered tolerable. Any transaction responding in more than 4*T time is considered frustrating. Citrix ADC maintains stats for such tolerable and frustrating transcations. And client response time related apdex counters are only updated on a vserver which receives clients traffic.  
        Default value: 500  
        Minimum value = 1  
        Maximum value = 3600000 
    .PARAMETER PassThru 
        Return details about the created nshttpprofile item.
    .EXAMPLE
        Invoke-ADCUpdateNshttpprofile -name <string>
    .NOTES
        File Name : Invoke-ADCUpdateNshttpprofile
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nshttpprofile/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateLength(1, 127)]
        [string]$name ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$dropinvalreqs ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$markhttp09inval ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$markconnreqinval ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$marktracereqinval ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$markrfc7230noncompliantinval ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$markhttpheaderextrawserror ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$cmponpush ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$conmultiplex ,

        [ValidateRange(0, 360000)]
        [double]$maxreusepool ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$dropextracrlf ,

        [ValidateRange(1, 360000)]
        [double]$incomphdrdelay ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$websocket ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$rtsptunnel ,

        [ValidateRange(0, 86400)]
        [double]$reqtimeout ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$adpttimeout ,

        [string]$reqtimeoutaction ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$dropextradata ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$weblog ,

        [string]$clientiphdrexpr ,

        [ValidateRange(0, 65534)]
        [double]$maxreq ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$persistentetag ,

        [ValidateSet('DISABLED', 'ENABLED', 'V2', 'V3')]
        [string]$spdy ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$http2 ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$http2direct ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$http2strictcipher ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$altsvc ,

        [ValidateRange(8192, 65535)]
        [double]$http2maxheaderlistsize ,

        [ValidateRange(16384, 32768)]
        [double]$http2maxframesize ,

        [ValidateRange(0, 1000)]
        [double]$http2maxconcurrentstreams ,

        [ValidateRange(8192, 20971520)]
        [double]$http2initialwindowsize ,

        [ValidateRange(0, 16384)]
        [double]$http2headertablesize ,

        [ValidateRange(1, 360000)]
        [double]$http2minseverconn ,

        [ValidateRange(1, 360000)]
        [double]$http2maxpingframespermin ,

        [ValidateRange(1, 360000)]
        [double]$http2maxsettingsframespermin ,

        [ValidateRange(1, 360000)]
        [double]$http2maxresetframespermin ,

        [ValidateRange(1, 360000)]
        [double]$http2maxemptyframespermin ,

        [ValidateRange(0, 31536000)]
        [double]$reusepooltimeout ,

        [ValidateRange(2048, 61440)]
        [double]$maxheaderlen ,

        [ValidateRange(0, 360000)]
        [double]$minreusepool ,

        [ValidateRange(1, 3600000)]
        [double]$apdexcltresptimethreshold ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCUpdateNshttpprofile: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
            }
            if ($PSBoundParameters.ContainsKey('dropinvalreqs')) { $Payload.Add('dropinvalreqs', $dropinvalreqs) }
            if ($PSBoundParameters.ContainsKey('markhttp09inval')) { $Payload.Add('markhttp09inval', $markhttp09inval) }
            if ($PSBoundParameters.ContainsKey('markconnreqinval')) { $Payload.Add('markconnreqinval', $markconnreqinval) }
            if ($PSBoundParameters.ContainsKey('marktracereqinval')) { $Payload.Add('marktracereqinval', $marktracereqinval) }
            if ($PSBoundParameters.ContainsKey('markrfc7230noncompliantinval')) { $Payload.Add('markrfc7230noncompliantinval', $markrfc7230noncompliantinval) }
            if ($PSBoundParameters.ContainsKey('markhttpheaderextrawserror')) { $Payload.Add('markhttpheaderextrawserror', $markhttpheaderextrawserror) }
            if ($PSBoundParameters.ContainsKey('cmponpush')) { $Payload.Add('cmponpush', $cmponpush) }
            if ($PSBoundParameters.ContainsKey('conmultiplex')) { $Payload.Add('conmultiplex', $conmultiplex) }
            if ($PSBoundParameters.ContainsKey('maxreusepool')) { $Payload.Add('maxreusepool', $maxreusepool) }
            if ($PSBoundParameters.ContainsKey('dropextracrlf')) { $Payload.Add('dropextracrlf', $dropextracrlf) }
            if ($PSBoundParameters.ContainsKey('incomphdrdelay')) { $Payload.Add('incomphdrdelay', $incomphdrdelay) }
            if ($PSBoundParameters.ContainsKey('websocket')) { $Payload.Add('websocket', $websocket) }
            if ($PSBoundParameters.ContainsKey('rtsptunnel')) { $Payload.Add('rtsptunnel', $rtsptunnel) }
            if ($PSBoundParameters.ContainsKey('reqtimeout')) { $Payload.Add('reqtimeout', $reqtimeout) }
            if ($PSBoundParameters.ContainsKey('adpttimeout')) { $Payload.Add('adpttimeout', $adpttimeout) }
            if ($PSBoundParameters.ContainsKey('reqtimeoutaction')) { $Payload.Add('reqtimeoutaction', $reqtimeoutaction) }
            if ($PSBoundParameters.ContainsKey('dropextradata')) { $Payload.Add('dropextradata', $dropextradata) }
            if ($PSBoundParameters.ContainsKey('weblog')) { $Payload.Add('weblog', $weblog) }
            if ($PSBoundParameters.ContainsKey('clientiphdrexpr')) { $Payload.Add('clientiphdrexpr', $clientiphdrexpr) }
            if ($PSBoundParameters.ContainsKey('maxreq')) { $Payload.Add('maxreq', $maxreq) }
            if ($PSBoundParameters.ContainsKey('persistentetag')) { $Payload.Add('persistentetag', $persistentetag) }
            if ($PSBoundParameters.ContainsKey('spdy')) { $Payload.Add('spdy', $spdy) }
            if ($PSBoundParameters.ContainsKey('http2')) { $Payload.Add('http2', $http2) }
            if ($PSBoundParameters.ContainsKey('http2direct')) { $Payload.Add('http2direct', $http2direct) }
            if ($PSBoundParameters.ContainsKey('http2strictcipher')) { $Payload.Add('http2strictcipher', $http2strictcipher) }
            if ($PSBoundParameters.ContainsKey('altsvc')) { $Payload.Add('altsvc', $altsvc) }
            if ($PSBoundParameters.ContainsKey('http2maxheaderlistsize')) { $Payload.Add('http2maxheaderlistsize', $http2maxheaderlistsize) }
            if ($PSBoundParameters.ContainsKey('http2maxframesize')) { $Payload.Add('http2maxframesize', $http2maxframesize) }
            if ($PSBoundParameters.ContainsKey('http2maxconcurrentstreams')) { $Payload.Add('http2maxconcurrentstreams', $http2maxconcurrentstreams) }
            if ($PSBoundParameters.ContainsKey('http2initialwindowsize')) { $Payload.Add('http2initialwindowsize', $http2initialwindowsize) }
            if ($PSBoundParameters.ContainsKey('http2headertablesize')) { $Payload.Add('http2headertablesize', $http2headertablesize) }
            if ($PSBoundParameters.ContainsKey('http2minseverconn')) { $Payload.Add('http2minseverconn', $http2minseverconn) }
            if ($PSBoundParameters.ContainsKey('http2maxpingframespermin')) { $Payload.Add('http2maxpingframespermin', $http2maxpingframespermin) }
            if ($PSBoundParameters.ContainsKey('http2maxsettingsframespermin')) { $Payload.Add('http2maxsettingsframespermin', $http2maxsettingsframespermin) }
            if ($PSBoundParameters.ContainsKey('http2maxresetframespermin')) { $Payload.Add('http2maxresetframespermin', $http2maxresetframespermin) }
            if ($PSBoundParameters.ContainsKey('http2maxemptyframespermin')) { $Payload.Add('http2maxemptyframespermin', $http2maxemptyframespermin) }
            if ($PSBoundParameters.ContainsKey('reusepooltimeout')) { $Payload.Add('reusepooltimeout', $reusepooltimeout) }
            if ($PSBoundParameters.ContainsKey('maxheaderlen')) { $Payload.Add('maxheaderlen', $maxheaderlen) }
            if ($PSBoundParameters.ContainsKey('minreusepool')) { $Payload.Add('minreusepool', $minreusepool) }
            if ($PSBoundParameters.ContainsKey('apdexcltresptimethreshold')) { $Payload.Add('apdexcltresptimethreshold', $apdexcltresptimethreshold) }
 
            if ($PSCmdlet.ShouldProcess("nshttpprofile", "Update NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -Type nshttpprofile -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetNshttpprofile -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUpdateNshttpprofile: Finished"
    }
}

function Invoke-ADCUnsetNshttpprofile {
<#
    .SYNOPSIS
        Unset NS configuration Object
    .DESCRIPTION
        Unset NS configuration Object 
   .PARAMETER name 
       Name for an HTTP profile. Must begin with a letter, number, or the underscore \(_\) character. Other characters allowed, after the first character, are the hyphen \(-\), period \(.\), hash \(\#\), space \( \), at \(@\), colon \(:\), and equal \(=\) characters. The name of a HTTP profile cannot be changed after it is created.  
       CLI Users: If the name includes one or more spaces, enclose the name in double or single quotation marks \(for example, "my http profile" or 'my http profile'\). 
   .PARAMETER dropinvalreqs 
       Drop invalid HTTP requests or responses.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER markhttp09inval 
       Mark HTTP/0.9 requests as invalid.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER markconnreqinval 
       Mark CONNECT requests as invalid.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER marktracereqinval 
       Mark TRACE requests as invalid.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER markrfc7230noncompliantinval 
       Mark RFC7230 non-compliant transaction as invalid.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER markhttpheaderextrawserror 
       Mark Http header with extra white space as invalid.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER cmponpush 
       Start data compression on receiving a TCP packet with PUSH flag set.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER conmultiplex 
       Reuse server connections for requests from more than one client connections.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER maxreusepool 
       Maximum limit on the number of connections, from the Citrix ADC to a particular server that are kept in the reuse pool. This setting is helpful for optimal memory utilization and for reducing the idle connections to the server just after the peak time. Zero implies no limit on reuse pool size. If non-zero value is given, it has to be greater than or equal to the number of running Packet Engines. 
   .PARAMETER dropextracrlf 
       Drop any extra 'CR' and 'LF' characters present after the header.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER incomphdrdelay 
       Maximum time to wait, in milliseconds, between incomplete header packets. If the header packets take longer to arrive at Citrix ADC, the connection is silently dropped. 
   .PARAMETER websocket 
       HTTP connection to be upgraded to a web socket connection. Once upgraded, Citrix ADC does not process Layer 7 traffic on this connection.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER dropextradata 
       Drop any extra data when server sends more data than the specified content-length.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER clientiphdrexpr 
       Name of the header that contains the real client IP address. 
   .PARAMETER reqtimeout 
       Time, in seconds, within which the HTTP request must complete. If the request does not complete within this time, the specified request timeout action is executed. Zero disables the timeout. 
   .PARAMETER adpttimeout 
       Adapts the configured request timeout based on flow conditions. The timeout is increased or decreased internally and applied on the flow.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER reqtimeoutaction 
       Action to take when the HTTP request does not complete within the specified request timeout duration. You can configure the following actions:  
       * RESET - Send RST (reset) to client when timeout occurs.  
       * DROP - Drop silently when timeout occurs.  
       * Custom responder action - Name of the responder action to trigger when timeout occurs, used to send custom message. 
   .PARAMETER weblog 
       Enable or disable web logging.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER maxreq 
       Maximum number of requests allowed on a single connection. Zero implies no limit on the number of requests. 
   .PARAMETER persistentetag 
       Generate the persistent Citrix ADC specific ETag for the HTTP response with ETag header.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER spdy 
       Enable SPDYv2 or SPDYv3 or both over SSL vserver. SSL will advertise SPDY support either during NPN Handshake or when client will advertises SPDY support during ALPN handshake. Both SPDY versions are enabled when this parameter is set to ENABLED.  
       Possible values = DISABLED, ENABLED, V2, V3 
   .PARAMETER http2 
       Choose whether to enable support for HTTP/2.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER http2maxheaderlistsize 
       Maximum size of header list that the Citrix ADC is prepared to accept, in bytes. NOTE: The actual plain text header size that the Citrix ADC accepts is limited by maxHeaderLen. Please change maxHeaderLen parameter as well when modifying http2MaxHeaderListSize. 
   .PARAMETER http2maxframesize 
       Maximum size of the frame payload that the Citrix ADC is willing to receive, in bytes. 
   .PARAMETER http2maxconcurrentstreams 
       Maximum number of concurrent streams that is allowed per connection. 
   .PARAMETER http2initialwindowsize 
       Initial window size for stream level flow control, in bytes. 
   .PARAMETER http2headertablesize 
       Maximum size of the header compression table used to decode header blocks, in bytes. 
   .PARAMETER http2minseverconn 
       Minimum number of HTTP2 connections established to backend server, on receiving HTTP requests from client before multiplexing the streams into the available HTTP/2 connections. 
   .PARAMETER http2maxpingframespermin 
       Maximum number of ping frames allowed in HTTP2 connection per minute. 
   .PARAMETER http2maxsettingsframespermin 
       Maximum number of settings frames allowed in HTTP2 connection per minute. 
   .PARAMETER http2maxresetframespermin 
       Maximum number of reset frames allowed in HTTP/2 connection per minute. 
   .PARAMETER http2maxemptyframespermin 
       Maximum number of empty frames allowed in HTTP2 connection per minute. 
   .PARAMETER reusepooltimeout 
       Idle timeout (in seconds) for server connections in re-use pool. Connections in the re-use pool are flushed, if they remain idle for the configured timeout. 
   .PARAMETER maxheaderlen 
       Number of bytes to be queued to look for complete header before returning error. If complete header is not obtained after queuing these many bytes, request will be marked as invalid and no L7 processing will be done for that TCP connection. 
   .PARAMETER rtsptunnel 
       Allow RTSP tunnel in HTTP. Once application/x-rtsp-tunnelled is seen in Accept or Content-Type header, Citrix ADC does not process Layer 7 traffic on this connection.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER minreusepool 
       Minimum limit on the number of connections, from the Citrix ADC to a particular server that are kept in the reuse pool. This setting is helpful for optimal memory utilization and for reducing the idle connections to the server just after the peak time. Zero implies no limit on reuse pool size. 
   .PARAMETER apdexcltresptimethreshold 
       This option sets the satisfactory threshold (T) for client response time in milliseconds to be used for APDEX calculations. This means a transaction responding in less than this threshold is considered satisfactory. Transaction responding between T and 4*T is considered tolerable. Any transaction responding in more than 4*T time is considered frustrating. Citrix ADC maintains stats for such tolerable and frustrating transcations. And client response time related apdex counters are only updated on a vserver which receives clients traffic. 
   .PARAMETER http2direct 
       Choose whether to enable support for Direct HTTP/2.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER http2strictcipher 
       Choose whether to enable strict HTTP/2 cipher selection.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER altsvc 
       Choose whether to enable support for Alternative Service.  
       Possible values = ENABLED, DISABLED
    .EXAMPLE
        Invoke-ADCUnsetNshttpprofile -name <string>
    .NOTES
        File Name : Invoke-ADCUnsetNshttpprofile
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nshttpprofile
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateLength(1, 127)]
        [string]$name ,

        [Boolean]$dropinvalreqs ,

        [Boolean]$markhttp09inval ,

        [Boolean]$markconnreqinval ,

        [Boolean]$marktracereqinval ,

        [Boolean]$markrfc7230noncompliantinval ,

        [Boolean]$markhttpheaderextrawserror ,

        [Boolean]$cmponpush ,

        [Boolean]$conmultiplex ,

        [Boolean]$maxreusepool ,

        [Boolean]$dropextracrlf ,

        [Boolean]$incomphdrdelay ,

        [Boolean]$websocket ,

        [Boolean]$dropextradata ,

        [Boolean]$clientiphdrexpr ,

        [Boolean]$reqtimeout ,

        [Boolean]$adpttimeout ,

        [Boolean]$reqtimeoutaction ,

        [Boolean]$weblog ,

        [Boolean]$maxreq ,

        [Boolean]$persistentetag ,

        [Boolean]$spdy ,

        [Boolean]$http2 ,

        [Boolean]$http2maxheaderlistsize ,

        [Boolean]$http2maxframesize ,

        [Boolean]$http2maxconcurrentstreams ,

        [Boolean]$http2initialwindowsize ,

        [Boolean]$http2headertablesize ,

        [Boolean]$http2minseverconn ,

        [Boolean]$http2maxpingframespermin ,

        [Boolean]$http2maxsettingsframespermin ,

        [Boolean]$http2maxresetframespermin ,

        [Boolean]$http2maxemptyframespermin ,

        [Boolean]$reusepooltimeout ,

        [Boolean]$maxheaderlen ,

        [Boolean]$rtsptunnel ,

        [Boolean]$minreusepool ,

        [Boolean]$apdexcltresptimethreshold ,

        [Boolean]$http2direct ,

        [Boolean]$http2strictcipher ,

        [Boolean]$altsvc 
    )
    begin {
        Write-Verbose "Invoke-ADCUnsetNshttpprofile: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
            }
            if ($PSBoundParameters.ContainsKey('dropinvalreqs')) { $Payload.Add('dropinvalreqs', $dropinvalreqs) }
            if ($PSBoundParameters.ContainsKey('markhttp09inval')) { $Payload.Add('markhttp09inval', $markhttp09inval) }
            if ($PSBoundParameters.ContainsKey('markconnreqinval')) { $Payload.Add('markconnreqinval', $markconnreqinval) }
            if ($PSBoundParameters.ContainsKey('marktracereqinval')) { $Payload.Add('marktracereqinval', $marktracereqinval) }
            if ($PSBoundParameters.ContainsKey('markrfc7230noncompliantinval')) { $Payload.Add('markrfc7230noncompliantinval', $markrfc7230noncompliantinval) }
            if ($PSBoundParameters.ContainsKey('markhttpheaderextrawserror')) { $Payload.Add('markhttpheaderextrawserror', $markhttpheaderextrawserror) }
            if ($PSBoundParameters.ContainsKey('cmponpush')) { $Payload.Add('cmponpush', $cmponpush) }
            if ($PSBoundParameters.ContainsKey('conmultiplex')) { $Payload.Add('conmultiplex', $conmultiplex) }
            if ($PSBoundParameters.ContainsKey('maxreusepool')) { $Payload.Add('maxreusepool', $maxreusepool) }
            if ($PSBoundParameters.ContainsKey('dropextracrlf')) { $Payload.Add('dropextracrlf', $dropextracrlf) }
            if ($PSBoundParameters.ContainsKey('incomphdrdelay')) { $Payload.Add('incomphdrdelay', $incomphdrdelay) }
            if ($PSBoundParameters.ContainsKey('websocket')) { $Payload.Add('websocket', $websocket) }
            if ($PSBoundParameters.ContainsKey('dropextradata')) { $Payload.Add('dropextradata', $dropextradata) }
            if ($PSBoundParameters.ContainsKey('clientiphdrexpr')) { $Payload.Add('clientiphdrexpr', $clientiphdrexpr) }
            if ($PSBoundParameters.ContainsKey('reqtimeout')) { $Payload.Add('reqtimeout', $reqtimeout) }
            if ($PSBoundParameters.ContainsKey('adpttimeout')) { $Payload.Add('adpttimeout', $adpttimeout) }
            if ($PSBoundParameters.ContainsKey('reqtimeoutaction')) { $Payload.Add('reqtimeoutaction', $reqtimeoutaction) }
            if ($PSBoundParameters.ContainsKey('weblog')) { $Payload.Add('weblog', $weblog) }
            if ($PSBoundParameters.ContainsKey('maxreq')) { $Payload.Add('maxreq', $maxreq) }
            if ($PSBoundParameters.ContainsKey('persistentetag')) { $Payload.Add('persistentetag', $persistentetag) }
            if ($PSBoundParameters.ContainsKey('spdy')) { $Payload.Add('spdy', $spdy) }
            if ($PSBoundParameters.ContainsKey('http2')) { $Payload.Add('http2', $http2) }
            if ($PSBoundParameters.ContainsKey('http2maxheaderlistsize')) { $Payload.Add('http2maxheaderlistsize', $http2maxheaderlistsize) }
            if ($PSBoundParameters.ContainsKey('http2maxframesize')) { $Payload.Add('http2maxframesize', $http2maxframesize) }
            if ($PSBoundParameters.ContainsKey('http2maxconcurrentstreams')) { $Payload.Add('http2maxconcurrentstreams', $http2maxconcurrentstreams) }
            if ($PSBoundParameters.ContainsKey('http2initialwindowsize')) { $Payload.Add('http2initialwindowsize', $http2initialwindowsize) }
            if ($PSBoundParameters.ContainsKey('http2headertablesize')) { $Payload.Add('http2headertablesize', $http2headertablesize) }
            if ($PSBoundParameters.ContainsKey('http2minseverconn')) { $Payload.Add('http2minseverconn', $http2minseverconn) }
            if ($PSBoundParameters.ContainsKey('http2maxpingframespermin')) { $Payload.Add('http2maxpingframespermin', $http2maxpingframespermin) }
            if ($PSBoundParameters.ContainsKey('http2maxsettingsframespermin')) { $Payload.Add('http2maxsettingsframespermin', $http2maxsettingsframespermin) }
            if ($PSBoundParameters.ContainsKey('http2maxresetframespermin')) { $Payload.Add('http2maxresetframespermin', $http2maxresetframespermin) }
            if ($PSBoundParameters.ContainsKey('http2maxemptyframespermin')) { $Payload.Add('http2maxemptyframespermin', $http2maxemptyframespermin) }
            if ($PSBoundParameters.ContainsKey('reusepooltimeout')) { $Payload.Add('reusepooltimeout', $reusepooltimeout) }
            if ($PSBoundParameters.ContainsKey('maxheaderlen')) { $Payload.Add('maxheaderlen', $maxheaderlen) }
            if ($PSBoundParameters.ContainsKey('rtsptunnel')) { $Payload.Add('rtsptunnel', $rtsptunnel) }
            if ($PSBoundParameters.ContainsKey('minreusepool')) { $Payload.Add('minreusepool', $minreusepool) }
            if ($PSBoundParameters.ContainsKey('apdexcltresptimethreshold')) { $Payload.Add('apdexcltresptimethreshold', $apdexcltresptimethreshold) }
            if ($PSBoundParameters.ContainsKey('http2direct')) { $Payload.Add('http2direct', $http2direct) }
            if ($PSBoundParameters.ContainsKey('http2strictcipher')) { $Payload.Add('http2strictcipher', $http2strictcipher) }
            if ($PSBoundParameters.ContainsKey('altsvc')) { $Payload.Add('altsvc', $altsvc) }
            if ($PSCmdlet.ShouldProcess("$name", "Unset NS configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nshttpprofile -Action unset -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUnsetNshttpprofile: Finished"
    }
}

function Invoke-ADCGetNshttpprofile {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER name 
       Name for an HTTP profile. Must begin with a letter, number, or the underscore \(_\) character. Other characters allowed, after the first character, are the hyphen \(-\), period \(.\), hash \(\#\), space \( \), at \(@\), colon \(:\), and equal \(=\) characters. The name of a HTTP profile cannot be changed after it is created.  
       CLI Users: If the name includes one or more spaces, enclose the name in double or single quotation marks \(for example, "my http profile" or 'my http profile'\). 
    .PARAMETER GetAll 
        Retreive all nshttpprofile object(s)
    .PARAMETER Count
        If specified, the count of the nshttpprofile object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNshttpprofile
    .EXAMPLE 
        Invoke-ADCGetNshttpprofile -GetAll 
    .EXAMPLE 
        Invoke-ADCGetNshttpprofile -Count
    .EXAMPLE
        Invoke-ADCGetNshttpprofile -name <string>
    .EXAMPLE
        Invoke-ADCGetNshttpprofile -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNshttpprofile
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nshttpprofile/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateLength(1, 127)]
        [string]$name,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll,

        [Parameter(ParameterSetName = 'GetAll')]
        [Parameter(ParameterSetName = 'Get')]
        [Switch]$ViewSummary

    )
    begin {
        Write-Verbose "Invoke-ADCGetNshttpprofile: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all nshttpprofile objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nshttpprofile -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nshttpprofile objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nshttpprofile -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nshttpprofile objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nshttpprofile -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nshttpprofile configuration for property 'name'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nshttpprofile -Resource $name -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving nshttpprofile configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nshttpprofile -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNshttpprofile: Ended"
    }
}

function Invoke-ADCAddNsicapprofile {
<#
    .SYNOPSIS
        Add NS configuration Object
    .DESCRIPTION
        Add NS configuration Object 
    .PARAMETER name 
        Name for an ICAP profile. Must begin with a letter, number, or the underscore \(_\) character. Other characters allowed, after the first character, are the hyphen \(-\), period \(.\), hash \(\#\), space \( \), at \(@\), colon \(:\), and equal \(=\) characters. The name of a ICAP profile cannot be changed after it is created.  
        CLI Users: If the name includes one or more spaces, enclose the name in double or single quotation marks \(for example, "my icap profile" or 'my icap profile'\).  
        Minimum length = 1  
        Maximum length = 127 
    .PARAMETER preview 
        Enable or Disable preview header with ICAP request. This feature allows an ICAP server to see the beginning of a transaction, then decide if it wants to opt-out of the transaction early instead of receiving the remainder of the request message.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER previewlength 
        Value of Preview Header field. Citrix ADC uses the minimum of this set value and the preview size received on OPTIONS response.  
        Default value: 4096  
        Minimum value = 0  
        Maximum value = 4294967294 
    .PARAMETER uri 
        URI representing icap service. It is a mandatory argument while creating an icapprofile.  
        Minimum length = 1 
    .PARAMETER hostheader 
        ICAP Host Header.  
        Minimum length = 1 
    .PARAMETER useragent 
        ICAP User Agent Header String.  
        Minimum length = 1 
    .PARAMETER mode 
        ICAP Mode of operation. It is a mandatory argument while creating an icapprofile.  
        Possible values = REQMOD, RESPMOD 
    .PARAMETER queryparams 
        Query parameters to be included with ICAP request URI. Entered values should be in arg=value format. For more than one parameters, add ; separated values. e.g.: arg1=val1;arg2=val2.  
        Minimum length = 1 
    .PARAMETER connectionkeepalive 
        If enabled, Citrix ADC keeps the ICAP connection alive after a transaction to reuse it to send next ICAP request.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER allow204 
        Enable or Disable sending Allow: 204 header in ICAP request.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER inserticapheaders 
        Insert custom ICAP headers in the ICAP request to send to ICAP server. The headers can be static or can be dynamically constructed using PI Policy Expression. For example, to send static user agent and Client's IP address, the expression can be specified as "User-Agent: NS-ICAP-Client/V1.0\r\nX-Client-IP: "+CLIENT.IP.SRC+"\r\n".  
        The Citrix ADC does not check the validity of the specified header name-value. You must manually validate the specified header syntax.  
        Minimum length = 1 
    .PARAMETER inserthttprequest 
        Exact HTTP request, in the form of an expression, which the Citrix ADC encapsulates and sends to the ICAP server. If you set this parameter, the ICAP request is sent using only this header. This can be used when the HTTP header is not available to send or ICAP server only needs part of the incoming HTTP request. The request expression is constrained by the feature for which it is used.  
        The Citrix ADC does not check the validity of this request. You must manually validate the request.  
        Minimum length = 1 
    .PARAMETER reqtimeout 
        Time, in seconds, within which the remote server should respond to the ICAP-request. If the Netscaler does not receive full response with this time, the specified request timeout action is performed. Zero value disables this timeout functionality.  
        Default value: 0  
        Minimum value = 0  
        Maximum value = 86400 
    .PARAMETER reqtimeoutaction 
        Name of the action to perform if the Vserver/Server representing the remote service does not respond with any response within the timeout value configured. The Supported actions are  
        * BYPASS - This Ignores the remote server response and sends the request/response to Client/Server.  
        * If the ICAP response with Encapsulated headers is not received within the request-timeout value configured, this Ignores the remote ICAP server response and sends the Full request/response to Server/Client.  
        * RESET - Reset the client connection by closing it. The client program, such as a browser, will handle this and may inform the user. The client may then resend the request if desired.  
        * DROP - Drop the request without sending a response to the user.  
        Default value: RESET  
        Possible values = BYPASS, DROP, RESET 
    .PARAMETER logaction 
        Name of the audit message action which would be evaluated on receiving the ICAP response to emit the logs. 
    .PARAMETER PassThru 
        Return details about the created nsicapprofile item.
    .EXAMPLE
        Invoke-ADCAddNsicapprofile -name <string> -uri <string> -mode <string>
    .NOTES
        File Name : Invoke-ADCAddNsicapprofile
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsicapprofile/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateLength(1, 127)]
        [string]$name ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$preview = 'DISABLED' ,

        [ValidateRange(0, 4294967294)]
        [double]$previewlength = '4096' ,

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$uri ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$hostheader ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$useragent ,

        [Parameter(Mandatory = $true)]
        [ValidateSet('REQMOD', 'RESPMOD')]
        [string]$mode ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$queryparams ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$connectionkeepalive = 'ENABLED' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$allow204 = 'ENABLED' ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$inserticapheaders ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$inserthttprequest ,

        [ValidateRange(0, 86400)]
        [double]$reqtimeout = '0' ,

        [ValidateSet('BYPASS', 'DROP', 'RESET')]
        [string]$reqtimeoutaction = 'RESET' ,

        [string]$logaction ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddNsicapprofile: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
                uri = $uri
                mode = $mode
            }
            if ($PSBoundParameters.ContainsKey('preview')) { $Payload.Add('preview', $preview) }
            if ($PSBoundParameters.ContainsKey('previewlength')) { $Payload.Add('previewlength', $previewlength) }
            if ($PSBoundParameters.ContainsKey('hostheader')) { $Payload.Add('hostheader', $hostheader) }
            if ($PSBoundParameters.ContainsKey('useragent')) { $Payload.Add('useragent', $useragent) }
            if ($PSBoundParameters.ContainsKey('queryparams')) { $Payload.Add('queryparams', $queryparams) }
            if ($PSBoundParameters.ContainsKey('connectionkeepalive')) { $Payload.Add('connectionkeepalive', $connectionkeepalive) }
            if ($PSBoundParameters.ContainsKey('allow204')) { $Payload.Add('allow204', $allow204) }
            if ($PSBoundParameters.ContainsKey('inserticapheaders')) { $Payload.Add('inserticapheaders', $inserticapheaders) }
            if ($PSBoundParameters.ContainsKey('inserthttprequest')) { $Payload.Add('inserthttprequest', $inserthttprequest) }
            if ($PSBoundParameters.ContainsKey('reqtimeout')) { $Payload.Add('reqtimeout', $reqtimeout) }
            if ($PSBoundParameters.ContainsKey('reqtimeoutaction')) { $Payload.Add('reqtimeoutaction', $reqtimeoutaction) }
            if ($PSBoundParameters.ContainsKey('logaction')) { $Payload.Add('logaction', $logaction) }
 
            if ($PSCmdlet.ShouldProcess("nsicapprofile", "Add NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nsicapprofile -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetNsicapprofile -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddNsicapprofile: Finished"
    }
}

function Invoke-ADCDeleteNsicapprofile {
<#
    .SYNOPSIS
        Delete NS configuration Object
    .DESCRIPTION
        Delete NS configuration Object
    .PARAMETER name 
       Name for an ICAP profile. Must begin with a letter, number, or the underscore \(_\) character. Other characters allowed, after the first character, are the hyphen \(-\), period \(.\), hash \(\#\), space \( \), at \(@\), colon \(:\), and equal \(=\) characters. The name of a ICAP profile cannot be changed after it is created.  
       CLI Users: If the name includes one or more spaces, enclose the name in double or single quotation marks \(for example, "my icap profile" or 'my icap profile'\).  
       Minimum length = 1  
       Maximum length = 127 
    .EXAMPLE
        Invoke-ADCDeleteNsicapprofile -name <string>
    .NOTES
        File Name : Invoke-ADCDeleteNsicapprofile
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsicapprofile/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$name 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteNsicapprofile: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }

            if ($PSCmdlet.ShouldProcess("$name", "Delete NS configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type nsicapprofile -Resource $name -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteNsicapprofile: Finished"
    }
}

function Invoke-ADCUpdateNsicapprofile {
<#
    .SYNOPSIS
        Update NS configuration Object
    .DESCRIPTION
        Update NS configuration Object 
    .PARAMETER name 
        Name for an ICAP profile. Must begin with a letter, number, or the underscore \(_\) character. Other characters allowed, after the first character, are the hyphen \(-\), period \(.\), hash \(\#\), space \( \), at \(@\), colon \(:\), and equal \(=\) characters. The name of a ICAP profile cannot be changed after it is created.  
        CLI Users: If the name includes one or more spaces, enclose the name in double or single quotation marks \(for example, "my icap profile" or 'my icap profile'\).  
        Minimum length = 1  
        Maximum length = 127 
    .PARAMETER preview 
        Enable or Disable preview header with ICAP request. This feature allows an ICAP server to see the beginning of a transaction, then decide if it wants to opt-out of the transaction early instead of receiving the remainder of the request message.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER previewlength 
        Value of Preview Header field. Citrix ADC uses the minimum of this set value and the preview size received on OPTIONS response.  
        Default value: 4096  
        Minimum value = 0  
        Maximum value = 4294967294 
    .PARAMETER uri 
        URI representing icap service. It is a mandatory argument while creating an icapprofile.  
        Minimum length = 1 
    .PARAMETER hostheader 
        ICAP Host Header.  
        Minimum length = 1 
    .PARAMETER useragent 
        ICAP User Agent Header String.  
        Minimum length = 1 
    .PARAMETER mode 
        ICAP Mode of operation. It is a mandatory argument while creating an icapprofile.  
        Possible values = REQMOD, RESPMOD 
    .PARAMETER queryparams 
        Query parameters to be included with ICAP request URI. Entered values should be in arg=value format. For more than one parameters, add ; separated values. e.g.: arg1=val1;arg2=val2.  
        Minimum length = 1 
    .PARAMETER connectionkeepalive 
        If enabled, Citrix ADC keeps the ICAP connection alive after a transaction to reuse it to send next ICAP request.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER allow204 
        Enable or Disable sending Allow: 204 header in ICAP request.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER inserticapheaders 
        Insert custom ICAP headers in the ICAP request to send to ICAP server. The headers can be static or can be dynamically constructed using PI Policy Expression. For example, to send static user agent and Client's IP address, the expression can be specified as "User-Agent: NS-ICAP-Client/V1.0\r\nX-Client-IP: "+CLIENT.IP.SRC+"\r\n".  
        The Citrix ADC does not check the validity of the specified header name-value. You must manually validate the specified header syntax.  
        Minimum length = 1 
    .PARAMETER inserthttprequest 
        Exact HTTP request, in the form of an expression, which the Citrix ADC encapsulates and sends to the ICAP server. If you set this parameter, the ICAP request is sent using only this header. This can be used when the HTTP header is not available to send or ICAP server only needs part of the incoming HTTP request. The request expression is constrained by the feature for which it is used.  
        The Citrix ADC does not check the validity of this request. You must manually validate the request.  
        Minimum length = 1 
    .PARAMETER reqtimeout 
        Time, in seconds, within which the remote server should respond to the ICAP-request. If the Netscaler does not receive full response with this time, the specified request timeout action is performed. Zero value disables this timeout functionality.  
        Default value: 0  
        Minimum value = 0  
        Maximum value = 86400 
    .PARAMETER reqtimeoutaction 
        Name of the action to perform if the Vserver/Server representing the remote service does not respond with any response within the timeout value configured. The Supported actions are  
        * BYPASS - This Ignores the remote server response and sends the request/response to Client/Server.  
        * If the ICAP response with Encapsulated headers is not received within the request-timeout value configured, this Ignores the remote ICAP server response and sends the Full request/response to Server/Client.  
        * RESET - Reset the client connection by closing it. The client program, such as a browser, will handle this and may inform the user. The client may then resend the request if desired.  
        * DROP - Drop the request without sending a response to the user.  
        Default value: RESET  
        Possible values = BYPASS, DROP, RESET 
    .PARAMETER logaction 
        Name of the audit message action which would be evaluated on receiving the ICAP response to emit the logs. 
    .PARAMETER PassThru 
        Return details about the created nsicapprofile item.
    .EXAMPLE
        Invoke-ADCUpdateNsicapprofile -name <string>
    .NOTES
        File Name : Invoke-ADCUpdateNsicapprofile
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsicapprofile/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateLength(1, 127)]
        [string]$name ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$preview ,

        [ValidateRange(0, 4294967294)]
        [double]$previewlength ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$uri ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$hostheader ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$useragent ,

        [ValidateSet('REQMOD', 'RESPMOD')]
        [string]$mode ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$queryparams ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$connectionkeepalive ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$allow204 ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$inserticapheaders ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$inserthttprequest ,

        [ValidateRange(0, 86400)]
        [double]$reqtimeout ,

        [ValidateSet('BYPASS', 'DROP', 'RESET')]
        [string]$reqtimeoutaction ,

        [string]$logaction ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCUpdateNsicapprofile: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
            }
            if ($PSBoundParameters.ContainsKey('preview')) { $Payload.Add('preview', $preview) }
            if ($PSBoundParameters.ContainsKey('previewlength')) { $Payload.Add('previewlength', $previewlength) }
            if ($PSBoundParameters.ContainsKey('uri')) { $Payload.Add('uri', $uri) }
            if ($PSBoundParameters.ContainsKey('hostheader')) { $Payload.Add('hostheader', $hostheader) }
            if ($PSBoundParameters.ContainsKey('useragent')) { $Payload.Add('useragent', $useragent) }
            if ($PSBoundParameters.ContainsKey('mode')) { $Payload.Add('mode', $mode) }
            if ($PSBoundParameters.ContainsKey('queryparams')) { $Payload.Add('queryparams', $queryparams) }
            if ($PSBoundParameters.ContainsKey('connectionkeepalive')) { $Payload.Add('connectionkeepalive', $connectionkeepalive) }
            if ($PSBoundParameters.ContainsKey('allow204')) { $Payload.Add('allow204', $allow204) }
            if ($PSBoundParameters.ContainsKey('inserticapheaders')) { $Payload.Add('inserticapheaders', $inserticapheaders) }
            if ($PSBoundParameters.ContainsKey('inserthttprequest')) { $Payload.Add('inserthttprequest', $inserthttprequest) }
            if ($PSBoundParameters.ContainsKey('reqtimeout')) { $Payload.Add('reqtimeout', $reqtimeout) }
            if ($PSBoundParameters.ContainsKey('reqtimeoutaction')) { $Payload.Add('reqtimeoutaction', $reqtimeoutaction) }
            if ($PSBoundParameters.ContainsKey('logaction')) { $Payload.Add('logaction', $logaction) }
 
            if ($PSCmdlet.ShouldProcess("nsicapprofile", "Update NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -Type nsicapprofile -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetNsicapprofile -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUpdateNsicapprofile: Finished"
    }
}

function Invoke-ADCUnsetNsicapprofile {
<#
    .SYNOPSIS
        Unset NS configuration Object
    .DESCRIPTION
        Unset NS configuration Object 
   .PARAMETER name 
       Name for an ICAP profile. Must begin with a letter, number, or the underscore \(_\) character. Other characters allowed, after the first character, are the hyphen \(-\), period \(.\), hash \(\#\), space \( \), at \(@\), colon \(:\), and equal \(=\) characters. The name of a ICAP profile cannot be changed after it is created.  
       CLI Users: If the name includes one or more spaces, enclose the name in double or single quotation marks \(for example, "my icap profile" or 'my icap profile'\). 
   .PARAMETER preview 
       Enable or Disable preview header with ICAP request. This feature allows an ICAP server to see the beginning of a transaction, then decide if it wants to opt-out of the transaction early instead of receiving the remainder of the request message.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER previewlength 
       Value of Preview Header field. Citrix ADC uses the minimum of this set value and the preview size received on OPTIONS response. 
   .PARAMETER hostheader 
       ICAP Host Header. 
   .PARAMETER useragent 
       ICAP User Agent Header String. 
   .PARAMETER queryparams 
       Query parameters to be included with ICAP request URI. Entered values should be in arg=value format. For more than one parameters, add ; separated values. e.g.: arg1=val1;arg2=val2. 
   .PARAMETER connectionkeepalive 
       If enabled, Citrix ADC keeps the ICAP connection alive after a transaction to reuse it to send next ICAP request.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER allow204 
       Enable or Disable sending Allow: 204 header in ICAP request.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER inserticapheaders 
       Insert custom ICAP headers in the ICAP request to send to ICAP server. The headers can be static or can be dynamically constructed using PI Policy Expression. For example, to send static user agent and Client's IP address, the expression can be specified as "User-Agent: NS-ICAP-Client/V1.0\r\nX-Client-IP: "+CLIENT.IP.SRC+"\r\n".  
       The Citrix ADC does not check the validity of the specified header name-value. You must manually validate the specified header syntax. 
   .PARAMETER inserthttprequest 
       Exact HTTP request, in the form of an expression, which the Citrix ADC encapsulates and sends to the ICAP server. If you set this parameter, the ICAP request is sent using only this header. This can be used when the HTTP header is not available to send or ICAP server only needs part of the incoming HTTP request. The request expression is constrained by the feature for which it is used.  
       The Citrix ADC does not check the validity of this request. You must manually validate the request. 
   .PARAMETER reqtimeout 
       Time, in seconds, within which the remote server should respond to the ICAP-request. If the Netscaler does not receive full response with this time, the specified request timeout action is performed. Zero value disables this timeout functionality. 
   .PARAMETER reqtimeoutaction 
       Name of the action to perform if the Vserver/Server representing the remote service does not respond with any response within the timeout value configured. The Supported actions are  
       * BYPASS - This Ignores the remote server response and sends the request/response to Client/Server.  
       * If the ICAP response with Encapsulated headers is not received within the request-timeout value configured, this Ignores the remote ICAP server response and sends the Full request/response to Server/Client.  
       * RESET - Reset the client connection by closing it. The client program, such as a browser, will handle this and may inform the user. The client may then resend the request if desired.  
       * DROP - Drop the request without sending a response to the user.  
       Possible values = BYPASS, DROP, RESET 
   .PARAMETER logaction 
       Name of the audit message action which would be evaluated on receiving the ICAP response to emit the logs.
    .EXAMPLE
        Invoke-ADCUnsetNsicapprofile -name <string>
    .NOTES
        File Name : Invoke-ADCUnsetNsicapprofile
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsicapprofile
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateLength(1, 127)]
        [string]$name ,

        [Boolean]$preview ,

        [Boolean]$previewlength ,

        [Boolean]$hostheader ,

        [Boolean]$useragent ,

        [Boolean]$queryparams ,

        [Boolean]$connectionkeepalive ,

        [Boolean]$allow204 ,

        [Boolean]$inserticapheaders ,

        [Boolean]$inserthttprequest ,

        [Boolean]$reqtimeout ,

        [Boolean]$reqtimeoutaction ,

        [Boolean]$logaction 
    )
    begin {
        Write-Verbose "Invoke-ADCUnsetNsicapprofile: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
            }
            if ($PSBoundParameters.ContainsKey('preview')) { $Payload.Add('preview', $preview) }
            if ($PSBoundParameters.ContainsKey('previewlength')) { $Payload.Add('previewlength', $previewlength) }
            if ($PSBoundParameters.ContainsKey('hostheader')) { $Payload.Add('hostheader', $hostheader) }
            if ($PSBoundParameters.ContainsKey('useragent')) { $Payload.Add('useragent', $useragent) }
            if ($PSBoundParameters.ContainsKey('queryparams')) { $Payload.Add('queryparams', $queryparams) }
            if ($PSBoundParameters.ContainsKey('connectionkeepalive')) { $Payload.Add('connectionkeepalive', $connectionkeepalive) }
            if ($PSBoundParameters.ContainsKey('allow204')) { $Payload.Add('allow204', $allow204) }
            if ($PSBoundParameters.ContainsKey('inserticapheaders')) { $Payload.Add('inserticapheaders', $inserticapheaders) }
            if ($PSBoundParameters.ContainsKey('inserthttprequest')) { $Payload.Add('inserthttprequest', $inserthttprequest) }
            if ($PSBoundParameters.ContainsKey('reqtimeout')) { $Payload.Add('reqtimeout', $reqtimeout) }
            if ($PSBoundParameters.ContainsKey('reqtimeoutaction')) { $Payload.Add('reqtimeoutaction', $reqtimeoutaction) }
            if ($PSBoundParameters.ContainsKey('logaction')) { $Payload.Add('logaction', $logaction) }
            if ($PSCmdlet.ShouldProcess("$name", "Unset NS configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nsicapprofile -Action unset -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUnsetNsicapprofile: Finished"
    }
}

function Invoke-ADCGetNsicapprofile {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER name 
       Name for an ICAP profile. Must begin with a letter, number, or the underscore \(_\) character. Other characters allowed, after the first character, are the hyphen \(-\), period \(.\), hash \(\#\), space \( \), at \(@\), colon \(:\), and equal \(=\) characters. The name of a ICAP profile cannot be changed after it is created.  
       CLI Users: If the name includes one or more spaces, enclose the name in double or single quotation marks \(for example, "my icap profile" or 'my icap profile'\). 
    .PARAMETER GetAll 
        Retreive all nsicapprofile object(s)
    .PARAMETER Count
        If specified, the count of the nsicapprofile object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNsicapprofile
    .EXAMPLE 
        Invoke-ADCGetNsicapprofile -GetAll 
    .EXAMPLE 
        Invoke-ADCGetNsicapprofile -Count
    .EXAMPLE
        Invoke-ADCGetNsicapprofile -name <string>
    .EXAMPLE
        Invoke-ADCGetNsicapprofile -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNsicapprofile
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsicapprofile/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateLength(1, 127)]
        [string]$name,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll,

        [Parameter(ParameterSetName = 'GetAll')]
        [Parameter(ParameterSetName = 'Get')]
        [Switch]$ViewSummary

    )
    begin {
        Write-Verbose "Invoke-ADCGetNsicapprofile: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all nsicapprofile objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsicapprofile -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nsicapprofile objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsicapprofile -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nsicapprofile objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsicapprofile -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nsicapprofile configuration for property 'name'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsicapprofile -Resource $name -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving nsicapprofile configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsicapprofile -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNsicapprofile: Ended"
    }
}

function Invoke-ADCAddNsip {
<#
    .SYNOPSIS
        Add NS configuration Object
    .DESCRIPTION
        Add NS configuration Object 
    .PARAMETER ipaddress 
        IPv4 address to create on the Citrix ADC. Cannot be changed after the IP address is created.  
        Minimum length = 1 
    .PARAMETER netmask 
        Subnet mask associated with the IP address. 
    .PARAMETER type 
        Type of the IP address to create on the Citrix ADC. Cannot be changed after the IP address is created. The following are the different types of Citrix ADC owned IP addresses:  
        * A Subnet IP (SNIP) address is used by the Citrix ADC to communicate with the servers. The Citrix ADC also uses the subnet IP address when generating its own packets, such as packets related to dynamic routing protocols, or to send monitor probes to check the health of the servers.  
        * A Virtual IP (VIP) address is the IP address associated with a virtual server. It is the IP address to which clients connect. An appliance managing a wide range of traffic may have many VIPs configured. Some of the attributes of the VIP address are customized to meet the requirements of the virtual server.  
        * A GSLB site IP (GSLBIP) address is associated with a GSLB site. It is not mandatory to specify a GSLBIP address when you initially configure the Citrix ADC. A GSLBIP address is used only when you create a GSLB site.  
        * A Cluster IP (CLIP) address is the management address of the cluster. All cluster configurations must be performed by accessing the cluster through this IP address.  
        Default value: SNIP  
        Possible values = SNIP, VIP, NSIP, GSLBsiteIP, CLIP 
    .PARAMETER arp 
        Respond to ARP requests for this IP address.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER icmp 
        Respond to ICMP requests for this IP address.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER vserver 
        Use this option to set (enable or disable) the virtual server attribute for this IP address.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER telnet 
        Allow Telnet access to this IP address.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER ftp 
        Allow File Transfer Protocol (FTP) access to this IP address.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER gui 
        Allow graphical user interface (GUI) access to this IP address.  
        Default value: ENABLED  
        Possible values = ENABLED, SECUREONLY, DISABLED 
    .PARAMETER ssh 
        Allow secure shell (SSH) access to this IP address.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER snmp 
        Allow Simple Network Management Protocol (SNMP) access to this IP address.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER mgmtaccess 
        Allow access to management applications on this IP address.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER restrictaccess 
        Block access to nonmanagement applications on this IP. This option is applicable for MIPs, SNIPs, and NSIP, and is disabled by default. Nonmanagement applications can run on the underlying Citrix ADC Free BSD operating system.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER dynamicrouting 
        Allow dynamic routing on this IP address. Specific to Subnet IP (SNIP) address.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER decrementttl 
        Decrement TTL by 1 when ENABLED.This setting is applicable only for UDP traffic.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER ospf 
        Use this option to enable or disable OSPF on this IP address for the entity.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER bgp 
        Use this option to enable or disable BGP on this IP address for the entity.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER rip 
        Use this option to enable or disable RIP on this IP address for the entity.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER hostroute 
        Option to push the VIP to ZebOS routing table for Kernel route redistribution through dynamic routing protocols.  
        Possible values = ENABLED, DISABLED 
    .PARAMETER advertiseondefaultpartition 
        Advertise VIPs from Shared VLAN on Default Partition.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER networkroute 
        Option to push the SNIP subnet to ZebOS routing table for Kernel route redistribution through dynamic routing protocol.  
        Possible values = ENABLED, DISABLED 
    .PARAMETER tag 
        Tag value for the network/host route associated with this IP.  
        Default value: 0 
    .PARAMETER hostrtgw 
        IP address of the gateway of the route for this VIP address.  
        Default value: -1 
    .PARAMETER metric 
        Integer value to add to or subtract from the cost of the route advertised for the VIP address.  
        Minimum value = -16777215 
    .PARAMETER vserverrhilevel 
        Advertise the route for the Virtual IP (VIP) address on the basis of the state of the virtual servers associated with that VIP.  
        * NONE - Advertise the route for the VIP address, regardless of the state of the virtual servers associated with the address.  
        * ONE VSERVER - Advertise the route for the VIP address if at least one of the associated virtual servers is in UP state.  
        * ALL VSERVER - Advertise the route for the VIP address if all of the associated virtual servers are in UP state.  
        * VSVR_CNTRLD - Advertise the route for the VIP address according to the RHIstate (RHI STATE) parameter setting on all the associated virtual servers of the VIP address along with their states.  
        When Vserver RHI Level (RHI) parameter is set to VSVR_CNTRLD, the following are different RHI behaviors for the VIP address on the basis of RHIstate (RHI STATE) settings on the virtual servers associated with the VIP address:  
        * If you set RHI STATE to PASSIVE on all virtual servers, the Citrix ADC always advertises the route for the VIP address.  
        * If you set RHI STATE to ACTIVE on all virtual servers, the Citrix ADC advertises the route for the VIP address if at least one of the associated virtual servers is in UP state.  
        *If you set RHI STATE to ACTIVE on some and PASSIVE on others, the Citrix ADC advertises the route for the VIP address if at least one of the associated virtual servers, whose RHI STATE set to ACTIVE, is in UP state.  
        Default value: ONE_VSERVER  
        Possible values = ONE_VSERVER, ALL_VSERVERS, NONE, VSVR_CNTRLD 
    .PARAMETER ospflsatype 
        Type of LSAs to be used by the OSPF protocol, running on the Citrix ADC, for advertising the route for this VIP address.  
        Default value: TYPE5  
        Possible values = TYPE1, TYPE5 
    .PARAMETER ospfarea 
        ID of the area in which the type1 link-state advertisements (LSAs) are to be advertised for this virtual IP (VIP) address by the OSPF protocol running on the Citrix ADC. When this parameter is not set, the VIP is advertised on all areas.  
        Default value: -1  
        Minimum value = 0  
        Maximum value = 4294967294LU 
    .PARAMETER state 
        Enable or disable the IP address.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER vrid 
        A positive integer that uniquely identifies a VMAC address for binding to this VIP address. This binding is used to set up Citrix ADCs in an active-active configuration using VRRP.  
        Minimum value = 1  
        Maximum value = 255 
    .PARAMETER icmpresponse 
        Respond to ICMP requests for a Virtual IP (VIP) address on the basis of the states of the virtual servers associated with that VIP. Available settings function as follows:  
        * NONE - The Citrix ADC responds to any ICMP request for the VIP address, irrespective of the states of the virtual servers associated with the address.  
        * ONE VSERVER - The Citrix ADC responds to any ICMP request for the VIP address if at least one of the associated virtual servers is in UP state.  
        * ALL VSERVER - The Citrix ADC responds to any ICMP request for the VIP address if all of the associated virtual servers are in UP state.  
        * VSVR_CNTRLD - The behavior depends on the ICMP VSERVER RESPONSE setting on all the associated virtual servers.  
        The following settings can be made for the ICMP VSERVER RESPONSE parameter on a virtual server:  
        * If you set ICMP VSERVER RESPONSE to PASSIVE on all virtual servers, Citrix ADC always responds.  
        * If you set ICMP VSERVER RESPONSE to ACTIVE on all virtual servers, Citrix ADC responds if even one virtual server is UP.  
        * When you set ICMP VSERVER RESPONSE to ACTIVE on some and PASSIVE on others, Citrix ADC responds if even one virtual server set to ACTIVE is UP.  
        Default value: 5  
        Possible values = NONE, ONE_VSERVER, ALL_VSERVERS, VSVR_CNTRLD 
    .PARAMETER ownernode 
        The owner node in a Cluster for this IP address. Owner node can vary from 0 to 31. If ownernode is not specified then the IP is treated as Striped IP.  
        Default value: 255 
    .PARAMETER arpresponse 
        Respond to ARP requests for a Virtual IP (VIP) address on the basis of the states of the virtual servers associated with that VIP. Available settings function as follows:  
        * NONE - The Citrix ADC responds to any ARP request for the VIP address, irrespective of the states of the virtual servers associated with the address.  
        * ONE VSERVER - The Citrix ADC responds to any ARP request for the VIP address if at least one of the associated virtual servers is in UP state.  
        * ALL VSERVER - The Citrix ADC responds to any ARP request for the VIP address if all of the associated virtual servers are in UP state.  
        Default value: 5  
        Possible values = NONE, ONE_VSERVER, ALL_VSERVERS 
    .PARAMETER ownerdownresponse 
        in cluster system, if the owner node is down, whether should it respond to icmp/arp.  
        Default value: YES  
        Possible values = YES, NO 
    .PARAMETER td 
        Integer value that uniquely identifies the traffic domain in which you want to configure the entity. If you do not specify an ID, the entity becomes part of the default traffic domain, which has an ID of 0. TD id 4095 is used reserved for LSN use .  
        Minimum value = 0  
        Maximum value = 4095 
    .PARAMETER arpowner 
        The arp owner in a Cluster for this IP address. It can vary from 0 to 31.  
        Default value: 255
    .EXAMPLE
        Invoke-ADCAddNsip -ipaddress <string> -netmask <string>
    .NOTES
        File Name : Invoke-ADCAddNsip
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsip/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$ipaddress ,

        [Parameter(Mandatory = $true)]
        [string]$netmask ,

        [ValidateSet('SNIP', 'VIP', 'NSIP', 'GSLBsiteIP', 'CLIP')]
        [string]$type = 'SNIP' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$arp = 'ENABLED' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$icmp = 'ENABLED' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$vserver = 'ENABLED' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$telnet = 'ENABLED' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$ftp = 'ENABLED' ,

        [ValidateSet('ENABLED', 'SECUREONLY', 'DISABLED')]
        [string]$gui = 'ENABLED' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$ssh = 'ENABLED' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$snmp = 'ENABLED' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$mgmtaccess = 'DISABLED' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$restrictaccess = 'DISABLED' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$dynamicrouting = 'DISABLED' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$decrementttl = 'DISABLED' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$ospf = 'DISABLED' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$bgp = 'DISABLED' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$rip = 'DISABLED' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$hostroute ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$advertiseondefaultpartition = 'DISABLED' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$networkroute ,

        [double]$tag = '0' ,

        [string]$hostrtgw = '-1' ,

        [int]$metric ,

        [ValidateSet('ONE_VSERVER', 'ALL_VSERVERS', 'NONE', 'VSVR_CNTRLD')]
        [string]$vserverrhilevel = 'ONE_VSERVER' ,

        [ValidateSet('TYPE1', 'TYPE5')]
        [string]$ospflsatype = 'TYPE5' ,

        [ValidateRange(0, 4294967294)]
        [double]$ospfarea = '-1' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$state = 'ENABLED' ,

        [ValidateRange(1, 255)]
        [double]$vrid ,

        [ValidateSet('NONE', 'ONE_VSERVER', 'ALL_VSERVERS', 'VSVR_CNTRLD')]
        [string]$icmpresponse = '5' ,

        [double]$ownernode = '255' ,

        [ValidateSet('NONE', 'ONE_VSERVER', 'ALL_VSERVERS')]
        [string]$arpresponse = '5' ,

        [ValidateSet('YES', 'NO')]
        [string]$ownerdownresponse = 'YES' ,

        [ValidateRange(0, 4095)]
        [double]$td ,

        [double]$arpowner = '255' 

    )
    begin {
        Write-Verbose "Invoke-ADCAddNsip: Starting"
    }
    process {
        try {
            $Payload = @{
                ipaddress = $ipaddress
                netmask = $netmask
            }
            if ($PSBoundParameters.ContainsKey('type')) { $Payload.Add('type', $type) }
            if ($PSBoundParameters.ContainsKey('arp')) { $Payload.Add('arp', $arp) }
            if ($PSBoundParameters.ContainsKey('icmp')) { $Payload.Add('icmp', $icmp) }
            if ($PSBoundParameters.ContainsKey('vserver')) { $Payload.Add('vserver', $vserver) }
            if ($PSBoundParameters.ContainsKey('telnet')) { $Payload.Add('telnet', $telnet) }
            if ($PSBoundParameters.ContainsKey('ftp')) { $Payload.Add('ftp', $ftp) }
            if ($PSBoundParameters.ContainsKey('gui')) { $Payload.Add('gui', $gui) }
            if ($PSBoundParameters.ContainsKey('ssh')) { $Payload.Add('ssh', $ssh) }
            if ($PSBoundParameters.ContainsKey('snmp')) { $Payload.Add('snmp', $snmp) }
            if ($PSBoundParameters.ContainsKey('mgmtaccess')) { $Payload.Add('mgmtaccess', $mgmtaccess) }
            if ($PSBoundParameters.ContainsKey('restrictaccess')) { $Payload.Add('restrictaccess', $restrictaccess) }
            if ($PSBoundParameters.ContainsKey('dynamicrouting')) { $Payload.Add('dynamicrouting', $dynamicrouting) }
            if ($PSBoundParameters.ContainsKey('decrementttl')) { $Payload.Add('decrementttl', $decrementttl) }
            if ($PSBoundParameters.ContainsKey('ospf')) { $Payload.Add('ospf', $ospf) }
            if ($PSBoundParameters.ContainsKey('bgp')) { $Payload.Add('bgp', $bgp) }
            if ($PSBoundParameters.ContainsKey('rip')) { $Payload.Add('rip', $rip) }
            if ($PSBoundParameters.ContainsKey('hostroute')) { $Payload.Add('hostroute', $hostroute) }
            if ($PSBoundParameters.ContainsKey('advertiseondefaultpartition')) { $Payload.Add('advertiseondefaultpartition', $advertiseondefaultpartition) }
            if ($PSBoundParameters.ContainsKey('networkroute')) { $Payload.Add('networkroute', $networkroute) }
            if ($PSBoundParameters.ContainsKey('tag')) { $Payload.Add('tag', $tag) }
            if ($PSBoundParameters.ContainsKey('hostrtgw')) { $Payload.Add('hostrtgw', $hostrtgw) }
            if ($PSBoundParameters.ContainsKey('metric')) { $Payload.Add('metric', $metric) }
            if ($PSBoundParameters.ContainsKey('vserverrhilevel')) { $Payload.Add('vserverrhilevel', $vserverrhilevel) }
            if ($PSBoundParameters.ContainsKey('ospflsatype')) { $Payload.Add('ospflsatype', $ospflsatype) }
            if ($PSBoundParameters.ContainsKey('ospfarea')) { $Payload.Add('ospfarea', $ospfarea) }
            if ($PSBoundParameters.ContainsKey('state')) { $Payload.Add('state', $state) }
            if ($PSBoundParameters.ContainsKey('vrid')) { $Payload.Add('vrid', $vrid) }
            if ($PSBoundParameters.ContainsKey('icmpresponse')) { $Payload.Add('icmpresponse', $icmpresponse) }
            if ($PSBoundParameters.ContainsKey('ownernode')) { $Payload.Add('ownernode', $ownernode) }
            if ($PSBoundParameters.ContainsKey('arpresponse')) { $Payload.Add('arpresponse', $arpresponse) }
            if ($PSBoundParameters.ContainsKey('ownerdownresponse')) { $Payload.Add('ownerdownresponse', $ownerdownresponse) }
            if ($PSBoundParameters.ContainsKey('td')) { $Payload.Add('td', $td) }
            if ($PSBoundParameters.ContainsKey('arpowner')) { $Payload.Add('arpowner', $arpowner) }
 
            if ($PSCmdlet.ShouldProcess("nsip", "Add NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nsip -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
            Write-Output $result

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddNsip: Finished"
    }
}

function Invoke-ADCDeleteNsip {
<#
    .SYNOPSIS
        Delete NS configuration Object
    .DESCRIPTION
        Delete NS configuration Object
    .PARAMETER ipaddress 
       IPv4 address to create on the Citrix ADC. Cannot be changed after the IP address is created.  
       Minimum length = 1    .PARAMETER td 
       Integer value that uniquely identifies the traffic domain in which you want to configure the entity. If you do not specify an ID, the entity becomes part of the default traffic domain, which has an ID of 0. TD id 4095 is used reserved for LSN use .  
       Minimum value = 0  
       Maximum value = 4095
    .EXAMPLE
        Invoke-ADCDeleteNsip -ipaddress <string>
    .NOTES
        File Name : Invoke-ADCDeleteNsip
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsip/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$ipaddress ,

        [double]$td 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteNsip: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }
            if ($PSBoundParameters.ContainsKey('td')) { $Arguments.Add('td', $td) }
            if ($PSCmdlet.ShouldProcess("$ipaddress", "Delete NS configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type nsip -Resource $ipaddress -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteNsip: Finished"
    }
}

function Invoke-ADCUpdateNsip {
<#
    .SYNOPSIS
        Update NS configuration Object
    .DESCRIPTION
        Update NS configuration Object 
    .PARAMETER ipaddress 
        IPv4 address to create on the Citrix ADC. Cannot be changed after the IP address is created.  
        Minimum length = 1 
    .PARAMETER td 
        Integer value that uniquely identifies the traffic domain in which you want to configure the entity. If you do not specify an ID, the entity becomes part of the default traffic domain, which has an ID of 0. TD id 4095 is used reserved for LSN use .  
        Minimum value = 0  
        Maximum value = 4095 
    .PARAMETER netmask 
        Subnet mask associated with the IP address. 
    .PARAMETER arp 
        Respond to ARP requests for this IP address.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER icmp 
        Respond to ICMP requests for this IP address.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER vserver 
        Use this option to set (enable or disable) the virtual server attribute for this IP address.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER telnet 
        Allow Telnet access to this IP address.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER ftp 
        Allow File Transfer Protocol (FTP) access to this IP address.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER gui 
        Allow graphical user interface (GUI) access to this IP address.  
        Default value: ENABLED  
        Possible values = ENABLED, SECUREONLY, DISABLED 
    .PARAMETER ssh 
        Allow secure shell (SSH) access to this IP address.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER snmp 
        Allow Simple Network Management Protocol (SNMP) access to this IP address.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER mgmtaccess 
        Allow access to management applications on this IP address.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER restrictaccess 
        Block access to nonmanagement applications on this IP. This option is applicable for MIPs, SNIPs, and NSIP, and is disabled by default. Nonmanagement applications can run on the underlying Citrix ADC Free BSD operating system.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER decrementttl 
        Decrement TTL by 1 when ENABLED.This setting is applicable only for UDP traffic.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER dynamicrouting 
        Allow dynamic routing on this IP address. Specific to Subnet IP (SNIP) address.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER ospf 
        Use this option to enable or disable OSPF on this IP address for the entity.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER bgp 
        Use this option to enable or disable BGP on this IP address for the entity.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER rip 
        Use this option to enable or disable RIP on this IP address for the entity.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER hostroute 
        Option to push the VIP to ZebOS routing table for Kernel route redistribution through dynamic routing protocols.  
        Possible values = ENABLED, DISABLED 
    .PARAMETER advertiseondefaultpartition 
        Advertise VIPs from Shared VLAN on Default Partition.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER networkroute 
        Option to push the SNIP subnet to ZebOS routing table for Kernel route redistribution through dynamic routing protocol.  
        Possible values = ENABLED, DISABLED 
    .PARAMETER hostrtgw 
        IP address of the gateway of the route for this VIP address.  
        Default value: -1 
    .PARAMETER metric 
        Integer value to add to or subtract from the cost of the route advertised for the VIP address.  
        Minimum value = -16777215 
    .PARAMETER vserverrhilevel 
        Advertise the route for the Virtual IP (VIP) address on the basis of the state of the virtual servers associated with that VIP.  
        * NONE - Advertise the route for the VIP address, regardless of the state of the virtual servers associated with the address.  
        * ONE VSERVER - Advertise the route for the VIP address if at least one of the associated virtual servers is in UP state.  
        * ALL VSERVER - Advertise the route for the VIP address if all of the associated virtual servers are in UP state.  
        * VSVR_CNTRLD - Advertise the route for the VIP address according to the RHIstate (RHI STATE) parameter setting on all the associated virtual servers of the VIP address along with their states.  
        When Vserver RHI Level (RHI) parameter is set to VSVR_CNTRLD, the following are different RHI behaviors for the VIP address on the basis of RHIstate (RHI STATE) settings on the virtual servers associated with the VIP address:  
        * If you set RHI STATE to PASSIVE on all virtual servers, the Citrix ADC always advertises the route for the VIP address.  
        * If you set RHI STATE to ACTIVE on all virtual servers, the Citrix ADC advertises the route for the VIP address if at least one of the associated virtual servers is in UP state.  
        *If you set RHI STATE to ACTIVE on some and PASSIVE on others, the Citrix ADC advertises the route for the VIP address if at least one of the associated virtual servers, whose RHI STATE set to ACTIVE, is in UP state.  
        Default value: ONE_VSERVER  
        Possible values = ONE_VSERVER, ALL_VSERVERS, NONE, VSVR_CNTRLD 
    .PARAMETER ospflsatype 
        Type of LSAs to be used by the OSPF protocol, running on the Citrix ADC, for advertising the route for this VIP address.  
        Default value: TYPE5  
        Possible values = TYPE1, TYPE5 
    .PARAMETER ospfarea 
        ID of the area in which the type1 link-state advertisements (LSAs) are to be advertised for this virtual IP (VIP) address by the OSPF protocol running on the Citrix ADC. When this parameter is not set, the VIP is advertised on all areas.  
        Default value: -1  
        Minimum value = 0  
        Maximum value = 4294967294LU 
    .PARAMETER tag 
        Tag value for the network/host route associated with this IP.  
        Default value: 0 
    .PARAMETER vrid 
        A positive integer that uniquely identifies a VMAC address for binding to this VIP address. This binding is used to set up Citrix ADCs in an active-active configuration using VRRP.  
        Minimum value = 1  
        Maximum value = 255 
    .PARAMETER icmpresponse 
        Respond to ICMP requests for a Virtual IP (VIP) address on the basis of the states of the virtual servers associated with that VIP. Available settings function as follows:  
        * NONE - The Citrix ADC responds to any ICMP request for the VIP address, irrespective of the states of the virtual servers associated with the address.  
        * ONE VSERVER - The Citrix ADC responds to any ICMP request for the VIP address if at least one of the associated virtual servers is in UP state.  
        * ALL VSERVER - The Citrix ADC responds to any ICMP request for the VIP address if all of the associated virtual servers are in UP state.  
        * VSVR_CNTRLD - The behavior depends on the ICMP VSERVER RESPONSE setting on all the associated virtual servers.  
        The following settings can be made for the ICMP VSERVER RESPONSE parameter on a virtual server:  
        * If you set ICMP VSERVER RESPONSE to PASSIVE on all virtual servers, Citrix ADC always responds.  
        * If you set ICMP VSERVER RESPONSE to ACTIVE on all virtual servers, Citrix ADC responds if even one virtual server is UP.  
        * When you set ICMP VSERVER RESPONSE to ACTIVE on some and PASSIVE on others, Citrix ADC responds if even one virtual server set to ACTIVE is UP.  
        Default value: 5  
        Possible values = NONE, ONE_VSERVER, ALL_VSERVERS, VSVR_CNTRLD 
    .PARAMETER arpresponse 
        Respond to ARP requests for a Virtual IP (VIP) address on the basis of the states of the virtual servers associated with that VIP. Available settings function as follows:  
        * NONE - The Citrix ADC responds to any ARP request for the VIP address, irrespective of the states of the virtual servers associated with the address.  
        * ONE VSERVER - The Citrix ADC responds to any ARP request for the VIP address if at least one of the associated virtual servers is in UP state.  
        * ALL VSERVER - The Citrix ADC responds to any ARP request for the VIP address if all of the associated virtual servers are in UP state.  
        Default value: 5  
        Possible values = NONE, ONE_VSERVER, ALL_VSERVERS 
    .PARAMETER ownerdownresponse 
        in cluster system, if the owner node is down, whether should it respond to icmp/arp.  
        Default value: YES  
        Possible values = YES, NO 
    .PARAMETER arpowner 
        The arp owner in a Cluster for this IP address. It can vary from 0 to 31.  
        Default value: 255
    .EXAMPLE
        Invoke-ADCUpdateNsip -ipaddress <string>
    .NOTES
        File Name : Invoke-ADCUpdateNsip
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsip/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$ipaddress ,

        [ValidateRange(0, 4095)]
        [double]$td ,

        [string]$netmask ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$arp ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$icmp ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$vserver ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$telnet ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$ftp ,

        [ValidateSet('ENABLED', 'SECUREONLY', 'DISABLED')]
        [string]$gui ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$ssh ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$snmp ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$mgmtaccess ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$restrictaccess ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$decrementttl ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$dynamicrouting ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$ospf ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$bgp ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$rip ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$hostroute ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$advertiseondefaultpartition ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$networkroute ,

        [string]$hostrtgw ,

        [int]$metric ,

        [ValidateSet('ONE_VSERVER', 'ALL_VSERVERS', 'NONE', 'VSVR_CNTRLD')]
        [string]$vserverrhilevel ,

        [ValidateSet('TYPE1', 'TYPE5')]
        [string]$ospflsatype ,

        [ValidateRange(0, 4294967294)]
        [double]$ospfarea ,

        [double]$tag ,

        [ValidateRange(1, 255)]
        [double]$vrid ,

        [ValidateSet('NONE', 'ONE_VSERVER', 'ALL_VSERVERS', 'VSVR_CNTRLD')]
        [string]$icmpresponse ,

        [ValidateSet('NONE', 'ONE_VSERVER', 'ALL_VSERVERS')]
        [string]$arpresponse ,

        [ValidateSet('YES', 'NO')]
        [string]$ownerdownresponse ,

        [double]$arpowner 

    )
    begin {
        Write-Verbose "Invoke-ADCUpdateNsip: Starting"
    }
    process {
        try {
            $Payload = @{
                ipaddress = $ipaddress
            }
            if ($PSBoundParameters.ContainsKey('td')) { $Payload.Add('td', $td) }
            if ($PSBoundParameters.ContainsKey('netmask')) { $Payload.Add('netmask', $netmask) }
            if ($PSBoundParameters.ContainsKey('arp')) { $Payload.Add('arp', $arp) }
            if ($PSBoundParameters.ContainsKey('icmp')) { $Payload.Add('icmp', $icmp) }
            if ($PSBoundParameters.ContainsKey('vserver')) { $Payload.Add('vserver', $vserver) }
            if ($PSBoundParameters.ContainsKey('telnet')) { $Payload.Add('telnet', $telnet) }
            if ($PSBoundParameters.ContainsKey('ftp')) { $Payload.Add('ftp', $ftp) }
            if ($PSBoundParameters.ContainsKey('gui')) { $Payload.Add('gui', $gui) }
            if ($PSBoundParameters.ContainsKey('ssh')) { $Payload.Add('ssh', $ssh) }
            if ($PSBoundParameters.ContainsKey('snmp')) { $Payload.Add('snmp', $snmp) }
            if ($PSBoundParameters.ContainsKey('mgmtaccess')) { $Payload.Add('mgmtaccess', $mgmtaccess) }
            if ($PSBoundParameters.ContainsKey('restrictaccess')) { $Payload.Add('restrictaccess', $restrictaccess) }
            if ($PSBoundParameters.ContainsKey('decrementttl')) { $Payload.Add('decrementttl', $decrementttl) }
            if ($PSBoundParameters.ContainsKey('dynamicrouting')) { $Payload.Add('dynamicrouting', $dynamicrouting) }
            if ($PSBoundParameters.ContainsKey('ospf')) { $Payload.Add('ospf', $ospf) }
            if ($PSBoundParameters.ContainsKey('bgp')) { $Payload.Add('bgp', $bgp) }
            if ($PSBoundParameters.ContainsKey('rip')) { $Payload.Add('rip', $rip) }
            if ($PSBoundParameters.ContainsKey('hostroute')) { $Payload.Add('hostroute', $hostroute) }
            if ($PSBoundParameters.ContainsKey('advertiseondefaultpartition')) { $Payload.Add('advertiseondefaultpartition', $advertiseondefaultpartition) }
            if ($PSBoundParameters.ContainsKey('networkroute')) { $Payload.Add('networkroute', $networkroute) }
            if ($PSBoundParameters.ContainsKey('hostrtgw')) { $Payload.Add('hostrtgw', $hostrtgw) }
            if ($PSBoundParameters.ContainsKey('metric')) { $Payload.Add('metric', $metric) }
            if ($PSBoundParameters.ContainsKey('vserverrhilevel')) { $Payload.Add('vserverrhilevel', $vserverrhilevel) }
            if ($PSBoundParameters.ContainsKey('ospflsatype')) { $Payload.Add('ospflsatype', $ospflsatype) }
            if ($PSBoundParameters.ContainsKey('ospfarea')) { $Payload.Add('ospfarea', $ospfarea) }
            if ($PSBoundParameters.ContainsKey('tag')) { $Payload.Add('tag', $tag) }
            if ($PSBoundParameters.ContainsKey('vrid')) { $Payload.Add('vrid', $vrid) }
            if ($PSBoundParameters.ContainsKey('icmpresponse')) { $Payload.Add('icmpresponse', $icmpresponse) }
            if ($PSBoundParameters.ContainsKey('arpresponse')) { $Payload.Add('arpresponse', $arpresponse) }
            if ($PSBoundParameters.ContainsKey('ownerdownresponse')) { $Payload.Add('ownerdownresponse', $ownerdownresponse) }
            if ($PSBoundParameters.ContainsKey('arpowner')) { $Payload.Add('arpowner', $arpowner) }
 
            if ($PSCmdlet.ShouldProcess("nsip", "Update NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -Type nsip -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
            Write-Output $result

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUpdateNsip: Finished"
    }
}

function Invoke-ADCUnsetNsip {
<#
    .SYNOPSIS
        Unset NS configuration Object
    .DESCRIPTION
        Unset NS configuration Object 
   .PARAMETER ipaddress 
       IPv4 address to create on the Citrix ADC. Cannot be changed after the IP address is created. 
   .PARAMETER td 
       Integer value that uniquely identifies the traffic domain in which you want to configure the entity. If you do not specify an ID, the entity becomes part of the default traffic domain, which has an ID of 0. TD id 4095 is used reserved for LSN use . 
   .PARAMETER ospfarea 
       ID of the area in which the type1 link-state advertisements (LSAs) are to be advertised for this virtual IP (VIP) address by the OSPF protocol running on the Citrix ADC. When this parameter is not set, the VIP is advertised on all areas. 
   .PARAMETER hostrtgw 
       IP address of the gateway of the route for this VIP address. 
   .PARAMETER netmask 
       Subnet mask associated with the IP address. 
   .PARAMETER arp 
       Respond to ARP requests for this IP address.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER icmp 
       Respond to ICMP requests for this IP address.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER vserver 
       Use this option to set (enable or disable) the virtual server attribute for this IP address.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER telnet 
       Allow Telnet access to this IP address.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER ftp 
       Allow File Transfer Protocol (FTP) access to this IP address.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER gui 
       Allow graphical user interface (GUI) access to this IP address.  
       Possible values = ENABLED, SECUREONLY, DISABLED 
   .PARAMETER ssh 
       Allow secure shell (SSH) access to this IP address.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER snmp 
       Allow Simple Network Management Protocol (SNMP) access to this IP address.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER mgmtaccess 
       Allow access to management applications on this IP address.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER restrictaccess 
       Block access to nonmanagement applications on this IP. This option is applicable for MIPs, SNIPs, and NSIP, and is disabled by default. Nonmanagement applications can run on the underlying Citrix ADC Free BSD operating system.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER decrementttl 
       Decrement TTL by 1 when ENABLED.This setting is applicable only for UDP traffic.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER dynamicrouting 
       Allow dynamic routing on this IP address. Specific to Subnet IP (SNIP) address.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER ospf 
       Use this option to enable or disable OSPF on this IP address for the entity.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER bgp 
       Use this option to enable or disable BGP on this IP address for the entity.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER rip 
       Use this option to enable or disable RIP on this IP address for the entity.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER hostroute 
       Option to push the VIP to ZebOS routing table for Kernel route redistribution through dynamic routing protocols.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER advertiseondefaultpartition 
       Advertise VIPs from Shared VLAN on Default Partition.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER networkroute 
       Option to push the SNIP subnet to ZebOS routing table for Kernel route redistribution through dynamic routing protocol.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER metric 
       Integer value to add to or subtract from the cost of the route advertised for the VIP address. 
   .PARAMETER vserverrhilevel 
       Advertise the route for the Virtual IP (VIP) address on the basis of the state of the virtual servers associated with that VIP.  
       * NONE - Advertise the route for the VIP address, regardless of the state of the virtual servers associated with the address.  
       * ONE VSERVER - Advertise the route for the VIP address if at least one of the associated virtual servers is in UP state.  
       * ALL VSERVER - Advertise the route for the VIP address if all of the associated virtual servers are in UP state.  
       * VSVR_CNTRLD - Advertise the route for the VIP address according to the RHIstate (RHI STATE) parameter setting on all the associated virtual servers of the VIP address along with their states.  
       When Vserver RHI Level (RHI) parameter is set to VSVR_CNTRLD, the following are different RHI behaviors for the VIP address on the basis of RHIstate (RHI STATE) settings on the virtual servers associated with the VIP address:  
       * If you set RHI STATE to PASSIVE on all virtual servers, the Citrix ADC always advertises the route for the VIP address.  
       * If you set RHI STATE to ACTIVE on all virtual servers, the Citrix ADC advertises the route for the VIP address if at least one of the associated virtual servers is in UP state.  
       *If you set RHI STATE to ACTIVE on some and PASSIVE on others, the Citrix ADC advertises the route for the VIP address if at least one of the associated virtual servers, whose RHI STATE set to ACTIVE, is in UP state.  
       Possible values = ONE_VSERVER, ALL_VSERVERS, NONE, VSVR_CNTRLD 
   .PARAMETER ospflsatype 
       Type of LSAs to be used by the OSPF protocol, running on the Citrix ADC, for advertising the route for this VIP address.  
       Possible values = TYPE1, TYPE5 
   .PARAMETER tag 
       Tag value for the network/host route associated with this IP. 
   .PARAMETER vrid 
       A positive integer that uniquely identifies a VMAC address for binding to this VIP address. This binding is used to set up Citrix ADCs in an active-active configuration using VRRP. 
   .PARAMETER icmpresponse 
       Respond to ICMP requests for a Virtual IP (VIP) address on the basis of the states of the virtual servers associated with that VIP. Available settings function as follows:  
       * NONE - The Citrix ADC responds to any ICMP request for the VIP address, irrespective of the states of the virtual servers associated with the address.  
       * ONE VSERVER - The Citrix ADC responds to any ICMP request for the VIP address if at least one of the associated virtual servers is in UP state.  
       * ALL VSERVER - The Citrix ADC responds to any ICMP request for the VIP address if all of the associated virtual servers are in UP state.  
       * VSVR_CNTRLD - The behavior depends on the ICMP VSERVER RESPONSE setting on all the associated virtual servers.  
       The following settings can be made for the ICMP VSERVER RESPONSE parameter on a virtual server:  
       * If you set ICMP VSERVER RESPONSE to PASSIVE on all virtual servers, Citrix ADC always responds.  
       * If you set ICMP VSERVER RESPONSE to ACTIVE on all virtual servers, Citrix ADC responds if even one virtual server is UP.  
       * When you set ICMP VSERVER RESPONSE to ACTIVE on some and PASSIVE on others, Citrix ADC responds if even one virtual server set to ACTIVE is UP.  
       Possible values = NONE, ONE_VSERVER, ALL_VSERVERS, VSVR_CNTRLD 
   .PARAMETER arpresponse 
       Respond to ARP requests for a Virtual IP (VIP) address on the basis of the states of the virtual servers associated with that VIP. Available settings function as follows:  
       * NONE - The Citrix ADC responds to any ARP request for the VIP address, irrespective of the states of the virtual servers associated with the address.  
       * ONE VSERVER - The Citrix ADC responds to any ARP request for the VIP address if at least one of the associated virtual servers is in UP state.  
       * ALL VSERVER - The Citrix ADC responds to any ARP request for the VIP address if all of the associated virtual servers are in UP state.  
       Possible values = NONE, ONE_VSERVER, ALL_VSERVERS 
   .PARAMETER ownerdownresponse 
       in cluster system, if the owner node is down, whether should it respond to icmp/arp.  
       Possible values = YES, NO 
   .PARAMETER arpowner 
       The arp owner in a Cluster for this IP address. It can vary from 0 to 31.
    .EXAMPLE
        Invoke-ADCUnsetNsip -ipaddress <string>
    .NOTES
        File Name : Invoke-ADCUnsetNsip
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsip
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$ipaddress ,

        [Boolean]$td ,

        [Boolean]$ospfarea ,

        [Boolean]$hostrtgw ,

        [Boolean]$netmask ,

        [Boolean]$arp ,

        [Boolean]$icmp ,

        [Boolean]$vserver ,

        [Boolean]$telnet ,

        [Boolean]$ftp ,

        [Boolean]$gui ,

        [Boolean]$ssh ,

        [Boolean]$snmp ,

        [Boolean]$mgmtaccess ,

        [Boolean]$restrictaccess ,

        [Boolean]$decrementttl ,

        [Boolean]$dynamicrouting ,

        [Boolean]$ospf ,

        [Boolean]$bgp ,

        [Boolean]$rip ,

        [Boolean]$hostroute ,

        [Boolean]$advertiseondefaultpartition ,

        [Boolean]$networkroute ,

        [Boolean]$metric ,

        [Boolean]$vserverrhilevel ,

        [Boolean]$ospflsatype ,

        [Boolean]$tag ,

        [Boolean]$vrid ,

        [Boolean]$icmpresponse ,

        [Boolean]$arpresponse ,

        [Boolean]$ownerdownresponse ,

        [Boolean]$arpowner 
    )
    begin {
        Write-Verbose "Invoke-ADCUnsetNsip: Starting"
    }
    process {
        try {
            $Payload = @{
                ipaddress = $ipaddress
            }
            if ($PSBoundParameters.ContainsKey('td')) { $Payload.Add('td', $td) }
            if ($PSBoundParameters.ContainsKey('ospfarea')) { $Payload.Add('ospfarea', $ospfarea) }
            if ($PSBoundParameters.ContainsKey('hostrtgw')) { $Payload.Add('hostrtgw', $hostrtgw) }
            if ($PSBoundParameters.ContainsKey('netmask')) { $Payload.Add('netmask', $netmask) }
            if ($PSBoundParameters.ContainsKey('arp')) { $Payload.Add('arp', $arp) }
            if ($PSBoundParameters.ContainsKey('icmp')) { $Payload.Add('icmp', $icmp) }
            if ($PSBoundParameters.ContainsKey('vserver')) { $Payload.Add('vserver', $vserver) }
            if ($PSBoundParameters.ContainsKey('telnet')) { $Payload.Add('telnet', $telnet) }
            if ($PSBoundParameters.ContainsKey('ftp')) { $Payload.Add('ftp', $ftp) }
            if ($PSBoundParameters.ContainsKey('gui')) { $Payload.Add('gui', $gui) }
            if ($PSBoundParameters.ContainsKey('ssh')) { $Payload.Add('ssh', $ssh) }
            if ($PSBoundParameters.ContainsKey('snmp')) { $Payload.Add('snmp', $snmp) }
            if ($PSBoundParameters.ContainsKey('mgmtaccess')) { $Payload.Add('mgmtaccess', $mgmtaccess) }
            if ($PSBoundParameters.ContainsKey('restrictaccess')) { $Payload.Add('restrictaccess', $restrictaccess) }
            if ($PSBoundParameters.ContainsKey('decrementttl')) { $Payload.Add('decrementttl', $decrementttl) }
            if ($PSBoundParameters.ContainsKey('dynamicrouting')) { $Payload.Add('dynamicrouting', $dynamicrouting) }
            if ($PSBoundParameters.ContainsKey('ospf')) { $Payload.Add('ospf', $ospf) }
            if ($PSBoundParameters.ContainsKey('bgp')) { $Payload.Add('bgp', $bgp) }
            if ($PSBoundParameters.ContainsKey('rip')) { $Payload.Add('rip', $rip) }
            if ($PSBoundParameters.ContainsKey('hostroute')) { $Payload.Add('hostroute', $hostroute) }
            if ($PSBoundParameters.ContainsKey('advertiseondefaultpartition')) { $Payload.Add('advertiseondefaultpartition', $advertiseondefaultpartition) }
            if ($PSBoundParameters.ContainsKey('networkroute')) { $Payload.Add('networkroute', $networkroute) }
            if ($PSBoundParameters.ContainsKey('metric')) { $Payload.Add('metric', $metric) }
            if ($PSBoundParameters.ContainsKey('vserverrhilevel')) { $Payload.Add('vserverrhilevel', $vserverrhilevel) }
            if ($PSBoundParameters.ContainsKey('ospflsatype')) { $Payload.Add('ospflsatype', $ospflsatype) }
            if ($PSBoundParameters.ContainsKey('tag')) { $Payload.Add('tag', $tag) }
            if ($PSBoundParameters.ContainsKey('vrid')) { $Payload.Add('vrid', $vrid) }
            if ($PSBoundParameters.ContainsKey('icmpresponse')) { $Payload.Add('icmpresponse', $icmpresponse) }
            if ($PSBoundParameters.ContainsKey('arpresponse')) { $Payload.Add('arpresponse', $arpresponse) }
            if ($PSBoundParameters.ContainsKey('ownerdownresponse')) { $Payload.Add('ownerdownresponse', $ownerdownresponse) }
            if ($PSBoundParameters.ContainsKey('arpowner')) { $Payload.Add('arpowner', $arpowner) }
            if ($PSCmdlet.ShouldProcess("$ipaddress", "Unset NS configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nsip -Action unset -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUnsetNsip: Finished"
    }
}

function Invoke-ADCEnableNsip {
<#
    .SYNOPSIS
        Enable NS configuration Object
    .DESCRIPTION
        Enable NS configuration Object 
    .PARAMETER ipaddress 
        IPv4 address to create on the Citrix ADC. Cannot be changed after the IP address is created. 
    .PARAMETER td 
        Integer value that uniquely identifies the traffic domain in which you want to configure the entity. If you do not specify an ID, the entity becomes part of the default traffic domain, which has an ID of 0. TD id 4095 is used reserved for LSN use .
    .EXAMPLE
        Invoke-ADCEnableNsip -ipaddress <string>
    .NOTES
        File Name : Invoke-ADCEnableNsip
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsip/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$ipaddress ,

        [ValidateRange(0, 4095)]
        [double]$td 

    )
    begin {
        Write-Verbose "Invoke-ADCEnableNsip: Starting"
    }
    process {
        try {
            $Payload = @{
                ipaddress = $ipaddress
            }
            if ($PSBoundParameters.ContainsKey('td')) { $Payload.Add('td', $td) }
            if ($PSCmdlet.ShouldProcess($Name, "Enable NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nsip -Action enable -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $result
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCEnableNsip: Finished"
    }
}

function Invoke-ADCDisableNsip {
<#
    .SYNOPSIS
        Disable NS configuration Object
    .DESCRIPTION
        Disable NS configuration Object 
    .PARAMETER ipaddress 
        IPv4 address to create on the Citrix ADC. Cannot be changed after the IP address is created. 
    .PARAMETER td 
        Integer value that uniquely identifies the traffic domain in which you want to configure the entity. If you do not specify an ID, the entity becomes part of the default traffic domain, which has an ID of 0. TD id 4095 is used reserved for LSN use .
    .EXAMPLE
        Invoke-ADCDisableNsip -ipaddress <string>
    .NOTES
        File Name : Invoke-ADCDisableNsip
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsip/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$ipaddress ,

        [ValidateRange(0, 4095)]
        [double]$td 

    )
    begin {
        Write-Verbose "Invoke-ADCDisableNsip: Starting"
    }
    process {
        try {
            $Payload = @{
                ipaddress = $ipaddress
            }
            if ($PSBoundParameters.ContainsKey('td')) { $Payload.Add('td', $td) }
            if ($PSCmdlet.ShouldProcess($Name, "Disable NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nsip -Action disable -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $result
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDisableNsip: Finished"
    }
}

function Invoke-ADCGetNsip {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER ipaddress 
       IPv4 address to create on the Citrix ADC. Cannot be changed after the IP address is created. 
    .PARAMETER td 
       Integer value that uniquely identifies the traffic domain in which you want to configure the entity. If you do not specify an ID, the entity becomes part of the default traffic domain, which has an ID of 0. TD id 4095 is used reserved for LSN use . 
    .PARAMETER type 
       Type of the IP address to create on the Citrix ADC. Cannot be changed after the IP address is created. The following are the different types of Citrix ADC owned IP addresses:  
       * A Subnet IP (SNIP) address is used by the Citrix ADC to communicate with the servers. The Citrix ADC also uses the subnet IP address when generating its own packets, such as packets related to dynamic routing protocols, or to send monitor probes to check the health of the servers.  
       * A Virtual IP (VIP) address is the IP address associated with a virtual server. It is the IP address to which clients connect. An appliance managing a wide range of traffic may have many VIPs configured. Some of the attributes of the VIP address are customized to meet the requirements of the virtual server.  
       * A GSLB site IP (GSLBIP) address is associated with a GSLB site. It is not mandatory to specify a GSLBIP address when you initially configure the Citrix ADC. A GSLBIP address is used only when you create a GSLB site.  
       * A Cluster IP (CLIP) address is the management address of the cluster. All cluster configurations must be performed by accessing the cluster through this IP address.  
       Possible values = SNIP, VIP, NSIP, GSLBsiteIP, CLIP 
    .PARAMETER GetAll 
        Retreive all nsip object(s)
    .PARAMETER Count
        If specified, the count of the nsip object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNsip
    .EXAMPLE 
        Invoke-ADCGetNsip -GetAll 
    .EXAMPLE 
        Invoke-ADCGetNsip -Count
    .EXAMPLE
        Invoke-ADCGetNsip -name <string>
    .EXAMPLE
        Invoke-ADCGetNsip -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNsip
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsip/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByArgument')]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$ipaddress ,

        [Parameter(ParameterSetName = 'GetByArgument')]
        [ValidateRange(0, 4095)]
        [double]$td ,

        [Parameter(ParameterSetName = 'GetByArgument')]
        [ValidateSet('SNIP', 'VIP', 'NSIP', 'GSLBsiteIP', 'CLIP')]
        [string]$type,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll,

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$ViewSummary

    )
    begin {
        Write-Verbose "Invoke-ADCGetNsip: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all nsip objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsip -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nsip objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsip -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nsip objects by arguments"
                $Arguments = @{ } 
                if ($PSBoundParameters.ContainsKey('ipaddress')) { $Arguments.Add('ipaddress', $ipaddress) } 
                if ($PSBoundParameters.ContainsKey('td')) { $Arguments.Add('td', $td) } 
                if ($PSBoundParameters.ContainsKey('type')) { $Arguments.Add('type', $type) }
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsip -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nsip configuration for property ''"

            } else {
                Write-Verbose "Retrieving nsip configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsip -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNsip: Ended"
    }
}

function Invoke-ADCAddNsip6 {
<#
    .SYNOPSIS
        Add NS configuration Object
    .DESCRIPTION
        Add NS configuration Object 
    .PARAMETER ipv6address 
        IPv6 address to create on the Citrix ADC.  
        Minimum length = 1 
    .PARAMETER scope 
        Scope of the IPv6 address to be created. Cannot be changed after the IP address is created.  
        Default value: global  
        Possible values = global, link-local 
    .PARAMETER type 
        Type of IP address to be created on the Citrix ADC. Cannot be changed after the IP address is created.  
        Default value: SNIP  
        Possible values = NSIP, VIP, SNIP, GSLBsiteIP, ADNSsvcIP, RADIUSListenersvcIP, CLIP 
    .PARAMETER vlan 
        The VLAN number.  
        Default value: 0  
        Minimum value = 0  
        Maximum value = 4094 
    .PARAMETER nd 
        Respond to Neighbor Discovery (ND) requests for this IP address.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER icmp 
        Respond to ICMP requests for this IP address.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER vserver 
        Enable or disable the state of all the virtual servers associated with this VIP6 address.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER telnet 
        Allow Telnet access to this IP address.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER ftp 
        Allow File Transfer Protocol (FTP) access to this IP address.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER gui 
        Allow graphical user interface (GUI) access to this IP address.  
        Default value: ENABLED  
        Possible values = ENABLED, SECUREONLY, DISABLED 
    .PARAMETER ssh 
        Allow secure Shell (SSH) access to this IP address.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER snmp 
        Allow Simple Network Management Protocol (SNMP) access to this IP address.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER mgmtaccess 
        Allow access to management applications on this IP address.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER restrictaccess 
        Block access to nonmanagement applications on this IP address. This option is applicable forMIP6s, SNIP6s, and NSIP6s, and is disabled by default. Nonmanagement applications can run on the underlying Citrix ADC Free BSD operating system.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER dynamicrouting 
        Allow dynamic routing on this IP address. Specific to Subnet IPv6 (SNIP6) address.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER decrementhoplimit 
        Decrement Hop Limit by 1 when ENABLED.This setting is applicable only for UDP traffic.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER hostroute 
        Option to push the VIP6 to ZebOS routing table for Kernel route redistribution through dynamic routing protocols.  
        Possible values = ENABLED, DISABLED 
    .PARAMETER advertiseondefaultpartition 
        Advertise VIPs from Shared VLAN on Default Partition.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER networkroute 
        Option to push the SNIP6 subnet to ZebOS routing table for Kernel route redistribution through dynamic routing protocol.  
        Possible values = ENABLED, DISABLED 
    .PARAMETER tag 
        Tag value for the network/host route associated with this IP.  
        Default value: 0 
    .PARAMETER ip6hostrtgw 
        IPv6 address of the gateway for the route. If Gateway is not set, VIP uses :: as the gateway.  
        Default value: 0 
    .PARAMETER metric 
        Integer value to add to or subtract from the cost of the route advertised for the VIP6 address.  
        Minimum value = -16777215 
    .PARAMETER vserverrhilevel 
        Advertise or do not advertise the route for the Virtual IP (VIP6) address on the basis of the state of the virtual servers associated with that VIP6.  
        * NONE - Advertise the route for the VIP6 address, irrespective of the state of the virtual servers associated with the address.  
        * ONE VSERVER - Advertise the route for the VIP6 address if at least one of the associated virtual servers is in UP state.  
        * ALL VSERVER - Advertise the route for the VIP6 address if all of the associated virtual servers are in UP state.  
        * VSVR_CNTRLD. Advertise the route for the VIP address according to the RHIstate (RHI STATE) parameter setting on all the associated virtual servers of the VIP address along with their states.  
        When Vserver RHI Level (RHI) parameter is set to VSVR_CNTRLD, the following are different RHI behaviors for the VIP address on the basis of RHIstate (RHI STATE) settings on the virtual servers associated with the VIP address:  
        * If you set RHI STATE to PASSIVE on all virtual servers, the Citrix ADC always advertises the route for the VIP address.  
        * If you set RHI STATE to ACTIVE on all virtual servers, the Citrix ADC advertises the route for the VIP address if at least one of the associated virtual servers is in UP state.  
        *If you set RHI STATE to ACTIVE on some and PASSIVE on others, the Citrix ADC advertises the route for the VIP address if at least one of the associated virtual servers, whose RHI STATE set to ACTIVE, is in UP state.  
        Default value: ONE_VSERVER  
        Possible values = ONE_VSERVER, ALL_VSERVERS, NONE, VSVR_CNTRLD 
    .PARAMETER ospf6lsatype 
        Type of LSAs to be used by the IPv6 OSPF protocol, running on the Citrix ADC, for advertising the route for the VIP6 address.  
        Default value: EXTERNAL  
        Possible values = INTRA_AREA, EXTERNAL 
    .PARAMETER ospfarea 
        ID of the area in which the Intra-Area-Prefix LSAs are to be advertised for the VIP6 address by the IPv6 OSPF protocol running on the Citrix ADC. When ospfArea is not set, VIP6 is advertised on all areas.  
        Default value: -1  
        Minimum value = 0  
        Maximum value = 4294967294LU 
    .PARAMETER state 
        Enable or disable the IP address.  
        Default value: ENABLED  
        Possible values = DISABLED, ENABLED 
    .PARAMETER map 
        Mapped IPV4 address for the IPV6 address. 
    .PARAMETER vrid6 
        A positive integer that uniquely identifies a VMAC address for binding to this VIP address. This binding is used to set up Citrix ADCs in an active-active configuration using VRRP.  
        Minimum value = 1  
        Maximum value = 255 
    .PARAMETER ownernode 
        ID of the cluster node for which you are adding the IP address. Must be used if you want the IP address to be active only on the specific node. Can be configured only through the cluster IP address. Cannot be changed after the IP address is created.  
        Default value: 255 
    .PARAMETER ownerdownresponse 
        in cluster system, if the owner node is down, whether should it respond to icmp/arp.  
        Default value: YES  
        Possible values = YES, NO 
    .PARAMETER td 
        Integer value that uniquely identifies the traffic domain in which you want to configure the entity. If you do not specify an ID, the entity becomes part of the default traffic domain, which has an ID of 0.  
        Minimum value = 0  
        Maximum value = 4094 
    .PARAMETER ndowner 
        NdOwner in Cluster for VIPS and Striped SNIPS.  
        Default value: 255
    .EXAMPLE
        Invoke-ADCAddNsip6 -ipv6address <string>
    .NOTES
        File Name : Invoke-ADCAddNsip6
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsip6/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$ipv6address ,

        [ValidateSet('global', 'link-local')]
        [string]$scope = 'global' ,

        [ValidateSet('NSIP', 'VIP', 'SNIP', 'GSLBsiteIP', 'ADNSsvcIP', 'RADIUSListenersvcIP', 'CLIP')]
        [string]$type = 'SNIP' ,

        [ValidateRange(0, 4094)]
        [double]$vlan = '0' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$nd = 'ENABLED' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$icmp = 'ENABLED' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$vserver = 'ENABLED' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$telnet = 'ENABLED' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$ftp = 'ENABLED' ,

        [ValidateSet('ENABLED', 'SECUREONLY', 'DISABLED')]
        [string]$gui = 'ENABLED' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$ssh = 'ENABLED' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$snmp = 'ENABLED' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$mgmtaccess = 'DISABLED' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$restrictaccess = 'DISABLED' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$dynamicrouting = 'DISABLED' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$decrementhoplimit = 'DISABLED' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$hostroute ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$advertiseondefaultpartition = 'DISABLED' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$networkroute ,

        [double]$tag = '0' ,

        [string]$ip6hostrtgw = '0' ,

        [int]$metric ,

        [ValidateSet('ONE_VSERVER', 'ALL_VSERVERS', 'NONE', 'VSVR_CNTRLD')]
        [string]$vserverrhilevel = 'ONE_VSERVER' ,

        [ValidateSet('INTRA_AREA', 'EXTERNAL')]
        [string]$ospf6lsatype = 'EXTERNAL' ,

        [ValidateRange(0, 4294967294)]
        [double]$ospfarea = '-1' ,

        [ValidateSet('DISABLED', 'ENABLED')]
        [string]$state = 'ENABLED' ,

        [string]$map ,

        [ValidateRange(1, 255)]
        [double]$vrid6 ,

        [double]$ownernode = '255' ,

        [ValidateSet('YES', 'NO')]
        [string]$ownerdownresponse = 'YES' ,

        [ValidateRange(0, 4094)]
        [double]$td ,

        [double]$ndowner = '255' 

    )
    begin {
        Write-Verbose "Invoke-ADCAddNsip6: Starting"
    }
    process {
        try {
            $Payload = @{
                ipv6address = $ipv6address
            }
            if ($PSBoundParameters.ContainsKey('scope')) { $Payload.Add('scope', $scope) }
            if ($PSBoundParameters.ContainsKey('type')) { $Payload.Add('type', $type) }
            if ($PSBoundParameters.ContainsKey('vlan')) { $Payload.Add('vlan', $vlan) }
            if ($PSBoundParameters.ContainsKey('nd')) { $Payload.Add('nd', $nd) }
            if ($PSBoundParameters.ContainsKey('icmp')) { $Payload.Add('icmp', $icmp) }
            if ($PSBoundParameters.ContainsKey('vserver')) { $Payload.Add('vserver', $vserver) }
            if ($PSBoundParameters.ContainsKey('telnet')) { $Payload.Add('telnet', $telnet) }
            if ($PSBoundParameters.ContainsKey('ftp')) { $Payload.Add('ftp', $ftp) }
            if ($PSBoundParameters.ContainsKey('gui')) { $Payload.Add('gui', $gui) }
            if ($PSBoundParameters.ContainsKey('ssh')) { $Payload.Add('ssh', $ssh) }
            if ($PSBoundParameters.ContainsKey('snmp')) { $Payload.Add('snmp', $snmp) }
            if ($PSBoundParameters.ContainsKey('mgmtaccess')) { $Payload.Add('mgmtaccess', $mgmtaccess) }
            if ($PSBoundParameters.ContainsKey('restrictaccess')) { $Payload.Add('restrictaccess', $restrictaccess) }
            if ($PSBoundParameters.ContainsKey('dynamicrouting')) { $Payload.Add('dynamicrouting', $dynamicrouting) }
            if ($PSBoundParameters.ContainsKey('decrementhoplimit')) { $Payload.Add('decrementhoplimit', $decrementhoplimit) }
            if ($PSBoundParameters.ContainsKey('hostroute')) { $Payload.Add('hostroute', $hostroute) }
            if ($PSBoundParameters.ContainsKey('advertiseondefaultpartition')) { $Payload.Add('advertiseondefaultpartition', $advertiseondefaultpartition) }
            if ($PSBoundParameters.ContainsKey('networkroute')) { $Payload.Add('networkroute', $networkroute) }
            if ($PSBoundParameters.ContainsKey('tag')) { $Payload.Add('tag', $tag) }
            if ($PSBoundParameters.ContainsKey('ip6hostrtgw')) { $Payload.Add('ip6hostrtgw', $ip6hostrtgw) }
            if ($PSBoundParameters.ContainsKey('metric')) { $Payload.Add('metric', $metric) }
            if ($PSBoundParameters.ContainsKey('vserverrhilevel')) { $Payload.Add('vserverrhilevel', $vserverrhilevel) }
            if ($PSBoundParameters.ContainsKey('ospf6lsatype')) { $Payload.Add('ospf6lsatype', $ospf6lsatype) }
            if ($PSBoundParameters.ContainsKey('ospfarea')) { $Payload.Add('ospfarea', $ospfarea) }
            if ($PSBoundParameters.ContainsKey('state')) { $Payload.Add('state', $state) }
            if ($PSBoundParameters.ContainsKey('map')) { $Payload.Add('map', $map) }
            if ($PSBoundParameters.ContainsKey('vrid6')) { $Payload.Add('vrid6', $vrid6) }
            if ($PSBoundParameters.ContainsKey('ownernode')) { $Payload.Add('ownernode', $ownernode) }
            if ($PSBoundParameters.ContainsKey('ownerdownresponse')) { $Payload.Add('ownerdownresponse', $ownerdownresponse) }
            if ($PSBoundParameters.ContainsKey('td')) { $Payload.Add('td', $td) }
            if ($PSBoundParameters.ContainsKey('ndowner')) { $Payload.Add('ndowner', $ndowner) }
 
            if ($PSCmdlet.ShouldProcess("nsip6", "Add NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nsip6 -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
            Write-Output $result

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddNsip6: Finished"
    }
}

function Invoke-ADCDeleteNsip6 {
<#
    .SYNOPSIS
        Delete NS configuration Object
    .DESCRIPTION
        Delete NS configuration Object
    .PARAMETER ipv6address 
       IPv6 address to create on the Citrix ADC.  
       Minimum length = 1    .PARAMETER td 
       Integer value that uniquely identifies the traffic domain in which you want to configure the entity. If you do not specify an ID, the entity becomes part of the default traffic domain, which has an ID of 0.  
       Minimum value = 0  
       Maximum value = 4094
    .EXAMPLE
        Invoke-ADCDeleteNsip6 -ipv6address <string>
    .NOTES
        File Name : Invoke-ADCDeleteNsip6
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsip6/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$ipv6address ,

        [double]$td 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteNsip6: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }
            if ($PSBoundParameters.ContainsKey('td')) { $Arguments.Add('td', $td) }
            if ($PSCmdlet.ShouldProcess("$ipv6address", "Delete NS configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type nsip6 -Resource $ipv6address -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteNsip6: Finished"
    }
}

function Invoke-ADCUpdateNsip6 {
<#
    .SYNOPSIS
        Update NS configuration Object
    .DESCRIPTION
        Update NS configuration Object 
    .PARAMETER ipv6address 
        IPv6 address to create on the Citrix ADC.  
        Minimum length = 1 
    .PARAMETER td 
        Integer value that uniquely identifies the traffic domain in which you want to configure the entity. If you do not specify an ID, the entity becomes part of the default traffic domain, which has an ID of 0.  
        Minimum value = 0  
        Maximum value = 4094 
    .PARAMETER nd 
        Respond to Neighbor Discovery (ND) requests for this IP address.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER icmp 
        Respond to ICMP requests for this IP address.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER vserver 
        Enable or disable the state of all the virtual servers associated with this VIP6 address.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER telnet 
        Allow Telnet access to this IP address.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER ftp 
        Allow File Transfer Protocol (FTP) access to this IP address.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER gui 
        Allow graphical user interface (GUI) access to this IP address.  
        Default value: ENABLED  
        Possible values = ENABLED, SECUREONLY, DISABLED 
    .PARAMETER ssh 
        Allow secure Shell (SSH) access to this IP address.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER snmp 
        Allow Simple Network Management Protocol (SNMP) access to this IP address.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER mgmtaccess 
        Allow access to management applications on this IP address.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER ownerdownresponse 
        in cluster system, if the owner node is down, whether should it respond to icmp/arp.  
        Default value: YES  
        Possible values = YES, NO 
    .PARAMETER restrictaccess 
        Block access to nonmanagement applications on this IP address. This option is applicable forMIP6s, SNIP6s, and NSIP6s, and is disabled by default. Nonmanagement applications can run on the underlying Citrix ADC Free BSD operating system.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER state 
        Enable or disable the IP address.  
        Default value: ENABLED  
        Possible values = DISABLED, ENABLED 
    .PARAMETER map 
        Mapped IPV4 address for the IPV6 address. 
    .PARAMETER decrementhoplimit 
        Decrement Hop Limit by 1 when ENABLED.This setting is applicable only for UDP traffic.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER dynamicrouting 
        Allow dynamic routing on this IP address. Specific to Subnet IPv6 (SNIP6) address.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER hostroute 
        Option to push the VIP6 to ZebOS routing table for Kernel route redistribution through dynamic routing protocols.  
        Possible values = ENABLED, DISABLED 
    .PARAMETER advertiseondefaultpartition 
        Advertise VIPs from Shared VLAN on Default Partition.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER networkroute 
        Option to push the SNIP6 subnet to ZebOS routing table for Kernel route redistribution through dynamic routing protocol.  
        Possible values = ENABLED, DISABLED 
    .PARAMETER ip6hostrtgw 
        IPv6 address of the gateway for the route. If Gateway is not set, VIP uses :: as the gateway.  
        Default value: 0 
    .PARAMETER metric 
        Integer value to add to or subtract from the cost of the route advertised for the VIP6 address.  
        Minimum value = -16777215 
    .PARAMETER vserverrhilevel 
        Advertise or do not advertise the route for the Virtual IP (VIP6) address on the basis of the state of the virtual servers associated with that VIP6.  
        * NONE - Advertise the route for the VIP6 address, irrespective of the state of the virtual servers associated with the address.  
        * ONE VSERVER - Advertise the route for the VIP6 address if at least one of the associated virtual servers is in UP state.  
        * ALL VSERVER - Advertise the route for the VIP6 address if all of the associated virtual servers are in UP state.  
        * VSVR_CNTRLD. Advertise the route for the VIP address according to the RHIstate (RHI STATE) parameter setting on all the associated virtual servers of the VIP address along with their states.  
        When Vserver RHI Level (RHI) parameter is set to VSVR_CNTRLD, the following are different RHI behaviors for the VIP address on the basis of RHIstate (RHI STATE) settings on the virtual servers associated with the VIP address:  
        * If you set RHI STATE to PASSIVE on all virtual servers, the Citrix ADC always advertises the route for the VIP address.  
        * If you set RHI STATE to ACTIVE on all virtual servers, the Citrix ADC advertises the route for the VIP address if at least one of the associated virtual servers is in UP state.  
        *If you set RHI STATE to ACTIVE on some and PASSIVE on others, the Citrix ADC advertises the route for the VIP address if at least one of the associated virtual servers, whose RHI STATE set to ACTIVE, is in UP state.  
        Default value: ONE_VSERVER  
        Possible values = ONE_VSERVER, ALL_VSERVERS, NONE, VSVR_CNTRLD 
    .PARAMETER ospf6lsatype 
        Type of LSAs to be used by the IPv6 OSPF protocol, running on the Citrix ADC, for advertising the route for the VIP6 address.  
        Default value: EXTERNAL  
        Possible values = INTRA_AREA, EXTERNAL 
    .PARAMETER ospfarea 
        ID of the area in which the Intra-Area-Prefix LSAs are to be advertised for the VIP6 address by the IPv6 OSPF protocol running on the Citrix ADC. When ospfArea is not set, VIP6 is advertised on all areas.  
        Default value: -1  
        Minimum value = 0  
        Maximum value = 4294967294LU 
    .PARAMETER tag 
        Tag value for the network/host route associated with this IP.  
        Default value: 0 
    .PARAMETER vrid6 
        A positive integer that uniquely identifies a VMAC address for binding to this VIP address. This binding is used to set up Citrix ADCs in an active-active configuration using VRRP.  
        Minimum value = 1  
        Maximum value = 255 
    .PARAMETER ndowner 
        NdOwner in Cluster for VIPS and Striped SNIPS.  
        Default value: 255
    .EXAMPLE
        Invoke-ADCUpdateNsip6 -ipv6address <string>
    .NOTES
        File Name : Invoke-ADCUpdateNsip6
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsip6/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$ipv6address ,

        [ValidateRange(0, 4094)]
        [double]$td ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$nd ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$icmp ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$vserver ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$telnet ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$ftp ,

        [ValidateSet('ENABLED', 'SECUREONLY', 'DISABLED')]
        [string]$gui ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$ssh ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$snmp ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$mgmtaccess ,

        [ValidateSet('YES', 'NO')]
        [string]$ownerdownresponse ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$restrictaccess ,

        [ValidateSet('DISABLED', 'ENABLED')]
        [string]$state ,

        [string]$map ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$decrementhoplimit ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$dynamicrouting ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$hostroute ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$advertiseondefaultpartition ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$networkroute ,

        [string]$ip6hostrtgw ,

        [int]$metric ,

        [ValidateSet('ONE_VSERVER', 'ALL_VSERVERS', 'NONE', 'VSVR_CNTRLD')]
        [string]$vserverrhilevel ,

        [ValidateSet('INTRA_AREA', 'EXTERNAL')]
        [string]$ospf6lsatype ,

        [ValidateRange(0, 4294967294)]
        [double]$ospfarea ,

        [double]$tag ,

        [ValidateRange(1, 255)]
        [double]$vrid6 ,

        [double]$ndowner 

    )
    begin {
        Write-Verbose "Invoke-ADCUpdateNsip6: Starting"
    }
    process {
        try {
            $Payload = @{
                ipv6address = $ipv6address
            }
            if ($PSBoundParameters.ContainsKey('td')) { $Payload.Add('td', $td) }
            if ($PSBoundParameters.ContainsKey('nd')) { $Payload.Add('nd', $nd) }
            if ($PSBoundParameters.ContainsKey('icmp')) { $Payload.Add('icmp', $icmp) }
            if ($PSBoundParameters.ContainsKey('vserver')) { $Payload.Add('vserver', $vserver) }
            if ($PSBoundParameters.ContainsKey('telnet')) { $Payload.Add('telnet', $telnet) }
            if ($PSBoundParameters.ContainsKey('ftp')) { $Payload.Add('ftp', $ftp) }
            if ($PSBoundParameters.ContainsKey('gui')) { $Payload.Add('gui', $gui) }
            if ($PSBoundParameters.ContainsKey('ssh')) { $Payload.Add('ssh', $ssh) }
            if ($PSBoundParameters.ContainsKey('snmp')) { $Payload.Add('snmp', $snmp) }
            if ($PSBoundParameters.ContainsKey('mgmtaccess')) { $Payload.Add('mgmtaccess', $mgmtaccess) }
            if ($PSBoundParameters.ContainsKey('ownerdownresponse')) { $Payload.Add('ownerdownresponse', $ownerdownresponse) }
            if ($PSBoundParameters.ContainsKey('restrictaccess')) { $Payload.Add('restrictaccess', $restrictaccess) }
            if ($PSBoundParameters.ContainsKey('state')) { $Payload.Add('state', $state) }
            if ($PSBoundParameters.ContainsKey('map')) { $Payload.Add('map', $map) }
            if ($PSBoundParameters.ContainsKey('decrementhoplimit')) { $Payload.Add('decrementhoplimit', $decrementhoplimit) }
            if ($PSBoundParameters.ContainsKey('dynamicrouting')) { $Payload.Add('dynamicrouting', $dynamicrouting) }
            if ($PSBoundParameters.ContainsKey('hostroute')) { $Payload.Add('hostroute', $hostroute) }
            if ($PSBoundParameters.ContainsKey('advertiseondefaultpartition')) { $Payload.Add('advertiseondefaultpartition', $advertiseondefaultpartition) }
            if ($PSBoundParameters.ContainsKey('networkroute')) { $Payload.Add('networkroute', $networkroute) }
            if ($PSBoundParameters.ContainsKey('ip6hostrtgw')) { $Payload.Add('ip6hostrtgw', $ip6hostrtgw) }
            if ($PSBoundParameters.ContainsKey('metric')) { $Payload.Add('metric', $metric) }
            if ($PSBoundParameters.ContainsKey('vserverrhilevel')) { $Payload.Add('vserverrhilevel', $vserverrhilevel) }
            if ($PSBoundParameters.ContainsKey('ospf6lsatype')) { $Payload.Add('ospf6lsatype', $ospf6lsatype) }
            if ($PSBoundParameters.ContainsKey('ospfarea')) { $Payload.Add('ospfarea', $ospfarea) }
            if ($PSBoundParameters.ContainsKey('tag')) { $Payload.Add('tag', $tag) }
            if ($PSBoundParameters.ContainsKey('vrid6')) { $Payload.Add('vrid6', $vrid6) }
            if ($PSBoundParameters.ContainsKey('ndowner')) { $Payload.Add('ndowner', $ndowner) }
 
            if ($PSCmdlet.ShouldProcess("nsip6", "Update NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -Type nsip6 -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
            Write-Output $result

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUpdateNsip6: Finished"
    }
}

function Invoke-ADCUnsetNsip6 {
<#
    .SYNOPSIS
        Unset NS configuration Object
    .DESCRIPTION
        Unset NS configuration Object 
   .PARAMETER ipv6address 
       IPv6 address to create on the Citrix ADC. 
   .PARAMETER td 
       Integer value that uniquely identifies the traffic domain in which you want to configure the entity. If you do not specify an ID, the entity becomes part of the default traffic domain, which has an ID of 0. 
   .PARAMETER ospfarea 
       ID of the area in which the Intra-Area-Prefix LSAs are to be advertised for the VIP6 address by the IPv6 OSPF protocol running on the Citrix ADC. When ospfArea is not set, VIP6 is advertised on all areas. 
   .PARAMETER nd 
       Respond to Neighbor Discovery (ND) requests for this IP address.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER icmp 
       Respond to ICMP requests for this IP address.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER vserver 
       Enable or disable the state of all the virtual servers associated with this VIP6 address.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER telnet 
       Allow Telnet access to this IP address.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER ftp 
       Allow File Transfer Protocol (FTP) access to this IP address.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER gui 
       Allow graphical user interface (GUI) access to this IP address.  
       Possible values = ENABLED, SECUREONLY, DISABLED 
   .PARAMETER ssh 
       Allow secure Shell (SSH) access to this IP address.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER snmp 
       Allow Simple Network Management Protocol (SNMP) access to this IP address.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER mgmtaccess 
       Allow access to management applications on this IP address.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER ownerdownresponse 
       in cluster system, if the owner node is down, whether should it respond to icmp/arp.  
       Possible values = YES, NO 
   .PARAMETER restrictaccess 
       Block access to nonmanagement applications on this IP address. This option is applicable forMIP6s, SNIP6s, and NSIP6s, and is disabled by default. Nonmanagement applications can run on the underlying Citrix ADC Free BSD operating system.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER state 
       Enable or disable the IP address.  
       Possible values = DISABLED, ENABLED 
   .PARAMETER map 
       Mapped IPV4 address for the IPV6 address. 
   .PARAMETER decrementhoplimit 
       Decrement Hop Limit by 1 when ENABLED.This setting is applicable only for UDP traffic.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER dynamicrouting 
       Allow dynamic routing on this IP address. Specific to Subnet IPv6 (SNIP6) address.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER hostroute 
       Option to push the VIP6 to ZebOS routing table for Kernel route redistribution through dynamic routing protocols.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER advertiseondefaultpartition 
       Advertise VIPs from Shared VLAN on Default Partition.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER networkroute 
       Option to push the SNIP6 subnet to ZebOS routing table for Kernel route redistribution through dynamic routing protocol.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER ip6hostrtgw 
       IPv6 address of the gateway for the route. If Gateway is not set, VIP uses :: as the gateway. 
   .PARAMETER metric 
       Integer value to add to or subtract from the cost of the route advertised for the VIP6 address. 
   .PARAMETER vserverrhilevel 
       Advertise or do not advertise the route for the Virtual IP (VIP6) address on the basis of the state of the virtual servers associated with that VIP6.  
       * NONE - Advertise the route for the VIP6 address, irrespective of the state of the virtual servers associated with the address.  
       * ONE VSERVER - Advertise the route for the VIP6 address if at least one of the associated virtual servers is in UP state.  
       * ALL VSERVER - Advertise the route for the VIP6 address if all of the associated virtual servers are in UP state.  
       * VSVR_CNTRLD. Advertise the route for the VIP address according to the RHIstate (RHI STATE) parameter setting on all the associated virtual servers of the VIP address along with their states.  
       When Vserver RHI Level (RHI) parameter is set to VSVR_CNTRLD, the following are different RHI behaviors for the VIP address on the basis of RHIstate (RHI STATE) settings on the virtual servers associated with the VIP address:  
       * If you set RHI STATE to PASSIVE on all virtual servers, the Citrix ADC always advertises the route for the VIP address.  
       * If you set RHI STATE to ACTIVE on all virtual servers, the Citrix ADC advertises the route for the VIP address if at least one of the associated virtual servers is in UP state.  
       *If you set RHI STATE to ACTIVE on some and PASSIVE on others, the Citrix ADC advertises the route for the VIP address if at least one of the associated virtual servers, whose RHI STATE set to ACTIVE, is in UP state.  
       Possible values = ONE_VSERVER, ALL_VSERVERS, NONE, VSVR_CNTRLD 
   .PARAMETER ospf6lsatype 
       Type of LSAs to be used by the IPv6 OSPF protocol, running on the Citrix ADC, for advertising the route for the VIP6 address.  
       Possible values = INTRA_AREA, EXTERNAL 
   .PARAMETER tag 
       Tag value for the network/host route associated with this IP. 
   .PARAMETER vrid6 
       A positive integer that uniquely identifies a VMAC address for binding to this VIP address. This binding is used to set up Citrix ADCs in an active-active configuration using VRRP. 
   .PARAMETER ndowner 
       NdOwner in Cluster for VIPS and Striped SNIPS.
    .EXAMPLE
        Invoke-ADCUnsetNsip6 -ipv6address <string>
    .NOTES
        File Name : Invoke-ADCUnsetNsip6
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsip6
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$ipv6address ,

        [Boolean]$td ,

        [Boolean]$ospfarea ,

        [Boolean]$nd ,

        [Boolean]$icmp ,

        [Boolean]$vserver ,

        [Boolean]$telnet ,

        [Boolean]$ftp ,

        [Boolean]$gui ,

        [Boolean]$ssh ,

        [Boolean]$snmp ,

        [Boolean]$mgmtaccess ,

        [Boolean]$ownerdownresponse ,

        [Boolean]$restrictaccess ,

        [Boolean]$state ,

        [Boolean]$map ,

        [Boolean]$decrementhoplimit ,

        [Boolean]$dynamicrouting ,

        [Boolean]$hostroute ,

        [Boolean]$advertiseondefaultpartition ,

        [Boolean]$networkroute ,

        [Boolean]$ip6hostrtgw ,

        [Boolean]$metric ,

        [Boolean]$vserverrhilevel ,

        [Boolean]$ospf6lsatype ,

        [Boolean]$tag ,

        [Boolean]$vrid6 ,

        [Boolean]$ndowner 
    )
    begin {
        Write-Verbose "Invoke-ADCUnsetNsip6: Starting"
    }
    process {
        try {
            $Payload = @{
                ipv6address = $ipv6address
            }
            if ($PSBoundParameters.ContainsKey('td')) { $Payload.Add('td', $td) }
            if ($PSBoundParameters.ContainsKey('ospfarea')) { $Payload.Add('ospfarea', $ospfarea) }
            if ($PSBoundParameters.ContainsKey('nd')) { $Payload.Add('nd', $nd) }
            if ($PSBoundParameters.ContainsKey('icmp')) { $Payload.Add('icmp', $icmp) }
            if ($PSBoundParameters.ContainsKey('vserver')) { $Payload.Add('vserver', $vserver) }
            if ($PSBoundParameters.ContainsKey('telnet')) { $Payload.Add('telnet', $telnet) }
            if ($PSBoundParameters.ContainsKey('ftp')) { $Payload.Add('ftp', $ftp) }
            if ($PSBoundParameters.ContainsKey('gui')) { $Payload.Add('gui', $gui) }
            if ($PSBoundParameters.ContainsKey('ssh')) { $Payload.Add('ssh', $ssh) }
            if ($PSBoundParameters.ContainsKey('snmp')) { $Payload.Add('snmp', $snmp) }
            if ($PSBoundParameters.ContainsKey('mgmtaccess')) { $Payload.Add('mgmtaccess', $mgmtaccess) }
            if ($PSBoundParameters.ContainsKey('ownerdownresponse')) { $Payload.Add('ownerdownresponse', $ownerdownresponse) }
            if ($PSBoundParameters.ContainsKey('restrictaccess')) { $Payload.Add('restrictaccess', $restrictaccess) }
            if ($PSBoundParameters.ContainsKey('state')) { $Payload.Add('state', $state) }
            if ($PSBoundParameters.ContainsKey('map')) { $Payload.Add('map', $map) }
            if ($PSBoundParameters.ContainsKey('decrementhoplimit')) { $Payload.Add('decrementhoplimit', $decrementhoplimit) }
            if ($PSBoundParameters.ContainsKey('dynamicrouting')) { $Payload.Add('dynamicrouting', $dynamicrouting) }
            if ($PSBoundParameters.ContainsKey('hostroute')) { $Payload.Add('hostroute', $hostroute) }
            if ($PSBoundParameters.ContainsKey('advertiseondefaultpartition')) { $Payload.Add('advertiseondefaultpartition', $advertiseondefaultpartition) }
            if ($PSBoundParameters.ContainsKey('networkroute')) { $Payload.Add('networkroute', $networkroute) }
            if ($PSBoundParameters.ContainsKey('ip6hostrtgw')) { $Payload.Add('ip6hostrtgw', $ip6hostrtgw) }
            if ($PSBoundParameters.ContainsKey('metric')) { $Payload.Add('metric', $metric) }
            if ($PSBoundParameters.ContainsKey('vserverrhilevel')) { $Payload.Add('vserverrhilevel', $vserverrhilevel) }
            if ($PSBoundParameters.ContainsKey('ospf6lsatype')) { $Payload.Add('ospf6lsatype', $ospf6lsatype) }
            if ($PSBoundParameters.ContainsKey('tag')) { $Payload.Add('tag', $tag) }
            if ($PSBoundParameters.ContainsKey('vrid6')) { $Payload.Add('vrid6', $vrid6) }
            if ($PSBoundParameters.ContainsKey('ndowner')) { $Payload.Add('ndowner', $ndowner) }
            if ($PSCmdlet.ShouldProcess("$ipv6address", "Unset NS configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nsip6 -Action unset -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUnsetNsip6: Finished"
    }
}

function Invoke-ADCGetNsip6 {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER GetAll 
        Retreive all nsip6 object(s)
    .PARAMETER Count
        If specified, the count of the nsip6 object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNsip6
    .EXAMPLE 
        Invoke-ADCGetNsip6 -GetAll 
    .EXAMPLE 
        Invoke-ADCGetNsip6 -Count
    .EXAMPLE
        Invoke-ADCGetNsip6 -name <string>
    .EXAMPLE
        Invoke-ADCGetNsip6 -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNsip6
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsip6/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll,

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$ViewSummary

    )
    begin {
        Write-Verbose "Invoke-ADCGetNsip6: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all nsip6 objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsip6 -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nsip6 objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsip6 -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nsip6 objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsip6 -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nsip6 configuration for property ''"

            } else {
                Write-Verbose "Retrieving nsip6 configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsip6 -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNsip6: Ended"
    }
}

function Invoke-ADCGetNslicense {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER GetAll 
        Retreive all nslicense object(s)
    .PARAMETER Count
        If specified, the count of the nslicense object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNslicense
    .EXAMPLE 
        Invoke-ADCGetNslicense -GetAll
    .EXAMPLE
        Invoke-ADCGetNslicense -name <string>
    .EXAMPLE
        Invoke-ADCGetNslicense -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNslicense
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nslicense/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetNslicense: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all nslicense objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nslicense -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nslicense objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nslicense -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nslicense objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nslicense -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nslicense configuration for property ''"

            } else {
                Write-Verbose "Retrieving nslicense configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nslicense -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNslicense: Ended"
    }
}

function Invoke-ADCAddNslicenseproxyserver {
<#
    .SYNOPSIS
        Add NS configuration Object
    .DESCRIPTION
        Add NS configuration Object 
    .PARAMETER serverip 
        IP address of the License proxy server.  
        Minimum length = 1 
    .PARAMETER servername 
        Fully qualified domain name of the License proxy server. 
    .PARAMETER port 
        License proxy server port.
    .EXAMPLE
        Invoke-ADCAddNslicenseproxyserver -port <double>
    .NOTES
        File Name : Invoke-ADCAddNslicenseproxyserver
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nslicenseproxyserver/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$serverip ,

        [string]$servername ,

        [Parameter(Mandatory = $true)]
        [double]$port 

    )
    begin {
        Write-Verbose "Invoke-ADCAddNslicenseproxyserver: Starting"
    }
    process {
        try {
            $Payload = @{
                port = $port
            }
            if ($PSBoundParameters.ContainsKey('serverip')) { $Payload.Add('serverip', $serverip) }
            if ($PSBoundParameters.ContainsKey('servername')) { $Payload.Add('servername', $servername) }
 
            if ($PSCmdlet.ShouldProcess("nslicenseproxyserver", "Add NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nslicenseproxyserver -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
            Write-Output $result

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddNslicenseproxyserver: Finished"
    }
}

function Invoke-ADCDeleteNslicenseproxyserver {
<#
    .SYNOPSIS
        Delete NS configuration Object
    .DESCRIPTION
        Delete NS configuration Object
    .PARAMETER serverip 
       IP address of the License proxy server.  
       Minimum length = 1    .PARAMETER servername 
       Fully qualified domain name of the License proxy server.
    .EXAMPLE
        Invoke-ADCDeleteNslicenseproxyserver -serverip <string>
    .NOTES
        File Name : Invoke-ADCDeleteNslicenseproxyserver
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nslicenseproxyserver/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$serverip ,

        [string]$servername 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteNslicenseproxyserver: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }
            if ($PSBoundParameters.ContainsKey('servername')) { $Arguments.Add('servername', $servername) }
            if ($PSCmdlet.ShouldProcess("$serverip", "Delete NS configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type nslicenseproxyserver -Resource $serverip -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteNslicenseproxyserver: Finished"
    }
}

function Invoke-ADCUpdateNslicenseproxyserver {
<#
    .SYNOPSIS
        Update NS configuration Object
    .DESCRIPTION
        Update NS configuration Object 
    .PARAMETER serverip 
        IP address of the License proxy server.  
        Minimum length = 1 
    .PARAMETER servername 
        Fully qualified domain name of the License proxy server. 
    .PARAMETER port 
        License proxy server port.
    .EXAMPLE
        Invoke-ADCUpdateNslicenseproxyserver -port <double>
    .NOTES
        File Name : Invoke-ADCUpdateNslicenseproxyserver
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nslicenseproxyserver/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$serverip ,

        [string]$servername ,

        [Parameter(Mandatory = $true)]
        [double]$port 

    )
    begin {
        Write-Verbose "Invoke-ADCUpdateNslicenseproxyserver: Starting"
    }
    process {
        try {
            $Payload = @{
                port = $port
            }
            if ($PSBoundParameters.ContainsKey('serverip')) { $Payload.Add('serverip', $serverip) }
            if ($PSBoundParameters.ContainsKey('servername')) { $Payload.Add('servername', $servername) }
 
            if ($PSCmdlet.ShouldProcess("nslicenseproxyserver", "Update NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -Type nslicenseproxyserver -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
            Write-Output $result

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUpdateNslicenseproxyserver: Finished"
    }
}

function Invoke-ADCGetNslicenseproxyserver {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER GetAll 
        Retreive all nslicenseproxyserver object(s)
    .PARAMETER Count
        If specified, the count of the nslicenseproxyserver object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNslicenseproxyserver
    .EXAMPLE 
        Invoke-ADCGetNslicenseproxyserver -GetAll 
    .EXAMPLE 
        Invoke-ADCGetNslicenseproxyserver -Count
    .EXAMPLE
        Invoke-ADCGetNslicenseproxyserver -name <string>
    .EXAMPLE
        Invoke-ADCGetNslicenseproxyserver -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNslicenseproxyserver
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nslicenseproxyserver/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll,

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$ViewSummary

    )
    begin {
        Write-Verbose "Invoke-ADCGetNslicenseproxyserver: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all nslicenseproxyserver objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nslicenseproxyserver -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nslicenseproxyserver objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nslicenseproxyserver -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nslicenseproxyserver objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nslicenseproxyserver -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nslicenseproxyserver configuration for property ''"

            } else {
                Write-Verbose "Retrieving nslicenseproxyserver configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nslicenseproxyserver -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNslicenseproxyserver: Ended"
    }
}

function Invoke-ADCAddNslicenseserver {
<#
    .SYNOPSIS
        Add NS configuration Object
    .DESCRIPTION
        Add NS configuration Object 
    .PARAMETER licenseserverip 
        IP address of the License server.  
        Minimum length = 1 
    .PARAMETER servername 
        Fully qualified domain name of the License server. 
    .PARAMETER port 
        License server port. 
    .PARAMETER forceupdateip 
        If this flag is used while adding the licenseserver, existing config will be overwritten. Use this flag only if you are sure that the new licenseserver has the required capacity.
    .EXAMPLE
        Invoke-ADCAddNslicenseserver 
    .NOTES
        File Name : Invoke-ADCAddNslicenseserver
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nslicenseserver/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$licenseserverip ,

        [string]$servername ,

        [double]$port ,

        [boolean]$forceupdateip 

    )
    begin {
        Write-Verbose "Invoke-ADCAddNslicenseserver: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('licenseserverip')) { $Payload.Add('licenseserverip', $licenseserverip) }
            if ($PSBoundParameters.ContainsKey('servername')) { $Payload.Add('servername', $servername) }
            if ($PSBoundParameters.ContainsKey('port')) { $Payload.Add('port', $port) }
            if ($PSBoundParameters.ContainsKey('forceupdateip')) { $Payload.Add('forceupdateip', $forceupdateip) }
 
            if ($PSCmdlet.ShouldProcess("nslicenseserver", "Add NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nslicenseserver -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
            Write-Output $result

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddNslicenseserver: Finished"
    }
}

function Invoke-ADCDeleteNslicenseserver {
<#
    .SYNOPSIS
        Delete NS configuration Object
    .DESCRIPTION
        Delete NS configuration Object
    .PARAMETER licenseserverip 
       IP address of the License server.  
       Minimum length = 1    .PARAMETER servername 
       Fully qualified domain name of the License server.
    .EXAMPLE
        Invoke-ADCDeleteNslicenseserver -licenseserverip <string>
    .NOTES
        File Name : Invoke-ADCDeleteNslicenseserver
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nslicenseserver/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$licenseserverip ,

        [string]$servername 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteNslicenseserver: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }
            if ($PSBoundParameters.ContainsKey('servername')) { $Arguments.Add('servername', $servername) }
            if ($PSCmdlet.ShouldProcess("$licenseserverip", "Delete NS configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type nslicenseserver -Resource $licenseserverip -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteNslicenseserver: Finished"
    }
}

function Invoke-ADCUpdateNslicenseserver {
<#
    .SYNOPSIS
        Update NS configuration Object
    .DESCRIPTION
        Update NS configuration Object 
    .PARAMETER licenseserverip 
        IP address of the License server.  
        Minimum length = 1 
    .PARAMETER servername 
        Fully qualified domain name of the License server. 
    .PARAMETER port 
        License server port.
    .EXAMPLE
        Invoke-ADCUpdateNslicenseserver 
    .NOTES
        File Name : Invoke-ADCUpdateNslicenseserver
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nslicenseserver/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$licenseserverip ,

        [string]$servername ,

        [double]$port 

    )
    begin {
        Write-Verbose "Invoke-ADCUpdateNslicenseserver: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('licenseserverip')) { $Payload.Add('licenseserverip', $licenseserverip) }
            if ($PSBoundParameters.ContainsKey('servername')) { $Payload.Add('servername', $servername) }
            if ($PSBoundParameters.ContainsKey('port')) { $Payload.Add('port', $port) }
 
            if ($PSCmdlet.ShouldProcess("nslicenseserver", "Update NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -Type nslicenseserver -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
            Write-Output $result

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUpdateNslicenseserver: Finished"
    }
}

function Invoke-ADCGetNslicenseserver {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER licenseserverip 
       IP address of the License server. 
    .PARAMETER servername 
       Fully qualified domain name of the License server. 
    .PARAMETER nodeid 
       Unique number that identifies the cluster node. 
    .PARAMETER GetAll 
        Retreive all nslicenseserver object(s)
    .PARAMETER Count
        If specified, the count of the nslicenseserver object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNslicenseserver
    .EXAMPLE 
        Invoke-ADCGetNslicenseserver -GetAll 
    .EXAMPLE 
        Invoke-ADCGetNslicenseserver -Count
    .EXAMPLE
        Invoke-ADCGetNslicenseserver -name <string>
    .EXAMPLE
        Invoke-ADCGetNslicenseserver -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNslicenseserver
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nslicenseserver/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByArgument')]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$licenseserverip ,

        [Parameter(ParameterSetName = 'GetByArgument')]
        [string]$servername ,

        [Parameter(ParameterSetName = 'GetByArgument')]
        [ValidateRange(0, 31)]
        [double]$nodeid,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll,

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$ViewSummary

    )
    begin {
        Write-Verbose "Invoke-ADCGetNslicenseserver: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all nslicenseserver objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nslicenseserver -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nslicenseserver objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nslicenseserver -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nslicenseserver objects by arguments"
                $Arguments = @{ } 
                if ($PSBoundParameters.ContainsKey('licenseserverip')) { $Arguments.Add('licenseserverip', $licenseserverip) } 
                if ($PSBoundParameters.ContainsKey('servername')) { $Arguments.Add('servername', $servername) } 
                if ($PSBoundParameters.ContainsKey('nodeid')) { $Arguments.Add('nodeid', $nodeid) }
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nslicenseserver -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nslicenseserver configuration for property ''"

            } else {
                Write-Verbose "Retrieving nslicenseserver configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nslicenseserver -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNslicenseserver: Ended"
    }
}

function Invoke-ADCGetNslicenseserverpool {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER GetAll 
        Retreive all nslicenseserverpool object(s)
    .PARAMETER Count
        If specified, the count of the nslicenseserverpool object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNslicenseserverpool
    .EXAMPLE 
        Invoke-ADCGetNslicenseserverpool -GetAll
    .EXAMPLE
        Invoke-ADCGetNslicenseserverpool -name <string>
    .EXAMPLE
        Invoke-ADCGetNslicenseserverpool -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNslicenseserverpool
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nslicenseserverpool/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetNslicenseserverpool: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all nslicenseserverpool objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nslicenseserverpool -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nslicenseserverpool objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nslicenseserverpool -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nslicenseserverpool objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nslicenseserverpool -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nslicenseserverpool configuration for property ''"

            } else {
                Write-Verbose "Retrieving nslicenseserverpool configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nslicenseserverpool -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNslicenseserverpool: Ended"
    }
}

function Invoke-ADCAddNslimitidentifier {
<#
    .SYNOPSIS
        Add NS configuration Object
    .DESCRIPTION
        Add NS configuration Object 
    .PARAMETER limitidentifier 
        Name for a rate limit identifier. Must begin with an ASCII letter or underscore (_) character, and must consist only of ASCII alphanumeric or underscore characters. Reserved words must not be used. 
    .PARAMETER threshold 
        Maximum number of requests that are allowed in the given timeslice when requests (mode is set as REQUEST_RATE) are tracked per timeslice.  
        When connections (mode is set as CONNECTION) are tracked, it is the total number of connections that would be let through.  
        Default value: 1  
        Minimum value = 1 
    .PARAMETER timeslice 
        Time interval, in milliseconds, specified in multiples of 10, during which requests are tracked to check if they cross the threshold. This argument is needed only when the mode is set to REQUEST_RATE.  
        Default value: 1000  
        Minimum value = 10 
    .PARAMETER mode 
        Defines the type of traffic to be tracked.  
        * REQUEST_RATE - Tracks requests/timeslice.  
        * CONNECTION - Tracks active transactions.  
        Examples  
        1. To permit 20 requests in 10 ms and 2 traps in 10 ms:  
        add limitidentifier limit_req -mode request_rate -limitType smooth -timeslice 1000 -Threshold 2000 -trapsInTimeSlice 200  
        2. To permit 50 requests in 10 ms:  
        set limitidentifier limit_req -mode request_rate -timeslice 1000 -Threshold 5000 -limitType smooth  
        3. To permit 1 request in 40 ms:  
        set limitidentifier limit_req -mode request_rate -timeslice 2000 -Threshold 50 -limitType smooth  
        4. To permit 1 request in 200 ms and 1 trap in 130 ms:  
        set limitidentifier limit_req -mode request_rate -timeslice 1000 -Threshold 5 -limitType smooth -trapsInTimeSlice 8  
        5. To permit 5000 requests in 1000 ms and 200 traps in 1000 ms:  
        set limitidentifier limit_req -mode request_rate -timeslice 1000 -Threshold 5000 -limitType BURSTY.  
        Default value: REQUEST_RATE  
        Possible values = CONNECTION, REQUEST_RATE, NONE 
    .PARAMETER limittype 
        Smooth or bursty request type.  
        * SMOOTH - When you want the permitted number of requests in a given interval of time to be spread evenly across the timeslice  
        * BURSTY - When you want the permitted number of requests to exhaust the quota anytime within the timeslice.  
        This argument is needed only when the mode is set to REQUEST_RATE.  
        Default value: BURSTY  
        Possible values = BURSTY, SMOOTH 
    .PARAMETER selectorname 
        Name of the rate limit selector. If this argument is NULL, rate limiting will be applied on all traffic received by the virtual server or the Citrix ADC (depending on whether the limit identifier is bound to a virtual server or globally) without any filtering.  
        Minimum length = 1 
    .PARAMETER maxbandwidth 
        Maximum bandwidth permitted, in kbps.  
        Minimum value = 0  
        Maximum value = 4294967287 
    .PARAMETER trapsintimeslice 
        Number of traps to be sent in the timeslice configured. A value of 0 indicates that traps are disabled.  
        Minimum value = 0  
        Maximum value = 65535 
    .PARAMETER PassThru 
        Return details about the created nslimitidentifier item.
    .EXAMPLE
        Invoke-ADCAddNslimitidentifier -limitidentifier <string>
    .NOTES
        File Name : Invoke-ADCAddNslimitidentifier
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nslimitidentifier/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidatePattern('^(([a-zA-Z0-9]|[_])+([a-zA-Z0-9]|[_])+)$')]
        [string]$limitidentifier ,

        [double]$threshold = '1' ,

        [double]$timeslice = '1000' ,

        [ValidateSet('CONNECTION', 'REQUEST_RATE', 'NONE')]
        [string]$mode = 'REQUEST_RATE' ,

        [ValidateSet('BURSTY', 'SMOOTH')]
        [string]$limittype = 'BURSTY' ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$selectorname ,

        [ValidateRange(0, 4294967287)]
        [double]$maxbandwidth ,

        [ValidateRange(0, 65535)]
        [double]$trapsintimeslice ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddNslimitidentifier: Starting"
    }
    process {
        try {
            $Payload = @{
                limitidentifier = $limitidentifier
            }
            if ($PSBoundParameters.ContainsKey('threshold')) { $Payload.Add('threshold', $threshold) }
            if ($PSBoundParameters.ContainsKey('timeslice')) { $Payload.Add('timeslice', $timeslice) }
            if ($PSBoundParameters.ContainsKey('mode')) { $Payload.Add('mode', $mode) }
            if ($PSBoundParameters.ContainsKey('limittype')) { $Payload.Add('limittype', $limittype) }
            if ($PSBoundParameters.ContainsKey('selectorname')) { $Payload.Add('selectorname', $selectorname) }
            if ($PSBoundParameters.ContainsKey('maxbandwidth')) { $Payload.Add('maxbandwidth', $maxbandwidth) }
            if ($PSBoundParameters.ContainsKey('trapsintimeslice')) { $Payload.Add('trapsintimeslice', $trapsintimeslice) }
 
            if ($PSCmdlet.ShouldProcess("nslimitidentifier", "Add NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nslimitidentifier -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetNslimitidentifier -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddNslimitidentifier: Finished"
    }
}

function Invoke-ADCDeleteNslimitidentifier {
<#
    .SYNOPSIS
        Delete NS configuration Object
    .DESCRIPTION
        Delete NS configuration Object
    .PARAMETER limitidentifier 
       Name for a rate limit identifier. Must begin with an ASCII letter or underscore (_) character, and must consist only of ASCII alphanumeric or underscore characters. Reserved words must not be used. 
    .EXAMPLE
        Invoke-ADCDeleteNslimitidentifier -limitidentifier <string>
    .NOTES
        File Name : Invoke-ADCDeleteNslimitidentifier
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nslimitidentifier/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$limitidentifier 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteNslimitidentifier: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }

            if ($PSCmdlet.ShouldProcess("$limitidentifier", "Delete NS configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type nslimitidentifier -Resource $limitidentifier -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteNslimitidentifier: Finished"
    }
}

function Invoke-ADCUpdateNslimitidentifier {
<#
    .SYNOPSIS
        Update NS configuration Object
    .DESCRIPTION
        Update NS configuration Object 
    .PARAMETER limitidentifier 
        Name for a rate limit identifier. Must begin with an ASCII letter or underscore (_) character, and must consist only of ASCII alphanumeric or underscore characters. Reserved words must not be used. 
    .PARAMETER threshold 
        Maximum number of requests that are allowed in the given timeslice when requests (mode is set as REQUEST_RATE) are tracked per timeslice.  
        When connections (mode is set as CONNECTION) are tracked, it is the total number of connections that would be let through.  
        Default value: 1  
        Minimum value = 1 
    .PARAMETER timeslice 
        Time interval, in milliseconds, specified in multiples of 10, during which requests are tracked to check if they cross the threshold. This argument is needed only when the mode is set to REQUEST_RATE.  
        Default value: 1000  
        Minimum value = 10 
    .PARAMETER mode 
        Defines the type of traffic to be tracked.  
        * REQUEST_RATE - Tracks requests/timeslice.  
        * CONNECTION - Tracks active transactions.  
        Examples  
        1. To permit 20 requests in 10 ms and 2 traps in 10 ms:  
        add limitidentifier limit_req -mode request_rate -limitType smooth -timeslice 1000 -Threshold 2000 -trapsInTimeSlice 200  
        2. To permit 50 requests in 10 ms:  
        set limitidentifier limit_req -mode request_rate -timeslice 1000 -Threshold 5000 -limitType smooth  
        3. To permit 1 request in 40 ms:  
        set limitidentifier limit_req -mode request_rate -timeslice 2000 -Threshold 50 -limitType smooth  
        4. To permit 1 request in 200 ms and 1 trap in 130 ms:  
        set limitidentifier limit_req -mode request_rate -timeslice 1000 -Threshold 5 -limitType smooth -trapsInTimeSlice 8  
        5. To permit 5000 requests in 1000 ms and 200 traps in 1000 ms:  
        set limitidentifier limit_req -mode request_rate -timeslice 1000 -Threshold 5000 -limitType BURSTY.  
        Default value: REQUEST_RATE  
        Possible values = CONNECTION, REQUEST_RATE, NONE 
    .PARAMETER limittype 
        Smooth or bursty request type.  
        * SMOOTH - When you want the permitted number of requests in a given interval of time to be spread evenly across the timeslice  
        * BURSTY - When you want the permitted number of requests to exhaust the quota anytime within the timeslice.  
        This argument is needed only when the mode is set to REQUEST_RATE.  
        Default value: BURSTY  
        Possible values = BURSTY, SMOOTH 
    .PARAMETER selectorname 
        Name of the rate limit selector. If this argument is NULL, rate limiting will be applied on all traffic received by the virtual server or the Citrix ADC (depending on whether the limit identifier is bound to a virtual server or globally) without any filtering.  
        Minimum length = 1 
    .PARAMETER maxbandwidth 
        Maximum bandwidth permitted, in kbps.  
        Minimum value = 0  
        Maximum value = 4294967287 
    .PARAMETER trapsintimeslice 
        Number of traps to be sent in the timeslice configured. A value of 0 indicates that traps are disabled.  
        Minimum value = 0  
        Maximum value = 65535 
    .PARAMETER PassThru 
        Return details about the created nslimitidentifier item.
    .EXAMPLE
        Invoke-ADCUpdateNslimitidentifier -limitidentifier <string>
    .NOTES
        File Name : Invoke-ADCUpdateNslimitidentifier
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nslimitidentifier/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidatePattern('^(([a-zA-Z0-9]|[_])+([a-zA-Z0-9]|[_])+)$')]
        [string]$limitidentifier ,

        [double]$threshold ,

        [double]$timeslice ,

        [ValidateSet('CONNECTION', 'REQUEST_RATE', 'NONE')]
        [string]$mode ,

        [ValidateSet('BURSTY', 'SMOOTH')]
        [string]$limittype ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$selectorname ,

        [ValidateRange(0, 4294967287)]
        [double]$maxbandwidth ,

        [ValidateRange(0, 65535)]
        [double]$trapsintimeslice ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCUpdateNslimitidentifier: Starting"
    }
    process {
        try {
            $Payload = @{
                limitidentifier = $limitidentifier
            }
            if ($PSBoundParameters.ContainsKey('threshold')) { $Payload.Add('threshold', $threshold) }
            if ($PSBoundParameters.ContainsKey('timeslice')) { $Payload.Add('timeslice', $timeslice) }
            if ($PSBoundParameters.ContainsKey('mode')) { $Payload.Add('mode', $mode) }
            if ($PSBoundParameters.ContainsKey('limittype')) { $Payload.Add('limittype', $limittype) }
            if ($PSBoundParameters.ContainsKey('selectorname')) { $Payload.Add('selectorname', $selectorname) }
            if ($PSBoundParameters.ContainsKey('maxbandwidth')) { $Payload.Add('maxbandwidth', $maxbandwidth) }
            if ($PSBoundParameters.ContainsKey('trapsintimeslice')) { $Payload.Add('trapsintimeslice', $trapsintimeslice) }
 
            if ($PSCmdlet.ShouldProcess("nslimitidentifier", "Update NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -Type nslimitidentifier -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetNslimitidentifier -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUpdateNslimitidentifier: Finished"
    }
}

function Invoke-ADCUnsetNslimitidentifier {
<#
    .SYNOPSIS
        Unset NS configuration Object
    .DESCRIPTION
        Unset NS configuration Object 
   .PARAMETER limitidentifier 
       Name for a rate limit identifier. Must begin with an ASCII letter or underscore (_) character, and must consist only of ASCII alphanumeric or underscore characters. Reserved words must not be used. 
   .PARAMETER selectorname 
       Name of the rate limit selector. If this argument is NULL, rate limiting will be applied on all traffic received by the virtual server or the Citrix ADC (depending on whether the limit identifier is bound to a virtual server or globally) without any filtering. 
   .PARAMETER threshold 
       Maximum number of requests that are allowed in the given timeslice when requests (mode is set as REQUEST_RATE) are tracked per timeslice.  
       When connections (mode is set as CONNECTION) are tracked, it is the total number of connections that would be let through. 
   .PARAMETER timeslice 
       Time interval, in milliseconds, specified in multiples of 10, during which requests are tracked to check if they cross the threshold. This argument is needed only when the mode is set to REQUEST_RATE. 
   .PARAMETER mode 
       Defines the type of traffic to be tracked.  
       * REQUEST_RATE - Tracks requests/timeslice.  
       * CONNECTION - Tracks active transactions.  
       Examples  
       1. To permit 20 requests in 10 ms and 2 traps in 10 ms:  
       add limitidentifier limit_req -mode request_rate -limitType smooth -timeslice 1000 -Threshold 2000 -trapsInTimeSlice 200  
       2. To permit 50 requests in 10 ms:  
       set limitidentifier limit_req -mode request_rate -timeslice 1000 -Threshold 5000 -limitType smooth  
       3. To permit 1 request in 40 ms:  
       set limitidentifier limit_req -mode request_rate -timeslice 2000 -Threshold 50 -limitType smooth  
       4. To permit 1 request in 200 ms and 1 trap in 130 ms:  
       set limitidentifier limit_req -mode request_rate -timeslice 1000 -Threshold 5 -limitType smooth -trapsInTimeSlice 8  
       5. To permit 5000 requests in 1000 ms and 200 traps in 1000 ms:  
       set limitidentifier limit_req -mode request_rate -timeslice 1000 -Threshold 5000 -limitType BURSTY.  
       Possible values = CONNECTION, REQUEST_RATE, NONE 
   .PARAMETER limittype 
       Smooth or bursty request type.  
       * SMOOTH - When you want the permitted number of requests in a given interval of time to be spread evenly across the timeslice  
       * BURSTY - When you want the permitted number of requests to exhaust the quota anytime within the timeslice.  
       This argument is needed only when the mode is set to REQUEST_RATE.  
       Possible values = BURSTY, SMOOTH 
   .PARAMETER maxbandwidth 
       Maximum bandwidth permitted, in kbps. 
   .PARAMETER trapsintimeslice 
       Number of traps to be sent in the timeslice configured. A value of 0 indicates that traps are disabled.
    .EXAMPLE
        Invoke-ADCUnsetNslimitidentifier -limitidentifier <string>
    .NOTES
        File Name : Invoke-ADCUnsetNslimitidentifier
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nslimitidentifier
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidatePattern('^(([a-zA-Z0-9]|[_])+([a-zA-Z0-9]|[_])+)$')]
        [string]$limitidentifier ,

        [Boolean]$selectorname ,

        [Boolean]$threshold ,

        [Boolean]$timeslice ,

        [Boolean]$mode ,

        [Boolean]$limittype ,

        [Boolean]$maxbandwidth ,

        [Boolean]$trapsintimeslice 
    )
    begin {
        Write-Verbose "Invoke-ADCUnsetNslimitidentifier: Starting"
    }
    process {
        try {
            $Payload = @{
                limitidentifier = $limitidentifier
            }
            if ($PSBoundParameters.ContainsKey('selectorname')) { $Payload.Add('selectorname', $selectorname) }
            if ($PSBoundParameters.ContainsKey('threshold')) { $Payload.Add('threshold', $threshold) }
            if ($PSBoundParameters.ContainsKey('timeslice')) { $Payload.Add('timeslice', $timeslice) }
            if ($PSBoundParameters.ContainsKey('mode')) { $Payload.Add('mode', $mode) }
            if ($PSBoundParameters.ContainsKey('limittype')) { $Payload.Add('limittype', $limittype) }
            if ($PSBoundParameters.ContainsKey('maxbandwidth')) { $Payload.Add('maxbandwidth', $maxbandwidth) }
            if ($PSBoundParameters.ContainsKey('trapsintimeslice')) { $Payload.Add('trapsintimeslice', $trapsintimeslice) }
            if ($PSCmdlet.ShouldProcess("$limitidentifier", "Unset NS configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nslimitidentifier -Action unset -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUnsetNslimitidentifier: Finished"
    }
}

function Invoke-ADCGetNslimitidentifier {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER limitidentifier 
       Name for a rate limit identifier. Must begin with an ASCII letter or underscore (_) character, and must consist only of ASCII alphanumeric or underscore characters. Reserved words must not be used. 
    .PARAMETER GetAll 
        Retreive all nslimitidentifier object(s)
    .PARAMETER Count
        If specified, the count of the nslimitidentifier object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNslimitidentifier
    .EXAMPLE 
        Invoke-ADCGetNslimitidentifier -GetAll 
    .EXAMPLE 
        Invoke-ADCGetNslimitidentifier -Count
    .EXAMPLE
        Invoke-ADCGetNslimitidentifier -name <string>
    .EXAMPLE
        Invoke-ADCGetNslimitidentifier -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNslimitidentifier
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nslimitidentifier/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidatePattern('^(([a-zA-Z0-9]|[_])+([a-zA-Z0-9]|[_])+)$')]
        [string]$limitidentifier,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll,

        [Parameter(ParameterSetName = 'GetAll')]
        [Parameter(ParameterSetName = 'Get')]
        [Switch]$ViewSummary

    )
    begin {
        Write-Verbose "Invoke-ADCGetNslimitidentifier: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all nslimitidentifier objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nslimitidentifier -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nslimitidentifier objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nslimitidentifier -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nslimitidentifier objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nslimitidentifier -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nslimitidentifier configuration for property 'limitidentifier'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nslimitidentifier -Resource $limitidentifier -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving nslimitidentifier configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nslimitidentifier -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNslimitidentifier: Ended"
    }
}

function Invoke-ADCGetNslimitidentifierbinding {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER limitidentifier 
       Name of the rate limit identifier about which to display information. If a name is not provided, information about all rate limit identifiers is shown. 
    .PARAMETER GetAll 
        Retreive all nslimitidentifier_binding object(s)
    .PARAMETER Count
        If specified, the count of the nslimitidentifier_binding object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNslimitidentifierbinding
    .EXAMPLE 
        Invoke-ADCGetNslimitidentifierbinding -GetAll
    .EXAMPLE
        Invoke-ADCGetNslimitidentifierbinding -name <string>
    .EXAMPLE
        Invoke-ADCGetNslimitidentifierbinding -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNslimitidentifierbinding
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nslimitidentifier_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [string]$limitidentifier,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetNslimitidentifierbinding: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ 
                    bulkbindings = 'yes'
                }
                Write-Verbose "Retrieving all nslimitidentifier_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nslimitidentifier_binding -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nslimitidentifier_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nslimitidentifier_binding -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nslimitidentifier_binding objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nslimitidentifier_binding -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nslimitidentifier_binding configuration for property 'limitidentifier'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nslimitidentifier_binding -Resource $limitidentifier -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving nslimitidentifier_binding configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nslimitidentifier_binding -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNslimitidentifierbinding: Ended"
    }
}

function Invoke-ADCGetNslimitidentifiernslimitsessionsbinding {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER limitidentifier 
       Name of the rate limit identifier about which to display information. If a name is not provided, information about all rate limit identifiers is shown. 
    .PARAMETER GetAll 
        Retreive all nslimitidentifier_nslimitsessions_binding object(s)
    .PARAMETER Count
        If specified, the count of the nslimitidentifier_nslimitsessions_binding object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNslimitidentifiernslimitsessionsbinding
    .EXAMPLE 
        Invoke-ADCGetNslimitidentifiernslimitsessionsbinding -GetAll 
    .EXAMPLE 
        Invoke-ADCGetNslimitidentifiernslimitsessionsbinding -Count
    .EXAMPLE
        Invoke-ADCGetNslimitidentifiernslimitsessionsbinding -name <string>
    .EXAMPLE
        Invoke-ADCGetNslimitidentifiernslimitsessionsbinding -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNslimitidentifiernslimitsessionsbinding
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nslimitidentifier_nslimitsessions_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [string]$limitidentifier,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetNslimitidentifiernslimitsessionsbinding: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ 
                    bulkbindings = 'yes'
                }
                Write-Verbose "Retrieving all nslimitidentifier_nslimitsessions_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nslimitidentifier_nslimitsessions_binding -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nslimitidentifier_nslimitsessions_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nslimitidentifier_nslimitsessions_binding -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nslimitidentifier_nslimitsessions_binding objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nslimitidentifier_nslimitsessions_binding -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nslimitidentifier_nslimitsessions_binding configuration for property 'limitidentifier'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nslimitidentifier_nslimitsessions_binding -Resource $limitidentifier -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving nslimitidentifier_nslimitsessions_binding configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nslimitidentifier_nslimitsessions_binding -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNslimitidentifiernslimitsessionsbinding: Ended"
    }
}

function Invoke-ADCAddNslimitselector {
<#
    .SYNOPSIS
        Add NS configuration Object
    .DESCRIPTION
        Add NS configuration Object 
    .PARAMETER selectorname 
        . 
    .PARAMETER rule 
        .  
        Minimum length = 1 
    .PARAMETER PassThru 
        Return details about the created nslimitselector item.
    .EXAMPLE
        Invoke-ADCAddNslimitselector -selectorname <string> -rule <string[]>
    .NOTES
        File Name : Invoke-ADCAddNslimitselector
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nslimitselector/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$selectorname ,

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string[]]$rule ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddNslimitselector: Starting"
    }
    process {
        try {
            $Payload = @{
                selectorname = $selectorname
                rule = $rule
            }

 
            if ($PSCmdlet.ShouldProcess("nslimitselector", "Add NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nslimitselector -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetNslimitselector -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddNslimitselector: Finished"
    }
}

function Invoke-ADCDeleteNslimitselector {
<#
    .SYNOPSIS
        Delete NS configuration Object
    .DESCRIPTION
        Delete NS configuration Object
    .PARAMETER selectorname 
       . 
    .EXAMPLE
        Invoke-ADCDeleteNslimitselector -selectorname <string>
    .NOTES
        File Name : Invoke-ADCDeleteNslimitselector
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nslimitselector/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$selectorname 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteNslimitselector: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }

            if ($PSCmdlet.ShouldProcess("$selectorname", "Delete NS configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type nslimitselector -Resource $selectorname -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteNslimitselector: Finished"
    }
}

function Invoke-ADCUpdateNslimitselector {
<#
    .SYNOPSIS
        Update NS configuration Object
    .DESCRIPTION
        Update NS configuration Object 
    .PARAMETER selectorname 
        . 
    .PARAMETER rule 
        .  
        Minimum length = 1 
    .PARAMETER PassThru 
        Return details about the created nslimitselector item.
    .EXAMPLE
        Invoke-ADCUpdateNslimitselector -selectorname <string>
    .NOTES
        File Name : Invoke-ADCUpdateNslimitselector
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nslimitselector/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$selectorname ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string[]]$rule ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCUpdateNslimitselector: Starting"
    }
    process {
        try {
            $Payload = @{
                selectorname = $selectorname
            }
            if ($PSBoundParameters.ContainsKey('rule')) { $Payload.Add('rule', $rule) }
 
            if ($PSCmdlet.ShouldProcess("nslimitselector", "Update NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -Type nslimitselector -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetNslimitselector -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUpdateNslimitselector: Finished"
    }
}

function Invoke-ADCUnsetNslimitselector {
<#
    .SYNOPSIS
        Unset NS configuration Object
    .DESCRIPTION
        Unset NS configuration Object 
   .PARAMETER selectorname 
       . 
   .PARAMETER rule 
       .
    .EXAMPLE
        Invoke-ADCUnsetNslimitselector -selectorname <string>
    .NOTES
        File Name : Invoke-ADCUnsetNslimitselector
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nslimitselector
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$selectorname ,

        [Boolean]$rule 
    )
    begin {
        Write-Verbose "Invoke-ADCUnsetNslimitselector: Starting"
    }
    process {
        try {
            $Payload = @{
                selectorname = $selectorname
            }
            if ($PSBoundParameters.ContainsKey('rule')) { $Payload.Add('rule', $rule) }
            if ($PSCmdlet.ShouldProcess("$selectorname", "Unset NS configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nslimitselector -Action unset -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUnsetNslimitselector: Finished"
    }
}

function Invoke-ADCGetNslimitselector {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER selectorname 
       . 
    .PARAMETER GetAll 
        Retreive all nslimitselector object(s)
    .PARAMETER Count
        If specified, the count of the nslimitselector object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNslimitselector
    .EXAMPLE 
        Invoke-ADCGetNslimitselector -GetAll 
    .EXAMPLE 
        Invoke-ADCGetNslimitselector -Count
    .EXAMPLE
        Invoke-ADCGetNslimitselector -name <string>
    .EXAMPLE
        Invoke-ADCGetNslimitselector -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNslimitselector
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nslimitselector/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [string]$selectorname,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll,

        [Parameter(ParameterSetName = 'GetAll')]
        [Parameter(ParameterSetName = 'Get')]
        [Switch]$ViewSummary

    )
    begin {
        Write-Verbose "Invoke-ADCGetNslimitselector: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all nslimitselector objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nslimitselector -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nslimitselector objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nslimitselector -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nslimitselector objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nslimitselector -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nslimitselector configuration for property 'selectorname'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nslimitselector -Resource $selectorname -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving nslimitselector configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nslimitselector -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNslimitselector: Ended"
    }
}

function Invoke-ADCClearNslimitsessions {
<#
    .SYNOPSIS
        Clear NS configuration Object
    .DESCRIPTION
        Clear NS configuration Object 
    .PARAMETER limitidentifier 
        Name of the rate limit identifier for which to display the sessions.
    .EXAMPLE
        Invoke-ADCClearNslimitsessions -limitidentifier <string>
    .NOTES
        File Name : Invoke-ADCClearNslimitsessions
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nslimitsessions/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$limitidentifier 

    )
    begin {
        Write-Verbose "Invoke-ADCClearNslimitsessions: Starting"
    }
    process {
        try {
            $Payload = @{
                limitidentifier = $limitidentifier
            }

            if ($PSCmdlet.ShouldProcess($Name, "Clear NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nslimitsessions -Action clear -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $result
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCClearNslimitsessions: Finished"
    }
}

function Invoke-ADCGetNslimitsessions {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER limitidentifier 
       Name of the rate limit identifier for which to display the sessions. 
    .PARAMETER detail 
       Show the individual hash values. 
    .PARAMETER GetAll 
        Retreive all nslimitsessions object(s)
    .PARAMETER Count
        If specified, the count of the nslimitsessions object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNslimitsessions
    .EXAMPLE 
        Invoke-ADCGetNslimitsessions -GetAll 
    .EXAMPLE 
        Invoke-ADCGetNslimitsessions -Count
    .EXAMPLE
        Invoke-ADCGetNslimitsessions -name <string>
    .EXAMPLE
        Invoke-ADCGetNslimitsessions -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNslimitsessions
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nslimitsessions/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByArgument')]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$limitidentifier ,

        [Parameter(ParameterSetName = 'GetByArgument')]
        [boolean]$detail,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll,

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$ViewSummary

    )
    begin {
        Write-Verbose "Invoke-ADCGetNslimitsessions: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all nslimitsessions objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nslimitsessions -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nslimitsessions objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nslimitsessions -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nslimitsessions objects by arguments"
                $Arguments = @{ } 
                if ($PSBoundParameters.ContainsKey('limitidentifier')) { $Arguments.Add('limitidentifier', $limitidentifier) } 
                if ($PSBoundParameters.ContainsKey('detail')) { $Arguments.Add('detail', $detail) }
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nslimitsessions -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nslimitsessions configuration for property ''"

            } else {
                Write-Verbose "Retrieving nslimitsessions configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nslimitsessions -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNslimitsessions: Ended"
    }
}

function Invoke-ADCGetNsmigration {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER GetAll 
        Retreive all nsmigration object(s)
    .PARAMETER Count
        If specified, the count of the nsmigration object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNsmigration
    .EXAMPLE 
        Invoke-ADCGetNsmigration -GetAll
    .EXAMPLE
        Invoke-ADCGetNsmigration -name <string>
    .EXAMPLE
        Invoke-ADCGetNsmigration -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNsmigration
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsmigration/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetNsmigration: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all nsmigration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsmigration -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nsmigration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsmigration -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nsmigration objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsmigration -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nsmigration configuration for property ''"

            } else {
                Write-Verbose "Retrieving nsmigration configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsmigration -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNsmigration: Ended"
    }
}

function Invoke-ADCEnableNsmode {
<#
    .SYNOPSIS
        Enable NS configuration Object
    .DESCRIPTION
        Enable NS configuration Object 
    .PARAMETER mode 
        Mode to be enabled. Multiple modes can be specified by providing a blank space between each mode.  
        Possible values = FR, FastRamp, L2, L2mode, L3, L3mode, USIP, UseSourceIP, CKA, ClientKeepAlive, TCPB, TCPBuffering, MBF, MACbasedforwarding, Edge, USNIP, SRADV, DRADV, IRADV, SRADV6, DRADV6, PMTUD, RISE_APBR, RISE_RHI, BridgeBPDUs, ULFD
    .EXAMPLE
        Invoke-ADCEnableNsmode 
    .NOTES
        File Name : Invoke-ADCEnableNsmode
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsmode/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [ValidateSet('FR', 'FastRamp', 'L2', 'L2mode', 'L3', 'L3mode', 'USIP', 'UseSourceIP', 'CKA', 'ClientKeepAlive', 'TCPB', 'TCPBuffering', 'MBF', 'MACbasedforwarding', 'Edge', 'USNIP', 'SRADV', 'DRADV', 'IRADV', 'SRADV6', 'DRADV6', 'PMTUD', 'RISE_APBR', 'RISE_RHI', 'BridgeBPDUs', 'ULFD')]
        [string[]]$mode 

    )
    begin {
        Write-Verbose "Invoke-ADCEnableNsmode: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('mode')) { $Payload.Add('mode', $mode) }
            if ($PSCmdlet.ShouldProcess($Name, "Enable NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nsmode -Action enable -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $result
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCEnableNsmode: Finished"
    }
}

function Invoke-ADCDisableNsmode {
<#
    .SYNOPSIS
        Disable NS configuration Object
    .DESCRIPTION
        Disable NS configuration Object 
    .PARAMETER mode 
        Mode to be enabled. Multiple modes can be specified by providing a blank space between each mode.  
        Possible values = FR, FastRamp, L2, L2mode, L3, L3mode, USIP, UseSourceIP, CKA, ClientKeepAlive, TCPB, TCPBuffering, MBF, MACbasedforwarding, Edge, USNIP, SRADV, DRADV, IRADV, SRADV6, DRADV6, PMTUD, RISE_APBR, RISE_RHI, BridgeBPDUs, ULFD
    .EXAMPLE
        Invoke-ADCDisableNsmode 
    .NOTES
        File Name : Invoke-ADCDisableNsmode
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsmode/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [ValidateSet('FR', 'FastRamp', 'L2', 'L2mode', 'L3', 'L3mode', 'USIP', 'UseSourceIP', 'CKA', 'ClientKeepAlive', 'TCPB', 'TCPBuffering', 'MBF', 'MACbasedforwarding', 'Edge', 'USNIP', 'SRADV', 'DRADV', 'IRADV', 'SRADV6', 'DRADV6', 'PMTUD', 'RISE_APBR', 'RISE_RHI', 'BridgeBPDUs', 'ULFD')]
        [string[]]$mode 

    )
    begin {
        Write-Verbose "Invoke-ADCDisableNsmode: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('mode')) { $Payload.Add('mode', $mode) }
            if ($PSCmdlet.ShouldProcess($Name, "Disable NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nsmode -Action disable -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $result
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDisableNsmode: Finished"
    }
}

function Invoke-ADCGetNsmode {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER GetAll 
        Retreive all nsmode object(s)
    .PARAMETER Count
        If specified, the count of the nsmode object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNsmode
    .EXAMPLE 
        Invoke-ADCGetNsmode -GetAll
    .EXAMPLE
        Invoke-ADCGetNsmode -name <string>
    .EXAMPLE
        Invoke-ADCGetNsmode -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNsmode
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsmode/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetNsmode: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all nsmode objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsmode -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nsmode objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsmode -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nsmode objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsmode -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nsmode configuration for property ''"

            } else {
                Write-Verbose "Retrieving nsmode configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsmode -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNsmode: Ended"
    }
}

function Invoke-ADCUpdateNsparam {
<#
    .SYNOPSIS
        Update NS configuration Object
    .DESCRIPTION
        Update NS configuration Object 
    .PARAMETER httpport 
        HTTP ports on the web server. This allows the system to perform connection off-load for any client request that has a destination port matching one of these configured ports.  
        Minimum value = 1  
        Maximum value = 65535 
    .PARAMETER maxconn 
        Maximum number of connections that will be made from the appliance to the web server(s) attached to it. The value entered here is applied globally to all attached servers.  
        Default value: 0  
        Minimum value = 0  
        Maximum value = 4294967294 
    .PARAMETER maxreq 
        Maximum number of requests that the system can pass on a particular connection between the appliance and a server attached to it. Setting this value to 0 allows an unlimited number of requests to be passed. This value is overridden by the maximum number of requests configured on the individual service.  
        Minimum value = 0  
        Maximum value = 65535 
    .PARAMETER cip 
        Enable or disable the insertion of the actual client IP address into the HTTP header request passed from the client to one, some, or all servers attached to the system. The passed address can then be accessed through a minor modification to the server.  
        * If the CIP header is specified, it will be used as the client IP header.  
        * If the CIP header is not specified, the value that has been set will be used as the client IP header.  
        Possible values = ENABLED, DISABLED 
    .PARAMETER cipheader 
        Text that will be used as the client IP address header.  
        Minimum length = 1 
    .PARAMETER cookieversion 
        Version of the cookie inserted by the system.  
        Possible values = 0, 1 
    .PARAMETER securecookie 
        Enable or disable secure flag for persistence cookie.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER pmtumin 
        Minimum path MTU value that Citrix ADC will process in the ICMP fragmentation needed message. If the ICMP message contains a value less than this value, then this value is used instead.  
        Default value: 576  
        Minimum value = 168  
        Maximum value = 1500 
    .PARAMETER pmtutimeout 
        Interval, in minutes, for flushing the PMTU entries.  
        Default value: 10  
        Minimum value = 1  
        Maximum value = 1440 
    .PARAMETER ftpportrange 
        Minimum and maximum port (port range) that FTP services are allowed to use.  
        Minimum length = 1024  
        Maximum length = 64000 
    .PARAMETER crportrange 
        Port range for cache redirection services.  
        Minimum length = 1  
        Maximum length = 65535 
    .PARAMETER timezone 
        Time zone for the Citrix ADC. Name of the time zone should be specified as argument.  
        Default value: CoordinatedUniversalTime  
        Minimum length = 1  
        Maximum length = 63 
    .PARAMETER grantquotamaxclient 
        Percentage of shared quota to be granted at a time for maxClient.  
        Default value: 10  
        Minimum value = 0  
        Maximum value = 100 
    .PARAMETER exclusivequotamaxclient 
        Percentage of maxClient to be given to PEs.  
        Default value: 80  
        Minimum value = 0  
        Maximum value = 100 
    .PARAMETER grantquotaspillover 
        Percentage of shared quota to be granted at a time for spillover.  
        Default value: 10  
        Minimum value = 0  
        Maximum value = 100 
    .PARAMETER exclusivequotaspillover 
        Percentage of maximum limit to be given to PEs.  
        Default value: 80  
        Minimum value = 0  
        Maximum value = 100 
    .PARAMETER useproxyport 
        Enable/Disable use_proxy_port setting.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER internaluserlogin 
        Enables/disables the internal user from logging in to the appliance. Before disabling internal user login, you must have key-based authentication set up on the appliance. The file name for the key pair must be "ns_comm_key".  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER aftpallowrandomsourceport 
        Allow the FTP server to come from a random source port for active FTP data connections.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER icaports 
        The ICA ports on the Web server. This allows the system to perform connection off-load for any  
        client request that has a destination port matching one of these configured ports.  
        Minimum value = 1 
    .PARAMETER tcpcip 
        Enable or disable the insertion of the client TCP/IP header in TCP payload passed from the client to one, some, or all servers attached to the system. The passed address can then be accessed through a minor modification to the server.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER servicepathingressvlan 
        VLAN on which the subscriber traffic arrives on the appliance.  
        Minimum value = 1 
    .PARAMETER secureicaports 
        The Secure ICA ports on the Web server. This allows the system to perform connection off-load for any  
        client request that has a destination port matching one of these configured ports.  
        Minimum value = 1 
    .PARAMETER mgmthttpport 
        This allow the configuration of management HTTP port.  
        Default value: 80  
        Minimum value = 1  
        Maximum value = 65534 
    .PARAMETER mgmthttpsport 
        This allows the configuration of management HTTPS port.  
        Default value: 443  
        Minimum value = 1  
        Maximum value = 65534 
    .PARAMETER proxyprotocol 
        Disable/Enable v1 or v2 proxy protocol header for client info insertion.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER advancedanalyticsstats 
        Disable/Enable advanace analytics stats.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED
    .EXAMPLE
        Invoke-ADCUpdateNsparam 
    .NOTES
        File Name : Invoke-ADCUpdateNsparam
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsparam/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [ValidateRange(1, 65535)]
        [int[]]$httpport ,

        [ValidateRange(0, 4294967294)]
        [double]$maxconn ,

        [ValidateRange(0, 65535)]
        [double]$maxreq ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$cip ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$cipheader ,

        [ValidateSet('0', '1')]
        [string]$cookieversion ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$securecookie ,

        [ValidateRange(168, 1500)]
        [double]$pmtumin ,

        [ValidateRange(1, 1440)]
        [double]$pmtutimeout ,

        [ValidateLength(1024, 64000)]
        [string]$ftpportrange ,

        [ValidateLength(1, 65535)]
        [string]$crportrange ,

        [ValidateLength(1, 63)]
        [string]$timezone ,

        [ValidateRange(0, 100)]
        [double]$grantquotamaxclient ,

        [ValidateRange(0, 100)]
        [double]$exclusivequotamaxclient ,

        [ValidateRange(0, 100)]
        [double]$grantquotaspillover ,

        [ValidateRange(0, 100)]
        [double]$exclusivequotaspillover ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$useproxyport ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$internaluserlogin ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$aftpallowrandomsourceport ,

        [int[]]$icaports ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$tcpcip ,

        [double]$servicepathingressvlan ,

        [int[]]$secureicaports ,

        [ValidateRange(1, 65534)]
        [int]$mgmthttpport ,

        [ValidateRange(1, 65534)]
        [int]$mgmthttpsport ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$proxyprotocol ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$advancedanalyticsstats 

    )
    begin {
        Write-Verbose "Invoke-ADCUpdateNsparam: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('httpport')) { $Payload.Add('httpport', $httpport) }
            if ($PSBoundParameters.ContainsKey('maxconn')) { $Payload.Add('maxconn', $maxconn) }
            if ($PSBoundParameters.ContainsKey('maxreq')) { $Payload.Add('maxreq', $maxreq) }
            if ($PSBoundParameters.ContainsKey('cip')) { $Payload.Add('cip', $cip) }
            if ($PSBoundParameters.ContainsKey('cipheader')) { $Payload.Add('cipheader', $cipheader) }
            if ($PSBoundParameters.ContainsKey('cookieversion')) { $Payload.Add('cookieversion', $cookieversion) }
            if ($PSBoundParameters.ContainsKey('securecookie')) { $Payload.Add('securecookie', $securecookie) }
            if ($PSBoundParameters.ContainsKey('pmtumin')) { $Payload.Add('pmtumin', $pmtumin) }
            if ($PSBoundParameters.ContainsKey('pmtutimeout')) { $Payload.Add('pmtutimeout', $pmtutimeout) }
            if ($PSBoundParameters.ContainsKey('ftpportrange')) { $Payload.Add('ftpportrange', $ftpportrange) }
            if ($PSBoundParameters.ContainsKey('crportrange')) { $Payload.Add('crportrange', $crportrange) }
            if ($PSBoundParameters.ContainsKey('timezone')) { $Payload.Add('timezone', $timezone) }
            if ($PSBoundParameters.ContainsKey('grantquotamaxclient')) { $Payload.Add('grantquotamaxclient', $grantquotamaxclient) }
            if ($PSBoundParameters.ContainsKey('exclusivequotamaxclient')) { $Payload.Add('exclusivequotamaxclient', $exclusivequotamaxclient) }
            if ($PSBoundParameters.ContainsKey('grantquotaspillover')) { $Payload.Add('grantquotaspillover', $grantquotaspillover) }
            if ($PSBoundParameters.ContainsKey('exclusivequotaspillover')) { $Payload.Add('exclusivequotaspillover', $exclusivequotaspillover) }
            if ($PSBoundParameters.ContainsKey('useproxyport')) { $Payload.Add('useproxyport', $useproxyport) }
            if ($PSBoundParameters.ContainsKey('internaluserlogin')) { $Payload.Add('internaluserlogin', $internaluserlogin) }
            if ($PSBoundParameters.ContainsKey('aftpallowrandomsourceport')) { $Payload.Add('aftpallowrandomsourceport', $aftpallowrandomsourceport) }
            if ($PSBoundParameters.ContainsKey('icaports')) { $Payload.Add('icaports', $icaports) }
            if ($PSBoundParameters.ContainsKey('tcpcip')) { $Payload.Add('tcpcip', $tcpcip) }
            if ($PSBoundParameters.ContainsKey('servicepathingressvlan')) { $Payload.Add('servicepathingressvlan', $servicepathingressvlan) }
            if ($PSBoundParameters.ContainsKey('secureicaports')) { $Payload.Add('secureicaports', $secureicaports) }
            if ($PSBoundParameters.ContainsKey('mgmthttpport')) { $Payload.Add('mgmthttpport', $mgmthttpport) }
            if ($PSBoundParameters.ContainsKey('mgmthttpsport')) { $Payload.Add('mgmthttpsport', $mgmthttpsport) }
            if ($PSBoundParameters.ContainsKey('proxyprotocol')) { $Payload.Add('proxyprotocol', $proxyprotocol) }
            if ($PSBoundParameters.ContainsKey('advancedanalyticsstats')) { $Payload.Add('advancedanalyticsstats', $advancedanalyticsstats) }
 
            if ($PSCmdlet.ShouldProcess("nsparam", "Update NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -Type nsparam -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
            Write-Output $result

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUpdateNsparam: Finished"
    }
}

function Invoke-ADCUnsetNsparam {
<#
    .SYNOPSIS
        Unset NS configuration Object
    .DESCRIPTION
        Unset NS configuration Object 
   .PARAMETER ftpportrange 
       Minimum and maximum port (port range) that FTP services are allowed to use. 
   .PARAMETER crportrange 
       Port range for cache redirection services. 
   .PARAMETER aftpallowrandomsourceport 
       Allow the FTP server to come from a random source port for active FTP data connections.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER httpport 
       HTTP ports on the web server. This allows the system to perform connection off-load for any client request that has a destination port matching one of these configured ports. 
   .PARAMETER maxconn 
       Maximum number of connections that will be made from the appliance to the web server(s) attached to it. The value entered here is applied globally to all attached servers. 
   .PARAMETER maxreq 
       Maximum number of requests that the system can pass on a particular connection between the appliance and a server attached to it. Setting this value to 0 allows an unlimited number of requests to be passed. This value is overridden by the maximum number of requests configured on the individual service. 
   .PARAMETER cip 
       Enable or disable the insertion of the actual client IP address into the HTTP header request passed from the client to one, some, or all servers attached to the system. The passed address can then be accessed through a minor modification to the server.  
       * If the CIP header is specified, it will be used as the client IP header.  
       * If the CIP header is not specified, the value that has been set will be used as the client IP header.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER cipheader 
       Text that will be used as the client IP address header. 
   .PARAMETER cookieversion 
       Version of the cookie inserted by the system.  
       Possible values = 0, 1 
   .PARAMETER securecookie 
       Enable or disable secure flag for persistence cookie.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER pmtumin 
       Minimum path MTU value that Citrix ADC will process in the ICMP fragmentation needed message. If the ICMP message contains a value less than this value, then this value is used instead. 
   .PARAMETER pmtutimeout 
       Interval, in minutes, for flushing the PMTU entries. 
   .PARAMETER timezone 
       Time zone for the Citrix ADC. Name of the time zone should be specified as argument. 
   .PARAMETER grantquotamaxclient 
       Percentage of shared quota to be granted at a time for maxClient. 
   .PARAMETER exclusivequotamaxclient 
       Percentage of maxClient to be given to PEs. 
   .PARAMETER grantquotaspillover 
       Percentage of shared quota to be granted at a time for spillover. 
   .PARAMETER exclusivequotaspillover 
       Percentage of maximum limit to be given to PEs. 
   .PARAMETER useproxyport 
       Enable/Disable use_proxy_port setting.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER internaluserlogin 
       Enables/disables the internal user from logging in to the appliance. Before disabling internal user login, you must have key-based authentication set up on the appliance. The file name for the key pair must be "ns_comm_key".  
       Possible values = ENABLED, DISABLED 
   .PARAMETER icaports 
       The ICA ports on the Web server. This allows the system to perform connection off-load for any  
       client request that has a destination port matching one of these configured ports. 
   .PARAMETER tcpcip 
       Enable or disable the insertion of the client TCP/IP header in TCP payload passed from the client to one, some, or all servers attached to the system. The passed address can then be accessed through a minor modification to the server.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER servicepathingressvlan 
       VLAN on which the subscriber traffic arrives on the appliance. 
   .PARAMETER secureicaports 
       The Secure ICA ports on the Web server. This allows the system to perform connection off-load for any  
       client request that has a destination port matching one of these configured ports. 
   .PARAMETER mgmthttpport 
       This allow the configuration of management HTTP port. 
   .PARAMETER mgmthttpsport 
       This allows the configuration of management HTTPS port. 
   .PARAMETER proxyprotocol 
       Disable/Enable v1 or v2 proxy protocol header for client info insertion.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER advancedanalyticsstats 
       Disable/Enable advanace analytics stats.  
       Possible values = ENABLED, DISABLED
    .EXAMPLE
        Invoke-ADCUnsetNsparam 
    .NOTES
        File Name : Invoke-ADCUnsetNsparam
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsparam
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Boolean]$ftpportrange ,

        [Boolean]$crportrange ,

        [Boolean]$aftpallowrandomsourceport ,

        [Boolean]$httpport ,

        [Boolean]$maxconn ,

        [Boolean]$maxreq ,

        [Boolean]$cip ,

        [Boolean]$cipheader ,

        [Boolean]$cookieversion ,

        [Boolean]$securecookie ,

        [Boolean]$pmtumin ,

        [Boolean]$pmtutimeout ,

        [Boolean]$timezone ,

        [Boolean]$grantquotamaxclient ,

        [Boolean]$exclusivequotamaxclient ,

        [Boolean]$grantquotaspillover ,

        [Boolean]$exclusivequotaspillover ,

        [Boolean]$useproxyport ,

        [Boolean]$internaluserlogin ,

        [Boolean]$icaports ,

        [Boolean]$tcpcip ,

        [Boolean]$servicepathingressvlan ,

        [Boolean]$secureicaports ,

        [Boolean]$mgmthttpport ,

        [Boolean]$mgmthttpsport ,

        [Boolean]$proxyprotocol ,

        [Boolean]$advancedanalyticsstats 
    )
    begin {
        Write-Verbose "Invoke-ADCUnsetNsparam: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('ftpportrange')) { $Payload.Add('ftpportrange', $ftpportrange) }
            if ($PSBoundParameters.ContainsKey('crportrange')) { $Payload.Add('crportrange', $crportrange) }
            if ($PSBoundParameters.ContainsKey('aftpallowrandomsourceport')) { $Payload.Add('aftpallowrandomsourceport', $aftpallowrandomsourceport) }
            if ($PSBoundParameters.ContainsKey('httpport')) { $Payload.Add('httpport', $httpport) }
            if ($PSBoundParameters.ContainsKey('maxconn')) { $Payload.Add('maxconn', $maxconn) }
            if ($PSBoundParameters.ContainsKey('maxreq')) { $Payload.Add('maxreq', $maxreq) }
            if ($PSBoundParameters.ContainsKey('cip')) { $Payload.Add('cip', $cip) }
            if ($PSBoundParameters.ContainsKey('cipheader')) { $Payload.Add('cipheader', $cipheader) }
            if ($PSBoundParameters.ContainsKey('cookieversion')) { $Payload.Add('cookieversion', $cookieversion) }
            if ($PSBoundParameters.ContainsKey('securecookie')) { $Payload.Add('securecookie', $securecookie) }
            if ($PSBoundParameters.ContainsKey('pmtumin')) { $Payload.Add('pmtumin', $pmtumin) }
            if ($PSBoundParameters.ContainsKey('pmtutimeout')) { $Payload.Add('pmtutimeout', $pmtutimeout) }
            if ($PSBoundParameters.ContainsKey('timezone')) { $Payload.Add('timezone', $timezone) }
            if ($PSBoundParameters.ContainsKey('grantquotamaxclient')) { $Payload.Add('grantquotamaxclient', $grantquotamaxclient) }
            if ($PSBoundParameters.ContainsKey('exclusivequotamaxclient')) { $Payload.Add('exclusivequotamaxclient', $exclusivequotamaxclient) }
            if ($PSBoundParameters.ContainsKey('grantquotaspillover')) { $Payload.Add('grantquotaspillover', $grantquotaspillover) }
            if ($PSBoundParameters.ContainsKey('exclusivequotaspillover')) { $Payload.Add('exclusivequotaspillover', $exclusivequotaspillover) }
            if ($PSBoundParameters.ContainsKey('useproxyport')) { $Payload.Add('useproxyport', $useproxyport) }
            if ($PSBoundParameters.ContainsKey('internaluserlogin')) { $Payload.Add('internaluserlogin', $internaluserlogin) }
            if ($PSBoundParameters.ContainsKey('icaports')) { $Payload.Add('icaports', $icaports) }
            if ($PSBoundParameters.ContainsKey('tcpcip')) { $Payload.Add('tcpcip', $tcpcip) }
            if ($PSBoundParameters.ContainsKey('servicepathingressvlan')) { $Payload.Add('servicepathingressvlan', $servicepathingressvlan) }
            if ($PSBoundParameters.ContainsKey('secureicaports')) { $Payload.Add('secureicaports', $secureicaports) }
            if ($PSBoundParameters.ContainsKey('mgmthttpport')) { $Payload.Add('mgmthttpport', $mgmthttpport) }
            if ($PSBoundParameters.ContainsKey('mgmthttpsport')) { $Payload.Add('mgmthttpsport', $mgmthttpsport) }
            if ($PSBoundParameters.ContainsKey('proxyprotocol')) { $Payload.Add('proxyprotocol', $proxyprotocol) }
            if ($PSBoundParameters.ContainsKey('advancedanalyticsstats')) { $Payload.Add('advancedanalyticsstats', $advancedanalyticsstats) }
            if ($PSCmdlet.ShouldProcess("nsparam", "Unset NS configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nsparam -Action unset -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUnsetNsparam: Finished"
    }
}

function Invoke-ADCGetNsparam {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER GetAll 
        Retreive all nsparam object(s)
    .PARAMETER Count
        If specified, the count of the nsparam object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNsparam
    .EXAMPLE 
        Invoke-ADCGetNsparam -GetAll
    .EXAMPLE
        Invoke-ADCGetNsparam -name <string>
    .EXAMPLE
        Invoke-ADCGetNsparam -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNsparam
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsparam/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetNsparam: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all nsparam objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsparam -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nsparam objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsparam -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nsparam objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsparam -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nsparam configuration for property ''"

            } else {
                Write-Verbose "Retrieving nsparam configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsparam -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNsparam: Ended"
    }
}

function Invoke-ADCAddNspartition {
<#
    .SYNOPSIS
        Add NS configuration Object
    .DESCRIPTION
        Add NS configuration Object 
    .PARAMETER partitionname 
        Name of the Partition. Must begin with an ASCII alphanumeric or underscore (_) character, and must contain only ASCII alphanumeric, underscore, hash (#), period (.), space, colon (:), at (@), equals (=), and hyphen (-) characters.  
        Minimum length = 1 
    .PARAMETER maxbandwidth 
        Maximum bandwidth, in Kbps, that the partition can consume. A zero value indicates the bandwidth is unrestricted on the partition and it can consume up to the system limits.  
        Default value: 10240 
    .PARAMETER minbandwidth 
        Minimum bandwidth, in Kbps, that the partition can consume. A zero value indicates the bandwidth is unrestricted on the partition and it can consume up to the system limits.  
        Default value: 10240 
    .PARAMETER maxconn 
        Maximum number of concurrent connections that can be open in the partition. A zero value indicates no limit on number of open connections.  
        Default value: 1024 
    .PARAMETER maxmemlimit 
        Maximum memory, in megabytes, allocated to the partition. A zero value indicates the memory is unlimited on the partition and it can consume up to the system limits.  
        Default value: 10  
        Minimum value = 0  
        Maximum value = 1048576 
    .PARAMETER partitionmac 
        Special MAC address for the partition which is used for communication over shared vlans in this partition. If not specified, the MAC address is auto-generated. 
    .PARAMETER PassThru 
        Return details about the created nspartition item.
    .EXAMPLE
        Invoke-ADCAddNspartition -partitionname <string>
    .NOTES
        File Name : Invoke-ADCAddNspartition
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nspartition/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [ValidatePattern('^(([a-zA-Z0-9]|[_])+([a-zA-Z0-9]|[_])+)$')]
        [string]$partitionname ,

        [double]$maxbandwidth = '10240' ,

        [double]$minbandwidth = '10240' ,

        [double]$maxconn = '1024' ,

        [ValidateRange(0, 1048576)]
        [double]$maxmemlimit = '10' ,

        [string]$partitionmac ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddNspartition: Starting"
    }
    process {
        try {
            $Payload = @{
                partitionname = $partitionname
            }
            if ($PSBoundParameters.ContainsKey('maxbandwidth')) { $Payload.Add('maxbandwidth', $maxbandwidth) }
            if ($PSBoundParameters.ContainsKey('minbandwidth')) { $Payload.Add('minbandwidth', $minbandwidth) }
            if ($PSBoundParameters.ContainsKey('maxconn')) { $Payload.Add('maxconn', $maxconn) }
            if ($PSBoundParameters.ContainsKey('maxmemlimit')) { $Payload.Add('maxmemlimit', $maxmemlimit) }
            if ($PSBoundParameters.ContainsKey('partitionmac')) { $Payload.Add('partitionmac', $partitionmac) }
 
            if ($PSCmdlet.ShouldProcess("nspartition", "Add NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nspartition -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetNspartition -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddNspartition: Finished"
    }
}

function Invoke-ADCDeleteNspartition {
<#
    .SYNOPSIS
        Delete NS configuration Object
    .DESCRIPTION
        Delete NS configuration Object
    .PARAMETER partitionname 
       Name of the Partition. Must begin with an ASCII alphanumeric or underscore (_) character, and must contain only ASCII alphanumeric, underscore, hash (#), period (.), space, colon (:), at (@), equals (=), and hyphen (-) characters.  
       Minimum length = 1 
    .EXAMPLE
        Invoke-ADCDeleteNspartition -partitionname <string>
    .NOTES
        File Name : Invoke-ADCDeleteNspartition
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nspartition/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$partitionname 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteNspartition: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }

            if ($PSCmdlet.ShouldProcess("$partitionname", "Delete NS configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type nspartition -Resource $partitionname -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteNspartition: Finished"
    }
}

function Invoke-ADCUpdateNspartition {
<#
    .SYNOPSIS
        Update NS configuration Object
    .DESCRIPTION
        Update NS configuration Object 
    .PARAMETER partitionname 
        Name of the Partition. Must begin with an ASCII alphanumeric or underscore (_) character, and must contain only ASCII alphanumeric, underscore, hash (#), period (.), space, colon (:), at (@), equals (=), and hyphen (-) characters.  
        Minimum length = 1 
    .PARAMETER maxbandwidth 
        Maximum bandwidth, in Kbps, that the partition can consume. A zero value indicates the bandwidth is unrestricted on the partition and it can consume up to the system limits.  
        Default value: 10240 
    .PARAMETER minbandwidth 
        Minimum bandwidth, in Kbps, that the partition can consume. A zero value indicates the bandwidth is unrestricted on the partition and it can consume up to the system limits.  
        Default value: 10240 
    .PARAMETER maxconn 
        Maximum number of concurrent connections that can be open in the partition. A zero value indicates no limit on number of open connections.  
        Default value: 1024 
    .PARAMETER maxmemlimit 
        Maximum memory, in megabytes, allocated to the partition. A zero value indicates the memory is unlimited on the partition and it can consume up to the system limits.  
        Default value: 10  
        Minimum value = 0  
        Maximum value = 1048576 
    .PARAMETER partitionmac 
        Special MAC address for the partition which is used for communication over shared vlans in this partition. If not specified, the MAC address is auto-generated. 
    .PARAMETER PassThru 
        Return details about the created nspartition item.
    .EXAMPLE
        Invoke-ADCUpdateNspartition -partitionname <string>
    .NOTES
        File Name : Invoke-ADCUpdateNspartition
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nspartition/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [ValidatePattern('^(([a-zA-Z0-9]|[_])+([a-zA-Z0-9]|[_])+)$')]
        [string]$partitionname ,

        [double]$maxbandwidth ,

        [double]$minbandwidth ,

        [double]$maxconn ,

        [ValidateRange(0, 1048576)]
        [double]$maxmemlimit ,

        [string]$partitionmac ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCUpdateNspartition: Starting"
    }
    process {
        try {
            $Payload = @{
                partitionname = $partitionname
            }
            if ($PSBoundParameters.ContainsKey('maxbandwidth')) { $Payload.Add('maxbandwidth', $maxbandwidth) }
            if ($PSBoundParameters.ContainsKey('minbandwidth')) { $Payload.Add('minbandwidth', $minbandwidth) }
            if ($PSBoundParameters.ContainsKey('maxconn')) { $Payload.Add('maxconn', $maxconn) }
            if ($PSBoundParameters.ContainsKey('maxmemlimit')) { $Payload.Add('maxmemlimit', $maxmemlimit) }
            if ($PSBoundParameters.ContainsKey('partitionmac')) { $Payload.Add('partitionmac', $partitionmac) }
 
            if ($PSCmdlet.ShouldProcess("nspartition", "Update NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -Type nspartition -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetNspartition -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUpdateNspartition: Finished"
    }
}

function Invoke-ADCUnsetNspartition {
<#
    .SYNOPSIS
        Unset NS configuration Object
    .DESCRIPTION
        Unset NS configuration Object 
   .PARAMETER partitionname 
       Name of the Partition. Must begin with an ASCII alphanumeric or underscore (_) character, and must contain only ASCII alphanumeric, underscore, hash (#), period (.), space, colon (:), at (@), equals (=), and hyphen (-) characters. 
   .PARAMETER maxbandwidth 
       Maximum bandwidth, in Kbps, that the partition can consume. A zero value indicates the bandwidth is unrestricted on the partition and it can consume up to the system limits. 
   .PARAMETER minbandwidth 
       Minimum bandwidth, in Kbps, that the partition can consume. A zero value indicates the bandwidth is unrestricted on the partition and it can consume up to the system limits. 
   .PARAMETER maxconn 
       Maximum number of concurrent connections that can be open in the partition. A zero value indicates no limit on number of open connections. 
   .PARAMETER maxmemlimit 
       Maximum memory, in megabytes, allocated to the partition. A zero value indicates the memory is unlimited on the partition and it can consume up to the system limits. 
   .PARAMETER partitionmac 
       Special MAC address for the partition which is used for communication over shared vlans in this partition. If not specified, the MAC address is auto-generated.
    .EXAMPLE
        Invoke-ADCUnsetNspartition -partitionname <string>
    .NOTES
        File Name : Invoke-ADCUnsetNspartition
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nspartition
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [ValidatePattern('^(([a-zA-Z0-9]|[_])+([a-zA-Z0-9]|[_])+)$')]
        [string]$partitionname ,

        [Boolean]$maxbandwidth ,

        [Boolean]$minbandwidth ,

        [Boolean]$maxconn ,

        [Boolean]$maxmemlimit ,

        [Boolean]$partitionmac 
    )
    begin {
        Write-Verbose "Invoke-ADCUnsetNspartition: Starting"
    }
    process {
        try {
            $Payload = @{
                partitionname = $partitionname
            }
            if ($PSBoundParameters.ContainsKey('maxbandwidth')) { $Payload.Add('maxbandwidth', $maxbandwidth) }
            if ($PSBoundParameters.ContainsKey('minbandwidth')) { $Payload.Add('minbandwidth', $minbandwidth) }
            if ($PSBoundParameters.ContainsKey('maxconn')) { $Payload.Add('maxconn', $maxconn) }
            if ($PSBoundParameters.ContainsKey('maxmemlimit')) { $Payload.Add('maxmemlimit', $maxmemlimit) }
            if ($PSBoundParameters.ContainsKey('partitionmac')) { $Payload.Add('partitionmac', $partitionmac) }
            if ($PSCmdlet.ShouldProcess("$partitionname", "Unset NS configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nspartition -Action unset -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUnsetNspartition: Finished"
    }
}

function Invoke-ADCSwitchNspartition {
<#
    .SYNOPSIS
        Switch NS configuration Object
    .DESCRIPTION
        Switch NS configuration Object 
    .PARAMETER partitionname 
        Name of the Partition. Must begin with an ASCII alphanumeric or underscore (_) character, and must contain only ASCII alphanumeric, underscore, hash (#), period (.), space, colon (:), at (@), equals (=), and hyphen (-) characters.  
        Minimum length = 1 
    .PARAMETER PassThru 
        Return details about the created nspartition item.
    .EXAMPLE
        Invoke-ADCSwitchNspartition -partitionname <string>
    .NOTES
        File Name : Invoke-ADCSwitchNspartition
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nspartition/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [ValidatePattern('^(([a-zA-Z0-9]|[_])+([a-zA-Z0-9]|[_])+)$')]
        [string]$partitionname ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCSwitchNspartition: Starting"
    }
    process {
        try {
            $Payload = @{
                partitionname = $partitionname
            }

 
            if ($PSCmdlet.ShouldProcess("nspartition", "Switch NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nspartition -Action switch -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetNspartition -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCSwitchNspartition: Finished"
    }
}

function Invoke-ADCGetNspartition {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER partitionname 
       Name of the Partition. Must begin with an ASCII alphanumeric or underscore (_) character, and must contain only ASCII alphanumeric, underscore, hash (#), period (.), space, colon (:), at (@), equals (=), and hyphen (-) characters. 
    .PARAMETER GetAll 
        Retreive all nspartition object(s)
    .PARAMETER Count
        If specified, the count of the nspartition object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNspartition
    .EXAMPLE 
        Invoke-ADCGetNspartition -GetAll 
    .EXAMPLE 
        Invoke-ADCGetNspartition -Count
    .EXAMPLE
        Invoke-ADCGetNspartition -name <string>
    .EXAMPLE
        Invoke-ADCGetNspartition -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNspartition
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nspartition/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateScript({ $_.Length -gt 1 })]
        [ValidatePattern('^(([a-zA-Z0-9]|[_])+([a-zA-Z0-9]|[_])+)$')]
        [string]$partitionname,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll,

        [Parameter(ParameterSetName = 'GetAll')]
        [Parameter(ParameterSetName = 'Get')]
        [Switch]$ViewSummary

    )
    begin {
        Write-Verbose "Invoke-ADCGetNspartition: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all nspartition objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nspartition -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nspartition objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nspartition -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nspartition objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nspartition -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nspartition configuration for property 'partitionname'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nspartition -Resource $partitionname -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving nspartition configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nspartition -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNspartition: Ended"
    }
}

function Invoke-ADCGetNspartitionmac {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER GetAll 
        Retreive all nspartitionmac object(s)
    .PARAMETER Count
        If specified, the count of the nspartitionmac object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNspartitionmac
    .EXAMPLE 
        Invoke-ADCGetNspartitionmac -GetAll 
    .EXAMPLE 
        Invoke-ADCGetNspartitionmac -Count
    .EXAMPLE
        Invoke-ADCGetNspartitionmac -name <string>
    .EXAMPLE
        Invoke-ADCGetNspartitionmac -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNspartitionmac
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nspartitionmac/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll,

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$ViewSummary

    )
    begin {
        Write-Verbose "Invoke-ADCGetNspartitionmac: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all nspartitionmac objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nspartitionmac -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nspartitionmac objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nspartitionmac -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nspartitionmac objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nspartitionmac -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nspartitionmac configuration for property ''"

            } else {
                Write-Verbose "Retrieving nspartitionmac configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nspartitionmac -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNspartitionmac: Ended"
    }
}

function Invoke-ADCGetNspartitionbinding {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER partitionname 
       Name of partition for which to display parameters. 
    .PARAMETER GetAll 
        Retreive all nspartition_binding object(s)
    .PARAMETER Count
        If specified, the count of the nspartition_binding object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNspartitionbinding
    .EXAMPLE 
        Invoke-ADCGetNspartitionbinding -GetAll
    .EXAMPLE
        Invoke-ADCGetNspartitionbinding -name <string>
    .EXAMPLE
        Invoke-ADCGetNspartitionbinding -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNspartitionbinding
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nspartition_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$partitionname,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetNspartitionbinding: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ 
                    bulkbindings = 'yes'
                }
                Write-Verbose "Retrieving all nspartition_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nspartition_binding -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nspartition_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nspartition_binding -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nspartition_binding objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nspartition_binding -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nspartition_binding configuration for property 'partitionname'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nspartition_binding -Resource $partitionname -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving nspartition_binding configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nspartition_binding -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNspartitionbinding: Ended"
    }
}

function Invoke-ADCAddNspartitionbridgegroupbinding {
<#
    .SYNOPSIS
        Add NS configuration Object
    .DESCRIPTION
        Add NS configuration Object 
    .PARAMETER partitionname 
        Name of the Partition. Must begin with an ASCII alphanumeric or underscore (_) character, and must contain only ASCII alphanumeric, underscore, hash (#), period (.), space, colon (:), at (@), equals (=), and hyphen (-) characters.  
        Minimum length = 1 
    .PARAMETER bridgegroup 
        Identifier of the bridge group that is assigned to this partition.  
        Minimum value = 1  
        Maximum value = 1000 
    .PARAMETER PassThru 
        Return details about the created nspartition_bridgegroup_binding item.
    .EXAMPLE
        Invoke-ADCAddNspartitionbridgegroupbinding -partitionname <string>
    .NOTES
        File Name : Invoke-ADCAddNspartitionbridgegroupbinding
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nspartition_bridgegroup_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [ValidatePattern('^(([a-zA-Z0-9]|[_])+([a-zA-Z0-9]|[_])+)$')]
        [string]$partitionname ,

        [ValidateRange(1, 1000)]
        [double]$bridgegroup ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddNspartitionbridgegroupbinding: Starting"
    }
    process {
        try {
            $Payload = @{
                partitionname = $partitionname
            }
            if ($PSBoundParameters.ContainsKey('bridgegroup')) { $Payload.Add('bridgegroup', $bridgegroup) }
 
            if ($PSCmdlet.ShouldProcess("nspartition_bridgegroup_binding", "Add NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -Type nspartition_bridgegroup_binding -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetNspartitionbridgegroupbinding -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddNspartitionbridgegroupbinding: Finished"
    }
}

function Invoke-ADCDeleteNspartitionbridgegroupbinding {
<#
    .SYNOPSIS
        Delete NS configuration Object
    .DESCRIPTION
        Delete NS configuration Object
    .PARAMETER partitionname 
       Name of the Partition. Must begin with an ASCII alphanumeric or underscore (_) character, and must contain only ASCII alphanumeric, underscore, hash (#), period (.), space, colon (:), at (@), equals (=), and hyphen (-) characters.  
       Minimum length = 1    .PARAMETER bridgegroup 
       Identifier of the bridge group that is assigned to this partition.  
       Minimum value = 1  
       Maximum value = 1000
    .EXAMPLE
        Invoke-ADCDeleteNspartitionbridgegroupbinding -partitionname <string>
    .NOTES
        File Name : Invoke-ADCDeleteNspartitionbridgegroupbinding
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nspartition_bridgegroup_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$partitionname ,

        [double]$bridgegroup 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteNspartitionbridgegroupbinding: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }
            if ($PSBoundParameters.ContainsKey('bridgegroup')) { $Arguments.Add('bridgegroup', $bridgegroup) }
            if ($PSCmdlet.ShouldProcess("$partitionname", "Delete NS configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type nspartition_bridgegroup_binding -Resource $partitionname -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteNspartitionbridgegroupbinding: Finished"
    }
}

function Invoke-ADCGetNspartitionbridgegroupbinding {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER partitionname 
       Name of the Partition. Must begin with an ASCII alphanumeric or underscore (_) character, and must contain only ASCII alphanumeric, underscore, hash (#), period (.), space, colon (:), at (@), equals (=), and hyphen (-) characters. 
    .PARAMETER GetAll 
        Retreive all nspartition_bridgegroup_binding object(s)
    .PARAMETER Count
        If specified, the count of the nspartition_bridgegroup_binding object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNspartitionbridgegroupbinding
    .EXAMPLE 
        Invoke-ADCGetNspartitionbridgegroupbinding -GetAll 
    .EXAMPLE 
        Invoke-ADCGetNspartitionbridgegroupbinding -Count
    .EXAMPLE
        Invoke-ADCGetNspartitionbridgegroupbinding -name <string>
    .EXAMPLE
        Invoke-ADCGetNspartitionbridgegroupbinding -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNspartitionbridgegroupbinding
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nspartition_bridgegroup_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateScript({ $_.Length -gt 1 })]
        [ValidatePattern('^(([a-zA-Z0-9]|[_])+([a-zA-Z0-9]|[_])+)$')]
        [string]$partitionname,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetNspartitionbridgegroupbinding: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ 
                    bulkbindings = 'yes'
                }
                Write-Verbose "Retrieving all nspartition_bridgegroup_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nspartition_bridgegroup_binding -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nspartition_bridgegroup_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nspartition_bridgegroup_binding -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nspartition_bridgegroup_binding objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nspartition_bridgegroup_binding -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nspartition_bridgegroup_binding configuration for property 'partitionname'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nspartition_bridgegroup_binding -Resource $partitionname -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving nspartition_bridgegroup_binding configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nspartition_bridgegroup_binding -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNspartitionbridgegroupbinding: Ended"
    }
}

function Invoke-ADCAddNspartitionvlanbinding {
<#
    .SYNOPSIS
        Add NS configuration Object
    .DESCRIPTION
        Add NS configuration Object 
    .PARAMETER partitionname 
        Name of the Partition. Must begin with an ASCII alphanumeric or underscore (_) character, and must contain only ASCII alphanumeric, underscore, hash (#), period (.), space, colon (:), at (@), equals (=), and hyphen (-) characters.  
        Minimum length = 1 
    .PARAMETER vlan 
        Identifier of the vlan that is assigned to this partition.  
        Minimum value = 1  
        Maximum value = 4094 
    .PARAMETER PassThru 
        Return details about the created nspartition_vlan_binding item.
    .EXAMPLE
        Invoke-ADCAddNspartitionvlanbinding -partitionname <string>
    .NOTES
        File Name : Invoke-ADCAddNspartitionvlanbinding
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nspartition_vlan_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [ValidatePattern('^(([a-zA-Z0-9]|[_])+([a-zA-Z0-9]|[_])+)$')]
        [string]$partitionname ,

        [ValidateRange(1, 4094)]
        [double]$vlan ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddNspartitionvlanbinding: Starting"
    }
    process {
        try {
            $Payload = @{
                partitionname = $partitionname
            }
            if ($PSBoundParameters.ContainsKey('vlan')) { $Payload.Add('vlan', $vlan) }
 
            if ($PSCmdlet.ShouldProcess("nspartition_vlan_binding", "Add NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -Type nspartition_vlan_binding -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetNspartitionvlanbinding -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddNspartitionvlanbinding: Finished"
    }
}

function Invoke-ADCDeleteNspartitionvlanbinding {
<#
    .SYNOPSIS
        Delete NS configuration Object
    .DESCRIPTION
        Delete NS configuration Object
    .PARAMETER partitionname 
       Name of the Partition. Must begin with an ASCII alphanumeric or underscore (_) character, and must contain only ASCII alphanumeric, underscore, hash (#), period (.), space, colon (:), at (@), equals (=), and hyphen (-) characters.  
       Minimum length = 1    .PARAMETER vlan 
       Identifier of the vlan that is assigned to this partition.  
       Minimum value = 1  
       Maximum value = 4094
    .EXAMPLE
        Invoke-ADCDeleteNspartitionvlanbinding -partitionname <string>
    .NOTES
        File Name : Invoke-ADCDeleteNspartitionvlanbinding
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nspartition_vlan_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$partitionname ,

        [double]$vlan 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteNspartitionvlanbinding: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }
            if ($PSBoundParameters.ContainsKey('vlan')) { $Arguments.Add('vlan', $vlan) }
            if ($PSCmdlet.ShouldProcess("$partitionname", "Delete NS configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type nspartition_vlan_binding -Resource $partitionname -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteNspartitionvlanbinding: Finished"
    }
}

function Invoke-ADCGetNspartitionvlanbinding {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER partitionname 
       Name of the Partition. Must begin with an ASCII alphanumeric or underscore (_) character, and must contain only ASCII alphanumeric, underscore, hash (#), period (.), space, colon (:), at (@), equals (=), and hyphen (-) characters. 
    .PARAMETER GetAll 
        Retreive all nspartition_vlan_binding object(s)
    .PARAMETER Count
        If specified, the count of the nspartition_vlan_binding object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNspartitionvlanbinding
    .EXAMPLE 
        Invoke-ADCGetNspartitionvlanbinding -GetAll 
    .EXAMPLE 
        Invoke-ADCGetNspartitionvlanbinding -Count
    .EXAMPLE
        Invoke-ADCGetNspartitionvlanbinding -name <string>
    .EXAMPLE
        Invoke-ADCGetNspartitionvlanbinding -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNspartitionvlanbinding
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nspartition_vlan_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateScript({ $_.Length -gt 1 })]
        [ValidatePattern('^(([a-zA-Z0-9]|[_])+([a-zA-Z0-9]|[_])+)$')]
        [string]$partitionname,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetNspartitionvlanbinding: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ 
                    bulkbindings = 'yes'
                }
                Write-Verbose "Retrieving all nspartition_vlan_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nspartition_vlan_binding -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nspartition_vlan_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nspartition_vlan_binding -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nspartition_vlan_binding objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nspartition_vlan_binding -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nspartition_vlan_binding configuration for property 'partitionname'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nspartition_vlan_binding -Resource $partitionname -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving nspartition_vlan_binding configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nspartition_vlan_binding -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNspartitionvlanbinding: Ended"
    }
}

function Invoke-ADCAddNspartitionvxlanbinding {
<#
    .SYNOPSIS
        Add NS configuration Object
    .DESCRIPTION
        Add NS configuration Object 
    .PARAMETER partitionname 
        Name of the Partition. Must begin with an ASCII alphanumeric or underscore (_) character, and must contain only ASCII alphanumeric, underscore, hash (#), period (.), space, colon (:), at (@), equals (=), and hyphen (-) characters.  
        Minimum length = 1 
    .PARAMETER vxlan 
        Identifier of the vxlan that is assigned to this partition.  
        Minimum value = 1  
        Maximum value = 16777215 
    .PARAMETER PassThru 
        Return details about the created nspartition_vxlan_binding item.
    .EXAMPLE
        Invoke-ADCAddNspartitionvxlanbinding -partitionname <string>
    .NOTES
        File Name : Invoke-ADCAddNspartitionvxlanbinding
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nspartition_vxlan_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [ValidatePattern('^(([a-zA-Z0-9]|[_])+([a-zA-Z0-9]|[_])+)$')]
        [string]$partitionname ,

        [ValidateRange(1, 16777215)]
        [double]$vxlan ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddNspartitionvxlanbinding: Starting"
    }
    process {
        try {
            $Payload = @{
                partitionname = $partitionname
            }
            if ($PSBoundParameters.ContainsKey('vxlan')) { $Payload.Add('vxlan', $vxlan) }
 
            if ($PSCmdlet.ShouldProcess("nspartition_vxlan_binding", "Add NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -Type nspartition_vxlan_binding -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetNspartitionvxlanbinding -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddNspartitionvxlanbinding: Finished"
    }
}

function Invoke-ADCDeleteNspartitionvxlanbinding {
<#
    .SYNOPSIS
        Delete NS configuration Object
    .DESCRIPTION
        Delete NS configuration Object
    .PARAMETER partitionname 
       Name of the Partition. Must begin with an ASCII alphanumeric or underscore (_) character, and must contain only ASCII alphanumeric, underscore, hash (#), period (.), space, colon (:), at (@), equals (=), and hyphen (-) characters.  
       Minimum length = 1    .PARAMETER vxlan 
       Identifier of the vxlan that is assigned to this partition.  
       Minimum value = 1  
       Maximum value = 16777215
    .EXAMPLE
        Invoke-ADCDeleteNspartitionvxlanbinding -partitionname <string>
    .NOTES
        File Name : Invoke-ADCDeleteNspartitionvxlanbinding
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nspartition_vxlan_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$partitionname ,

        [double]$vxlan 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteNspartitionvxlanbinding: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }
            if ($PSBoundParameters.ContainsKey('vxlan')) { $Arguments.Add('vxlan', $vxlan) }
            if ($PSCmdlet.ShouldProcess("$partitionname", "Delete NS configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type nspartition_vxlan_binding -Resource $partitionname -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteNspartitionvxlanbinding: Finished"
    }
}

function Invoke-ADCGetNspartitionvxlanbinding {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER partitionname 
       Name of the Partition. Must begin with an ASCII alphanumeric or underscore (_) character, and must contain only ASCII alphanumeric, underscore, hash (#), period (.), space, colon (:), at (@), equals (=), and hyphen (-) characters. 
    .PARAMETER GetAll 
        Retreive all nspartition_vxlan_binding object(s)
    .PARAMETER Count
        If specified, the count of the nspartition_vxlan_binding object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNspartitionvxlanbinding
    .EXAMPLE 
        Invoke-ADCGetNspartitionvxlanbinding -GetAll 
    .EXAMPLE 
        Invoke-ADCGetNspartitionvxlanbinding -Count
    .EXAMPLE
        Invoke-ADCGetNspartitionvxlanbinding -name <string>
    .EXAMPLE
        Invoke-ADCGetNspartitionvxlanbinding -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNspartitionvxlanbinding
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nspartition_vxlan_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateScript({ $_.Length -gt 1 })]
        [ValidatePattern('^(([a-zA-Z0-9]|[_])+([a-zA-Z0-9]|[_])+)$')]
        [string]$partitionname,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetNspartitionvxlanbinding: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ 
                    bulkbindings = 'yes'
                }
                Write-Verbose "Retrieving all nspartition_vxlan_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nspartition_vxlan_binding -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nspartition_vxlan_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nspartition_vxlan_binding -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nspartition_vxlan_binding objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nspartition_vxlan_binding -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nspartition_vxlan_binding configuration for property 'partitionname'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nspartition_vxlan_binding -Resource $partitionname -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving nspartition_vxlan_binding configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nspartition_vxlan_binding -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNspartitionvxlanbinding: Ended"
    }
}

function Invoke-ADCAddNspbr {
<#
    .SYNOPSIS
        Add NS configuration Object
    .DESCRIPTION
        Add NS configuration Object 
    .PARAMETER name 
        Name for the PBR. Must begin with an ASCII alphabetic or underscore \(_\) character, and must contain only ASCII alphanumeric, underscore, hash \(\#\), period \(.\), space, colon \(:\), at \(@\), equals \(=\), and hyphen \(-\) characters. Cannot be changed after the PBR is created.  
        Minimum length = 1 
    .PARAMETER action 
        Action to perform on the outgoing IPv4 packets that match the PBR.  
        Available settings function as follows:  
        * ALLOW - The Citrix ADC sends the packet to the designated next-hop router.  
        * DENY - The Citrix ADC applies the routing table for normal destination-based routing.  
        Possible values = ALLOW, DENY 
    .PARAMETER td 
        Integer value that uniquely identifies the traffic domain in which you want to configure the entity. If you do not specify an ID, the entity becomes part of the default traffic domain, which has an ID of 0.  
        Minimum value = 0  
        Maximum value = 4094 
    .PARAMETER srcip 
        IP address or range of IP addresses to match against the source IP address of an outgoing IPv4 packet. In the command line interface, separate the range with a hyphen. For example: 10.102.29.30-10.102.29.189. 
    .PARAMETER srcipop 
        Either the equals (=) or does not equal (!=) logical operator.  
        Possible values = =, !=, EQ, NEQ 
    .PARAMETER srcipval 
        IP address or range of IP addresses to match against the source IP address of an outgoing IPv4 packet. In the command line interface, separate the range with a hyphen. For example: 10.102.29.30-10.102.29.189. 
    .PARAMETER srcport 
        Port number or range of port numbers to match against the source port number of an outgoing IPv4 packet. In the command line interface, separate the range with a hyphen. For example: 40-90.  
        Note: The destination port can be specified only for TCP and UDP protocols. 
    .PARAMETER srcportop 
        Either the equals (=) or does not equal (!=) logical operator.  
        Possible values = =, !=, EQ, NEQ 
    .PARAMETER srcportval 
        Port number or range of port numbers to match against the source port number of an outgoing IPv4 packet. In the command line interface, separate the range with a hyphen. For example: 40-90.  
        Note: The destination port can be specified only for TCP and UDP protocols.  
        Maximum length = 65535 
    .PARAMETER destip 
        IP address or range of IP addresses to match against the destination IP address of an outgoing IPv4 packet. In the command line interface, separate the range with a hyphen. For example: 10.102.29.30-10.102.29.189. 
    .PARAMETER destipop 
        Either the equals (=) or does not equal (!=) logical operator.  
        Possible values = =, !=, EQ, NEQ 
    .PARAMETER destipval 
        IP address or range of IP addresses to match against the destination IP address of an outgoing IPv4 packet. In the command line interface, separate the range with a hyphen. For example: 10.102.29.30-10.102.29.189. 
    .PARAMETER destport 
        Port number or range of port numbers to match against the destination port number of an outgoing IPv4 packet. In the command line interface, separate the range with a hyphen. For example: 40-90.  
        Note: The destination port can be specified only for TCP and UDP protocols. 
    .PARAMETER destportop 
        Either the equals (=) or does not equal (!=) logical operator.  
        Possible values = =, !=, EQ, NEQ 
    .PARAMETER destportval 
        Port number or range of port numbers to match against the destination port number of an outgoing IPv4 packet. In the command line interface, separate the range with a hyphen. For example: 40-90.  
        Note: The destination port can be specified only for TCP and UDP protocols.  
        Maximum length = 65535 
    .PARAMETER nexthop 
        IP address of the next hop router or the name of the link load balancing virtual server to which to send matching packets if action is set to ALLOW.  
        If you specify a link load balancing (LLB) virtual server, which can provide a backup if a next hop link fails, first make sure that the next hops bound to the LLB virtual server are actually next hops that are directly connected to the Citrix ADC. Otherwise, the Citrix ADC throws an error when you attempt to create the PBR. The next hop can be null to represent null routes. 
    .PARAMETER nexthopval 
        The Next Hop IP address or gateway name. 
    .PARAMETER iptunnel 
        The Tunnel name. 
    .PARAMETER iptunnelname 
        The iptunnel name where packets need to be forwarded upon. 
    .PARAMETER vxlanvlanmap 
        The vlan to vxlan mapping to be applied for incoming packets over this pbr tunnel. 
    .PARAMETER srcmac 
        MAC address to match against the source MAC address of an outgoing IPv4 packet. 
    .PARAMETER srcmacmask 
        Used to define range of Source MAC address. It takes string of 0 and 1, 0s are for exact match and 1s for wildcard. For matching first 3 bytes of MAC address, srcMacMask value "000000111111". .  
        Default value: "000000000000" 
    .PARAMETER protocol 
        Protocol, identified by protocol name, to match against the protocol of an outgoing IPv4 packet.  
        Possible values = ICMP, IGMP, TCP, EGP, IGP, ARGUS, UDP, RDP, RSVP, EIGRP, L2TP, ISIS, GGP, IPoverIP, ST, CBT, BBN-RCC-M, NVP-II, PUP, EMCON, XNET, CHAOS, MUX, DCN-MEAS, HMP, PRM, XNS-IDP, TRUNK-1, TRUNK-2, LEAF-1, LEAF-2, IRTP, ISO-TP4, NETBLT, MFE-NSP, MERIT-INP, SEP, 3PC, IDPR, XTP, DDP, IDPR-CMTP, TP++, IL, IPv6, SDRP, IPv6-Route, IPv6-Frag, IDRP, GRE, MHRP, BNA, ESP, AH, I-NLSP, SWIPE, NARP, MOBILE, TLSP, SKIP, ICMPV6, IPv6-NoNx, IPv6-Opts, Any-Host-Internal-Protocol, CFTP, Any-Local-Network, SAT-EXPAK, KRYPTOLAN, RVD, IPPC, Any-Distributed-File-System, TFTP, VISA, IPCV, CPNX, CPHB, WSN, PVP, BR-SAT-MO, SUN-ND, WB-MON, WB-EXPAK, ISO-IP, VMTP, SECURE-VM, VINES, TTP, NSFNET-IG, DGP, TCF, OSPFIGP, Sprite-RP, LARP, MTP, AX.25, IPIP, MICP, SCC-SP, ETHERIP, Any-Private-Encryption-Scheme, GMTP, IFMP, PNNI, PIM, ARIS, SCPS, QNX, A/N, IPComp, SNP, Compaq-Pe, IPX-in-IP, VRRP, PGM, Any-0-Hop-Protocol, ENCAP, DDX, IATP, STP, SRP, UTI, SMP, SM, PTP, FIRE, CRTP, CRUDP, SSCOPMCE, IPLT, SPS, PIPE, SCTP, FC, RSVP-E2E-IGNORE, Mobility-Header, UDPLite 
    .PARAMETER protocolnumber 
        Protocol, identified by protocol number, to match against the protocol of an outgoing IPv4 packet.  
        Minimum value = 1  
        Maximum value = 255 
    .PARAMETER vlan 
        ID of the VLAN. The Citrix ADC compares the PBR only to the outgoing packets on the specified VLAN. If you do not specify any interface ID, the appliance compares the PBR to the outgoing packets on all VLANs.  
        Minimum value = 1  
        Maximum value = 4094 
    .PARAMETER vxlan 
        ID of the VXLAN. The Citrix ADC compares the PBR only to the outgoing packets on the specified VXLAN. If you do not specify any interface ID, the appliance compares the PBR to the outgoing packets on all VXLANs.  
        Minimum value = 1  
        Maximum value = 16777215 
    .PARAMETER Interface 
        ID of an interface. The Citrix ADC compares the PBR only to the outgoing packets on the specified interface. If you do not specify any value, the appliance compares the PBR to the outgoing packets on all interfaces. 
    .PARAMETER priority 
        Priority of the PBR, which determines the order in which it is evaluated relative to the other PBRs. If you do not specify priorities while creating PBRs, the PBRs are evaluated in the order in which they are created.  
        Minimum value = 1  
        Maximum value = 81920 
    .PARAMETER msr 
        Monitor the route specified byte Next Hop parameter. This parameter is not applicable if you specify a link load balancing (LLB) virtual server name with the Next Hop parameter.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER monitor 
        The name of the monitor.(Can be only of type ping or ARP ).  
        Minimum length = 1 
    .PARAMETER state 
        Enable or disable the PBR. After you apply the PBRs, the Citrix ADC compares outgoing packets to the enabled PBRs.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER ownergroup 
        The owner node group in a Cluster for this pbr rule. If ownernode is not specified then the pbr rule is treated as Striped pbr rule.  
        Default value: DEFAULT_NG  
        Minimum length = 1 
    .PARAMETER PassThru 
        Return details about the created nspbr item.
    .EXAMPLE
        Invoke-ADCAddNspbr -name <string> -action <string>
    .NOTES
        File Name : Invoke-ADCAddNspbr
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nspbr/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name ,

        [Parameter(Mandatory = $true)]
        [ValidateSet('ALLOW', 'DENY')]
        [string]$action ,

        [ValidateRange(0, 4094)]
        [double]$td ,

        [ValidateRange(30, 10)]
        [boolean]$srcip ,

        [ValidateSet('=', '!=', 'EQ', 'NEQ')]
        [string]$srcipop ,

        [ValidateRange(30, 10)]
        [string]$srcipval ,

        [ValidateRange(40, 90)]
        [boolean]$srcport ,

        [ValidateSet('=', '!=', 'EQ', 'NEQ')]
        [string]$srcportop ,

        [ValidateRange(40, 90)]
        [string]$srcportval ,

        [ValidateRange(30, 10)]
        [boolean]$destip ,

        [ValidateSet('=', '!=', 'EQ', 'NEQ')]
        [string]$destipop ,

        [ValidateRange(30, 10)]
        [string]$destipval ,

        [ValidateRange(40, 90)]
        [boolean]$destport ,

        [ValidateSet('=', '!=', 'EQ', 'NEQ')]
        [string]$destportop ,

        [ValidateRange(40, 90)]
        [string]$destportval ,

        [boolean]$nexthop ,

        [string]$nexthopval ,

        [boolean]$iptunnel ,

        [string]$iptunnelname ,

        [string]$vxlanvlanmap ,

        [string]$srcmac ,

        [string]$srcmacmask = '"000000000000"' ,

        [ValidateSet('ICMP', 'IGMP', 'TCP', 'EGP', 'IGP', 'ARGUS', 'UDP', 'RDP', 'RSVP', 'EIGRP', 'L2TP', 'ISIS', 'GGP', 'IPoverIP', 'ST', 'CBT', 'BBN-RCC-M', 'NVP-II', 'PUP', 'EMCON', 'XNET', 'CHAOS', 'MUX', 'DCN-MEAS', 'HMP', 'PRM', 'XNS-IDP', 'TRUNK-1', 'TRUNK-2', 'LEAF-1', 'LEAF-2', 'IRTP', 'ISO-TP4', 'NETBLT', 'MFE-NSP', 'MERIT-INP', 'SEP', '3PC', 'IDPR', 'XTP', 'DDP', 'IDPR-CMTP', 'TP++', 'IL', 'IPv6', 'SDRP', 'IPv6-Route', 'IPv6-Frag', 'IDRP', 'GRE', 'MHRP', 'BNA', 'ESP', 'AH', 'I-NLSP', 'SWIPE', 'NARP', 'MOBILE', 'TLSP', 'SKIP', 'ICMPV6', 'IPv6-NoNx', 'IPv6-Opts', 'Any-Host-Internal-Protocol', 'CFTP', 'Any-Local-Network', 'SAT-EXPAK', 'KRYPTOLAN', 'RVD', 'IPPC', 'Any-Distributed-File-System', 'TFTP', 'VISA', 'IPCV', 'CPNX', 'CPHB', 'WSN', 'PVP', 'BR-SAT-MO', 'SUN-ND', 'WB-MON', 'WB-EXPAK', 'ISO-IP', 'VMTP', 'SECURE-VM', 'VINES', 'TTP', 'NSFNET-IG', 'DGP', 'TCF', 'OSPFIGP', 'Sprite-RP', 'LARP', 'MTP', 'AX.25', 'IPIP', 'MICP', 'SCC-SP', 'ETHERIP', 'Any-Private-Encryption-Scheme', 'GMTP', 'IFMP', 'PNNI', 'PIM', 'ARIS', 'SCPS', 'QNX', 'A/N', 'IPComp', 'SNP', 'Compaq-Pe', 'IPX-in-IP', 'VRRP', 'PGM', 'Any-0-Hop-Protocol', 'ENCAP', 'DDX', 'IATP', 'STP', 'SRP', 'UTI', 'SMP', 'SM', 'PTP', 'FIRE', 'CRTP', 'CRUDP', 'SSCOPMCE', 'IPLT', 'SPS', 'PIPE', 'SCTP', 'FC', 'RSVP-E2E-IGNORE', 'Mobility-Header', 'UDPLite')]
        [string]$protocol ,

        [ValidateRange(1, 255)]
        [double]$protocolnumber ,

        [ValidateRange(1, 4094)]
        [double]$vlan ,

        [ValidateRange(1, 16777215)]
        [double]$vxlan ,

        [string]$Interface ,

        [ValidateRange(1, 81920)]
        [double]$priority ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$msr = 'DISABLED' ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$monitor ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$state = 'ENABLED' ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$ownergroup = 'DEFAULT_NG' ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddNspbr: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
                action = $action
            }
            if ($PSBoundParameters.ContainsKey('td')) { $Payload.Add('td', $td) }
            if ($PSBoundParameters.ContainsKey('srcip')) { $Payload.Add('srcip', $srcip) }
            if ($PSBoundParameters.ContainsKey('srcipop')) { $Payload.Add('srcipop', $srcipop) }
            if ($PSBoundParameters.ContainsKey('srcipval')) { $Payload.Add('srcipval', $srcipval) }
            if ($PSBoundParameters.ContainsKey('srcport')) { $Payload.Add('srcport', $srcport) }
            if ($PSBoundParameters.ContainsKey('srcportop')) { $Payload.Add('srcportop', $srcportop) }
            if ($PSBoundParameters.ContainsKey('srcportval')) { $Payload.Add('srcportval', $srcportval) }
            if ($PSBoundParameters.ContainsKey('destip')) { $Payload.Add('destip', $destip) }
            if ($PSBoundParameters.ContainsKey('destipop')) { $Payload.Add('destipop', $destipop) }
            if ($PSBoundParameters.ContainsKey('destipval')) { $Payload.Add('destipval', $destipval) }
            if ($PSBoundParameters.ContainsKey('destport')) { $Payload.Add('destport', $destport) }
            if ($PSBoundParameters.ContainsKey('destportop')) { $Payload.Add('destportop', $destportop) }
            if ($PSBoundParameters.ContainsKey('destportval')) { $Payload.Add('destportval', $destportval) }
            if ($PSBoundParameters.ContainsKey('nexthop')) { $Payload.Add('nexthop', $nexthop) }
            if ($PSBoundParameters.ContainsKey('nexthopval')) { $Payload.Add('nexthopval', $nexthopval) }
            if ($PSBoundParameters.ContainsKey('iptunnel')) { $Payload.Add('iptunnel', $iptunnel) }
            if ($PSBoundParameters.ContainsKey('iptunnelname')) { $Payload.Add('iptunnelname', $iptunnelname) }
            if ($PSBoundParameters.ContainsKey('vxlanvlanmap')) { $Payload.Add('vxlanvlanmap', $vxlanvlanmap) }
            if ($PSBoundParameters.ContainsKey('srcmac')) { $Payload.Add('srcmac', $srcmac) }
            if ($PSBoundParameters.ContainsKey('srcmacmask')) { $Payload.Add('srcmacmask', $srcmacmask) }
            if ($PSBoundParameters.ContainsKey('protocol')) { $Payload.Add('protocol', $protocol) }
            if ($PSBoundParameters.ContainsKey('protocolnumber')) { $Payload.Add('protocolnumber', $protocolnumber) }
            if ($PSBoundParameters.ContainsKey('vlan')) { $Payload.Add('vlan', $vlan) }
            if ($PSBoundParameters.ContainsKey('vxlan')) { $Payload.Add('vxlan', $vxlan) }
            if ($PSBoundParameters.ContainsKey('Interface')) { $Payload.Add('Interface', $Interface) }
            if ($PSBoundParameters.ContainsKey('priority')) { $Payload.Add('priority', $priority) }
            if ($PSBoundParameters.ContainsKey('msr')) { $Payload.Add('msr', $msr) }
            if ($PSBoundParameters.ContainsKey('monitor')) { $Payload.Add('monitor', $monitor) }
            if ($PSBoundParameters.ContainsKey('state')) { $Payload.Add('state', $state) }
            if ($PSBoundParameters.ContainsKey('ownergroup')) { $Payload.Add('ownergroup', $ownergroup) }
 
            if ($PSCmdlet.ShouldProcess("nspbr", "Add NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nspbr -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetNspbr -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddNspbr: Finished"
    }
}

function Invoke-ADCDeleteNspbr {
<#
    .SYNOPSIS
        Delete NS configuration Object
    .DESCRIPTION
        Delete NS configuration Object
    .PARAMETER name 
       Name for the PBR. Must begin with an ASCII alphabetic or underscore \(_\) character, and must contain only ASCII alphanumeric, underscore, hash \(\#\), period \(.\), space, colon \(:\), at \(@\), equals \(=\), and hyphen \(-\) characters. Cannot be changed after the PBR is created.  
       Minimum length = 1 
    .EXAMPLE
        Invoke-ADCDeleteNspbr -name <string>
    .NOTES
        File Name : Invoke-ADCDeleteNspbr
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nspbr/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$name 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteNspbr: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }

            if ($PSCmdlet.ShouldProcess("$name", "Delete NS configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type nspbr -Resource $name -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteNspbr: Finished"
    }
}

function Invoke-ADCUpdateNspbr {
<#
    .SYNOPSIS
        Update NS configuration Object
    .DESCRIPTION
        Update NS configuration Object 
    .PARAMETER name 
        Name for the PBR. Must begin with an ASCII alphabetic or underscore \(_\) character, and must contain only ASCII alphanumeric, underscore, hash \(\#\), period \(.\), space, colon \(:\), at \(@\), equals \(=\), and hyphen \(-\) characters. Cannot be changed after the PBR is created.  
        Minimum length = 1 
    .PARAMETER action 
        Action to perform on the outgoing IPv4 packets that match the PBR.  
        Available settings function as follows:  
        * ALLOW - The Citrix ADC sends the packet to the designated next-hop router.  
        * DENY - The Citrix ADC applies the routing table for normal destination-based routing.  
        Possible values = ALLOW, DENY 
    .PARAMETER srcip 
        IP address or range of IP addresses to match against the source IP address of an outgoing IPv4 packet. In the command line interface, separate the range with a hyphen. For example: 10.102.29.30-10.102.29.189. 
    .PARAMETER srcipop 
        Either the equals (=) or does not equal (!=) logical operator.  
        Possible values = =, !=, EQ, NEQ 
    .PARAMETER srcipval 
        IP address or range of IP addresses to match against the source IP address of an outgoing IPv4 packet. In the command line interface, separate the range with a hyphen. For example: 10.102.29.30-10.102.29.189. 
    .PARAMETER srcport 
        Port number or range of port numbers to match against the source port number of an outgoing IPv4 packet. In the command line interface, separate the range with a hyphen. For example: 40-90.  
        Note: The destination port can be specified only for TCP and UDP protocols. 
    .PARAMETER srcportop 
        Either the equals (=) or does not equal (!=) logical operator.  
        Possible values = =, !=, EQ, NEQ 
    .PARAMETER srcportval 
        Port number or range of port numbers to match against the source port number of an outgoing IPv4 packet. In the command line interface, separate the range with a hyphen. For example: 40-90.  
        Note: The destination port can be specified only for TCP and UDP protocols.  
        Maximum length = 65535 
    .PARAMETER destip 
        IP address or range of IP addresses to match against the destination IP address of an outgoing IPv4 packet. In the command line interface, separate the range with a hyphen. For example: 10.102.29.30-10.102.29.189. 
    .PARAMETER destipop 
        Either the equals (=) or does not equal (!=) logical operator.  
        Possible values = =, !=, EQ, NEQ 
    .PARAMETER destipval 
        IP address or range of IP addresses to match against the destination IP address of an outgoing IPv4 packet. In the command line interface, separate the range with a hyphen. For example: 10.102.29.30-10.102.29.189. 
    .PARAMETER destport 
        Port number or range of port numbers to match against the destination port number of an outgoing IPv4 packet. In the command line interface, separate the range with a hyphen. For example: 40-90.  
        Note: The destination port can be specified only for TCP and UDP protocols. 
    .PARAMETER destportop 
        Either the equals (=) or does not equal (!=) logical operator.  
        Possible values = =, !=, EQ, NEQ 
    .PARAMETER destportval 
        Port number or range of port numbers to match against the destination port number of an outgoing IPv4 packet. In the command line interface, separate the range with a hyphen. For example: 40-90.  
        Note: The destination port can be specified only for TCP and UDP protocols.  
        Maximum length = 65535 
    .PARAMETER nexthop 
        IP address of the next hop router or the name of the link load balancing virtual server to which to send matching packets if action is set to ALLOW.  
        If you specify a link load balancing (LLB) virtual server, which can provide a backup if a next hop link fails, first make sure that the next hops bound to the LLB virtual server are actually next hops that are directly connected to the Citrix ADC. Otherwise, the Citrix ADC throws an error when you attempt to create the PBR. The next hop can be null to represent null routes. 
    .PARAMETER nexthopval 
        The Next Hop IP address or gateway name. 
    .PARAMETER iptunnel 
        The Tunnel name. 
    .PARAMETER iptunnelname 
        The iptunnel name where packets need to be forwarded upon. 
    .PARAMETER vxlanvlanmap 
        The vlan to vxlan mapping to be applied for incoming packets over this pbr tunnel. 
    .PARAMETER srcmac 
        MAC address to match against the source MAC address of an outgoing IPv4 packet. 
    .PARAMETER srcmacmask 
        Used to define range of Source MAC address. It takes string of 0 and 1, 0s are for exact match and 1s for wildcard. For matching first 3 bytes of MAC address, srcMacMask value "000000111111". .  
        Default value: "000000000000" 
    .PARAMETER protocol 
        Protocol, identified by protocol name, to match against the protocol of an outgoing IPv4 packet.  
        Possible values = ICMP, IGMP, TCP, EGP, IGP, ARGUS, UDP, RDP, RSVP, EIGRP, L2TP, ISIS, GGP, IPoverIP, ST, CBT, BBN-RCC-M, NVP-II, PUP, EMCON, XNET, CHAOS, MUX, DCN-MEAS, HMP, PRM, XNS-IDP, TRUNK-1, TRUNK-2, LEAF-1, LEAF-2, IRTP, ISO-TP4, NETBLT, MFE-NSP, MERIT-INP, SEP, 3PC, IDPR, XTP, DDP, IDPR-CMTP, TP++, IL, IPv6, SDRP, IPv6-Route, IPv6-Frag, IDRP, GRE, MHRP, BNA, ESP, AH, I-NLSP, SWIPE, NARP, MOBILE, TLSP, SKIP, ICMPV6, IPv6-NoNx, IPv6-Opts, Any-Host-Internal-Protocol, CFTP, Any-Local-Network, SAT-EXPAK, KRYPTOLAN, RVD, IPPC, Any-Distributed-File-System, TFTP, VISA, IPCV, CPNX, CPHB, WSN, PVP, BR-SAT-MO, SUN-ND, WB-MON, WB-EXPAK, ISO-IP, VMTP, SECURE-VM, VINES, TTP, NSFNET-IG, DGP, TCF, OSPFIGP, Sprite-RP, LARP, MTP, AX.25, IPIP, MICP, SCC-SP, ETHERIP, Any-Private-Encryption-Scheme, GMTP, IFMP, PNNI, PIM, ARIS, SCPS, QNX, A/N, IPComp, SNP, Compaq-Pe, IPX-in-IP, VRRP, PGM, Any-0-Hop-Protocol, ENCAP, DDX, IATP, STP, SRP, UTI, SMP, SM, PTP, FIRE, CRTP, CRUDP, SSCOPMCE, IPLT, SPS, PIPE, SCTP, FC, RSVP-E2E-IGNORE, Mobility-Header, UDPLite 
    .PARAMETER protocolnumber 
        Protocol, identified by protocol number, to match against the protocol of an outgoing IPv4 packet.  
        Minimum value = 1  
        Maximum value = 255 
    .PARAMETER vlan 
        ID of the VLAN. The Citrix ADC compares the PBR only to the outgoing packets on the specified VLAN. If you do not specify any interface ID, the appliance compares the PBR to the outgoing packets on all VLANs.  
        Minimum value = 1  
        Maximum value = 4094 
    .PARAMETER vxlan 
        ID of the VXLAN. The Citrix ADC compares the PBR only to the outgoing packets on the specified VXLAN. If you do not specify any interface ID, the appliance compares the PBR to the outgoing packets on all VXLANs.  
        Minimum value = 1  
        Maximum value = 16777215 
    .PARAMETER Interface 
        ID of an interface. The Citrix ADC compares the PBR only to the outgoing packets on the specified interface. If you do not specify any value, the appliance compares the PBR to the outgoing packets on all interfaces. 
    .PARAMETER priority 
        Priority of the PBR, which determines the order in which it is evaluated relative to the other PBRs. If you do not specify priorities while creating PBRs, the PBRs are evaluated in the order in which they are created.  
        Minimum value = 1  
        Maximum value = 81920 
    .PARAMETER msr 
        Monitor the route specified byte Next Hop parameter. This parameter is not applicable if you specify a link load balancing (LLB) virtual server name with the Next Hop parameter.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER monitor 
        The name of the monitor.(Can be only of type ping or ARP ).  
        Minimum length = 1 
    .PARAMETER PassThru 
        Return details about the created nspbr item.
    .EXAMPLE
        Invoke-ADCUpdateNspbr -name <string>
    .NOTES
        File Name : Invoke-ADCUpdateNspbr
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nspbr/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name ,

        [ValidateSet('ALLOW', 'DENY')]
        [string]$action ,

        [ValidateRange(30, 10)]
        [boolean]$srcip ,

        [ValidateSet('=', '!=', 'EQ', 'NEQ')]
        [string]$srcipop ,

        [ValidateRange(30, 10)]
        [string]$srcipval ,

        [ValidateRange(40, 90)]
        [boolean]$srcport ,

        [ValidateSet('=', '!=', 'EQ', 'NEQ')]
        [string]$srcportop ,

        [ValidateRange(40, 90)]
        [string]$srcportval ,

        [ValidateRange(30, 10)]
        [boolean]$destip ,

        [ValidateSet('=', '!=', 'EQ', 'NEQ')]
        [string]$destipop ,

        [ValidateRange(30, 10)]
        [string]$destipval ,

        [ValidateRange(40, 90)]
        [boolean]$destport ,

        [ValidateSet('=', '!=', 'EQ', 'NEQ')]
        [string]$destportop ,

        [ValidateRange(40, 90)]
        [string]$destportval ,

        [boolean]$nexthop ,

        [string]$nexthopval ,

        [boolean]$iptunnel ,

        [string]$iptunnelname ,

        [string]$vxlanvlanmap ,

        [string]$srcmac ,

        [string]$srcmacmask ,

        [ValidateSet('ICMP', 'IGMP', 'TCP', 'EGP', 'IGP', 'ARGUS', 'UDP', 'RDP', 'RSVP', 'EIGRP', 'L2TP', 'ISIS', 'GGP', 'IPoverIP', 'ST', 'CBT', 'BBN-RCC-M', 'NVP-II', 'PUP', 'EMCON', 'XNET', 'CHAOS', 'MUX', 'DCN-MEAS', 'HMP', 'PRM', 'XNS-IDP', 'TRUNK-1', 'TRUNK-2', 'LEAF-1', 'LEAF-2', 'IRTP', 'ISO-TP4', 'NETBLT', 'MFE-NSP', 'MERIT-INP', 'SEP', '3PC', 'IDPR', 'XTP', 'DDP', 'IDPR-CMTP', 'TP++', 'IL', 'IPv6', 'SDRP', 'IPv6-Route', 'IPv6-Frag', 'IDRP', 'GRE', 'MHRP', 'BNA', 'ESP', 'AH', 'I-NLSP', 'SWIPE', 'NARP', 'MOBILE', 'TLSP', 'SKIP', 'ICMPV6', 'IPv6-NoNx', 'IPv6-Opts', 'Any-Host-Internal-Protocol', 'CFTP', 'Any-Local-Network', 'SAT-EXPAK', 'KRYPTOLAN', 'RVD', 'IPPC', 'Any-Distributed-File-System', 'TFTP', 'VISA', 'IPCV', 'CPNX', 'CPHB', 'WSN', 'PVP', 'BR-SAT-MO', 'SUN-ND', 'WB-MON', 'WB-EXPAK', 'ISO-IP', 'VMTP', 'SECURE-VM', 'VINES', 'TTP', 'NSFNET-IG', 'DGP', 'TCF', 'OSPFIGP', 'Sprite-RP', 'LARP', 'MTP', 'AX.25', 'IPIP', 'MICP', 'SCC-SP', 'ETHERIP', 'Any-Private-Encryption-Scheme', 'GMTP', 'IFMP', 'PNNI', 'PIM', 'ARIS', 'SCPS', 'QNX', 'A/N', 'IPComp', 'SNP', 'Compaq-Pe', 'IPX-in-IP', 'VRRP', 'PGM', 'Any-0-Hop-Protocol', 'ENCAP', 'DDX', 'IATP', 'STP', 'SRP', 'UTI', 'SMP', 'SM', 'PTP', 'FIRE', 'CRTP', 'CRUDP', 'SSCOPMCE', 'IPLT', 'SPS', 'PIPE', 'SCTP', 'FC', 'RSVP-E2E-IGNORE', 'Mobility-Header', 'UDPLite')]
        [string]$protocol ,

        [ValidateRange(1, 255)]
        [double]$protocolnumber ,

        [ValidateRange(1, 4094)]
        [double]$vlan ,

        [ValidateRange(1, 16777215)]
        [double]$vxlan ,

        [string]$Interface ,

        [ValidateRange(1, 81920)]
        [double]$priority ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$msr ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$monitor ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCUpdateNspbr: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
            }
            if ($PSBoundParameters.ContainsKey('action')) { $Payload.Add('action', $action) }
            if ($PSBoundParameters.ContainsKey('srcip')) { $Payload.Add('srcip', $srcip) }
            if ($PSBoundParameters.ContainsKey('srcipop')) { $Payload.Add('srcipop', $srcipop) }
            if ($PSBoundParameters.ContainsKey('srcipval')) { $Payload.Add('srcipval', $srcipval) }
            if ($PSBoundParameters.ContainsKey('srcport')) { $Payload.Add('srcport', $srcport) }
            if ($PSBoundParameters.ContainsKey('srcportop')) { $Payload.Add('srcportop', $srcportop) }
            if ($PSBoundParameters.ContainsKey('srcportval')) { $Payload.Add('srcportval', $srcportval) }
            if ($PSBoundParameters.ContainsKey('destip')) { $Payload.Add('destip', $destip) }
            if ($PSBoundParameters.ContainsKey('destipop')) { $Payload.Add('destipop', $destipop) }
            if ($PSBoundParameters.ContainsKey('destipval')) { $Payload.Add('destipval', $destipval) }
            if ($PSBoundParameters.ContainsKey('destport')) { $Payload.Add('destport', $destport) }
            if ($PSBoundParameters.ContainsKey('destportop')) { $Payload.Add('destportop', $destportop) }
            if ($PSBoundParameters.ContainsKey('destportval')) { $Payload.Add('destportval', $destportval) }
            if ($PSBoundParameters.ContainsKey('nexthop')) { $Payload.Add('nexthop', $nexthop) }
            if ($PSBoundParameters.ContainsKey('nexthopval')) { $Payload.Add('nexthopval', $nexthopval) }
            if ($PSBoundParameters.ContainsKey('iptunnel')) { $Payload.Add('iptunnel', $iptunnel) }
            if ($PSBoundParameters.ContainsKey('iptunnelname')) { $Payload.Add('iptunnelname', $iptunnelname) }
            if ($PSBoundParameters.ContainsKey('vxlanvlanmap')) { $Payload.Add('vxlanvlanmap', $vxlanvlanmap) }
            if ($PSBoundParameters.ContainsKey('srcmac')) { $Payload.Add('srcmac', $srcmac) }
            if ($PSBoundParameters.ContainsKey('srcmacmask')) { $Payload.Add('srcmacmask', $srcmacmask) }
            if ($PSBoundParameters.ContainsKey('protocol')) { $Payload.Add('protocol', $protocol) }
            if ($PSBoundParameters.ContainsKey('protocolnumber')) { $Payload.Add('protocolnumber', $protocolnumber) }
            if ($PSBoundParameters.ContainsKey('vlan')) { $Payload.Add('vlan', $vlan) }
            if ($PSBoundParameters.ContainsKey('vxlan')) { $Payload.Add('vxlan', $vxlan) }
            if ($PSBoundParameters.ContainsKey('Interface')) { $Payload.Add('Interface', $Interface) }
            if ($PSBoundParameters.ContainsKey('priority')) { $Payload.Add('priority', $priority) }
            if ($PSBoundParameters.ContainsKey('msr')) { $Payload.Add('msr', $msr) }
            if ($PSBoundParameters.ContainsKey('monitor')) { $Payload.Add('monitor', $monitor) }
 
            if ($PSCmdlet.ShouldProcess("nspbr", "Update NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -Type nspbr -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetNspbr -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUpdateNspbr: Finished"
    }
}

function Invoke-ADCUnsetNspbr {
<#
    .SYNOPSIS
        Unset NS configuration Object
    .DESCRIPTION
        Unset NS configuration Object 
   .PARAMETER name 
       Name for the PBR. Must begin with an ASCII alphabetic or underscore \(_\) character, and must contain only ASCII alphanumeric, underscore, hash \(\#\), period \(.\), space, colon \(:\), at \(@\), equals \(=\), and hyphen \(-\) characters. Cannot be changed after the PBR is created. 
   .PARAMETER srcip 
       IP address or .102.29.189. 
   .PARAMETER srcport 
       Port number or .  
       Note: The destination port can be specified only for TCP and UDP protocols. 
   .PARAMETER destip 
       IP address or .102.29.189. 
   .PARAMETER destport 
       Port number or .  
       Note: The destination port can be specified only for TCP and UDP protocols. 
   .PARAMETER nexthop 
       IP address of the next hop router or the name of the link load balancing virtual server to which to send matching packets if action is set to ALLOW.  
       If you specify a link load balancing (LLB) virtual server, which can provide a backup if a next hop link fails, first make sure that the next hops bound to the LLB virtual server are actually next hops that are directly connected to the Citrix ADC. Otherwise, the Citrix ADC throws an error when you attempt to create the PBR. The next hop can be null to represent null routes. 
   .PARAMETER iptunnel 
       The Tunnel name. 
   .PARAMETER vxlanvlanmap 
       The vlan to vxlan mapping to be applied for incoming packets over this pbr tunnel. 
   .PARAMETER srcmac 
       MAC address to match against the source MAC address of an outgoing IPv4 packet. 
   .PARAMETER srcmacmask 
       Used to define range of Source MAC address. It takes string of 0 and 1, 0s are for exact match and 1s for wildcard. For matching first 3 bytes of MAC address, srcMacMask value "000000111111". . 
   .PARAMETER protocol 
       Protocol, identified by protocol name, to match against the protocol of an outgoing IPv4 packet.  
       Possible values = ICMP, IGMP, TCP, EGP, IGP, ARGUS, UDP, RDP, RSVP, EIGRP, L2TP, ISIS, GGP, IPoverIP, ST, CBT, BBN-RCC-M, NVP-II, PUP, EMCON, XNET, CHAOS, MUX, DCN-MEAS, HMP, PRM, XNS-IDP, TRUNK-1, TRUNK-2, LEAF-1, LEAF-2, IRTP, ISO-TP4, NETBLT, MFE-NSP, MERIT-INP, SEP, 3PC, IDPR, XTP, DDP, IDPR-CMTP, TP++, IL, IPv6, SDRP, IPv6-Route, IPv6-Frag, IDRP, GRE, MHRP, BNA, ESP, AH, I-NLSP, SWIPE, NARP, MOBILE, TLSP, SKIP, ICMPV6, IPv6-NoNx, IPv6-Opts, Any-Host-Internal-Protocol, CFTP, Any-Local-Network, SAT-EXPAK, KRYPTOLAN, RVD, IPPC, Any-Distributed-File-System, TFTP, VISA, IPCV, CPNX, CPHB, WSN, PVP, BR-SAT-MO, SUN-ND, WB-MON, WB-EXPAK, ISO-IP, VMTP, SECURE-VM, VINES, TTP, NSFNET-IG, DGP, TCF, OSPFIGP, Sprite-RP, LARP, MTP, AX.25, IPIP, MICP, SCC-SP, ETHERIP, Any-Private-Encryption-Scheme, GMTP, IFMP, PNNI, PIM, ARIS, SCPS, QNX, A/N, IPComp, SNP, Compaq-Pe, IPX-in-IP, VRRP, PGM, Any-0-Hop-Protocol, ENCAP, DDX, IATP, STP, SRP, UTI, SMP, SM, PTP, FIRE, CRTP, CRUDP, SSCOPMCE, IPLT, SPS, PIPE, SCTP, FC, RSVP-E2E-IGNORE, Mobility-Header, UDPLite 
   .PARAMETER vlan 
       ID of the VLAN. The Citrix ADC compares the PBR only to the outgoing packets on the specified VLAN. If you do not specify any interface ID, the appliance compares the PBR to the outgoing packets on all VLANs. 
   .PARAMETER vxlan 
       ID of the VXLAN. The Citrix ADC compares the PBR only to the outgoing packets on the specified VXLAN. If you do not specify any interface ID, the appliance compares the PBR to the outgoing packets on all VXLANs. 
   .PARAMETER Interface 
       ID of an interface. The Citrix ADC compares the PBR only to the outgoing packets on the specified interface. If you do not specify any value, the appliance compares the PBR to the outgoing packets on all interfaces. 
   .PARAMETER msr 
       Monitor the route specified byte Next Hop parameter. This parameter is not applicable if you specify a link load balancing (LLB) virtual server name with the Next Hop parameter.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER monitor 
       The name of the monitor.(Can be only of type ping or ARP ).
    .EXAMPLE
        Invoke-ADCUnsetNspbr -name <string>
    .NOTES
        File Name : Invoke-ADCUnsetNspbr
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nspbr
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name ,

        [Boolean]$srcip ,

        [Boolean]$srcport ,

        [Boolean]$destip ,

        [Boolean]$destport ,

        [Boolean]$nexthop ,

        [Boolean]$iptunnel ,

        [Boolean]$vxlanvlanmap ,

        [Boolean]$srcmac ,

        [Boolean]$srcmacmask ,

        [Boolean]$protocol ,

        [Boolean]$vlan ,

        [Boolean]$vxlan ,

        [Boolean]$Interface ,

        [Boolean]$msr ,

        [Boolean]$monitor 
    )
    begin {
        Write-Verbose "Invoke-ADCUnsetNspbr: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
            }
            if ($PSBoundParameters.ContainsKey('srcip')) { $Payload.Add('srcip', $srcip) }
            if ($PSBoundParameters.ContainsKey('srcport')) { $Payload.Add('srcport', $srcport) }
            if ($PSBoundParameters.ContainsKey('destip')) { $Payload.Add('destip', $destip) }
            if ($PSBoundParameters.ContainsKey('destport')) { $Payload.Add('destport', $destport) }
            if ($PSBoundParameters.ContainsKey('nexthop')) { $Payload.Add('nexthop', $nexthop) }
            if ($PSBoundParameters.ContainsKey('iptunnel')) { $Payload.Add('iptunnel', $iptunnel) }
            if ($PSBoundParameters.ContainsKey('vxlanvlanmap')) { $Payload.Add('vxlanvlanmap', $vxlanvlanmap) }
            if ($PSBoundParameters.ContainsKey('srcmac')) { $Payload.Add('srcmac', $srcmac) }
            if ($PSBoundParameters.ContainsKey('srcmacmask')) { $Payload.Add('srcmacmask', $srcmacmask) }
            if ($PSBoundParameters.ContainsKey('protocol')) { $Payload.Add('protocol', $protocol) }
            if ($PSBoundParameters.ContainsKey('vlan')) { $Payload.Add('vlan', $vlan) }
            if ($PSBoundParameters.ContainsKey('vxlan')) { $Payload.Add('vxlan', $vxlan) }
            if ($PSBoundParameters.ContainsKey('Interface')) { $Payload.Add('Interface', $Interface) }
            if ($PSBoundParameters.ContainsKey('msr')) { $Payload.Add('msr', $msr) }
            if ($PSBoundParameters.ContainsKey('monitor')) { $Payload.Add('monitor', $monitor) }
            if ($PSCmdlet.ShouldProcess("$name", "Unset NS configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nspbr -Action unset -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUnsetNspbr: Finished"
    }
}

function Invoke-ADCEnableNspbr {
<#
    .SYNOPSIS
        Enable NS configuration Object
    .DESCRIPTION
        Enable NS configuration Object 
    .PARAMETER name 
        Name for the PBR. Must begin with an ASCII alphabetic or underscore \(_\) character, and must contain only ASCII alphanumeric, underscore, hash \(\#\), period \(.\), space, colon \(:\), at \(@\), equals \(=\), and hyphen \(-\) characters. Cannot be changed after the PBR is created.
    .EXAMPLE
        Invoke-ADCEnableNspbr -name <string>
    .NOTES
        File Name : Invoke-ADCEnableNspbr
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nspbr/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name 

    )
    begin {
        Write-Verbose "Invoke-ADCEnableNspbr: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
            }

            if ($PSCmdlet.ShouldProcess($Name, "Enable NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nspbr -Action enable -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $result
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCEnableNspbr: Finished"
    }
}

function Invoke-ADCDisableNspbr {
<#
    .SYNOPSIS
        Disable NS configuration Object
    .DESCRIPTION
        Disable NS configuration Object 
    .PARAMETER name 
        Name for the PBR. Must begin with an ASCII alphabetic or underscore \(_\) character, and must contain only ASCII alphanumeric, underscore, hash \(\#\), period \(.\), space, colon \(:\), at \(@\), equals \(=\), and hyphen \(-\) characters. Cannot be changed after the PBR is created.
    .EXAMPLE
        Invoke-ADCDisableNspbr -name <string>
    .NOTES
        File Name : Invoke-ADCDisableNspbr
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nspbr/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name 

    )
    begin {
        Write-Verbose "Invoke-ADCDisableNspbr: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
            }

            if ($PSCmdlet.ShouldProcess($Name, "Disable NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nspbr -Action disable -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $result
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDisableNspbr: Finished"
    }
}

function Invoke-ADCGetNspbr {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER name 
       Name for the PBR. Must begin with an ASCII alphabetic or underscore \(_\) character, and must contain only ASCII alphanumeric, underscore, hash \(\#\), period \(.\), space, colon \(:\), at \(@\), equals \(=\), and hyphen \(-\) characters. Cannot be changed after the PBR is created. 
    .PARAMETER GetAll 
        Retreive all nspbr object(s)
    .PARAMETER Count
        If specified, the count of the nspbr object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNspbr
    .EXAMPLE 
        Invoke-ADCGetNspbr -GetAll 
    .EXAMPLE 
        Invoke-ADCGetNspbr -Count
    .EXAMPLE
        Invoke-ADCGetNspbr -name <string>
    .EXAMPLE
        Invoke-ADCGetNspbr -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNspbr
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nspbr/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll,

        [Parameter(ParameterSetName = 'GetAll')]
        [Parameter(ParameterSetName = 'Get')]
        [Switch]$ViewSummary

    )
    begin {
        Write-Verbose "Invoke-ADCGetNspbr: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all nspbr objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nspbr -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nspbr objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nspbr -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nspbr objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nspbr -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nspbr configuration for property 'name'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nspbr -Resource $name -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving nspbr configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nspbr -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNspbr: Ended"
    }
}

function Invoke-ADCAddNspbr6 {
<#
    .SYNOPSIS
        Add NS configuration Object
    .DESCRIPTION
        Add NS configuration Object 
    .PARAMETER name 
        Name for the PBR6. Must begin with an ASCII alphabetic or underscore \(_\) character, and must contain only ASCII alphanumeric, underscore, hash \(\#\), period \(.\), space, colon \(:\), at \(@\), equals \(=\), and hyphen \(-\) characters. Cannot be changed after the PBR6 is created.  
        Minimum length = 1 
    .PARAMETER td 
        Integer value that uniquely identifies the traffic domain in which you want to configure the entity. If you do not specify an ID, the entity becomes part of the default traffic domain, which has an ID of 0.  
        Minimum value = 0  
        Maximum value = 4094 
    .PARAMETER action 
        Action to perform on the outgoing IPv6 packets that match the PBR6.  
        Available settings function as follows:  
        * ALLOW - The Citrix ADC sends the packet to the designated next-hop router.  
        * DENY - The Citrix ADC applies the routing table for normal destination-based routing.  
        Possible values = ALLOW, DENY 
    .PARAMETER srcipv6 
        IP address or range of IP addresses to match against the source IP address of an outgoing IPv6 packet. In the command line interface, separate the range with a hyphen. 
    .PARAMETER srcipop 
        Either the equals (=) or does not equal (!=) logical operator.  
        Possible values = =, !=, EQ, NEQ 
    .PARAMETER srcipv6val 
        IP address or range of IP addresses to match against the source IP address of an outgoing IPv6 packet. In the command line interface, separate the range with a hyphen. 
    .PARAMETER srcport 
        Port number or range of port numbers to match against the source port number of an outgoing IPv6 packet. In the command line interface, separate the range with a hyphen. For example: 40-90. 
    .PARAMETER srcportop 
        Either the equals (=) or does not equal (!=) logical operator.  
        Possible values = =, !=, EQ, NEQ 
    .PARAMETER srcportval 
        Source port (range).  
        Maximum length = 65535 
    .PARAMETER destipv6 
        IP address or range of IP addresses to match against the destination IP address of an outgoing IPv6 packet. In the command line interface, separate the range with a hyphen. 
    .PARAMETER destipop 
        Either the equals (=) or does not equal (!=) logical operator.  
        Possible values = =, !=, EQ, NEQ 
    .PARAMETER destipv6val 
        IP address or range of IP addresses to match against the destination IP address of an outgoing IPv6 packet. In the command line interface, separate the range with a hyphen. 
    .PARAMETER destport 
        Port number or range of port numbers to match against the destination port number of an outgoing IPv6 packet. In the command line interface, separate the range with a hyphen. For example: 40-90.  
        Note: The destination port can be specified only for TCP and UDP protocols. 
    .PARAMETER destportop 
        Either the equals (=) or does not equal (!=) logical operator.  
        Possible values = =, !=, EQ, NEQ 
    .PARAMETER destportval 
        Destination port (range).  
        Maximum length = 65535 
    .PARAMETER srcmac 
        MAC address to match against the source MAC address of an outgoing IPv6 packet. 
    .PARAMETER srcmacmask 
        Used to define range of Source MAC address. It takes string of 0 and 1, 0s are for exact match and 1s for wildcard. For matching first 3 bytes of MAC address, srcMacMask value "000000111111". .  
        Default value: "000000000000" 
    .PARAMETER protocol 
        Protocol, identified by protocol name, to match against the protocol of an outgoing IPv6 packet.  
        Possible values = ICMPV6, TCP, UDP, ICMP, IGMP, EGP, IGP, ARGUS, RDP, RSVP, EIGRP, L2TP, ISIS, GGP, IPoverIP, ST, CBT, BBN-RCC-M, NVP-II, PUP, EMCON, XNET, CHAOS, MUX, DCN-MEAS, HMP, PRM, XNS-IDP, TRUNK-1, TRUNK-2, LEAF-1, LEAF-2, IRTP, ISO-TP4, NETBLT, MFE-NSP, MERIT-INP, SEP, 3PC, IDPR, XTP, DDP, IDPR-CMTP, TP++, IL, IPv6, SDRP, IPv6-Route, IPv6-Frag, IDRP, GRE, MHRP, BNA, ESP, AH, I-NLSP, SWIPE, NARP, MOBILE, TLSP, SKIP, IPv6-NoNx, IPv6-Opts, Any-Host-Internal-Protocol, CFTP, Any-Local-Network, SAT-EXPAK, KRYPTOLAN, RVD, IPPC, Any-Distributed-File-System, TFTP, VISA, IPCV, CPNX, CPHB, WSN, PVP, BR-SAT-MO, SUN-ND, WB-MON, WB-EXPAK, ISO-IP, VMTP, SECURE-VM, VINES, TTP, NSFNET-IG, DGP, TCF, OSPFIGP, Sprite-RP, LARP, MTP, AX.25, IPIP, MICP, SCC-SP, ETHERIP, Any-Private-Encryption-Scheme, GMTP, IFMP, PNNI, PIM, ARIS, SCPS, QNX, A/N, IPComp, SNP, Compaq-Pe, IPX-in-IP, VRRP, PGM, Any-0-Hop-Protocol, ENCAP, DDX, IATP, STP, SRP, UTI, SMP, SM, PTP, FIRE, CRTP, CRUDP, SSCOPMCE, IPLT, SPS, PIPE, SCTP, FC, RSVP-E2E-IGNORE, Mobility-Header, UDPLite 
    .PARAMETER protocolnumber 
        Protocol, identified by protocol number, to match against the protocol of an outgoing IPv6 packet.  
        Minimum value = 1  
        Maximum value = 255 
    .PARAMETER vlan 
        ID of the VLAN. The Citrix ADC compares the PBR6 only to the outgoing packets on the specified VLAN. If you do not specify an interface ID, the appliance compares the PBR6 to the outgoing packets on all VLANs.  
        Minimum value = 1  
        Maximum value = 4094 
    .PARAMETER vxlan 
        ID of the VXLAN. The Citrix ADC compares the PBR6 only to the outgoing packets on the specified VXLAN. If you do not specify an interface ID, the appliance compares the PBR6 to the outgoing packets on all VXLANs.  
        Minimum value = 1  
        Maximum value = 16777215 
    .PARAMETER Interface 
        ID of an interface. The Citrix ADC compares the PBR6 only to the outgoing packets on the specified interface. If you do not specify a value, the appliance compares the PBR6 to the outgoing packets on all interfaces. 
    .PARAMETER priority 
        Priority of the PBR6, which determines the order in which it is evaluated relative to the other PBR6s. If you do not specify priorities while creating PBR6s, the PBR6s are evaluated in the order in which they are created.  
        Minimum value = 1  
        Maximum value = 81920 
    .PARAMETER state 
        Enable or disable the PBR6. After you apply the PBR6s, the Citrix ADC compares outgoing packets to the enabled PBR6s.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER msr 
        Monitor the route specified by the Next Hop parameter.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER monitor 
        The name of the monitor.(Can be only of type ping or ARP ).  
        Minimum length = 1 
    .PARAMETER nexthop 
        IP address of the next hop router to which to send matching packets if action is set to ALLOW. This next hop should be directly reachable from the appliance. 
    .PARAMETER nexthopval 
        The Next Hop IPv6 address. 
    .PARAMETER iptunnel 
        The iptunnel name where packets need to be forwarded upon. 
    .PARAMETER vxlanvlanmap 
        The vlan to vxlan mapping to be applied for incoming packets over this pbr tunnel. 
    .PARAMETER nexthopvlan 
        VLAN number to be used for link local nexthop .  
        Minimum value = 1  
        Maximum value = 4094 
    .PARAMETER ownergroup 
        The owner node group in a Cluster for this pbr rule. If owner node group is not specified then the pbr rule is treated as Striped pbr rule.  
        Default value: DEFAULT_NG  
        Minimum length = 1 
    .PARAMETER PassThru 
        Return details about the created nspbr6 item.
    .EXAMPLE
        Invoke-ADCAddNspbr6 -name <string> -action <string>
    .NOTES
        File Name : Invoke-ADCAddNspbr6
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nspbr6/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name ,

        [ValidateRange(0, 4094)]
        [double]$td ,

        [Parameter(Mandatory = $true)]
        [ValidateSet('ALLOW', 'DENY')]
        [string]$action ,

        [boolean]$srcipv6 ,

        [ValidateSet('=', '!=', 'EQ', 'NEQ')]
        [string]$srcipop ,

        [string]$srcipv6val ,

        [ValidateRange(40, 90)]
        [boolean]$srcport ,

        [ValidateSet('=', '!=', 'EQ', 'NEQ')]
        [string]$srcportop ,

        [string]$srcportval ,

        [boolean]$destipv6 ,

        [ValidateSet('=', '!=', 'EQ', 'NEQ')]
        [string]$destipop ,

        [string]$destipv6val ,

        [ValidateRange(40, 90)]
        [boolean]$destport ,

        [ValidateSet('=', '!=', 'EQ', 'NEQ')]
        [string]$destportop ,

        [string]$destportval ,

        [string]$srcmac ,

        [string]$srcmacmask = '"000000000000"' ,

        [ValidateSet('ICMPV6', 'TCP', 'UDP', 'ICMP', 'IGMP', 'EGP', 'IGP', 'ARGUS', 'RDP', 'RSVP', 'EIGRP', 'L2TP', 'ISIS', 'GGP', 'IPoverIP', 'ST', 'CBT', 'BBN-RCC-M', 'NVP-II', 'PUP', 'EMCON', 'XNET', 'CHAOS', 'MUX', 'DCN-MEAS', 'HMP', 'PRM', 'XNS-IDP', 'TRUNK-1', 'TRUNK-2', 'LEAF-1', 'LEAF-2', 'IRTP', 'ISO-TP4', 'NETBLT', 'MFE-NSP', 'MERIT-INP', 'SEP', '3PC', 'IDPR', 'XTP', 'DDP', 'IDPR-CMTP', 'TP++', 'IL', 'IPv6', 'SDRP', 'IPv6-Route', 'IPv6-Frag', 'IDRP', 'GRE', 'MHRP', 'BNA', 'ESP', 'AH', 'I-NLSP', 'SWIPE', 'NARP', 'MOBILE', 'TLSP', 'SKIP', 'IPv6-NoNx', 'IPv6-Opts', 'Any-Host-Internal-Protocol', 'CFTP', 'Any-Local-Network', 'SAT-EXPAK', 'KRYPTOLAN', 'RVD', 'IPPC', 'Any-Distributed-File-System', 'TFTP', 'VISA', 'IPCV', 'CPNX', 'CPHB', 'WSN', 'PVP', 'BR-SAT-MO', 'SUN-ND', 'WB-MON', 'WB-EXPAK', 'ISO-IP', 'VMTP', 'SECURE-VM', 'VINES', 'TTP', 'NSFNET-IG', 'DGP', 'TCF', 'OSPFIGP', 'Sprite-RP', 'LARP', 'MTP', 'AX.25', 'IPIP', 'MICP', 'SCC-SP', 'ETHERIP', 'Any-Private-Encryption-Scheme', 'GMTP', 'IFMP', 'PNNI', 'PIM', 'ARIS', 'SCPS', 'QNX', 'A/N', 'IPComp', 'SNP', 'Compaq-Pe', 'IPX-in-IP', 'VRRP', 'PGM', 'Any-0-Hop-Protocol', 'ENCAP', 'DDX', 'IATP', 'STP', 'SRP', 'UTI', 'SMP', 'SM', 'PTP', 'FIRE', 'CRTP', 'CRUDP', 'SSCOPMCE', 'IPLT', 'SPS', 'PIPE', 'SCTP', 'FC', 'RSVP-E2E-IGNORE', 'Mobility-Header', 'UDPLite')]
        [string]$protocol ,

        [ValidateRange(1, 255)]
        [double]$protocolnumber ,

        [ValidateRange(1, 4094)]
        [double]$vlan ,

        [ValidateRange(1, 16777215)]
        [double]$vxlan ,

        [string]$Interface ,

        [ValidateRange(1, 81920)]
        [double]$priority ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$state = 'ENABLED' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$msr = 'DISABLED' ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$monitor ,

        [boolean]$nexthop ,

        [string]$nexthopval ,

        [string]$iptunnel ,

        [string]$vxlanvlanmap ,

        [ValidateRange(1, 4094)]
        [double]$nexthopvlan ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$ownergroup = 'DEFAULT_NG' ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddNspbr6: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
                action = $action
            }
            if ($PSBoundParameters.ContainsKey('td')) { $Payload.Add('td', $td) }
            if ($PSBoundParameters.ContainsKey('srcipv6')) { $Payload.Add('srcipv6', $srcipv6) }
            if ($PSBoundParameters.ContainsKey('srcipop')) { $Payload.Add('srcipop', $srcipop) }
            if ($PSBoundParameters.ContainsKey('srcipv6val')) { $Payload.Add('srcipv6val', $srcipv6val) }
            if ($PSBoundParameters.ContainsKey('srcport')) { $Payload.Add('srcport', $srcport) }
            if ($PSBoundParameters.ContainsKey('srcportop')) { $Payload.Add('srcportop', $srcportop) }
            if ($PSBoundParameters.ContainsKey('srcportval')) { $Payload.Add('srcportval', $srcportval) }
            if ($PSBoundParameters.ContainsKey('destipv6')) { $Payload.Add('destipv6', $destipv6) }
            if ($PSBoundParameters.ContainsKey('destipop')) { $Payload.Add('destipop', $destipop) }
            if ($PSBoundParameters.ContainsKey('destipv6val')) { $Payload.Add('destipv6val', $destipv6val) }
            if ($PSBoundParameters.ContainsKey('destport')) { $Payload.Add('destport', $destport) }
            if ($PSBoundParameters.ContainsKey('destportop')) { $Payload.Add('destportop', $destportop) }
            if ($PSBoundParameters.ContainsKey('destportval')) { $Payload.Add('destportval', $destportval) }
            if ($PSBoundParameters.ContainsKey('srcmac')) { $Payload.Add('srcmac', $srcmac) }
            if ($PSBoundParameters.ContainsKey('srcmacmask')) { $Payload.Add('srcmacmask', $srcmacmask) }
            if ($PSBoundParameters.ContainsKey('protocol')) { $Payload.Add('protocol', $protocol) }
            if ($PSBoundParameters.ContainsKey('protocolnumber')) { $Payload.Add('protocolnumber', $protocolnumber) }
            if ($PSBoundParameters.ContainsKey('vlan')) { $Payload.Add('vlan', $vlan) }
            if ($PSBoundParameters.ContainsKey('vxlan')) { $Payload.Add('vxlan', $vxlan) }
            if ($PSBoundParameters.ContainsKey('Interface')) { $Payload.Add('Interface', $Interface) }
            if ($PSBoundParameters.ContainsKey('priority')) { $Payload.Add('priority', $priority) }
            if ($PSBoundParameters.ContainsKey('state')) { $Payload.Add('state', $state) }
            if ($PSBoundParameters.ContainsKey('msr')) { $Payload.Add('msr', $msr) }
            if ($PSBoundParameters.ContainsKey('monitor')) { $Payload.Add('monitor', $monitor) }
            if ($PSBoundParameters.ContainsKey('nexthop')) { $Payload.Add('nexthop', $nexthop) }
            if ($PSBoundParameters.ContainsKey('nexthopval')) { $Payload.Add('nexthopval', $nexthopval) }
            if ($PSBoundParameters.ContainsKey('iptunnel')) { $Payload.Add('iptunnel', $iptunnel) }
            if ($PSBoundParameters.ContainsKey('vxlanvlanmap')) { $Payload.Add('vxlanvlanmap', $vxlanvlanmap) }
            if ($PSBoundParameters.ContainsKey('nexthopvlan')) { $Payload.Add('nexthopvlan', $nexthopvlan) }
            if ($PSBoundParameters.ContainsKey('ownergroup')) { $Payload.Add('ownergroup', $ownergroup) }
 
            if ($PSCmdlet.ShouldProcess("nspbr6", "Add NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nspbr6 -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetNspbr6 -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddNspbr6: Finished"
    }
}

function Invoke-ADCRenumberNspbr6 {
<#
    .SYNOPSIS
        Renumber NS configuration Object
    .DESCRIPTION
        Renumber NS configuration Object 
    .EXAMPLE
        Invoke-ADCRenumberNspbr6 
    .NOTES
        File Name : Invoke-ADCRenumberNspbr6
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nspbr6/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession) 

    )
    begin {
        Write-Verbose "Invoke-ADCRenumberNspbr6: Starting"
    }
    process {
        try {
            $Payload = @{

            }

            if ($PSCmdlet.ShouldProcess($Name, "Renumber NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nspbr6 -Action renumber -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $result
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCRenumberNspbr6: Finished"
    }
}

function Invoke-ADCDeleteNspbr6 {
<#
    .SYNOPSIS
        Delete NS configuration Object
    .DESCRIPTION
        Delete NS configuration Object
    .PARAMETER name 
       Name for the PBR6. Must begin with an ASCII alphabetic or underscore \(_\) character, and must contain only ASCII alphanumeric, underscore, hash \(\#\), period \(.\), space, colon \(:\), at \(@\), equals \(=\), and hyphen \(-\) characters. Cannot be changed after the PBR6 is created.  
       Minimum length = 1 
    .EXAMPLE
        Invoke-ADCDeleteNspbr6 -name <string>
    .NOTES
        File Name : Invoke-ADCDeleteNspbr6
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nspbr6/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$name 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteNspbr6: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }

            if ($PSCmdlet.ShouldProcess("$name", "Delete NS configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type nspbr6 -Resource $name -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteNspbr6: Finished"
    }
}

function Invoke-ADCUpdateNspbr6 {
<#
    .SYNOPSIS
        Update NS configuration Object
    .DESCRIPTION
        Update NS configuration Object 
    .PARAMETER name 
        Name for the PBR6. Must begin with an ASCII alphabetic or underscore \(_\) character, and must contain only ASCII alphanumeric, underscore, hash \(\#\), period \(.\), space, colon \(:\), at \(@\), equals \(=\), and hyphen \(-\) characters. Cannot be changed after the PBR6 is created.  
        Minimum length = 1 
    .PARAMETER action 
        Action to perform on the outgoing IPv6 packets that match the PBR6.  
        Available settings function as follows:  
        * ALLOW - The Citrix ADC sends the packet to the designated next-hop router.  
        * DENY - The Citrix ADC applies the routing table for normal destination-based routing.  
        Possible values = ALLOW, DENY 
    .PARAMETER srcipv6 
        IP address or range of IP addresses to match against the source IP address of an outgoing IPv6 packet. In the command line interface, separate the range with a hyphen. 
    .PARAMETER srcipop 
        Either the equals (=) or does not equal (!=) logical operator.  
        Possible values = =, !=, EQ, NEQ 
    .PARAMETER srcipv6val 
        IP address or range of IP addresses to match against the source IP address of an outgoing IPv6 packet. In the command line interface, separate the range with a hyphen. 
    .PARAMETER srcport 
        Port number or range of port numbers to match against the source port number of an outgoing IPv6 packet. In the command line interface, separate the range with a hyphen. For example: 40-90. 
    .PARAMETER srcportop 
        Either the equals (=) or does not equal (!=) logical operator.  
        Possible values = =, !=, EQ, NEQ 
    .PARAMETER srcportval 
        Source port (range).  
        Maximum length = 65535 
    .PARAMETER destipv6 
        IP address or range of IP addresses to match against the destination IP address of an outgoing IPv6 packet. In the command line interface, separate the range with a hyphen. 
    .PARAMETER destipop 
        Either the equals (=) or does not equal (!=) logical operator.  
        Possible values = =, !=, EQ, NEQ 
    .PARAMETER destipv6val 
        IP address or range of IP addresses to match against the destination IP address of an outgoing IPv6 packet. In the command line interface, separate the range with a hyphen. 
    .PARAMETER destport 
        Port number or range of port numbers to match against the destination port number of an outgoing IPv6 packet. In the command line interface, separate the range with a hyphen. For example: 40-90.  
        Note: The destination port can be specified only for TCP and UDP protocols. 
    .PARAMETER destportop 
        Either the equals (=) or does not equal (!=) logical operator.  
        Possible values = =, !=, EQ, NEQ 
    .PARAMETER destportval 
        Destination port (range).  
        Maximum length = 65535 
    .PARAMETER srcmac 
        MAC address to match against the source MAC address of an outgoing IPv6 packet. 
    .PARAMETER srcmacmask 
        Used to define range of Source MAC address. It takes string of 0 and 1, 0s are for exact match and 1s for wildcard. For matching first 3 bytes of MAC address, srcMacMask value "000000111111". .  
        Default value: "000000000000" 
    .PARAMETER protocol 
        Protocol, identified by protocol name, to match against the protocol of an outgoing IPv6 packet.  
        Possible values = ICMPV6, TCP, UDP, ICMP, IGMP, EGP, IGP, ARGUS, RDP, RSVP, EIGRP, L2TP, ISIS, GGP, IPoverIP, ST, CBT, BBN-RCC-M, NVP-II, PUP, EMCON, XNET, CHAOS, MUX, DCN-MEAS, HMP, PRM, XNS-IDP, TRUNK-1, TRUNK-2, LEAF-1, LEAF-2, IRTP, ISO-TP4, NETBLT, MFE-NSP, MERIT-INP, SEP, 3PC, IDPR, XTP, DDP, IDPR-CMTP, TP++, IL, IPv6, SDRP, IPv6-Route, IPv6-Frag, IDRP, GRE, MHRP, BNA, ESP, AH, I-NLSP, SWIPE, NARP, MOBILE, TLSP, SKIP, IPv6-NoNx, IPv6-Opts, Any-Host-Internal-Protocol, CFTP, Any-Local-Network, SAT-EXPAK, KRYPTOLAN, RVD, IPPC, Any-Distributed-File-System, TFTP, VISA, IPCV, CPNX, CPHB, WSN, PVP, BR-SAT-MO, SUN-ND, WB-MON, WB-EXPAK, ISO-IP, VMTP, SECURE-VM, VINES, TTP, NSFNET-IG, DGP, TCF, OSPFIGP, Sprite-RP, LARP, MTP, AX.25, IPIP, MICP, SCC-SP, ETHERIP, Any-Private-Encryption-Scheme, GMTP, IFMP, PNNI, PIM, ARIS, SCPS, QNX, A/N, IPComp, SNP, Compaq-Pe, IPX-in-IP, VRRP, PGM, Any-0-Hop-Protocol, ENCAP, DDX, IATP, STP, SRP, UTI, SMP, SM, PTP, FIRE, CRTP, CRUDP, SSCOPMCE, IPLT, SPS, PIPE, SCTP, FC, RSVP-E2E-IGNORE, Mobility-Header, UDPLite 
    .PARAMETER protocolnumber 
        Protocol, identified by protocol number, to match against the protocol of an outgoing IPv6 packet.  
        Minimum value = 1  
        Maximum value = 255 
    .PARAMETER vlan 
        ID of the VLAN. The Citrix ADC compares the PBR6 only to the outgoing packets on the specified VLAN. If you do not specify an interface ID, the appliance compares the PBR6 to the outgoing packets on all VLANs.  
        Minimum value = 1  
        Maximum value = 4094 
    .PARAMETER vxlan 
        ID of the VXLAN. The Citrix ADC compares the PBR6 only to the outgoing packets on the specified VXLAN. If you do not specify an interface ID, the appliance compares the PBR6 to the outgoing packets on all VXLANs.  
        Minimum value = 1  
        Maximum value = 16777215 
    .PARAMETER Interface 
        ID of an interface. The Citrix ADC compares the PBR6 only to the outgoing packets on the specified interface. If you do not specify a value, the appliance compares the PBR6 to the outgoing packets on all interfaces. 
    .PARAMETER priority 
        Priority of the PBR6, which determines the order in which it is evaluated relative to the other PBR6s. If you do not specify priorities while creating PBR6s, the PBR6s are evaluated in the order in which they are created.  
        Minimum value = 1  
        Maximum value = 81920 
    .PARAMETER msr 
        Monitor the route specified by the Next Hop parameter.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER monitor 
        The name of the monitor.(Can be only of type ping or ARP ).  
        Minimum length = 1 
    .PARAMETER nexthop 
        IP address of the next hop router to which to send matching packets if action is set to ALLOW. This next hop should be directly reachable from the appliance. 
    .PARAMETER nexthopval 
        The Next Hop IPv6 address. 
    .PARAMETER iptunnel 
        The iptunnel name where packets need to be forwarded upon. 
    .PARAMETER vxlanvlanmap 
        The vlan to vxlan mapping to be applied for incoming packets over this pbr tunnel. 
    .PARAMETER nexthopvlan 
        VLAN number to be used for link local nexthop .  
        Minimum value = 1  
        Maximum value = 4094 
    .PARAMETER PassThru 
        Return details about the created nspbr6 item.
    .EXAMPLE
        Invoke-ADCUpdateNspbr6 -name <string>
    .NOTES
        File Name : Invoke-ADCUpdateNspbr6
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nspbr6/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name ,

        [ValidateSet('ALLOW', 'DENY')]
        [string]$action ,

        [boolean]$srcipv6 ,

        [ValidateSet('=', '!=', 'EQ', 'NEQ')]
        [string]$srcipop ,

        [string]$srcipv6val ,

        [ValidateRange(40, 90)]
        [boolean]$srcport ,

        [ValidateSet('=', '!=', 'EQ', 'NEQ')]
        [string]$srcportop ,

        [string]$srcportval ,

        [boolean]$destipv6 ,

        [ValidateSet('=', '!=', 'EQ', 'NEQ')]
        [string]$destipop ,

        [string]$destipv6val ,

        [ValidateRange(40, 90)]
        [boolean]$destport ,

        [ValidateSet('=', '!=', 'EQ', 'NEQ')]
        [string]$destportop ,

        [string]$destportval ,

        [string]$srcmac ,

        [string]$srcmacmask ,

        [ValidateSet('ICMPV6', 'TCP', 'UDP', 'ICMP', 'IGMP', 'EGP', 'IGP', 'ARGUS', 'RDP', 'RSVP', 'EIGRP', 'L2TP', 'ISIS', 'GGP', 'IPoverIP', 'ST', 'CBT', 'BBN-RCC-M', 'NVP-II', 'PUP', 'EMCON', 'XNET', 'CHAOS', 'MUX', 'DCN-MEAS', 'HMP', 'PRM', 'XNS-IDP', 'TRUNK-1', 'TRUNK-2', 'LEAF-1', 'LEAF-2', 'IRTP', 'ISO-TP4', 'NETBLT', 'MFE-NSP', 'MERIT-INP', 'SEP', '3PC', 'IDPR', 'XTP', 'DDP', 'IDPR-CMTP', 'TP++', 'IL', 'IPv6', 'SDRP', 'IPv6-Route', 'IPv6-Frag', 'IDRP', 'GRE', 'MHRP', 'BNA', 'ESP', 'AH', 'I-NLSP', 'SWIPE', 'NARP', 'MOBILE', 'TLSP', 'SKIP', 'IPv6-NoNx', 'IPv6-Opts', 'Any-Host-Internal-Protocol', 'CFTP', 'Any-Local-Network', 'SAT-EXPAK', 'KRYPTOLAN', 'RVD', 'IPPC', 'Any-Distributed-File-System', 'TFTP', 'VISA', 'IPCV', 'CPNX', 'CPHB', 'WSN', 'PVP', 'BR-SAT-MO', 'SUN-ND', 'WB-MON', 'WB-EXPAK', 'ISO-IP', 'VMTP', 'SECURE-VM', 'VINES', 'TTP', 'NSFNET-IG', 'DGP', 'TCF', 'OSPFIGP', 'Sprite-RP', 'LARP', 'MTP', 'AX.25', 'IPIP', 'MICP', 'SCC-SP', 'ETHERIP', 'Any-Private-Encryption-Scheme', 'GMTP', 'IFMP', 'PNNI', 'PIM', 'ARIS', 'SCPS', 'QNX', 'A/N', 'IPComp', 'SNP', 'Compaq-Pe', 'IPX-in-IP', 'VRRP', 'PGM', 'Any-0-Hop-Protocol', 'ENCAP', 'DDX', 'IATP', 'STP', 'SRP', 'UTI', 'SMP', 'SM', 'PTP', 'FIRE', 'CRTP', 'CRUDP', 'SSCOPMCE', 'IPLT', 'SPS', 'PIPE', 'SCTP', 'FC', 'RSVP-E2E-IGNORE', 'Mobility-Header', 'UDPLite')]
        [string]$protocol ,

        [ValidateRange(1, 255)]
        [double]$protocolnumber ,

        [ValidateRange(1, 4094)]
        [double]$vlan ,

        [ValidateRange(1, 16777215)]
        [double]$vxlan ,

        [string]$Interface ,

        [ValidateRange(1, 81920)]
        [double]$priority ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$msr ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$monitor ,

        [boolean]$nexthop ,

        [string]$nexthopval ,

        [string]$iptunnel ,

        [string]$vxlanvlanmap ,

        [ValidateRange(1, 4094)]
        [double]$nexthopvlan ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCUpdateNspbr6: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
            }
            if ($PSBoundParameters.ContainsKey('action')) { $Payload.Add('action', $action) }
            if ($PSBoundParameters.ContainsKey('srcipv6')) { $Payload.Add('srcipv6', $srcipv6) }
            if ($PSBoundParameters.ContainsKey('srcipop')) { $Payload.Add('srcipop', $srcipop) }
            if ($PSBoundParameters.ContainsKey('srcipv6val')) { $Payload.Add('srcipv6val', $srcipv6val) }
            if ($PSBoundParameters.ContainsKey('srcport')) { $Payload.Add('srcport', $srcport) }
            if ($PSBoundParameters.ContainsKey('srcportop')) { $Payload.Add('srcportop', $srcportop) }
            if ($PSBoundParameters.ContainsKey('srcportval')) { $Payload.Add('srcportval', $srcportval) }
            if ($PSBoundParameters.ContainsKey('destipv6')) { $Payload.Add('destipv6', $destipv6) }
            if ($PSBoundParameters.ContainsKey('destipop')) { $Payload.Add('destipop', $destipop) }
            if ($PSBoundParameters.ContainsKey('destipv6val')) { $Payload.Add('destipv6val', $destipv6val) }
            if ($PSBoundParameters.ContainsKey('destport')) { $Payload.Add('destport', $destport) }
            if ($PSBoundParameters.ContainsKey('destportop')) { $Payload.Add('destportop', $destportop) }
            if ($PSBoundParameters.ContainsKey('destportval')) { $Payload.Add('destportval', $destportval) }
            if ($PSBoundParameters.ContainsKey('srcmac')) { $Payload.Add('srcmac', $srcmac) }
            if ($PSBoundParameters.ContainsKey('srcmacmask')) { $Payload.Add('srcmacmask', $srcmacmask) }
            if ($PSBoundParameters.ContainsKey('protocol')) { $Payload.Add('protocol', $protocol) }
            if ($PSBoundParameters.ContainsKey('protocolnumber')) { $Payload.Add('protocolnumber', $protocolnumber) }
            if ($PSBoundParameters.ContainsKey('vlan')) { $Payload.Add('vlan', $vlan) }
            if ($PSBoundParameters.ContainsKey('vxlan')) { $Payload.Add('vxlan', $vxlan) }
            if ($PSBoundParameters.ContainsKey('Interface')) { $Payload.Add('Interface', $Interface) }
            if ($PSBoundParameters.ContainsKey('priority')) { $Payload.Add('priority', $priority) }
            if ($PSBoundParameters.ContainsKey('msr')) { $Payload.Add('msr', $msr) }
            if ($PSBoundParameters.ContainsKey('monitor')) { $Payload.Add('monitor', $monitor) }
            if ($PSBoundParameters.ContainsKey('nexthop')) { $Payload.Add('nexthop', $nexthop) }
            if ($PSBoundParameters.ContainsKey('nexthopval')) { $Payload.Add('nexthopval', $nexthopval) }
            if ($PSBoundParameters.ContainsKey('iptunnel')) { $Payload.Add('iptunnel', $iptunnel) }
            if ($PSBoundParameters.ContainsKey('vxlanvlanmap')) { $Payload.Add('vxlanvlanmap', $vxlanvlanmap) }
            if ($PSBoundParameters.ContainsKey('nexthopvlan')) { $Payload.Add('nexthopvlan', $nexthopvlan) }
 
            if ($PSCmdlet.ShouldProcess("nspbr6", "Update NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -Type nspbr6 -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetNspbr6 -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUpdateNspbr6: Finished"
    }
}

function Invoke-ADCUnsetNspbr6 {
<#
    .SYNOPSIS
        Unset NS configuration Object
    .DESCRIPTION
        Unset NS configuration Object 
   .PARAMETER name 
       Name for the PBR6. Must begin with an ASCII alphabetic or underscore \(_\) character, and must contain only ASCII alphanumeric, underscore, hash \(\#\), period \(.\), space, colon \(:\), at \(@\), equals \(=\), and hyphen \(-\) characters. Cannot be changed after the PBR6 is created. 
   .PARAMETER srcipv6 
       IP address or range of IP addresses to match against the source IP address of an outgoing IPv6 packet. In the command line interface, separate the range with a hyphen. 
   .PARAMETER srcport 
       Port number or . 
   .PARAMETER destipv6 
       IP address or range of IP addresses to match against the destination IP address of an outgoing IPv6 packet. In the command line interface, separate the range with a hyphen. 
   .PARAMETER destport 
       Port number or .  
       Note: The destination port can be specified only for TCP and UDP protocols. 
   .PARAMETER srcmac 
       MAC address to match against the source MAC address of an outgoing IPv6 packet. 
   .PARAMETER srcmacmask 
       Used to define range of Source MAC address. It takes string of 0 and 1, 0s are for exact match and 1s for wildcard. For matching first 3 bytes of MAC address, srcMacMask value "000000111111". . 
   .PARAMETER protocol 
       Protocol, identified by protocol name, to match against the protocol of an outgoing IPv6 packet.  
       Possible values = ICMPV6, TCP, UDP, ICMP, IGMP, EGP, IGP, ARGUS, RDP, RSVP, EIGRP, L2TP, ISIS, GGP, IPoverIP, ST, CBT, BBN-RCC-M, NVP-II, PUP, EMCON, XNET, CHAOS, MUX, DCN-MEAS, HMP, PRM, XNS-IDP, TRUNK-1, TRUNK-2, LEAF-1, LEAF-2, IRTP, ISO-TP4, NETBLT, MFE-NSP, MERIT-INP, SEP, 3PC, IDPR, XTP, DDP, IDPR-CMTP, TP++, IL, IPv6, SDRP, IPv6-Route, IPv6-Frag, IDRP, GRE, MHRP, BNA, ESP, AH, I-NLSP, SWIPE, NARP, MOBILE, TLSP, SKIP, IPv6-NoNx, IPv6-Opts, Any-Host-Internal-Protocol, CFTP, Any-Local-Network, SAT-EXPAK, KRYPTOLAN, RVD, IPPC, Any-Distributed-File-System, TFTP, VISA, IPCV, CPNX, CPHB, WSN, PVP, BR-SAT-MO, SUN-ND, WB-MON, WB-EXPAK, ISO-IP, VMTP, SECURE-VM, VINES, TTP, NSFNET-IG, DGP, TCF, OSPFIGP, Sprite-RP, LARP, MTP, AX.25, IPIP, MICP, SCC-SP, ETHERIP, Any-Private-Encryption-Scheme, GMTP, IFMP, PNNI, PIM, ARIS, SCPS, QNX, A/N, IPComp, SNP, Compaq-Pe, IPX-in-IP, VRRP, PGM, Any-0-Hop-Protocol, ENCAP, DDX, IATP, STP, SRP, UTI, SMP, SM, PTP, FIRE, CRTP, CRUDP, SSCOPMCE, IPLT, SPS, PIPE, SCTP, FC, RSVP-E2E-IGNORE, Mobility-Header, UDPLite 
   .PARAMETER Interface 
       ID of an interface. The Citrix ADC compares the PBR6 only to the outgoing packets on the specified interface. If you do not specify a value, the appliance compares the PBR6 to the outgoing packets on all interfaces. 
   .PARAMETER vlan 
       ID of the VLAN. The Citrix ADC compares the PBR6 only to the outgoing packets on the specified VLAN. If you do not specify an interface ID, the appliance compares the PBR6 to the outgoing packets on all VLANs. 
   .PARAMETER vxlan 
       ID of the VXLAN. The Citrix ADC compares the PBR6 only to the outgoing packets on the specified VXLAN. If you do not specify an interface ID, the appliance compares the PBR6 to the outgoing packets on all VXLANs. 
   .PARAMETER msr 
       Monitor the route specified by the Next Hop parameter.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER monitor 
       The name of the monitor.(Can be only of type ping or ARP ). 
   .PARAMETER nexthop 
       IP address of the next hop router to which to send matching packets if action is set to ALLOW. This next hop should be directly reachable from the appliance. 
   .PARAMETER iptunnel 
       The iptunnel name where packets need to be forwarded upon. 
   .PARAMETER nexthopvlan 
       VLAN number to be used for link local nexthop . 
   .PARAMETER vxlanvlanmap 
       The vlan to vxlan mapping to be applied for incoming packets over this pbr tunnel.
    .EXAMPLE
        Invoke-ADCUnsetNspbr6 -name <string>
    .NOTES
        File Name : Invoke-ADCUnsetNspbr6
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nspbr6
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name ,

        [Boolean]$srcipv6 ,

        [Boolean]$srcport ,

        [Boolean]$destipv6 ,

        [Boolean]$destport ,

        [Boolean]$srcmac ,

        [Boolean]$srcmacmask ,

        [Boolean]$protocol ,

        [Boolean]$Interface ,

        [Boolean]$vlan ,

        [Boolean]$vxlan ,

        [Boolean]$msr ,

        [Boolean]$monitor ,

        [Boolean]$nexthop ,

        [Boolean]$iptunnel ,

        [Boolean]$nexthopvlan ,

        [Boolean]$vxlanvlanmap 
    )
    begin {
        Write-Verbose "Invoke-ADCUnsetNspbr6: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
            }
            if ($PSBoundParameters.ContainsKey('srcipv6')) { $Payload.Add('srcipv6', $srcipv6) }
            if ($PSBoundParameters.ContainsKey('srcport')) { $Payload.Add('srcport', $srcport) }
            if ($PSBoundParameters.ContainsKey('destipv6')) { $Payload.Add('destipv6', $destipv6) }
            if ($PSBoundParameters.ContainsKey('destport')) { $Payload.Add('destport', $destport) }
            if ($PSBoundParameters.ContainsKey('srcmac')) { $Payload.Add('srcmac', $srcmac) }
            if ($PSBoundParameters.ContainsKey('srcmacmask')) { $Payload.Add('srcmacmask', $srcmacmask) }
            if ($PSBoundParameters.ContainsKey('protocol')) { $Payload.Add('protocol', $protocol) }
            if ($PSBoundParameters.ContainsKey('Interface')) { $Payload.Add('Interface', $Interface) }
            if ($PSBoundParameters.ContainsKey('vlan')) { $Payload.Add('vlan', $vlan) }
            if ($PSBoundParameters.ContainsKey('vxlan')) { $Payload.Add('vxlan', $vxlan) }
            if ($PSBoundParameters.ContainsKey('msr')) { $Payload.Add('msr', $msr) }
            if ($PSBoundParameters.ContainsKey('monitor')) { $Payload.Add('monitor', $monitor) }
            if ($PSBoundParameters.ContainsKey('nexthop')) { $Payload.Add('nexthop', $nexthop) }
            if ($PSBoundParameters.ContainsKey('iptunnel')) { $Payload.Add('iptunnel', $iptunnel) }
            if ($PSBoundParameters.ContainsKey('nexthopvlan')) { $Payload.Add('nexthopvlan', $nexthopvlan) }
            if ($PSBoundParameters.ContainsKey('vxlanvlanmap')) { $Payload.Add('vxlanvlanmap', $vxlanvlanmap) }
            if ($PSCmdlet.ShouldProcess("$name", "Unset NS configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nspbr6 -Action unset -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUnsetNspbr6: Finished"
    }
}

function Invoke-ADCEnableNspbr6 {
<#
    .SYNOPSIS
        Enable NS configuration Object
    .DESCRIPTION
        Enable NS configuration Object 
    .PARAMETER name 
        Name for the PBR6. Must begin with an ASCII alphabetic or underscore \(_\) character, and must contain only ASCII alphanumeric, underscore, hash \(\#\), period \(.\), space, colon \(:\), at \(@\), equals \(=\), and hyphen \(-\) characters. Cannot be changed after the PBR6 is created.
    .EXAMPLE
        Invoke-ADCEnableNspbr6 -name <string>
    .NOTES
        File Name : Invoke-ADCEnableNspbr6
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nspbr6/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name 

    )
    begin {
        Write-Verbose "Invoke-ADCEnableNspbr6: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
            }

            if ($PSCmdlet.ShouldProcess($Name, "Enable NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nspbr6 -Action enable -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $result
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCEnableNspbr6: Finished"
    }
}

function Invoke-ADCDisableNspbr6 {
<#
    .SYNOPSIS
        Disable NS configuration Object
    .DESCRIPTION
        Disable NS configuration Object 
    .PARAMETER name 
        Name for the PBR6. Must begin with an ASCII alphabetic or underscore \(_\) character, and must contain only ASCII alphanumeric, underscore, hash \(\#\), period \(.\), space, colon \(:\), at \(@\), equals \(=\), and hyphen \(-\) characters. Cannot be changed after the PBR6 is created.
    .EXAMPLE
        Invoke-ADCDisableNspbr6 -name <string>
    .NOTES
        File Name : Invoke-ADCDisableNspbr6
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nspbr6/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name 

    )
    begin {
        Write-Verbose "Invoke-ADCDisableNspbr6: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
            }

            if ($PSCmdlet.ShouldProcess($Name, "Disable NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nspbr6 -Action disable -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $result
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDisableNspbr6: Finished"
    }
}

function Invoke-ADCClearNspbr6 {
<#
    .SYNOPSIS
        Clear NS configuration Object
    .DESCRIPTION
        Clear NS configuration Object 
    .EXAMPLE
        Invoke-ADCClearNspbr6 
    .NOTES
        File Name : Invoke-ADCClearNspbr6
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nspbr6/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession) 

    )
    begin {
        Write-Verbose "Invoke-ADCClearNspbr6: Starting"
    }
    process {
        try {
            $Payload = @{

            }

            if ($PSCmdlet.ShouldProcess($Name, "Clear NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nspbr6 -Action clear -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $result
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCClearNspbr6: Finished"
    }
}

function Invoke-ADCApplyNspbr6 {
<#
    .SYNOPSIS
        Apply NS configuration Object
    .DESCRIPTION
        Apply NS configuration Object 
    .EXAMPLE
        Invoke-ADCApplyNspbr6 
    .NOTES
        File Name : Invoke-ADCApplyNspbr6
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nspbr6/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession) 

    )
    begin {
        Write-Verbose "Invoke-ADCApplyNspbr6: Starting"
    }
    process {
        try {
            $Payload = @{

            }

            if ($PSCmdlet.ShouldProcess($Name, "Apply NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nspbr6 -Action apply -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $result
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCApplyNspbr6: Finished"
    }
}

function Invoke-ADCGetNspbr6 {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER name 
       Name for the PBR6. Must begin with an ASCII alphabetic or underscore \(_\) character, and must contain only ASCII alphanumeric, underscore, hash \(\#\), period \(.\), space, colon \(:\), at \(@\), equals \(=\), and hyphen \(-\) characters. Cannot be changed after the PBR6 is created. 
    .PARAMETER GetAll 
        Retreive all nspbr6 object(s)
    .PARAMETER Count
        If specified, the count of the nspbr6 object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNspbr6
    .EXAMPLE 
        Invoke-ADCGetNspbr6 -GetAll 
    .EXAMPLE 
        Invoke-ADCGetNspbr6 -Count
    .EXAMPLE
        Invoke-ADCGetNspbr6 -name <string>
    .EXAMPLE
        Invoke-ADCGetNspbr6 -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNspbr6
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nspbr6/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll,

        [Parameter(ParameterSetName = 'GetAll')]
        [Parameter(ParameterSetName = 'Get')]
        [Switch]$ViewSummary

    )
    begin {
        Write-Verbose "Invoke-ADCGetNspbr6: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all nspbr6 objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nspbr6 -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nspbr6 objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nspbr6 -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nspbr6 objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nspbr6 -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nspbr6 configuration for property 'name'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nspbr6 -Resource $name -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving nspbr6 configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nspbr6 -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNspbr6: Ended"
    }
}

function Invoke-ADCRenumberNspbrs {
<#
    .SYNOPSIS
        Renumber NS configuration Object
    .DESCRIPTION
        Renumber NS configuration Object 
    .EXAMPLE
        Invoke-ADCRenumberNspbrs 
    .NOTES
        File Name : Invoke-ADCRenumberNspbrs
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nspbrs/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession) 

    )
    begin {
        Write-Verbose "Invoke-ADCRenumberNspbrs: Starting"
    }
    process {
        try {
            $Payload = @{

            }

            if ($PSCmdlet.ShouldProcess($Name, "Renumber NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nspbrs -Action renumber -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $result
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCRenumberNspbrs: Finished"
    }
}

function Invoke-ADCClearNspbrs {
<#
    .SYNOPSIS
        Clear NS configuration Object
    .DESCRIPTION
        Clear NS configuration Object 
    .EXAMPLE
        Invoke-ADCClearNspbrs 
    .NOTES
        File Name : Invoke-ADCClearNspbrs
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nspbrs/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession) 

    )
    begin {
        Write-Verbose "Invoke-ADCClearNspbrs: Starting"
    }
    process {
        try {
            $Payload = @{

            }

            if ($PSCmdlet.ShouldProcess($Name, "Clear NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nspbrs -Action clear -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $result
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCClearNspbrs: Finished"
    }
}

function Invoke-ADCApplyNspbrs {
<#
    .SYNOPSIS
        Apply NS configuration Object
    .DESCRIPTION
        Apply NS configuration Object 
    .EXAMPLE
        Invoke-ADCApplyNspbrs 
    .NOTES
        File Name : Invoke-ADCApplyNspbrs
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nspbrs/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession) 

    )
    begin {
        Write-Verbose "Invoke-ADCApplyNspbrs: Starting"
    }
    process {
        try {
            $Payload = @{

            }

            if ($PSCmdlet.ShouldProcess($Name, "Apply NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nspbrs -Action apply -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $result
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCApplyNspbrs: Finished"
    }
}

function Invoke-ADCUpdateNsratecontrol {
<#
    .SYNOPSIS
        Update NS configuration Object
    .DESCRIPTION
        Update NS configuration Object 
    .PARAMETER tcpthreshold 
        Number of SYNs permitted per 10 milliseconds. 
    .PARAMETER udpthreshold 
        Number of UDP packets permitted per 10 milliseconds. 
    .PARAMETER icmpthreshold 
        Number of ICMP packets permitted per 10 milliseconds.  
        Default value: 100 
    .PARAMETER tcprstthreshold 
        The number of TCP RST packets permitted per 10 milli second. zero means rate control is disabled and 0xffffffff means every thing is rate controlled.  
        Default value: 100
    .EXAMPLE
        Invoke-ADCUpdateNsratecontrol 
    .NOTES
        File Name : Invoke-ADCUpdateNsratecontrol
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsratecontrol/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [double]$tcpthreshold ,

        [double]$udpthreshold ,

        [double]$icmpthreshold ,

        [double]$tcprstthreshold 

    )
    begin {
        Write-Verbose "Invoke-ADCUpdateNsratecontrol: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('tcpthreshold')) { $Payload.Add('tcpthreshold', $tcpthreshold) }
            if ($PSBoundParameters.ContainsKey('udpthreshold')) { $Payload.Add('udpthreshold', $udpthreshold) }
            if ($PSBoundParameters.ContainsKey('icmpthreshold')) { $Payload.Add('icmpthreshold', $icmpthreshold) }
            if ($PSBoundParameters.ContainsKey('tcprstthreshold')) { $Payload.Add('tcprstthreshold', $tcprstthreshold) }
 
            if ($PSCmdlet.ShouldProcess("nsratecontrol", "Update NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -Type nsratecontrol -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
            Write-Output $result

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUpdateNsratecontrol: Finished"
    }
}

function Invoke-ADCUnsetNsratecontrol {
<#
    .SYNOPSIS
        Unset NS configuration Object
    .DESCRIPTION
        Unset NS configuration Object 
   .PARAMETER tcpthreshold 
       Number of SYNs permitted per 10 milliseconds. 
   .PARAMETER udpthreshold 
       Number of UDP packets permitted per 10 milliseconds. 
   .PARAMETER icmpthreshold 
       Number of ICMP packets permitted per 10 milliseconds. 
   .PARAMETER tcprstthreshold 
       The number of TCP RST packets permitted per 10 milli second. zero means rate control is disabled and 0xffffffff means every thing is rate controlled.
    .EXAMPLE
        Invoke-ADCUnsetNsratecontrol 
    .NOTES
        File Name : Invoke-ADCUnsetNsratecontrol
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsratecontrol
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Boolean]$tcpthreshold ,

        [Boolean]$udpthreshold ,

        [Boolean]$icmpthreshold ,

        [Boolean]$tcprstthreshold 
    )
    begin {
        Write-Verbose "Invoke-ADCUnsetNsratecontrol: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('tcpthreshold')) { $Payload.Add('tcpthreshold', $tcpthreshold) }
            if ($PSBoundParameters.ContainsKey('udpthreshold')) { $Payload.Add('udpthreshold', $udpthreshold) }
            if ($PSBoundParameters.ContainsKey('icmpthreshold')) { $Payload.Add('icmpthreshold', $icmpthreshold) }
            if ($PSBoundParameters.ContainsKey('tcprstthreshold')) { $Payload.Add('tcprstthreshold', $tcprstthreshold) }
            if ($PSCmdlet.ShouldProcess("nsratecontrol", "Unset NS configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nsratecontrol -Action unset -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUnsetNsratecontrol: Finished"
    }
}

function Invoke-ADCGetNsratecontrol {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER GetAll 
        Retreive all nsratecontrol object(s)
    .PARAMETER Count
        If specified, the count of the nsratecontrol object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNsratecontrol
    .EXAMPLE 
        Invoke-ADCGetNsratecontrol -GetAll
    .EXAMPLE
        Invoke-ADCGetNsratecontrol -name <string>
    .EXAMPLE
        Invoke-ADCGetNsratecontrol -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNsratecontrol
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsratecontrol/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetNsratecontrol: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all nsratecontrol objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsratecontrol -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nsratecontrol objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsratecontrol -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nsratecontrol objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsratecontrol -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nsratecontrol configuration for property ''"

            } else {
                Write-Verbose "Retrieving nsratecontrol configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsratecontrol -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNsratecontrol: Ended"
    }
}

function Invoke-ADCGetNsrollbackcmd {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER filename 
       File that contains the commands for which the rollback commands must be generated. Specify the full path of the file name. 
    .PARAMETER outtype 
       Format in which the rollback commands must be generated.  
       Possible values = cli, xml 
    .PARAMETER GetAll 
        Retreive all nsrollbackcmd object(s)
    .PARAMETER Count
        If specified, the count of the nsrollbackcmd object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNsrollbackcmd
    .EXAMPLE 
        Invoke-ADCGetNsrollbackcmd -GetAll
    .EXAMPLE
        Invoke-ADCGetNsrollbackcmd -name <string>
    .EXAMPLE
        Invoke-ADCGetNsrollbackcmd -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNsrollbackcmd
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsrollbackcmd/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByArgument')]
        [string]$filename ,

        [Parameter(ParameterSetName = 'GetByArgument')]
        [ValidateSet('cli', 'xml')]
        [string]$outtype,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetNsrollbackcmd: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all nsrollbackcmd objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsrollbackcmd -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nsrollbackcmd objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsrollbackcmd -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nsrollbackcmd objects by arguments"
                $Arguments = @{ } 
                if ($PSBoundParameters.ContainsKey('filename')) { $Arguments.Add('filename', $filename) } 
                if ($PSBoundParameters.ContainsKey('outtype')) { $Arguments.Add('outtype', $outtype) }
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsrollbackcmd -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nsrollbackcmd configuration for property ''"

            } else {
                Write-Verbose "Retrieving nsrollbackcmd configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsrollbackcmd -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNsrollbackcmd: Ended"
    }
}

function Invoke-ADCUpdateNsrpcnode {
<#
    .SYNOPSIS
        Update NS configuration Object
    .DESCRIPTION
        Update NS configuration Object 
    .PARAMETER ipaddress 
        IP address of the node. This has to be in the same subnet as the NSIP address.  
        Minimum length = 1 
    .PARAMETER password 
        Password to be used in authentication with the peer system node.  
        Minimum length = 1 
    .PARAMETER srcip 
        Source IP address to be used to communicate with the peer system node. The default value is 0, which means that the appliance uses the NSIP address as the source IP address. 
    .PARAMETER secure 
        State of the channel when talking to the node.  
        Possible values = YES, NO 
    .PARAMETER PassThru 
        Return details about the created nsrpcnode item.
    .EXAMPLE
        Invoke-ADCUpdateNsrpcnode -ipaddress <string>
    .NOTES
        File Name : Invoke-ADCUpdateNsrpcnode
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsrpcnode/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$ipaddress ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$password ,

        [string]$srcip ,

        [ValidateSet('YES', 'NO')]
        [string]$secure ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCUpdateNsrpcnode: Starting"
    }
    process {
        try {
            $Payload = @{
                ipaddress = $ipaddress
            }
            if ($PSBoundParameters.ContainsKey('password')) { $Payload.Add('password', $password) }
            if ($PSBoundParameters.ContainsKey('srcip')) { $Payload.Add('srcip', $srcip) }
            if ($PSBoundParameters.ContainsKey('secure')) { $Payload.Add('secure', $secure) }
 
            if ($PSCmdlet.ShouldProcess("nsrpcnode", "Update NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -Type nsrpcnode -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetNsrpcnode -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUpdateNsrpcnode: Finished"
    }
}

function Invoke-ADCUnsetNsrpcnode {
<#
    .SYNOPSIS
        Unset NS configuration Object
    .DESCRIPTION
        Unset NS configuration Object 
   .PARAMETER ipaddress 
       IP address of the node. This has to be in the same subnet as the NSIP address. 
   .PARAMETER password 
       Password to be used in authentication with the peer system node. 
   .PARAMETER srcip 
       Source IP address to be used to communicate with the peer system node. The default value is 0, which means that the appliance uses the NSIP address as the source IP address. 
   .PARAMETER secure 
       State of the channel when talking to the node.  
       Possible values = YES, NO
    .EXAMPLE
        Invoke-ADCUnsetNsrpcnode -ipaddress <string>
    .NOTES
        File Name : Invoke-ADCUnsetNsrpcnode
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsrpcnode
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$ipaddress ,

        [Boolean]$password ,

        [Boolean]$srcip ,

        [Boolean]$secure 
    )
    begin {
        Write-Verbose "Invoke-ADCUnsetNsrpcnode: Starting"
    }
    process {
        try {
            $Payload = @{
                ipaddress = $ipaddress
            }
            if ($PSBoundParameters.ContainsKey('password')) { $Payload.Add('password', $password) }
            if ($PSBoundParameters.ContainsKey('srcip')) { $Payload.Add('srcip', $srcip) }
            if ($PSBoundParameters.ContainsKey('secure')) { $Payload.Add('secure', $secure) }
            if ($PSCmdlet.ShouldProcess("$ipaddress", "Unset NS configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nsrpcnode -Action unset -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUnsetNsrpcnode: Finished"
    }
}

function Invoke-ADCGetNsrpcnode {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER ipaddress 
       IP address of the node. This has to be in the same subnet as the NSIP address. 
    .PARAMETER GetAll 
        Retreive all nsrpcnode object(s)
    .PARAMETER Count
        If specified, the count of the nsrpcnode object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNsrpcnode
    .EXAMPLE 
        Invoke-ADCGetNsrpcnode -GetAll 
    .EXAMPLE 
        Invoke-ADCGetNsrpcnode -Count
    .EXAMPLE
        Invoke-ADCGetNsrpcnode -name <string>
    .EXAMPLE
        Invoke-ADCGetNsrpcnode -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNsrpcnode
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsrpcnode/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$ipaddress,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll,

        [Parameter(ParameterSetName = 'GetAll')]
        [Parameter(ParameterSetName = 'Get')]
        [Switch]$ViewSummary

    )
    begin {
        Write-Verbose "Invoke-ADCGetNsrpcnode: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all nsrpcnode objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsrpcnode -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nsrpcnode objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsrpcnode -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nsrpcnode objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsrpcnode -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nsrpcnode configuration for property 'ipaddress'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsrpcnode -Resource $ipaddress -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving nsrpcnode configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsrpcnode -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNsrpcnode: Ended"
    }
}

function Invoke-ADCGetNsrunningconfig {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER withdefaults 
       Include default values of parameters that have not been explicitly configured. If this argument is disabled, such parameters are not included. 
    .PARAMETER GetAll 
        Retreive all nsrunningconfig object(s)
    .PARAMETER Count
        If specified, the count of the nsrunningconfig object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNsrunningconfig
    .EXAMPLE 
        Invoke-ADCGetNsrunningconfig -GetAll
    .EXAMPLE
        Invoke-ADCGetNsrunningconfig -name <string>
    .EXAMPLE
        Invoke-ADCGetNsrunningconfig -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNsrunningconfig
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsrunningconfig/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByArgument')]
        [boolean]$withdefaults,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetNsrunningconfig: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all nsrunningconfig objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsrunningconfig -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nsrunningconfig objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsrunningconfig -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nsrunningconfig objects by arguments"
                $Arguments = @{ } 
                if ($PSBoundParameters.ContainsKey('withdefaults')) { $Arguments.Add('withdefaults', $withdefaults) }
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsrunningconfig -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nsrunningconfig configuration for property ''"

            } else {
                Write-Verbose "Retrieving nsrunningconfig configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsrunningconfig -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNsrunningconfig: Ended"
    }
}

function Invoke-ADCGetNssavedconfig {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER GetAll 
        Retreive all nssavedconfig object(s)
    .PARAMETER Count
        If specified, the count of the nssavedconfig object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNssavedconfig
    .EXAMPLE 
        Invoke-ADCGetNssavedconfig -GetAll
    .EXAMPLE
        Invoke-ADCGetNssavedconfig -name <string>
    .EXAMPLE
        Invoke-ADCGetNssavedconfig -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNssavedconfig
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nssavedconfig/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetNssavedconfig: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all nssavedconfig objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nssavedconfig -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nssavedconfig objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nssavedconfig -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nssavedconfig objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nssavedconfig -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nssavedconfig configuration for property ''"

            } else {
                Write-Verbose "Retrieving nssavedconfig configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nssavedconfig -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNssavedconfig: Ended"
    }
}

function Invoke-ADCAddNsservicefunction {
<#
    .SYNOPSIS
        Add NS configuration Object
    .DESCRIPTION
        Add NS configuration Object 
    .PARAMETER servicefunctionname 
        Name of the service function to be created. Leading character must be a number or letter. Other characters allowed, after the first character, are @ _ - . (period) : (colon) # and space ( ).  
        Minimum length = 1 
    .PARAMETER ingressvlan 
        VLAN ID on which the traffic from service function reaches Citrix ADC.  
        Minimum value = 1  
        Maximum value = 4094 
    .PARAMETER PassThru 
        Return details about the created nsservicefunction item.
    .EXAMPLE
        Invoke-ADCAddNsservicefunction -servicefunctionname <string> -ingressvlan <double>
    .NOTES
        File Name : Invoke-ADCAddNsservicefunction
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsservicefunction/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$servicefunctionname ,

        [Parameter(Mandatory = $true)]
        [ValidateRange(1, 4094)]
        [double]$ingressvlan ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddNsservicefunction: Starting"
    }
    process {
        try {
            $Payload = @{
                servicefunctionname = $servicefunctionname
                ingressvlan = $ingressvlan
            }

 
            if ($PSCmdlet.ShouldProcess("nsservicefunction", "Add NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nsservicefunction -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetNsservicefunction -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddNsservicefunction: Finished"
    }
}

function Invoke-ADCUpdateNsservicefunction {
<#
    .SYNOPSIS
        Update NS configuration Object
    .DESCRIPTION
        Update NS configuration Object 
    .PARAMETER servicefunctionname 
        Name of the service function to be created. Leading character must be a number or letter. Other characters allowed, after the first character, are @ _ - . (period) : (colon) # and space ( ).  
        Minimum length = 1 
    .PARAMETER ingressvlan 
        VLAN ID on which the traffic from service function reaches Citrix ADC.  
        Minimum value = 1  
        Maximum value = 4094 
    .PARAMETER PassThru 
        Return details about the created nsservicefunction item.
    .EXAMPLE
        Invoke-ADCUpdateNsservicefunction -servicefunctionname <string>
    .NOTES
        File Name : Invoke-ADCUpdateNsservicefunction
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsservicefunction/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$servicefunctionname ,

        [ValidateRange(1, 4094)]
        [double]$ingressvlan ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCUpdateNsservicefunction: Starting"
    }
    process {
        try {
            $Payload = @{
                servicefunctionname = $servicefunctionname
            }
            if ($PSBoundParameters.ContainsKey('ingressvlan')) { $Payload.Add('ingressvlan', $ingressvlan) }
 
            if ($PSCmdlet.ShouldProcess("nsservicefunction", "Update NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -Type nsservicefunction -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetNsservicefunction -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUpdateNsservicefunction: Finished"
    }
}

function Invoke-ADCDeleteNsservicefunction {
<#
    .SYNOPSIS
        Delete NS configuration Object
    .DESCRIPTION
        Delete NS configuration Object
    .PARAMETER servicefunctionname 
       Name of the service function to be created. Leading character must be a number or letter. Other characters allowed, after the first character, are @ _ - . (period) : (colon) # and space ( ).  
       Minimum length = 1 
    .EXAMPLE
        Invoke-ADCDeleteNsservicefunction -servicefunctionname <string>
    .NOTES
        File Name : Invoke-ADCDeleteNsservicefunction
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsservicefunction/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$servicefunctionname 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteNsservicefunction: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }

            if ($PSCmdlet.ShouldProcess("$servicefunctionname", "Delete NS configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type nsservicefunction -Resource $servicefunctionname -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteNsservicefunction: Finished"
    }
}

function Invoke-ADCGetNsservicefunction {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER servicefunctionname 
       Name of the service function to be created. Leading character must be a number or letter. Other characters allowed, after the first character, are @ _ - . (period) : (colon) # and space ( ). 
    .PARAMETER GetAll 
        Retreive all nsservicefunction object(s)
    .PARAMETER Count
        If specified, the count of the nsservicefunction object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNsservicefunction
    .EXAMPLE 
        Invoke-ADCGetNsservicefunction -GetAll 
    .EXAMPLE 
        Invoke-ADCGetNsservicefunction -Count
    .EXAMPLE
        Invoke-ADCGetNsservicefunction -name <string>
    .EXAMPLE
        Invoke-ADCGetNsservicefunction -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNsservicefunction
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsservicefunction/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$servicefunctionname,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll,

        [Parameter(ParameterSetName = 'GetAll')]
        [Parameter(ParameterSetName = 'Get')]
        [Switch]$ViewSummary

    )
    begin {
        Write-Verbose "Invoke-ADCGetNsservicefunction: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all nsservicefunction objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsservicefunction -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nsservicefunction objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsservicefunction -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nsservicefunction objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsservicefunction -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nsservicefunction configuration for property 'servicefunctionname'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsservicefunction -Resource $servicefunctionname -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving nsservicefunction configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsservicefunction -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNsservicefunction: Ended"
    }
}

function Invoke-ADCAddNsservicepath {
<#
    .SYNOPSIS
        Add NS configuration Object
    .DESCRIPTION
        Add NS configuration Object 
    .PARAMETER servicepathname 
        Name for the Service path. Must begin with an ASCII alphanumeric or underscore (_) character, and must  
        contain only ASCII alphanumeric, underscore, hash (#), period (.), space, colon (:), at (@), equals (=), and hyphen (-)  
        characters.  
        Minimum length = 1 
    .PARAMETER PassThru 
        Return details about the created nsservicepath item.
    .EXAMPLE
        Invoke-ADCAddNsservicepath -servicepathname <string>
    .NOTES
        File Name : Invoke-ADCAddNsservicepath
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsservicepath/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$servicepathname ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddNsservicepath: Starting"
    }
    process {
        try {
            $Payload = @{
                servicepathname = $servicepathname
            }

 
            if ($PSCmdlet.ShouldProcess("nsservicepath", "Add NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nsservicepath -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetNsservicepath -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddNsservicepath: Finished"
    }
}

function Invoke-ADCDeleteNsservicepath {
<#
    .SYNOPSIS
        Delete NS configuration Object
    .DESCRIPTION
        Delete NS configuration Object
    .PARAMETER servicepathname 
       Name for the Service path. Must begin with an ASCII alphanumeric or underscore (_) character, and must  
       contain only ASCII alphanumeric, underscore, hash (#), period (.), space, colon (:), at (@), equals (=), and hyphen (-)  
       characters.  
       Minimum length = 1 
    .EXAMPLE
        Invoke-ADCDeleteNsservicepath -servicepathname <string>
    .NOTES
        File Name : Invoke-ADCDeleteNsservicepath
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsservicepath/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$servicepathname 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteNsservicepath: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }

            if ($PSCmdlet.ShouldProcess("$servicepathname", "Delete NS configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type nsservicepath -Resource $servicepathname -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteNsservicepath: Finished"
    }
}

function Invoke-ADCGetNsservicepath {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER servicepathname 
       Name for the Service path. Must begin with an ASCII alphanumeric or underscore (_) character, and must  
       contain only ASCII alphanumeric, underscore, hash (#), period (.), space, colon (:), at (@), equals (=), and hyphen (-)  
       characters. 
    .PARAMETER GetAll 
        Retreive all nsservicepath object(s)
    .PARAMETER Count
        If specified, the count of the nsservicepath object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNsservicepath
    .EXAMPLE 
        Invoke-ADCGetNsservicepath -GetAll 
    .EXAMPLE 
        Invoke-ADCGetNsservicepath -Count
    .EXAMPLE
        Invoke-ADCGetNsservicepath -name <string>
    .EXAMPLE
        Invoke-ADCGetNsservicepath -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNsservicepath
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsservicepath/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$servicepathname,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll,

        [Parameter(ParameterSetName = 'GetAll')]
        [Parameter(ParameterSetName = 'Get')]
        [Switch]$ViewSummary

    )
    begin {
        Write-Verbose "Invoke-ADCGetNsservicepath: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all nsservicepath objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsservicepath -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nsservicepath objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsservicepath -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nsservicepath objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsservicepath -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nsservicepath configuration for property 'servicepathname'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsservicepath -Resource $servicepathname -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving nsservicepath configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsservicepath -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNsservicepath: Ended"
    }
}

function Invoke-ADCGetNsservicepathbinding {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER servicepathname 
       Name for the Service path. Must begin with an ASCII alphanumeric or underscore (_) character, and must  
       contain only ASCII alphanumeric, underscore, hash (#), period (.), space, colon (:), at (@), equals (=), and hyphen (-)  
       characters. 
    .PARAMETER GetAll 
        Retreive all nsservicepath_binding object(s)
    .PARAMETER Count
        If specified, the count of the nsservicepath_binding object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNsservicepathbinding
    .EXAMPLE 
        Invoke-ADCGetNsservicepathbinding -GetAll
    .EXAMPLE
        Invoke-ADCGetNsservicepathbinding -name <string>
    .EXAMPLE
        Invoke-ADCGetNsservicepathbinding -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNsservicepathbinding
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsservicepath_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$servicepathname,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetNsservicepathbinding: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ 
                    bulkbindings = 'yes'
                }
                Write-Verbose "Retrieving all nsservicepath_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsservicepath_binding -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nsservicepath_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsservicepath_binding -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nsservicepath_binding objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsservicepath_binding -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nsservicepath_binding configuration for property 'servicepathname'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsservicepath_binding -Resource $servicepathname -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving nsservicepath_binding configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsservicepath_binding -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNsservicepathbinding: Ended"
    }
}

function Invoke-ADCAddNsservicepathnsservicefunctionbinding {
<#
    .SYNOPSIS
        Add NS configuration Object
    .DESCRIPTION
        Add NS configuration Object 
    .PARAMETER servicepathname 
        Name for the Service path. Must begin with an ASCII alphanumeric or underscore (_) character, and must contain only ASCII alphanumeric, underscore, hash (#), period (.), space, colon (:), at (@), equals (=), and hyphen (-) characters.  
        Minimum length = 1 
    .PARAMETER servicefunction 
        List of service functions constituting the chain.  
        Minimum length = 1 
    .PARAMETER index 
        The serviceindex of each servicefunction in path.  
        Minimum value = 1 
    .PARAMETER PassThru 
        Return details about the created nsservicepath_nsservicefunction_binding item.
    .EXAMPLE
        Invoke-ADCAddNsservicepathnsservicefunctionbinding -servicepathname <string> -servicefunction <string> -index <double>
    .NOTES
        File Name : Invoke-ADCAddNsservicepathnsservicefunctionbinding
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsservicepath_nsservicefunction_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [ValidatePattern('^(([a-zA-Z0-9]|[_])+([a-zA-Z0-9]|[_])+)$')]
        [string]$servicepathname ,

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$servicefunction ,

        [Parameter(Mandatory = $true)]
        [double]$index ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddNsservicepathnsservicefunctionbinding: Starting"
    }
    process {
        try {
            $Payload = @{
                servicepathname = $servicepathname
                servicefunction = $servicefunction
                index = $index
            }

 
            if ($PSCmdlet.ShouldProcess("nsservicepath_nsservicefunction_binding", "Add NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -Type nsservicepath_nsservicefunction_binding -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetNsservicepathnsservicefunctionbinding -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddNsservicepathnsservicefunctionbinding: Finished"
    }
}

function Invoke-ADCDeleteNsservicepathnsservicefunctionbinding {
<#
    .SYNOPSIS
        Delete NS configuration Object
    .DESCRIPTION
        Delete NS configuration Object
    .PARAMETER servicepathname 
       Name for the Service path. Must begin with an ASCII alphanumeric or underscore (_) character, and must contain only ASCII alphanumeric, underscore, hash (#), period (.), space, colon (:), at (@), equals (=), and hyphen (-) characters.  
       Minimum length = 1    .PARAMETER servicefunction 
       List of service functions constituting the chain.  
       Minimum length = 1
    .EXAMPLE
        Invoke-ADCDeleteNsservicepathnsservicefunctionbinding -servicepathname <string>
    .NOTES
        File Name : Invoke-ADCDeleteNsservicepathnsservicefunctionbinding
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsservicepath_nsservicefunction_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$servicepathname ,

        [string]$servicefunction 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteNsservicepathnsservicefunctionbinding: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }
            if ($PSBoundParameters.ContainsKey('servicefunction')) { $Arguments.Add('servicefunction', $servicefunction) }
            if ($PSCmdlet.ShouldProcess("$servicepathname", "Delete NS configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type nsservicepath_nsservicefunction_binding -Resource $servicepathname -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteNsservicepathnsservicefunctionbinding: Finished"
    }
}

function Invoke-ADCGetNsservicepathnsservicefunctionbinding {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER servicepathname 
       Name for the Service path. Must begin with an ASCII alphanumeric or underscore (_) character, and must contain only ASCII alphanumeric, underscore, hash (#), period (.), space, colon (:), at (@), equals (=), and hyphen (-) characters. 
    .PARAMETER GetAll 
        Retreive all nsservicepath_nsservicefunction_binding object(s)
    .PARAMETER Count
        If specified, the count of the nsservicepath_nsservicefunction_binding object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNsservicepathnsservicefunctionbinding
    .EXAMPLE 
        Invoke-ADCGetNsservicepathnsservicefunctionbinding -GetAll 
    .EXAMPLE 
        Invoke-ADCGetNsservicepathnsservicefunctionbinding -Count
    .EXAMPLE
        Invoke-ADCGetNsservicepathnsservicefunctionbinding -name <string>
    .EXAMPLE
        Invoke-ADCGetNsservicepathnsservicefunctionbinding -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNsservicepathnsservicefunctionbinding
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsservicepath_nsservicefunction_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateScript({ $_.Length -gt 1 })]
        [ValidatePattern('^(([a-zA-Z0-9]|[_])+([a-zA-Z0-9]|[_])+)$')]
        [string]$servicepathname,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetNsservicepathnsservicefunctionbinding: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ 
                    bulkbindings = 'yes'
                }
                Write-Verbose "Retrieving all nsservicepath_nsservicefunction_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsservicepath_nsservicefunction_binding -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nsservicepath_nsservicefunction_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsservicepath_nsservicefunction_binding -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nsservicepath_nsservicefunction_binding objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsservicepath_nsservicefunction_binding -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nsservicepath_nsservicefunction_binding configuration for property 'servicepathname'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsservicepath_nsservicefunction_binding -Resource $servicepathname -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving nsservicepath_nsservicefunction_binding configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsservicepath_nsservicefunction_binding -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNsservicepathnsservicefunctionbinding: Ended"
    }
}

function Invoke-ADCAddNssimpleacl {
<#
    .SYNOPSIS
        Add NS configuration Object
    .DESCRIPTION
        Add NS configuration Object 
    .PARAMETER aclname 
        Name for the simple ACL rule. Must begin with an ASCII alphabetic or underscore (_) character, and must contain only ASCII alphanumeric, underscore, hash (#), period (.), space, colon (:), at (@), equals (=), and hyphen (-) characters. Cannot be changed after the simple ACL rule is created.  
        Minimum length = 1 
    .PARAMETER aclaction 
        Drop incoming IPv4 packets that match the simple ACL rule.  
        Possible values = DENY 
    .PARAMETER td 
        Integer value that uniquely identifies the traffic domain in which you want to configure the entity. If you do not specify an ID, the entity becomes part of the default traffic domain, which has an ID of 0.  
        Minimum value = 0  
        Maximum value = 4094 
    .PARAMETER srcip 
        IP address to match against the source IP address of an incoming IPv4 packet. 
    .PARAMETER destport 
        Port number to match against the destination port number of an incoming IPv4 packet.  
        DestPort is mandatory while setting Protocol. Omitting the port number and protocol creates an all-ports and all protocols simple ACL rule, which matches any port and any protocol. In that case, you cannot create another simple ACL rule specifying a specific port and the same source IPv4 address.  
        Minimum value = 1  
        Maximum value = 65535 
    .PARAMETER protocol 
        Protocol to match against the protocol of an incoming IPv4 packet. You must set this parameter if you have set the Destination Port parameter.  
        Possible values = TCP, UDP 
    .PARAMETER ttl 
        Number of seconds, in multiples of four, after which the simple ACL rule expires. If you do not want the simple ACL rule to expire, do not specify a TTL value.  
        Minimum value = 4  
        Maximum value = 2147483647 
    .PARAMETER PassThru 
        Return details about the created nssimpleacl item.
    .EXAMPLE
        Invoke-ADCAddNssimpleacl -aclname <string> -aclaction <string> -srcip <string>
    .NOTES
        File Name : Invoke-ADCAddNssimpleacl
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nssimpleacl/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [ValidatePattern('^(([a-zA-Z0-9]|[_])+([a-zA-Z0-9]|[_])+)$')]
        [string]$aclname ,

        [Parameter(Mandatory = $true)]
        [ValidateSet('DENY')]
        [string]$aclaction ,

        [ValidateRange(0, 4094)]
        [double]$td ,

        [Parameter(Mandatory = $true)]
        [string]$srcip ,

        [ValidateRange(1, 65535)]
        [int]$destport ,

        [ValidateSet('TCP', 'UDP')]
        [string]$protocol ,

        [ValidateRange(4, 2147483647)]
        [double]$ttl ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddNssimpleacl: Starting"
    }
    process {
        try {
            $Payload = @{
                aclname = $aclname
                aclaction = $aclaction
                srcip = $srcip
            }
            if ($PSBoundParameters.ContainsKey('td')) { $Payload.Add('td', $td) }
            if ($PSBoundParameters.ContainsKey('destport')) { $Payload.Add('destport', $destport) }
            if ($PSBoundParameters.ContainsKey('protocol')) { $Payload.Add('protocol', $protocol) }
            if ($PSBoundParameters.ContainsKey('ttl')) { $Payload.Add('ttl', $ttl) }
 
            if ($PSCmdlet.ShouldProcess("nssimpleacl", "Add NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nssimpleacl -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetNssimpleacl -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddNssimpleacl: Finished"
    }
}

function Invoke-ADCClearNssimpleacl {
<#
    .SYNOPSIS
        Clear NS configuration Object
    .DESCRIPTION
        Clear NS configuration Object 
    .EXAMPLE
        Invoke-ADCClearNssimpleacl 
    .NOTES
        File Name : Invoke-ADCClearNssimpleacl
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nssimpleacl/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession) 

    )
    begin {
        Write-Verbose "Invoke-ADCClearNssimpleacl: Starting"
    }
    process {
        try {
            $Payload = @{

            }

            if ($PSCmdlet.ShouldProcess($Name, "Clear NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nssimpleacl -Action clear -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $result
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCClearNssimpleacl: Finished"
    }
}

function Invoke-ADCDeleteNssimpleacl {
<#
    .SYNOPSIS
        Delete NS configuration Object
    .DESCRIPTION
        Delete NS configuration Object
    .PARAMETER aclname 
       Name for the simple ACL rule. Must begin with an ASCII alphabetic or underscore (_) character, and must contain only ASCII alphanumeric, underscore, hash (#), period (.), space, colon (:), at (@), equals (=), and hyphen (-) characters. Cannot be changed after the simple ACL rule is created.  
       Minimum length = 1 
    .EXAMPLE
        Invoke-ADCDeleteNssimpleacl -aclname <string>
    .NOTES
        File Name : Invoke-ADCDeleteNssimpleacl
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nssimpleacl/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$aclname 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteNssimpleacl: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }

            if ($PSCmdlet.ShouldProcess("$aclname", "Delete NS configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type nssimpleacl -Resource $aclname -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteNssimpleacl: Finished"
    }
}

function Invoke-ADCFlushNssimpleacl {
<#
    .SYNOPSIS
        Flush NS configuration Object
    .DESCRIPTION
        Flush NS configuration Object 
    .PARAMETER estsessions 
        .
    .EXAMPLE
        Invoke-ADCFlushNssimpleacl -estsessions <boolean>
    .NOTES
        File Name : Invoke-ADCFlushNssimpleacl
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nssimpleacl/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [boolean]$estsessions 

    )
    begin {
        Write-Verbose "Invoke-ADCFlushNssimpleacl: Starting"
    }
    process {
        try {
            $Payload = @{
                estsessions = $estsessions
            }

            if ($PSCmdlet.ShouldProcess($Name, "Flush NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nssimpleacl -Action flush -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $result
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCFlushNssimpleacl: Finished"
    }
}

function Invoke-ADCGetNssimpleacl {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER aclname 
       Name for the simple ACL rule. Must begin with an ASCII alphabetic or underscore (_) character, and must contain only ASCII alphanumeric, underscore, hash (#), period (.), space, colon (:), at (@), equals (=), and hyphen (-) characters. Cannot be changed after the simple ACL rule is created. 
    .PARAMETER GetAll 
        Retreive all nssimpleacl object(s)
    .PARAMETER Count
        If specified, the count of the nssimpleacl object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNssimpleacl
    .EXAMPLE 
        Invoke-ADCGetNssimpleacl -GetAll 
    .EXAMPLE 
        Invoke-ADCGetNssimpleacl -Count
    .EXAMPLE
        Invoke-ADCGetNssimpleacl -name <string>
    .EXAMPLE
        Invoke-ADCGetNssimpleacl -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNssimpleacl
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nssimpleacl/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateScript({ $_.Length -gt 1 })]
        [ValidatePattern('^(([a-zA-Z0-9]|[_])+([a-zA-Z0-9]|[_])+)$')]
        [string]$aclname,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll,

        [Parameter(ParameterSetName = 'GetAll')]
        [Parameter(ParameterSetName = 'Get')]
        [Switch]$ViewSummary

    )
    begin {
        Write-Verbose "Invoke-ADCGetNssimpleacl: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all nssimpleacl objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nssimpleacl -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nssimpleacl objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nssimpleacl -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nssimpleacl objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nssimpleacl -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nssimpleacl configuration for property 'aclname'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nssimpleacl -Resource $aclname -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving nssimpleacl configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nssimpleacl -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNssimpleacl: Ended"
    }
}

function Invoke-ADCAddNssimpleacl6 {
<#
    .SYNOPSIS
        Add NS configuration Object
    .DESCRIPTION
        Add NS configuration Object 
    .PARAMETER aclname 
        Name for the simple ACL6 rule. Must begin with an ASCII alphabetic or underscore (_) character, and must contain only ASCII alphanumeric, underscore, hash (#), period (.), space, colon (:), at (@), equals (=), and hyphen (-) characters. Cannot be changed after the simple ACL6 rule is created.  
        Minimum length = 1 
    .PARAMETER td 
        Integer value that uniquely identifies the traffic domain in which you want to configure the entity. If you do not specify an ID, the entity becomes part of the default traffic domain, which has an ID of 0.  
        Minimum value = 0  
        Maximum value = 4094 
    .PARAMETER aclaction 
        Drop incoming IPv6 packets that match the simple ACL6 rule.  
        Possible values = DENY 
    .PARAMETER srcipv6 
        IP address to match against the source IP address of an incoming IPv6 packet. 
    .PARAMETER destport 
        Port number to match against the destination port number of an incoming IPv6 packet.  
        DestPort is mandatory while setting Protocol. Omitting the port number and protocol creates an all-ports and all protocol simple ACL6 rule, which matches any port and any protocol. In that case, you cannot create another simple ACL6 rule specifying a specific port and the same source IPv6 address.  
        Minimum value = 1  
        Maximum value = 65535 
    .PARAMETER protocol 
        Protocol to match against the protocol of an incoming IPv6 packet. You must set this parameter if you set the Destination Port parameter.  
        Possible values = TCP, UDP 
    .PARAMETER ttl 
        Number of seconds, in multiples of four, after which the simple ACL6 rule expires. If you do not want the simple ACL6 rule to expire, do not specify a TTL value.  
        Minimum value = 4  
        Maximum value = 2147483647 
    .PARAMETER PassThru 
        Return details about the created nssimpleacl6 item.
    .EXAMPLE
        Invoke-ADCAddNssimpleacl6 -aclname <string> -aclaction <string> -srcipv6 <string>
    .NOTES
        File Name : Invoke-ADCAddNssimpleacl6
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nssimpleacl6/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [ValidatePattern('^(([a-zA-Z0-9]|[_])+([a-zA-Z0-9]|[_])+)$')]
        [string]$aclname ,

        [ValidateRange(0, 4094)]
        [double]$td ,

        [Parameter(Mandatory = $true)]
        [ValidateSet('DENY')]
        [string]$aclaction ,

        [Parameter(Mandatory = $true)]
        [string]$srcipv6 ,

        [ValidateRange(1, 65535)]
        [int]$destport ,

        [ValidateSet('TCP', 'UDP')]
        [string]$protocol ,

        [ValidateRange(4, 2147483647)]
        [double]$ttl ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddNssimpleacl6: Starting"
    }
    process {
        try {
            $Payload = @{
                aclname = $aclname
                aclaction = $aclaction
                srcipv6 = $srcipv6
            }
            if ($PSBoundParameters.ContainsKey('td')) { $Payload.Add('td', $td) }
            if ($PSBoundParameters.ContainsKey('destport')) { $Payload.Add('destport', $destport) }
            if ($PSBoundParameters.ContainsKey('protocol')) { $Payload.Add('protocol', $protocol) }
            if ($PSBoundParameters.ContainsKey('ttl')) { $Payload.Add('ttl', $ttl) }
 
            if ($PSCmdlet.ShouldProcess("nssimpleacl6", "Add NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nssimpleacl6 -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetNssimpleacl6 -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddNssimpleacl6: Finished"
    }
}

function Invoke-ADCClearNssimpleacl6 {
<#
    .SYNOPSIS
        Clear NS configuration Object
    .DESCRIPTION
        Clear NS configuration Object 
    .EXAMPLE
        Invoke-ADCClearNssimpleacl6 
    .NOTES
        File Name : Invoke-ADCClearNssimpleacl6
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nssimpleacl6/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession) 

    )
    begin {
        Write-Verbose "Invoke-ADCClearNssimpleacl6: Starting"
    }
    process {
        try {
            $Payload = @{

            }

            if ($PSCmdlet.ShouldProcess($Name, "Clear NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nssimpleacl6 -Action clear -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $result
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCClearNssimpleacl6: Finished"
    }
}

function Invoke-ADCFlushNssimpleacl6 {
<#
    .SYNOPSIS
        Flush NS configuration Object
    .DESCRIPTION
        Flush NS configuration Object 
    .PARAMETER estsessions 
        .
    .EXAMPLE
        Invoke-ADCFlushNssimpleacl6 -estsessions <boolean>
    .NOTES
        File Name : Invoke-ADCFlushNssimpleacl6
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nssimpleacl6/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [boolean]$estsessions 

    )
    begin {
        Write-Verbose "Invoke-ADCFlushNssimpleacl6: Starting"
    }
    process {
        try {
            $Payload = @{
                estsessions = $estsessions
            }

            if ($PSCmdlet.ShouldProcess($Name, "Flush NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nssimpleacl6 -Action flush -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $result
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCFlushNssimpleacl6: Finished"
    }
}

function Invoke-ADCDeleteNssimpleacl6 {
<#
    .SYNOPSIS
        Delete NS configuration Object
    .DESCRIPTION
        Delete NS configuration Object
    .PARAMETER aclname 
       Name for the simple ACL6 rule. Must begin with an ASCII alphabetic or underscore (_) character, and must contain only ASCII alphanumeric, underscore, hash (#), period (.), space, colon (:), at (@), equals (=), and hyphen (-) characters. Cannot be changed after the simple ACL6 rule is created.  
       Minimum length = 1 
    .EXAMPLE
        Invoke-ADCDeleteNssimpleacl6 -aclname <string>
    .NOTES
        File Name : Invoke-ADCDeleteNssimpleacl6
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nssimpleacl6/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$aclname 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteNssimpleacl6: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }

            if ($PSCmdlet.ShouldProcess("$aclname", "Delete NS configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type nssimpleacl6 -Resource $aclname -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteNssimpleacl6: Finished"
    }
}

function Invoke-ADCGetNssimpleacl6 {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER aclname 
       Name for the simple ACL6 rule. Must begin with an ASCII alphabetic or underscore (_) character, and must contain only ASCII alphanumeric, underscore, hash (#), period (.), space, colon (:), at (@), equals (=), and hyphen (-) characters. Cannot be changed after the simple ACL6 rule is created. 
    .PARAMETER GetAll 
        Retreive all nssimpleacl6 object(s)
    .PARAMETER Count
        If specified, the count of the nssimpleacl6 object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNssimpleacl6
    .EXAMPLE 
        Invoke-ADCGetNssimpleacl6 -GetAll 
    .EXAMPLE 
        Invoke-ADCGetNssimpleacl6 -Count
    .EXAMPLE
        Invoke-ADCGetNssimpleacl6 -name <string>
    .EXAMPLE
        Invoke-ADCGetNssimpleacl6 -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNssimpleacl6
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nssimpleacl6/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateScript({ $_.Length -gt 1 })]
        [ValidatePattern('^(([a-zA-Z0-9]|[_])+([a-zA-Z0-9]|[_])+)$')]
        [string]$aclname,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll,

        [Parameter(ParameterSetName = 'GetAll')]
        [Parameter(ParameterSetName = 'Get')]
        [Switch]$ViewSummary

    )
    begin {
        Write-Verbose "Invoke-ADCGetNssimpleacl6: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all nssimpleacl6 objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nssimpleacl6 -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nssimpleacl6 objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nssimpleacl6 -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nssimpleacl6 objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nssimpleacl6 -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nssimpleacl6 configuration for property 'aclname'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nssimpleacl6 -Resource $aclname -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving nssimpleacl6 configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nssimpleacl6 -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNssimpleacl6: Ended"
    }
}

function Invoke-ADCFlushNssourceroutecachetable {
<#
    .SYNOPSIS
        Flush NS configuration Object
    .DESCRIPTION
        Flush NS configuration Object 
    .EXAMPLE
        Invoke-ADCFlushNssourceroutecachetable 
    .NOTES
        File Name : Invoke-ADCFlushNssourceroutecachetable
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nssourceroutecachetable/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession) 

    )
    begin {
        Write-Verbose "Invoke-ADCFlushNssourceroutecachetable: Starting"
    }
    process {
        try {
            $Payload = @{

            }

            if ($PSCmdlet.ShouldProcess($Name, "Flush NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nssourceroutecachetable -Action flush -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $result
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCFlushNssourceroutecachetable: Finished"
    }
}

function Invoke-ADCGetNssourceroutecachetable {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER GetAll 
        Retreive all nssourceroutecachetable object(s)
    .PARAMETER Count
        If specified, the count of the nssourceroutecachetable object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNssourceroutecachetable
    .EXAMPLE 
        Invoke-ADCGetNssourceroutecachetable -GetAll 
    .EXAMPLE 
        Invoke-ADCGetNssourceroutecachetable -Count
    .EXAMPLE
        Invoke-ADCGetNssourceroutecachetable -name <string>
    .EXAMPLE
        Invoke-ADCGetNssourceroutecachetable -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNssourceroutecachetable
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nssourceroutecachetable/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll,

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$ViewSummary

    )
    begin {
        Write-Verbose "Invoke-ADCGetNssourceroutecachetable: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all nssourceroutecachetable objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nssourceroutecachetable -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nssourceroutecachetable objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nssourceroutecachetable -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nssourceroutecachetable objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nssourceroutecachetable -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nssourceroutecachetable configuration for property ''"

            } else {
                Write-Verbose "Retrieving nssourceroutecachetable configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nssourceroutecachetable -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNssourceroutecachetable: Ended"
    }
}

function Invoke-ADCUpdateNsspparams {
<#
    .SYNOPSIS
        Update NS configuration Object
    .DESCRIPTION
        Update NS configuration Object 
    .PARAMETER basethreshold 
        Maximum number of server connections that can be opened before surge protection is activated.  
        Default value: 200  
        Minimum value = 0  
        Maximum value = 32767 
    .PARAMETER throttle 
        Rate at which the system opens connections to the server.  
        Default value: Normal  
        Possible values = Aggressive, Normal, Relaxed
    .EXAMPLE
        Invoke-ADCUpdateNsspparams 
    .NOTES
        File Name : Invoke-ADCUpdateNsspparams
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsspparams/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [ValidateRange(0, 32767)]
        [int]$basethreshold ,

        [ValidateSet('Aggressive', 'Normal', 'Relaxed')]
        [string]$throttle 

    )
    begin {
        Write-Verbose "Invoke-ADCUpdateNsspparams: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('basethreshold')) { $Payload.Add('basethreshold', $basethreshold) }
            if ($PSBoundParameters.ContainsKey('throttle')) { $Payload.Add('throttle', $throttle) }
 
            if ($PSCmdlet.ShouldProcess("nsspparams", "Update NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -Type nsspparams -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
            Write-Output $result

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUpdateNsspparams: Finished"
    }
}

function Invoke-ADCUnsetNsspparams {
<#
    .SYNOPSIS
        Unset NS configuration Object
    .DESCRIPTION
        Unset NS configuration Object 
   .PARAMETER basethreshold 
       Maximum number of server connections that can be opened before surge protection is activated. 
   .PARAMETER throttle 
       Rate at which the system opens connections to the server.  
       Possible values = Aggressive, Normal, Relaxed
    .EXAMPLE
        Invoke-ADCUnsetNsspparams 
    .NOTES
        File Name : Invoke-ADCUnsetNsspparams
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsspparams
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Boolean]$basethreshold ,

        [Boolean]$throttle 
    )
    begin {
        Write-Verbose "Invoke-ADCUnsetNsspparams: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('basethreshold')) { $Payload.Add('basethreshold', $basethreshold) }
            if ($PSBoundParameters.ContainsKey('throttle')) { $Payload.Add('throttle', $throttle) }
            if ($PSCmdlet.ShouldProcess("nsspparams", "Unset NS configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nsspparams -Action unset -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUnsetNsspparams: Finished"
    }
}

function Invoke-ADCGetNsspparams {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER GetAll 
        Retreive all nsspparams object(s)
    .PARAMETER Count
        If specified, the count of the nsspparams object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNsspparams
    .EXAMPLE 
        Invoke-ADCGetNsspparams -GetAll
    .EXAMPLE
        Invoke-ADCGetNsspparams -name <string>
    .EXAMPLE
        Invoke-ADCGetNsspparams -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNsspparams
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsspparams/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetNsspparams: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all nsspparams objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsspparams -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nsspparams objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsspparams -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nsspparams objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsspparams -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nsspparams configuration for property ''"

            } else {
                Write-Verbose "Retrieving nsspparams configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsspparams -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNsspparams: Ended"
    }
}

function Invoke-ADCClearNsstats {
<#
    .SYNOPSIS
        Clear NS configuration Object
    .DESCRIPTION
        Clear NS configuration Object 
    .PARAMETER cleanuplevel 
        The level of stats to be cleared. 'global' option will clear global counters only, 'all' option will clear all device counters also along with global counters. For both the cases only 'ever incrementing counters' i.e. total counters will be cleared.  
        Possible values = global, all
    .EXAMPLE
        Invoke-ADCClearNsstats -cleanuplevel <string>
    .NOTES
        File Name : Invoke-ADCClearNsstats
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsstats/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateSet('global', 'all')]
        [string]$cleanuplevel 

    )
    begin {
        Write-Verbose "Invoke-ADCClearNsstats: Starting"
    }
    process {
        try {
            $Payload = @{
                cleanuplevel = $cleanuplevel
            }

            if ($PSCmdlet.ShouldProcess($Name, "Clear NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nsstats -Action clear -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $result
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCClearNsstats: Finished"
    }
}

function Invoke-ADCFlushNssurgeq {
<#
    .SYNOPSIS
        Flush NS configuration Object
    .DESCRIPTION
        Flush NS configuration Object 
    .PARAMETER name 
        Name of a virtual server, service or service group for which the SurgeQ must be flushed. 
    .PARAMETER servername 
        Name of a service group member. This argument is needed when you want to flush the SurgeQ of a service group. 
    .PARAMETER port 
        port on which server is bound to the entity(Servicegroup).  
        * in CLI is represented as 65535 in NITRO API
    .EXAMPLE
        Invoke-ADCFlushNssurgeq 
    .NOTES
        File Name : Invoke-ADCFlushNssurgeq
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nssurgeq/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [string]$name ,

        [string]$servername ,

        [ValidateRange(1, 65535)]
        [int]$port 

    )
    begin {
        Write-Verbose "Invoke-ADCFlushNssurgeq: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('name')) { $Payload.Add('name', $name) }
            if ($PSBoundParameters.ContainsKey('servername')) { $Payload.Add('servername', $servername) }
            if ($PSBoundParameters.ContainsKey('port')) { $Payload.Add('port', $port) }
            if ($PSCmdlet.ShouldProcess($Name, "Flush NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nssurgeq -Action flush -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $result
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCFlushNssurgeq: Finished"
    }
}

function Invoke-ADCUpdateNstcpbufparam {
<#
    .SYNOPSIS
        Update NS configuration Object
    .DESCRIPTION
        Update NS configuration Object 
    .PARAMETER size 
        TCP buffering size per connection, in kilobytes.  
        Default value: 64  
        Minimum value = 4  
        Maximum value = 20480 
    .PARAMETER memlimit 
        Maximum memory, in megabytes, that can be used for buffering.  
        Default value: 64
    .EXAMPLE
        Invoke-ADCUpdateNstcpbufparam 
    .NOTES
        File Name : Invoke-ADCUpdateNstcpbufparam
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nstcpbufparam/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [ValidateRange(4, 20480)]
        [double]$size ,

        [double]$memlimit 

    )
    begin {
        Write-Verbose "Invoke-ADCUpdateNstcpbufparam: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('size')) { $Payload.Add('size', $size) }
            if ($PSBoundParameters.ContainsKey('memlimit')) { $Payload.Add('memlimit', $memlimit) }
 
            if ($PSCmdlet.ShouldProcess("nstcpbufparam", "Update NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -Type nstcpbufparam -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
            Write-Output $result

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUpdateNstcpbufparam: Finished"
    }
}

function Invoke-ADCUnsetNstcpbufparam {
<#
    .SYNOPSIS
        Unset NS configuration Object
    .DESCRIPTION
        Unset NS configuration Object 
   .PARAMETER size 
       TCP buffering size per connection, in kilobytes. 
   .PARAMETER memlimit 
       Maximum memory, in megabytes, that can be used for buffering.
    .EXAMPLE
        Invoke-ADCUnsetNstcpbufparam 
    .NOTES
        File Name : Invoke-ADCUnsetNstcpbufparam
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nstcpbufparam
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Boolean]$size ,

        [Boolean]$memlimit 
    )
    begin {
        Write-Verbose "Invoke-ADCUnsetNstcpbufparam: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('size')) { $Payload.Add('size', $size) }
            if ($PSBoundParameters.ContainsKey('memlimit')) { $Payload.Add('memlimit', $memlimit) }
            if ($PSCmdlet.ShouldProcess("nstcpbufparam", "Unset NS configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nstcpbufparam -Action unset -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUnsetNstcpbufparam: Finished"
    }
}

function Invoke-ADCGetNstcpbufparam {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER GetAll 
        Retreive all nstcpbufparam object(s)
    .PARAMETER Count
        If specified, the count of the nstcpbufparam object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNstcpbufparam
    .EXAMPLE 
        Invoke-ADCGetNstcpbufparam -GetAll
    .EXAMPLE
        Invoke-ADCGetNstcpbufparam -name <string>
    .EXAMPLE
        Invoke-ADCGetNstcpbufparam -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNstcpbufparam
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nstcpbufparam/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetNstcpbufparam: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all nstcpbufparam objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nstcpbufparam -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nstcpbufparam objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nstcpbufparam -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nstcpbufparam objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nstcpbufparam -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nstcpbufparam configuration for property ''"

            } else {
                Write-Verbose "Retrieving nstcpbufparam configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nstcpbufparam -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNstcpbufparam: Ended"
    }
}

function Invoke-ADCUpdateNstcpparam {
<#
    .SYNOPSIS
        Update NS configuration Object
    .DESCRIPTION
        Update NS configuration Object 
    .PARAMETER ws 
        Enable or disable window scaling.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER wsval 
        Factor used to calculate the new window size.  
        This argument is needed only when the window scaling is enabled.  
        Default value: 8  
        Minimum value = 0  
        Maximum value = 14 
    .PARAMETER sack 
        Enable or disable Selective ACKnowledgement (SACK).  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER learnvsvrmss 
        Enable or disable maximum segment size (MSS) learning for virtual servers.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER maxburst 
        Maximum number of TCP segments allowed in a burst.  
        Default value: 6  
        Minimum value = 1  
        Maximum value = 255 
    .PARAMETER initialcwnd 
        Initial maximum upper limit on the number of TCP packets that can be outstanding on the TCP link to the server.  
        Default value: 10  
        Minimum value = 1  
        Maximum value = 44 
    .PARAMETER recvbuffsize 
        TCP Receive buffer size.  
        Default value: 8190  
        Minimum value = 8190  
        Maximum value = 20971520 
    .PARAMETER delayedack 
        Timeout for TCP delayed ACK, in milliseconds.  
        Default value: 100  
        Minimum value = 10  
        Maximum value = 300 
    .PARAMETER downstaterst 
        Flag to switch on RST on down services.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER nagle 
        Enable or disable the Nagle algorithm on TCP connections.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER limitedpersist 
        Limit the number of persist (zero window) probes.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER oooqsize 
        Maximum size of out-of-order packets queue. A value of 0 means no limit.  
        Default value: 300  
        Minimum value = 0  
        Maximum value = 65535 
    .PARAMETER ackonpush 
        Send immediate positive acknowledgement (ACK) on receipt of TCP packets with PUSH flag.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER maxpktpermss 
        Maximum number of TCP packets allowed per maximum segment size (MSS).  
        Minimum value = 0  
        Maximum value = 1460 
    .PARAMETER pktperretx 
        Maximum limit on the number of packets that should be retransmitted on receiving a partial ACK.  
        Default value: 1  
        Minimum value = 1  
        Maximum value = 100 
    .PARAMETER minrto 
        Minimum retransmission timeout, in milliseconds, specified in 10-millisecond increments (value must yield a whole number if divided by 10).  
        Default value: 1000  
        Minimum value = 10  
        Maximum value = 64000 
    .PARAMETER slowstartincr 
        Multiplier that determines the rate at which slow start increases the size of the TCP transmission window after each acknowledgement of successful transmission.  
        Default value: 2  
        Minimum value = 1  
        Maximum value = 100 
    .PARAMETER maxdynserverprobes 
        Maximum number of probes that Citrix ADC can send out in 10 milliseconds, to dynamically learn a service. Citrix ADC probes for the existence of the origin in case of wildcard virtual server or services.  
        Default value: 7  
        Minimum value = 1  
        Maximum value = 65535 
    .PARAMETER synholdfastgiveup 
        Maximum threshold. After crossing this threshold number of outstanding probes for origin, the Citrix ADC reduces the number of connection retries for probe connections.  
        Default value: 1024  
        Minimum value = 256  
        Maximum value = 65535 
    .PARAMETER maxsynholdperprobe 
        Limit the number of client connections (SYN) waiting for status of single probe. Any new SYN packets will be dropped.  
        Default value: 128  
        Minimum value = 1  
        Maximum value = 255 
    .PARAMETER maxsynhold 
        Limit the number of client connections (SYN) waiting for status of probe system wide. Any new SYN packets will be dropped.  
        Default value: 16384  
        Minimum value = 256  
        Maximum value = 65535 
    .PARAMETER msslearninterval 
        Duration, in seconds, to sample the Maximum Segment Size (MSS) of the services. The Citrix ADC determines the best MSS to set for the virtual server based on this sampling. The argument to enable maximum segment size (MSS) for virtual servers must be enabled.  
        Default value: 180  
        Minimum value = 1  
        Maximum value = 1048576 
    .PARAMETER msslearndelay 
        Frequency, in seconds, at which the virtual servers learn the Maximum segment size (MSS) from the services. The argument to enable maximum segment size (MSS) for virtual servers must be enabled.  
        Default value: 3600  
        Minimum value = 1  
        Maximum value = 1048576 
    .PARAMETER maxtimewaitconn 
        Maximum number of connections to hold in the TCP TIME_WAIT state on a packet engine. New connections entering TIME_WAIT state are proactively cleaned up.  
        Default value: 7000  
        Minimum value = 1 
    .PARAMETER kaprobeupdatelastactivity 
        Update last activity for KA probes.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER maxsynackretx 
        When 'syncookie' is disabled in the TCP profile that is bound to the virtual server or service, and the number of TCP SYN+ACK retransmission by Citrix ADC for that virtual server or service crosses this threshold, the Citrix ADC responds by using the TCP SYN-Cookie mechanism.  
        Default value: 100  
        Minimum value = 100  
        Maximum value = 1048576 
    .PARAMETER synattackdetection 
        Detect TCP SYN packet flood and send an SNMP trap.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER connflushifnomem 
        Flush an existing connection if no memory can be obtained for new connection.  
        HALF_CLOSED_AND_IDLE: Flush a connection that is closed by us but not by peer, or failing that, a connection that is past configured idle time. New connection fails if no such connection can be found.  
        FIFO: If no half-closed or idle connection can be found, flush the oldest non-management connection, even if it is active. New connection fails if the oldest few connections are management connections.  
        Note: If you enable this setting, you should also consider lowering the zombie timeout and half-close timeout, while setting the Citrix ADC timeout.  
        See Also: connFlushThres argument below.  
        Default value: NSA_CONNFLUSH_NONE  
        Possible values = NONE , HALFCLOSED_AND_IDLE, FIFO 
    .PARAMETER connflushthres 
        Flush an existing connection (as configured through -connFlushIfNoMem FIFO) if the system has more than specified number of connections, and a new connection is to be established. Note: This value may be rounded down to be a whole multiple of the number of packet engines running.  
        Minimum value = 1 
    .PARAMETER mptcpconcloseonpassivesf 
        Accept DATA_FIN/FAST_CLOSE on passive subflow.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER mptcpchecksum 
        Use MPTCP DSS checksum.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER mptcpsftimeout 
        The timeout value in seconds for idle mptcp subflows. If this timeout is not set, idle subflows are cleared after cltTimeout of vserver.  
        Default value: 0  
        Minimum value = 0  
        Maximum value = 31536000 
    .PARAMETER mptcpsfreplacetimeout 
        The minimum idle time value in seconds for idle mptcp subflows after which the sublow is replaced by new incoming subflow if maximum subflow limit is reached. The priority for replacement is given to those subflow without any transaction.  
        Default value: 10  
        Minimum value = 0  
        Maximum value = 31536000 
    .PARAMETER mptcpmaxsf 
        Maximum number of subflow connections supported in established state per mptcp connection.  
        Default value: 4  
        Minimum value = 2  
        Maximum value = 6 
    .PARAMETER mptcpmaxpendingsf 
        Maximum number of subflow connections supported in pending join state per mptcp connection.  
        Default value: 4  
        Minimum value = 0  
        Maximum value = 4 
    .PARAMETER mptcppendingjointhreshold 
        Maximum system level pending join connections allowed.  
        Default value: 0  
        Minimum value = 0  
        Maximum value = 4294967294 
    .PARAMETER mptcprtostoswitchsf 
        Number of RTO's at subflow level, after which MPCTP should start using other subflow.  
        Default value: 2  
        Minimum value = 1  
        Maximum value = 6 
    .PARAMETER mptcpusebackupondss 
        When enabled, if NS receives a DSS on a backup subflow, NS will start using that subflow to send data. And if disabled, NS will continue to transmit on current chosen subflow. In case there is some error on a subflow (like RTO's/RST etc.) then NS can choose a backup subflow irrespective of this tunable.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER tcpmaxretries 
        Number of RTO's after which a connection should be freed.  
        Default value: 7  
        Minimum value = 1  
        Maximum value = 7 
    .PARAMETER mptcpimmediatesfcloseonfin 
        Allow subflows to close immediately on FIN before the DATA_FIN exchange is completed at mptcp level.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER mptcpclosemptcpsessiononlastsfclose 
        Allow to send DATA FIN or FAST CLOSE on mptcp connection while sending FIN or RST on the last subflow.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER tcpfastopencookietimeout 
        Timeout in seconds after which a new TFO Key is computed for generating TFO Cookie. If zero, the same key is used always. If timeout is less than 120seconds, NS defaults to 120seconds timeout.  
        Default value: 0  
        Minimum value = 0  
        Maximum value = 31536000 
    .PARAMETER autosyncookietimeout 
        Timeout for the server to function in syncookie mode after the synattack. This is valid if TCP syncookie is disabled on the profile and server acts in non syncookie mode by default.  
        Default value: 30  
        Minimum value = 7  
        Maximum value = 65535 
    .PARAMETER tcpfintimeout 
        The amount of time in seconds, after which a TCP connnection in the TCP TIME-WAIT state is flushed.  
        Default value: 40  
        Minimum value = 10  
        Maximum value = 240
    .EXAMPLE
        Invoke-ADCUpdateNstcpparam 
    .NOTES
        File Name : Invoke-ADCUpdateNstcpparam
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nstcpparam/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$ws ,

        [ValidateRange(0, 14)]
        [double]$wsval ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$sack ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$learnvsvrmss ,

        [ValidateRange(1, 255)]
        [double]$maxburst ,

        [ValidateRange(1, 44)]
        [double]$initialcwnd ,

        [ValidateRange(8190, 20971520)]
        [double]$recvbuffsize ,

        [ValidateRange(10, 300)]
        [double]$delayedack ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$downstaterst ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$nagle ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$limitedpersist ,

        [ValidateRange(0, 65535)]
        [double]$oooqsize ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$ackonpush ,

        [ValidateRange(0, 1460)]
        [double]$maxpktpermss ,

        [ValidateRange(1, 100)]
        [int]$pktperretx ,

        [ValidateRange(10, 64000)]
        [int]$minrto ,

        [ValidateRange(1, 100)]
        [int]$slowstartincr ,

        [ValidateRange(1, 65535)]
        [double]$maxdynserverprobes ,

        [ValidateRange(256, 65535)]
        [double]$synholdfastgiveup ,

        [ValidateRange(1, 255)]
        [double]$maxsynholdperprobe ,

        [ValidateRange(256, 65535)]
        [double]$maxsynhold ,

        [ValidateRange(1, 1048576)]
        [double]$msslearninterval ,

        [ValidateRange(1, 1048576)]
        [double]$msslearndelay ,

        [double]$maxtimewaitconn ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$kaprobeupdatelastactivity ,

        [ValidateRange(100, 1048576)]
        [double]$maxsynackretx ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$synattackdetection ,

        [ValidateSet('NONE', 'HALFCLOSED_AND_IDLE', 'FIFO')]
        [string]$connflushifnomem ,

        [double]$connflushthres ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$mptcpconcloseonpassivesf ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$mptcpchecksum ,

        [ValidateRange(0, 31536000)]
        [double]$mptcpsftimeout ,

        [ValidateRange(0, 31536000)]
        [double]$mptcpsfreplacetimeout ,

        [ValidateRange(2, 6)]
        [double]$mptcpmaxsf ,

        [ValidateRange(0, 4)]
        [double]$mptcpmaxpendingsf ,

        [ValidateRange(0, 4294967294)]
        [double]$mptcppendingjointhreshold ,

        [ValidateRange(1, 6)]
        [double]$mptcprtostoswitchsf ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$mptcpusebackupondss ,

        [ValidateRange(1, 7)]
        [double]$tcpmaxretries ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$mptcpimmediatesfcloseonfin ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$mptcpclosemptcpsessiononlastsfclose ,

        [ValidateRange(0, 31536000)]
        [double]$tcpfastopencookietimeout ,

        [ValidateRange(7, 65535)]
        [double]$autosyncookietimeout ,

        [ValidateRange(10, 240)]
        [double]$tcpfintimeout 

    )
    begin {
        Write-Verbose "Invoke-ADCUpdateNstcpparam: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('ws')) { $Payload.Add('ws', $ws) }
            if ($PSBoundParameters.ContainsKey('wsval')) { $Payload.Add('wsval', $wsval) }
            if ($PSBoundParameters.ContainsKey('sack')) { $Payload.Add('sack', $sack) }
            if ($PSBoundParameters.ContainsKey('learnvsvrmss')) { $Payload.Add('learnvsvrmss', $learnvsvrmss) }
            if ($PSBoundParameters.ContainsKey('maxburst')) { $Payload.Add('maxburst', $maxburst) }
            if ($PSBoundParameters.ContainsKey('initialcwnd')) { $Payload.Add('initialcwnd', $initialcwnd) }
            if ($PSBoundParameters.ContainsKey('recvbuffsize')) { $Payload.Add('recvbuffsize', $recvbuffsize) }
            if ($PSBoundParameters.ContainsKey('delayedack')) { $Payload.Add('delayedack', $delayedack) }
            if ($PSBoundParameters.ContainsKey('downstaterst')) { $Payload.Add('downstaterst', $downstaterst) }
            if ($PSBoundParameters.ContainsKey('nagle')) { $Payload.Add('nagle', $nagle) }
            if ($PSBoundParameters.ContainsKey('limitedpersist')) { $Payload.Add('limitedpersist', $limitedpersist) }
            if ($PSBoundParameters.ContainsKey('oooqsize')) { $Payload.Add('oooqsize', $oooqsize) }
            if ($PSBoundParameters.ContainsKey('ackonpush')) { $Payload.Add('ackonpush', $ackonpush) }
            if ($PSBoundParameters.ContainsKey('maxpktpermss')) { $Payload.Add('maxpktpermss', $maxpktpermss) }
            if ($PSBoundParameters.ContainsKey('pktperretx')) { $Payload.Add('pktperretx', $pktperretx) }
            if ($PSBoundParameters.ContainsKey('minrto')) { $Payload.Add('minrto', $minrto) }
            if ($PSBoundParameters.ContainsKey('slowstartincr')) { $Payload.Add('slowstartincr', $slowstartincr) }
            if ($PSBoundParameters.ContainsKey('maxdynserverprobes')) { $Payload.Add('maxdynserverprobes', $maxdynserverprobes) }
            if ($PSBoundParameters.ContainsKey('synholdfastgiveup')) { $Payload.Add('synholdfastgiveup', $synholdfastgiveup) }
            if ($PSBoundParameters.ContainsKey('maxsynholdperprobe')) { $Payload.Add('maxsynholdperprobe', $maxsynholdperprobe) }
            if ($PSBoundParameters.ContainsKey('maxsynhold')) { $Payload.Add('maxsynhold', $maxsynhold) }
            if ($PSBoundParameters.ContainsKey('msslearninterval')) { $Payload.Add('msslearninterval', $msslearninterval) }
            if ($PSBoundParameters.ContainsKey('msslearndelay')) { $Payload.Add('msslearndelay', $msslearndelay) }
            if ($PSBoundParameters.ContainsKey('maxtimewaitconn')) { $Payload.Add('maxtimewaitconn', $maxtimewaitconn) }
            if ($PSBoundParameters.ContainsKey('kaprobeupdatelastactivity')) { $Payload.Add('kaprobeupdatelastactivity', $kaprobeupdatelastactivity) }
            if ($PSBoundParameters.ContainsKey('maxsynackretx')) { $Payload.Add('maxsynackretx', $maxsynackretx) }
            if ($PSBoundParameters.ContainsKey('synattackdetection')) { $Payload.Add('synattackdetection', $synattackdetection) }
            if ($PSBoundParameters.ContainsKey('connflushifnomem')) { $Payload.Add('connflushifnomem', $connflushifnomem) }
            if ($PSBoundParameters.ContainsKey('connflushthres')) { $Payload.Add('connflushthres', $connflushthres) }
            if ($PSBoundParameters.ContainsKey('mptcpconcloseonpassivesf')) { $Payload.Add('mptcpconcloseonpassivesf', $mptcpconcloseonpassivesf) }
            if ($PSBoundParameters.ContainsKey('mptcpchecksum')) { $Payload.Add('mptcpchecksum', $mptcpchecksum) }
            if ($PSBoundParameters.ContainsKey('mptcpsftimeout')) { $Payload.Add('mptcpsftimeout', $mptcpsftimeout) }
            if ($PSBoundParameters.ContainsKey('mptcpsfreplacetimeout')) { $Payload.Add('mptcpsfreplacetimeout', $mptcpsfreplacetimeout) }
            if ($PSBoundParameters.ContainsKey('mptcpmaxsf')) { $Payload.Add('mptcpmaxsf', $mptcpmaxsf) }
            if ($PSBoundParameters.ContainsKey('mptcpmaxpendingsf')) { $Payload.Add('mptcpmaxpendingsf', $mptcpmaxpendingsf) }
            if ($PSBoundParameters.ContainsKey('mptcppendingjointhreshold')) { $Payload.Add('mptcppendingjointhreshold', $mptcppendingjointhreshold) }
            if ($PSBoundParameters.ContainsKey('mptcprtostoswitchsf')) { $Payload.Add('mptcprtostoswitchsf', $mptcprtostoswitchsf) }
            if ($PSBoundParameters.ContainsKey('mptcpusebackupondss')) { $Payload.Add('mptcpusebackupondss', $mptcpusebackupondss) }
            if ($PSBoundParameters.ContainsKey('tcpmaxretries')) { $Payload.Add('tcpmaxretries', $tcpmaxretries) }
            if ($PSBoundParameters.ContainsKey('mptcpimmediatesfcloseonfin')) { $Payload.Add('mptcpimmediatesfcloseonfin', $mptcpimmediatesfcloseonfin) }
            if ($PSBoundParameters.ContainsKey('mptcpclosemptcpsessiononlastsfclose')) { $Payload.Add('mptcpclosemptcpsessiononlastsfclose', $mptcpclosemptcpsessiononlastsfclose) }
            if ($PSBoundParameters.ContainsKey('tcpfastopencookietimeout')) { $Payload.Add('tcpfastopencookietimeout', $tcpfastopencookietimeout) }
            if ($PSBoundParameters.ContainsKey('autosyncookietimeout')) { $Payload.Add('autosyncookietimeout', $autosyncookietimeout) }
            if ($PSBoundParameters.ContainsKey('tcpfintimeout')) { $Payload.Add('tcpfintimeout', $tcpfintimeout) }
 
            if ($PSCmdlet.ShouldProcess("nstcpparam", "Update NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -Type nstcpparam -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
            Write-Output $result

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUpdateNstcpparam: Finished"
    }
}

function Invoke-ADCUnsetNstcpparam {
<#
    .SYNOPSIS
        Unset NS configuration Object
    .DESCRIPTION
        Unset NS configuration Object 
   .PARAMETER ws 
       Enable or disable window scaling.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER wsval 
       Factor used to calculate the new window size.  
       This argument is needed only when the window scaling is enabled. 
   .PARAMETER sack 
       Enable or disable Selective ACKnowledgement (SACK).  
       Possible values = ENABLED, DISABLED 
   .PARAMETER learnvsvrmss 
       Enable or disable maximum segment size (MSS) learning for virtual servers.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER maxburst 
       Maximum number of TCP segments allowed in a burst. 
   .PARAMETER initialcwnd 
       Initial maximum upper limit on the number of TCP packets that can be outstanding on the TCP link to the server. 
   .PARAMETER recvbuffsize 
       TCP Receive buffer size. 
   .PARAMETER delayedack 
       Timeout for TCP delayed ACK, in milliseconds. 
   .PARAMETER downstaterst 
       Flag to switch on RST on down services.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER nagle 
       Enable or disable the Nagle algorithm on TCP connections.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER limitedpersist 
       Limit the number of persist (zero window) probes.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER oooqsize 
       Maximum size of out-of-order packets queue. A value of 0 means no limit. 
   .PARAMETER ackonpush 
       Send immediate positive acknowledgement (ACK) on receipt of TCP packets with PUSH flag.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER maxpktpermss 
       Maximum number of TCP packets allowed per maximum segment size (MSS). 
   .PARAMETER pktperretx 
       Maximum limit on the number of packets that should be retransmitted on receiving a partial ACK. 
   .PARAMETER minrto 
       Minimum retransmission timeout, in milliseconds, specified in 10-millisecond increments (value must yield a whole number if divided by 10). 
   .PARAMETER slowstartincr 
       Multiplier that determines the rate at which slow start increases the size of the TCP transmission window after each acknowledgement of successful transmission. 
   .PARAMETER maxdynserverprobes 
       Maximum number of probes that Citrix ADC can send out in 10 milliseconds, to dynamically learn a service. Citrix ADC probes for the existence of the origin in case of wildcard virtual server or services. 
   .PARAMETER synholdfastgiveup 
       Maximum threshold. After crossing this threshold number of outstanding probes for origin, the Citrix ADC reduces the number of connection retries for probe connections. 
   .PARAMETER maxsynholdperprobe 
       Limit the number of client connections (SYN) waiting for status of single probe. Any new SYN packets will be dropped. 
   .PARAMETER maxsynhold 
       Limit the number of client connections (SYN) waiting for status of probe system wide. Any new SYN packets will be dropped. 
   .PARAMETER msslearninterval 
       Duration, in seconds, to sample the Maximum Segment Size (MSS) of the services. The Citrix ADC determines the best MSS to set for the virtual server based on this sampling. The argument to enable maximum segment size (MSS) for virtual servers must be enabled. 
   .PARAMETER msslearndelay 
       Frequency, in seconds, at which the virtual servers learn the Maximum segment size (MSS) from the services. The argument to enable maximum segment size (MSS) for virtual servers must be enabled. 
   .PARAMETER maxtimewaitconn 
       Maximum number of connections to hold in the TCP TIME_WAIT state on a packet engine. New connections entering TIME_WAIT state are proactively cleaned up. 
   .PARAMETER kaprobeupdatelastactivity 
       Update last activity for KA probes.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER maxsynackretx 
       When 'syncookie' is disabled in the TCP profile that is bound to the virtual server or service, and the number of TCP SYN+ACK retransmission by Citrix ADC for that virtual server or service crosses this threshold, the Citrix ADC responds by using the TCP SYN-Cookie mechanism. 
   .PARAMETER synattackdetection 
       Detect TCP SYN packet flood and send an SNMP trap.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER connflushifnomem 
       Flush an existing connection if no memory can be obtained for new connection.  
       HALF_CLOSED_AND_IDLE: Flush a connection that is closed by us but not by peer, or failing that, a connection that is past configured idle time. New connection fails if no such connection can be found.  
       FIFO: If no half-closed or idle connection can be found, flush the oldest non-management connection, even if it is active. New connection fails if the oldest few connections are management connections.  
       Note: If you enable this setting, you should also consider lowering the zombie timeout and half-close timeout, while setting the Citrix ADC timeout.  
       See Also: connFlushThres argument below.  
       Possible values = NONE , HALFCLOSED_AND_IDLE, FIFO 
   .PARAMETER connflushthres 
       Flush an existing connection (as configured through -connFlushIfNoMem FIFO) if the system has more than specified number of connections, and a new connection is to be established. Note: This value may be rounded down to be a whole multiple of the number of packet engines running. 
   .PARAMETER mptcpconcloseonpassivesf 
       Accept DATA_FIN/FAST_CLOSE on passive subflow.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER mptcpchecksum 
       Use MPTCP DSS checksum.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER mptcpsftimeout 
       The timeout value in seconds for idle mptcp subflows. If this timeout is not set, idle subflows are cleared after cltTimeout of vserver. 
   .PARAMETER mptcpsfreplacetimeout 
       The minimum idle time value in seconds for idle mptcp subflows after which the sublow is replaced by new incoming subflow if maximum subflow limit is reached. The priority for replacement is given to those subflow without any transaction. 
   .PARAMETER mptcpmaxsf 
       Maximum number of subflow connections supported in established state per mptcp connection. 
   .PARAMETER mptcpmaxpendingsf 
       Maximum number of subflow connections supported in pending join state per mptcp connection. 
   .PARAMETER mptcppendingjointhreshold 
       Maximum system level pending join connections allowed. 
   .PARAMETER mptcprtostoswitchsf 
       Number of RTO's at subflow level, after which MPCTP should start using other subflow. 
   .PARAMETER mptcpusebackupondss 
       When enabled, if NS receives a DSS on a backup subflow, NS will start using that subflow to send data. And if disabled, NS will continue to transmit on current chosen subflow. In case there is some error on a subflow (like RTO's/RST etc.) then NS can choose a backup subflow irrespective of this tunable.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER tcpmaxretries 
       Number of RTO's after which a connection should be freed. 
   .PARAMETER mptcpimmediatesfcloseonfin 
       Allow subflows to close immediately on FIN before the DATA_FIN exchange is completed at mptcp level.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER mptcpclosemptcpsessiononlastsfclose 
       Allow to send DATA FIN or FAST CLOSE on mptcp connection while sending FIN or RST on the last subflow.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER tcpfastopencookietimeout 
       Timeout in seconds after which a new TFO Key is computed for generating TFO Cookie. If zero, the same key is used always. If timeout is less than 120seconds, NS defaults to 120seconds timeout. 
   .PARAMETER autosyncookietimeout 
       Timeout for the server to function in syncookie mode after the synattack. This is valid if TCP syncookie is disabled on the profile and server acts in non syncookie mode by default. 
   .PARAMETER tcpfintimeout 
       The amount of time in seconds, after which a TCP connnection in the TCP TIME-WAIT state is flushed.
    .EXAMPLE
        Invoke-ADCUnsetNstcpparam 
    .NOTES
        File Name : Invoke-ADCUnsetNstcpparam
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nstcpparam
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Boolean]$ws ,

        [Boolean]$wsval ,

        [Boolean]$sack ,

        [Boolean]$learnvsvrmss ,

        [Boolean]$maxburst ,

        [Boolean]$initialcwnd ,

        [Boolean]$recvbuffsize ,

        [Boolean]$delayedack ,

        [Boolean]$downstaterst ,

        [Boolean]$nagle ,

        [Boolean]$limitedpersist ,

        [Boolean]$oooqsize ,

        [Boolean]$ackonpush ,

        [Boolean]$maxpktpermss ,

        [Boolean]$pktperretx ,

        [Boolean]$minrto ,

        [Boolean]$slowstartincr ,

        [Boolean]$maxdynserverprobes ,

        [Boolean]$synholdfastgiveup ,

        [Boolean]$maxsynholdperprobe ,

        [Boolean]$maxsynhold ,

        [Boolean]$msslearninterval ,

        [Boolean]$msslearndelay ,

        [Boolean]$maxtimewaitconn ,

        [Boolean]$kaprobeupdatelastactivity ,

        [Boolean]$maxsynackretx ,

        [Boolean]$synattackdetection ,

        [Boolean]$connflushifnomem ,

        [Boolean]$connflushthres ,

        [Boolean]$mptcpconcloseonpassivesf ,

        [Boolean]$mptcpchecksum ,

        [Boolean]$mptcpsftimeout ,

        [Boolean]$mptcpsfreplacetimeout ,

        [Boolean]$mptcpmaxsf ,

        [Boolean]$mptcpmaxpendingsf ,

        [Boolean]$mptcppendingjointhreshold ,

        [Boolean]$mptcprtostoswitchsf ,

        [Boolean]$mptcpusebackupondss ,

        [Boolean]$tcpmaxretries ,

        [Boolean]$mptcpimmediatesfcloseonfin ,

        [Boolean]$mptcpclosemptcpsessiononlastsfclose ,

        [Boolean]$tcpfastopencookietimeout ,

        [Boolean]$autosyncookietimeout ,

        [Boolean]$tcpfintimeout 
    )
    begin {
        Write-Verbose "Invoke-ADCUnsetNstcpparam: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('ws')) { $Payload.Add('ws', $ws) }
            if ($PSBoundParameters.ContainsKey('wsval')) { $Payload.Add('wsval', $wsval) }
            if ($PSBoundParameters.ContainsKey('sack')) { $Payload.Add('sack', $sack) }
            if ($PSBoundParameters.ContainsKey('learnvsvrmss')) { $Payload.Add('learnvsvrmss', $learnvsvrmss) }
            if ($PSBoundParameters.ContainsKey('maxburst')) { $Payload.Add('maxburst', $maxburst) }
            if ($PSBoundParameters.ContainsKey('initialcwnd')) { $Payload.Add('initialcwnd', $initialcwnd) }
            if ($PSBoundParameters.ContainsKey('recvbuffsize')) { $Payload.Add('recvbuffsize', $recvbuffsize) }
            if ($PSBoundParameters.ContainsKey('delayedack')) { $Payload.Add('delayedack', $delayedack) }
            if ($PSBoundParameters.ContainsKey('downstaterst')) { $Payload.Add('downstaterst', $downstaterst) }
            if ($PSBoundParameters.ContainsKey('nagle')) { $Payload.Add('nagle', $nagle) }
            if ($PSBoundParameters.ContainsKey('limitedpersist')) { $Payload.Add('limitedpersist', $limitedpersist) }
            if ($PSBoundParameters.ContainsKey('oooqsize')) { $Payload.Add('oooqsize', $oooqsize) }
            if ($PSBoundParameters.ContainsKey('ackonpush')) { $Payload.Add('ackonpush', $ackonpush) }
            if ($PSBoundParameters.ContainsKey('maxpktpermss')) { $Payload.Add('maxpktpermss', $maxpktpermss) }
            if ($PSBoundParameters.ContainsKey('pktperretx')) { $Payload.Add('pktperretx', $pktperretx) }
            if ($PSBoundParameters.ContainsKey('minrto')) { $Payload.Add('minrto', $minrto) }
            if ($PSBoundParameters.ContainsKey('slowstartincr')) { $Payload.Add('slowstartincr', $slowstartincr) }
            if ($PSBoundParameters.ContainsKey('maxdynserverprobes')) { $Payload.Add('maxdynserverprobes', $maxdynserverprobes) }
            if ($PSBoundParameters.ContainsKey('synholdfastgiveup')) { $Payload.Add('synholdfastgiveup', $synholdfastgiveup) }
            if ($PSBoundParameters.ContainsKey('maxsynholdperprobe')) { $Payload.Add('maxsynholdperprobe', $maxsynholdperprobe) }
            if ($PSBoundParameters.ContainsKey('maxsynhold')) { $Payload.Add('maxsynhold', $maxsynhold) }
            if ($PSBoundParameters.ContainsKey('msslearninterval')) { $Payload.Add('msslearninterval', $msslearninterval) }
            if ($PSBoundParameters.ContainsKey('msslearndelay')) { $Payload.Add('msslearndelay', $msslearndelay) }
            if ($PSBoundParameters.ContainsKey('maxtimewaitconn')) { $Payload.Add('maxtimewaitconn', $maxtimewaitconn) }
            if ($PSBoundParameters.ContainsKey('kaprobeupdatelastactivity')) { $Payload.Add('kaprobeupdatelastactivity', $kaprobeupdatelastactivity) }
            if ($PSBoundParameters.ContainsKey('maxsynackretx')) { $Payload.Add('maxsynackretx', $maxsynackretx) }
            if ($PSBoundParameters.ContainsKey('synattackdetection')) { $Payload.Add('synattackdetection', $synattackdetection) }
            if ($PSBoundParameters.ContainsKey('connflushifnomem')) { $Payload.Add('connflushifnomem', $connflushifnomem) }
            if ($PSBoundParameters.ContainsKey('connflushthres')) { $Payload.Add('connflushthres', $connflushthres) }
            if ($PSBoundParameters.ContainsKey('mptcpconcloseonpassivesf')) { $Payload.Add('mptcpconcloseonpassivesf', $mptcpconcloseonpassivesf) }
            if ($PSBoundParameters.ContainsKey('mptcpchecksum')) { $Payload.Add('mptcpchecksum', $mptcpchecksum) }
            if ($PSBoundParameters.ContainsKey('mptcpsftimeout')) { $Payload.Add('mptcpsftimeout', $mptcpsftimeout) }
            if ($PSBoundParameters.ContainsKey('mptcpsfreplacetimeout')) { $Payload.Add('mptcpsfreplacetimeout', $mptcpsfreplacetimeout) }
            if ($PSBoundParameters.ContainsKey('mptcpmaxsf')) { $Payload.Add('mptcpmaxsf', $mptcpmaxsf) }
            if ($PSBoundParameters.ContainsKey('mptcpmaxpendingsf')) { $Payload.Add('mptcpmaxpendingsf', $mptcpmaxpendingsf) }
            if ($PSBoundParameters.ContainsKey('mptcppendingjointhreshold')) { $Payload.Add('mptcppendingjointhreshold', $mptcppendingjointhreshold) }
            if ($PSBoundParameters.ContainsKey('mptcprtostoswitchsf')) { $Payload.Add('mptcprtostoswitchsf', $mptcprtostoswitchsf) }
            if ($PSBoundParameters.ContainsKey('mptcpusebackupondss')) { $Payload.Add('mptcpusebackupondss', $mptcpusebackupondss) }
            if ($PSBoundParameters.ContainsKey('tcpmaxretries')) { $Payload.Add('tcpmaxretries', $tcpmaxretries) }
            if ($PSBoundParameters.ContainsKey('mptcpimmediatesfcloseonfin')) { $Payload.Add('mptcpimmediatesfcloseonfin', $mptcpimmediatesfcloseonfin) }
            if ($PSBoundParameters.ContainsKey('mptcpclosemptcpsessiononlastsfclose')) { $Payload.Add('mptcpclosemptcpsessiononlastsfclose', $mptcpclosemptcpsessiononlastsfclose) }
            if ($PSBoundParameters.ContainsKey('tcpfastopencookietimeout')) { $Payload.Add('tcpfastopencookietimeout', $tcpfastopencookietimeout) }
            if ($PSBoundParameters.ContainsKey('autosyncookietimeout')) { $Payload.Add('autosyncookietimeout', $autosyncookietimeout) }
            if ($PSBoundParameters.ContainsKey('tcpfintimeout')) { $Payload.Add('tcpfintimeout', $tcpfintimeout) }
            if ($PSCmdlet.ShouldProcess("nstcpparam", "Unset NS configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nstcpparam -Action unset -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUnsetNstcpparam: Finished"
    }
}

function Invoke-ADCGetNstcpparam {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER GetAll 
        Retreive all nstcpparam object(s)
    .PARAMETER Count
        If specified, the count of the nstcpparam object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNstcpparam
    .EXAMPLE 
        Invoke-ADCGetNstcpparam -GetAll
    .EXAMPLE
        Invoke-ADCGetNstcpparam -name <string>
    .EXAMPLE
        Invoke-ADCGetNstcpparam -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNstcpparam
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nstcpparam/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetNstcpparam: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all nstcpparam objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nstcpparam -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nstcpparam objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nstcpparam -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nstcpparam objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nstcpparam -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nstcpparam configuration for property ''"

            } else {
                Write-Verbose "Retrieving nstcpparam configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nstcpparam -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNstcpparam: Ended"
    }
}

function Invoke-ADCAddNstcpprofile {
<#
    .SYNOPSIS
        Add NS configuration Object
    .DESCRIPTION
        Add NS configuration Object 
    .PARAMETER name 
        Name for a TCP profile. Must begin with a letter, number, or the underscore \(_\) character. Other characters allowed, after the first character, are the hyphen \(-\), period \(.\), hash \(\#\), space \( \), at \(@\), colon \(:\), and equal \(=\) characters. The name of a TCP profile cannot be changed after it is created.  
        CLI Users: If the name includes one or more spaces, enclose the name in double or single quotation marks \(for example, "my tcp profile" or 'my tcp profile'\).  
        Minimum length = 1  
        Maximum length = 127 
    .PARAMETER ws 
        Enable or disable window scaling.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER sack 
        Enable or disable Selective ACKnowledgement (SACK).  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER wsval 
        Factor used to calculate the new window size.  
        This argument is needed only when window scaling is enabled.  
        Default value: 4  
        Minimum value = 0  
        Maximum value = 14 
    .PARAMETER nagle 
        Enable or disable the Nagle algorithm on TCP connections.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER ackonpush 
        Send immediate positive acknowledgement (ACK) on receipt of TCP packets with PUSH flag.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER mss 
        Maximum number of octets to allow in a TCP data segment.  
        Minimum value = 0  
        Maximum value = 9176 
    .PARAMETER maxburst 
        Maximum number of TCP segments allowed in a burst.  
        Default value: 6  
        Minimum value = 1  
        Maximum value = 255 
    .PARAMETER initialcwnd 
        Initial maximum upper limit on the number of TCP packets that can be outstanding on the TCP link to the server.  
        Default value: 4  
        Minimum value = 1  
        Maximum value = 44 
    .PARAMETER delayedack 
        Timeout for TCP delayed ACK, in milliseconds.  
        Default value: 100  
        Minimum value = 10  
        Maximum value = 300 
    .PARAMETER oooqsize 
        Maximum size of out-of-order packets queue. A value of 0 means no limit.  
        Default value: 64  
        Minimum value = 0  
        Maximum value = 65535 
    .PARAMETER maxpktpermss 
        Maximum number of TCP packets allowed per maximum segment size (MSS).  
        Minimum value = 0  
        Maximum value = 1460 
    .PARAMETER pktperretx 
        Maximum limit on the number of packets that should be retransmitted on receiving a partial ACK.  
        Default value: 1  
        Minimum value = 1  
        Maximum value = 512 
    .PARAMETER minrto 
        Minimum retransmission timeout, in milliseconds, specified in 10-millisecond increments (value must yield a whole number if divided by 10).  
        Default value: 1000  
        Minimum value = 10  
        Maximum value = 64000 
    .PARAMETER slowstartincr 
        Multiplier that determines the rate at which slow start increases the size of the TCP transmission window after each acknowledgement of successful transmission.  
        Default value: 2  
        Minimum value = 1  
        Maximum value = 100 
    .PARAMETER buffersize 
        TCP buffering size, in bytes.  
        Default value: 8190  
        Minimum value = 8190  
        Maximum value = 20971520 
    .PARAMETER syncookie 
        Enable or disable the SYNCOOKIE mechanism for TCP handshake with clients. Disabling SYNCOOKIE prevents SYN attack protection on the Citrix ADC.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER kaprobeupdatelastactivity 
        Update last activity for the connection after receiving keep-alive (KA) probes.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER flavor 
        Set TCP congestion control algorithm.  
        Default value: Default  
        Possible values = Default, Westwood, BIC, CUBIC, Nile 
    .PARAMETER dynamicreceivebuffering 
        Enable or disable dynamic receive buffering. When enabled, allows the receive buffer to be adjusted dynamically based on memory and network conditions.  
        Note: The buffer size argument must be set for dynamic adjustments to take place.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER ka 
        Send periodic TCP keep-alive (KA) probes to check if peer is still up.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER kaconnidletime 
        Duration, in seconds, for the connection to be idle, before sending a keep-alive (KA) probe.  
        Minimum value = 1  
        Maximum value = 4095 
    .PARAMETER kamaxprobes 
        Number of keep-alive (KA) probes to be sent when not acknowledged, before assuming the peer to be down.  
        Minimum value = 1  
        Maximum value = 254 
    .PARAMETER kaprobeinterval 
        Time interval, in seconds, before the next keep-alive (KA) probe, if the peer does not respond.  
        Minimum value = 1  
        Maximum value = 4095 
    .PARAMETER sendbuffsize 
        TCP Send Buffer Size.  
        Default value: 8190  
        Minimum value = 8190  
        Maximum value = 20971520 
    .PARAMETER mptcp 
        Enable or disable Multipath TCP.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER establishclientconn 
        Establishing Client Client connection on First data/ Final-ACK / Automatic.  
        Default value: AUTOMATIC  
        Possible values = AUTOMATIC, CONN_ESTABLISHED, ON_FIRST_DATA 
    .PARAMETER tcpsegoffload 
        Offload TCP segmentation to the NIC. If set to AUTOMATIC, TCP segmentation will be offloaded to the NIC, if the NIC supports it.  
        Default value: AUTOMATIC  
        Possible values = AUTOMATIC, DISABLED 
    .PARAMETER rstwindowattenuate 
        Enable or disable RST window attenuation to protect against spoofing. When enabled, will reply with corrective ACK when a sequence number is invalid.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER rstmaxack 
        Enable or disable acceptance of RST that is out of window yet echoes highest ACK sequence number. Useful only in proxy mode.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER spoofsyndrop 
        Enable or disable drop of invalid SYN packets to protect against spoofing. When disabled, established connections will be reset when a SYN packet is received.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER ecn 
        Enable or disable TCP Explicit Congestion Notification.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER mptcpdropdataonpreestsf 
        Enable or disable silently dropping the data on Pre-Established subflow. When enabled, DSS data packets are dropped silently instead of dropping the connection when data is received on pre established subflow.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER mptcpfastopen 
        Enable or disable Multipath TCP fastopen. When enabled, DSS data packets are accepted before receiving the third ack of SYN handshake.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER mptcpsessiontimeout 
        MPTCP session timeout in seconds. If this value is not set, idle MPTCP sessions are flushed after vserver's client idle timeout.  
        Default value: 0  
        Minimum value = 0  
        Maximum value = 86400 
    .PARAMETER timestamp 
        Enable or Disable TCP Timestamp option (RFC 1323).  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER dsack 
        Enable or disable DSACK.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER ackaggregation 
        Enable or disable ACK Aggregation.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER frto 
        Enable or disable FRTO (Forward RTO-Recovery).  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER maxcwnd 
        TCP Maximum Congestion Window.  
        Default value: 524288  
        Minimum value = 8190  
        Maximum value = 20971520 
    .PARAMETER fack 
        Enable or disable FACK (Forward ACK).  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER tcpmode 
        TCP Optimization modes TRANSPARENT / ENDPOINT.  
        Default value: TRANSPARENT  
        Possible values = TRANSPARENT, ENDPOINT 
    .PARAMETER tcpfastopen 
        Enable or disable TCP Fastopen. When enabled, NS can receive or send Data in SYN or SYN-ACK packets.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER hystart 
        Enable or disable CUBIC Hystart.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER dupackthresh 
        TCP dupack threshold.  
        Default value: 3  
        Minimum value = 1  
        Maximum value = 15 
    .PARAMETER burstratecontrol 
        TCP Burst Rate Control DISABLED/FIXED/DYNAMIC. FIXED requires a TCP rate to be set.  
        Default value: DISABLED  
        Possible values = DISABLED, FIXED, DYNAMIC 
    .PARAMETER tcprate 
        TCP connection payload send rate in Kb/s.  
        Default value: 0  
        Minimum value = 0  
        Maximum value = 10000000 
    .PARAMETER rateqmax 
        Maximum connection queue size in bytes, when BurstRateControl is used.  
        Default value: 0  
        Minimum value = 0  
        Maximum value = 1000000000 
    .PARAMETER drophalfclosedconnontimeout 
        Silently drop tcp half closed connections on idle timeout.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER dropestconnontimeout 
        Silently drop tcp established connections on idle timeout.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER applyadaptivetcp 
        Apply Adaptive TCP optimizations.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER tcpfastopencookiesize 
        TCP FastOpen Cookie size. This accepts only even numbers. Odd number is trimmed down to nearest even number.  
        Default value: 8  
        Minimum value = 4  
        Maximum value = 16 
    .PARAMETER taillossprobe 
        TCP tail loss probe optimizations.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER clientiptcpoption 
        Client IP in TCP options.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER clientiptcpoptionnumber 
        ClientIP TCP Option number.  
        Minimum value = 1  
        Maximum value = 254 
    .PARAMETER PassThru 
        Return details about the created nstcpprofile item.
    .EXAMPLE
        Invoke-ADCAddNstcpprofile -name <string>
    .NOTES
        File Name : Invoke-ADCAddNstcpprofile
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nstcpprofile/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateLength(1, 127)]
        [string]$name ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$ws = 'DISABLED' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$sack = 'DISABLED' ,

        [ValidateRange(0, 14)]
        [double]$wsval = '4' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$nagle = 'DISABLED' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$ackonpush = 'ENABLED' ,

        [ValidateRange(0, 9176)]
        [double]$mss ,

        [ValidateRange(1, 255)]
        [double]$maxburst = '6' ,

        [ValidateRange(1, 44)]
        [double]$initialcwnd = '4' ,

        [ValidateRange(10, 300)]
        [double]$delayedack = '100' ,

        [ValidateRange(0, 65535)]
        [double]$oooqsize = '64' ,

        [ValidateRange(0, 1460)]
        [double]$maxpktpermss ,

        [ValidateRange(1, 512)]
        [double]$pktperretx = '1' ,

        [ValidateRange(10, 64000)]
        [double]$minrto = '1000' ,

        [ValidateRange(1, 100)]
        [double]$slowstartincr = '2' ,

        [ValidateRange(8190, 20971520)]
        [double]$buffersize = '8190' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$syncookie = 'ENABLED' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$kaprobeupdatelastactivity = 'ENABLED' ,

        [ValidateSet('Default', 'Westwood', 'BIC', 'CUBIC', 'Nile')]
        [string]$flavor = 'Default' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$dynamicreceivebuffering = 'DISABLED' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$ka = 'DISABLED' ,

        [ValidateRange(1, 4095)]
        [double]$kaconnidletime ,

        [ValidateRange(1, 254)]
        [double]$kamaxprobes ,

        [ValidateRange(1, 4095)]
        [double]$kaprobeinterval ,

        [ValidateRange(8190, 20971520)]
        [double]$sendbuffsize = '8190' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$mptcp = 'DISABLED' ,

        [ValidateSet('AUTOMATIC', 'CONN_ESTABLISHED', 'ON_FIRST_DATA')]
        [string]$establishclientconn = 'AUTOMATIC' ,

        [ValidateSet('AUTOMATIC', 'DISABLED')]
        [string]$tcpsegoffload = 'AUTOMATIC' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$rstwindowattenuate = 'DISABLED' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$rstmaxack = 'DISABLED' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$spoofsyndrop = 'ENABLED' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$ecn = 'DISABLED' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$mptcpdropdataonpreestsf = 'DISABLED' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$mptcpfastopen = 'DISABLED' ,

        [ValidateRange(0, 86400)]
        [double]$mptcpsessiontimeout = '0' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$timestamp = 'DISABLED' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$dsack = 'ENABLED' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$ackaggregation = 'DISABLED' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$frto = 'DISABLED' ,

        [ValidateRange(8190, 20971520)]
        [double]$maxcwnd = '524288' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$fack = 'DISABLED' ,

        [ValidateSet('TRANSPARENT', 'ENDPOINT')]
        [string]$tcpmode = 'TRANSPARENT' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$tcpfastopen = 'DISABLED' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$hystart = 'DISABLED' ,

        [ValidateRange(1, 15)]
        [double]$dupackthresh = '3' ,

        [ValidateSet('DISABLED', 'FIXED', 'DYNAMIC')]
        [string]$burstratecontrol = 'DISABLED' ,

        [ValidateRange(0, 10000000)]
        [double]$tcprate = '0' ,

        [ValidateRange(0, 1000000000)]
        [double]$rateqmax = '0' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$drophalfclosedconnontimeout = 'DISABLED' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$dropestconnontimeout = 'DISABLED' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$applyadaptivetcp = 'DISABLED' ,

        [ValidateRange(4, 16)]
        [double]$tcpfastopencookiesize = '8' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$taillossprobe = 'DISABLED' ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$clientiptcpoption = 'DISABLED' ,

        [ValidateRange(1, 254)]
        [double]$clientiptcpoptionnumber ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddNstcpprofile: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
            }
            if ($PSBoundParameters.ContainsKey('ws')) { $Payload.Add('ws', $ws) }
            if ($PSBoundParameters.ContainsKey('sack')) { $Payload.Add('sack', $sack) }
            if ($PSBoundParameters.ContainsKey('wsval')) { $Payload.Add('wsval', $wsval) }
            if ($PSBoundParameters.ContainsKey('nagle')) { $Payload.Add('nagle', $nagle) }
            if ($PSBoundParameters.ContainsKey('ackonpush')) { $Payload.Add('ackonpush', $ackonpush) }
            if ($PSBoundParameters.ContainsKey('mss')) { $Payload.Add('mss', $mss) }
            if ($PSBoundParameters.ContainsKey('maxburst')) { $Payload.Add('maxburst', $maxburst) }
            if ($PSBoundParameters.ContainsKey('initialcwnd')) { $Payload.Add('initialcwnd', $initialcwnd) }
            if ($PSBoundParameters.ContainsKey('delayedack')) { $Payload.Add('delayedack', $delayedack) }
            if ($PSBoundParameters.ContainsKey('oooqsize')) { $Payload.Add('oooqsize', $oooqsize) }
            if ($PSBoundParameters.ContainsKey('maxpktpermss')) { $Payload.Add('maxpktpermss', $maxpktpermss) }
            if ($PSBoundParameters.ContainsKey('pktperretx')) { $Payload.Add('pktperretx', $pktperretx) }
            if ($PSBoundParameters.ContainsKey('minrto')) { $Payload.Add('minrto', $minrto) }
            if ($PSBoundParameters.ContainsKey('slowstartincr')) { $Payload.Add('slowstartincr', $slowstartincr) }
            if ($PSBoundParameters.ContainsKey('buffersize')) { $Payload.Add('buffersize', $buffersize) }
            if ($PSBoundParameters.ContainsKey('syncookie')) { $Payload.Add('syncookie', $syncookie) }
            if ($PSBoundParameters.ContainsKey('kaprobeupdatelastactivity')) { $Payload.Add('kaprobeupdatelastactivity', $kaprobeupdatelastactivity) }
            if ($PSBoundParameters.ContainsKey('flavor')) { $Payload.Add('flavor', $flavor) }
            if ($PSBoundParameters.ContainsKey('dynamicreceivebuffering')) { $Payload.Add('dynamicreceivebuffering', $dynamicreceivebuffering) }
            if ($PSBoundParameters.ContainsKey('ka')) { $Payload.Add('ka', $ka) }
            if ($PSBoundParameters.ContainsKey('kaconnidletime')) { $Payload.Add('kaconnidletime', $kaconnidletime) }
            if ($PSBoundParameters.ContainsKey('kamaxprobes')) { $Payload.Add('kamaxprobes', $kamaxprobes) }
            if ($PSBoundParameters.ContainsKey('kaprobeinterval')) { $Payload.Add('kaprobeinterval', $kaprobeinterval) }
            if ($PSBoundParameters.ContainsKey('sendbuffsize')) { $Payload.Add('sendbuffsize', $sendbuffsize) }
            if ($PSBoundParameters.ContainsKey('mptcp')) { $Payload.Add('mptcp', $mptcp) }
            if ($PSBoundParameters.ContainsKey('establishclientconn')) { $Payload.Add('establishclientconn', $establishclientconn) }
            if ($PSBoundParameters.ContainsKey('tcpsegoffload')) { $Payload.Add('tcpsegoffload', $tcpsegoffload) }
            if ($PSBoundParameters.ContainsKey('rstwindowattenuate')) { $Payload.Add('rstwindowattenuate', $rstwindowattenuate) }
            if ($PSBoundParameters.ContainsKey('rstmaxack')) { $Payload.Add('rstmaxack', $rstmaxack) }
            if ($PSBoundParameters.ContainsKey('spoofsyndrop')) { $Payload.Add('spoofsyndrop', $spoofsyndrop) }
            if ($PSBoundParameters.ContainsKey('ecn')) { $Payload.Add('ecn', $ecn) }
            if ($PSBoundParameters.ContainsKey('mptcpdropdataonpreestsf')) { $Payload.Add('mptcpdropdataonpreestsf', $mptcpdropdataonpreestsf) }
            if ($PSBoundParameters.ContainsKey('mptcpfastopen')) { $Payload.Add('mptcpfastopen', $mptcpfastopen) }
            if ($PSBoundParameters.ContainsKey('mptcpsessiontimeout')) { $Payload.Add('mptcpsessiontimeout', $mptcpsessiontimeout) }
            if ($PSBoundParameters.ContainsKey('timestamp')) { $Payload.Add('timestamp', $timestamp) }
            if ($PSBoundParameters.ContainsKey('dsack')) { $Payload.Add('dsack', $dsack) }
            if ($PSBoundParameters.ContainsKey('ackaggregation')) { $Payload.Add('ackaggregation', $ackaggregation) }
            if ($PSBoundParameters.ContainsKey('frto')) { $Payload.Add('frto', $frto) }
            if ($PSBoundParameters.ContainsKey('maxcwnd')) { $Payload.Add('maxcwnd', $maxcwnd) }
            if ($PSBoundParameters.ContainsKey('fack')) { $Payload.Add('fack', $fack) }
            if ($PSBoundParameters.ContainsKey('tcpmode')) { $Payload.Add('tcpmode', $tcpmode) }
            if ($PSBoundParameters.ContainsKey('tcpfastopen')) { $Payload.Add('tcpfastopen', $tcpfastopen) }
            if ($PSBoundParameters.ContainsKey('hystart')) { $Payload.Add('hystart', $hystart) }
            if ($PSBoundParameters.ContainsKey('dupackthresh')) { $Payload.Add('dupackthresh', $dupackthresh) }
            if ($PSBoundParameters.ContainsKey('burstratecontrol')) { $Payload.Add('burstratecontrol', $burstratecontrol) }
            if ($PSBoundParameters.ContainsKey('tcprate')) { $Payload.Add('tcprate', $tcprate) }
            if ($PSBoundParameters.ContainsKey('rateqmax')) { $Payload.Add('rateqmax', $rateqmax) }
            if ($PSBoundParameters.ContainsKey('drophalfclosedconnontimeout')) { $Payload.Add('drophalfclosedconnontimeout', $drophalfclosedconnontimeout) }
            if ($PSBoundParameters.ContainsKey('dropestconnontimeout')) { $Payload.Add('dropestconnontimeout', $dropestconnontimeout) }
            if ($PSBoundParameters.ContainsKey('applyadaptivetcp')) { $Payload.Add('applyadaptivetcp', $applyadaptivetcp) }
            if ($PSBoundParameters.ContainsKey('tcpfastopencookiesize')) { $Payload.Add('tcpfastopencookiesize', $tcpfastopencookiesize) }
            if ($PSBoundParameters.ContainsKey('taillossprobe')) { $Payload.Add('taillossprobe', $taillossprobe) }
            if ($PSBoundParameters.ContainsKey('clientiptcpoption')) { $Payload.Add('clientiptcpoption', $clientiptcpoption) }
            if ($PSBoundParameters.ContainsKey('clientiptcpoptionnumber')) { $Payload.Add('clientiptcpoptionnumber', $clientiptcpoptionnumber) }
 
            if ($PSCmdlet.ShouldProcess("nstcpprofile", "Add NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nstcpprofile -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetNstcpprofile -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddNstcpprofile: Finished"
    }
}

function Invoke-ADCDeleteNstcpprofile {
<#
    .SYNOPSIS
        Delete NS configuration Object
    .DESCRIPTION
        Delete NS configuration Object
    .PARAMETER name 
       Name for a TCP profile. Must begin with a letter, number, or the underscore \(_\) character. Other characters allowed, after the first character, are the hyphen \(-\), period \(.\), hash \(\#\), space \( \), at \(@\), colon \(:\), and equal \(=\) characters. The name of a TCP profile cannot be changed after it is created.  
       CLI Users: If the name includes one or more spaces, enclose the name in double or single quotation marks \(for example, "my tcp profile" or 'my tcp profile'\).  
       Minimum length = 1  
       Maximum length = 127 
    .EXAMPLE
        Invoke-ADCDeleteNstcpprofile -name <string>
    .NOTES
        File Name : Invoke-ADCDeleteNstcpprofile
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nstcpprofile/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$name 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteNstcpprofile: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }

            if ($PSCmdlet.ShouldProcess("$name", "Delete NS configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type nstcpprofile -Resource $name -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteNstcpprofile: Finished"
    }
}

function Invoke-ADCUpdateNstcpprofile {
<#
    .SYNOPSIS
        Update NS configuration Object
    .DESCRIPTION
        Update NS configuration Object 
    .PARAMETER name 
        Name for a TCP profile. Must begin with a letter, number, or the underscore \(_\) character. Other characters allowed, after the first character, are the hyphen \(-\), period \(.\), hash \(\#\), space \( \), at \(@\), colon \(:\), and equal \(=\) characters. The name of a TCP profile cannot be changed after it is created.  
        CLI Users: If the name includes one or more spaces, enclose the name in double or single quotation marks \(for example, "my tcp profile" or 'my tcp profile'\).  
        Minimum length = 1  
        Maximum length = 127 
    .PARAMETER ws 
        Enable or disable window scaling.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER sack 
        Enable or disable Selective ACKnowledgement (SACK).  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER wsval 
        Factor used to calculate the new window size.  
        This argument is needed only when window scaling is enabled.  
        Default value: 4  
        Minimum value = 0  
        Maximum value = 14 
    .PARAMETER nagle 
        Enable or disable the Nagle algorithm on TCP connections.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER ackonpush 
        Send immediate positive acknowledgement (ACK) on receipt of TCP packets with PUSH flag.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER mss 
        Maximum number of octets to allow in a TCP data segment.  
        Minimum value = 0  
        Maximum value = 9176 
    .PARAMETER maxburst 
        Maximum number of TCP segments allowed in a burst.  
        Default value: 6  
        Minimum value = 1  
        Maximum value = 255 
    .PARAMETER initialcwnd 
        Initial maximum upper limit on the number of TCP packets that can be outstanding on the TCP link to the server.  
        Default value: 4  
        Minimum value = 1  
        Maximum value = 44 
    .PARAMETER delayedack 
        Timeout for TCP delayed ACK, in milliseconds.  
        Default value: 100  
        Minimum value = 10  
        Maximum value = 300 
    .PARAMETER oooqsize 
        Maximum size of out-of-order packets queue. A value of 0 means no limit.  
        Default value: 64  
        Minimum value = 0  
        Maximum value = 65535 
    .PARAMETER maxpktpermss 
        Maximum number of TCP packets allowed per maximum segment size (MSS).  
        Minimum value = 0  
        Maximum value = 1460 
    .PARAMETER pktperretx 
        Maximum limit on the number of packets that should be retransmitted on receiving a partial ACK.  
        Default value: 1  
        Minimum value = 1  
        Maximum value = 512 
    .PARAMETER minrto 
        Minimum retransmission timeout, in milliseconds, specified in 10-millisecond increments (value must yield a whole number if divided by 10).  
        Default value: 1000  
        Minimum value = 10  
        Maximum value = 64000 
    .PARAMETER slowstartincr 
        Multiplier that determines the rate at which slow start increases the size of the TCP transmission window after each acknowledgement of successful transmission.  
        Default value: 2  
        Minimum value = 1  
        Maximum value = 100 
    .PARAMETER buffersize 
        TCP buffering size, in bytes.  
        Default value: 8190  
        Minimum value = 8190  
        Maximum value = 20971520 
    .PARAMETER syncookie 
        Enable or disable the SYNCOOKIE mechanism for TCP handshake with clients. Disabling SYNCOOKIE prevents SYN attack protection on the Citrix ADC.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER kaprobeupdatelastactivity 
        Update last activity for the connection after receiving keep-alive (KA) probes.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER flavor 
        Set TCP congestion control algorithm.  
        Default value: Default  
        Possible values = Default, Westwood, BIC, CUBIC, Nile 
    .PARAMETER dynamicreceivebuffering 
        Enable or disable dynamic receive buffering. When enabled, allows the receive buffer to be adjusted dynamically based on memory and network conditions.  
        Note: The buffer size argument must be set for dynamic adjustments to take place.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER ka 
        Send periodic TCP keep-alive (KA) probes to check if peer is still up.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER kaconnidletime 
        Duration, in seconds, for the connection to be idle, before sending a keep-alive (KA) probe.  
        Minimum value = 1  
        Maximum value = 4095 
    .PARAMETER kamaxprobes 
        Number of keep-alive (KA) probes to be sent when not acknowledged, before assuming the peer to be down.  
        Minimum value = 1  
        Maximum value = 254 
    .PARAMETER kaprobeinterval 
        Time interval, in seconds, before the next keep-alive (KA) probe, if the peer does not respond.  
        Minimum value = 1  
        Maximum value = 4095 
    .PARAMETER sendbuffsize 
        TCP Send Buffer Size.  
        Default value: 8190  
        Minimum value = 8190  
        Maximum value = 20971520 
    .PARAMETER mptcp 
        Enable or disable Multipath TCP.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER establishclientconn 
        Establishing Client Client connection on First data/ Final-ACK / Automatic.  
        Default value: AUTOMATIC  
        Possible values = AUTOMATIC, CONN_ESTABLISHED, ON_FIRST_DATA 
    .PARAMETER tcpsegoffload 
        Offload TCP segmentation to the NIC. If set to AUTOMATIC, TCP segmentation will be offloaded to the NIC, if the NIC supports it.  
        Default value: AUTOMATIC  
        Possible values = AUTOMATIC, DISABLED 
    .PARAMETER rstwindowattenuate 
        Enable or disable RST window attenuation to protect against spoofing. When enabled, will reply with corrective ACK when a sequence number is invalid.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER rstmaxack 
        Enable or disable acceptance of RST that is out of window yet echoes highest ACK sequence number. Useful only in proxy mode.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER spoofsyndrop 
        Enable or disable drop of invalid SYN packets to protect against spoofing. When disabled, established connections will be reset when a SYN packet is received.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER ecn 
        Enable or disable TCP Explicit Congestion Notification.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER mptcpdropdataonpreestsf 
        Enable or disable silently dropping the data on Pre-Established subflow. When enabled, DSS data packets are dropped silently instead of dropping the connection when data is received on pre established subflow.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER mptcpfastopen 
        Enable or disable Multipath TCP fastopen. When enabled, DSS data packets are accepted before receiving the third ack of SYN handshake.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER mptcpsessiontimeout 
        MPTCP session timeout in seconds. If this value is not set, idle MPTCP sessions are flushed after vserver's client idle timeout.  
        Default value: 0  
        Minimum value = 0  
        Maximum value = 86400 
    .PARAMETER timestamp 
        Enable or Disable TCP Timestamp option (RFC 1323).  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER dsack 
        Enable or disable DSACK.  
        Default value: ENABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER ackaggregation 
        Enable or disable ACK Aggregation.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER frto 
        Enable or disable FRTO (Forward RTO-Recovery).  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER maxcwnd 
        TCP Maximum Congestion Window.  
        Default value: 524288  
        Minimum value = 8190  
        Maximum value = 20971520 
    .PARAMETER fack 
        Enable or disable FACK (Forward ACK).  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER tcpmode 
        TCP Optimization modes TRANSPARENT / ENDPOINT.  
        Default value: TRANSPARENT  
        Possible values = TRANSPARENT, ENDPOINT 
    .PARAMETER tcpfastopen 
        Enable or disable TCP Fastopen. When enabled, NS can receive or send Data in SYN or SYN-ACK packets.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER hystart 
        Enable or disable CUBIC Hystart.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER dupackthresh 
        TCP dupack threshold.  
        Default value: 3  
        Minimum value = 1  
        Maximum value = 15 
    .PARAMETER burstratecontrol 
        TCP Burst Rate Control DISABLED/FIXED/DYNAMIC. FIXED requires a TCP rate to be set.  
        Default value: DISABLED  
        Possible values = DISABLED, FIXED, DYNAMIC 
    .PARAMETER tcprate 
        TCP connection payload send rate in Kb/s.  
        Default value: 0  
        Minimum value = 0  
        Maximum value = 10000000 
    .PARAMETER rateqmax 
        Maximum connection queue size in bytes, when BurstRateControl is used.  
        Default value: 0  
        Minimum value = 0  
        Maximum value = 1000000000 
    .PARAMETER drophalfclosedconnontimeout 
        Silently drop tcp half closed connections on idle timeout.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER dropestconnontimeout 
        Silently drop tcp established connections on idle timeout.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER applyadaptivetcp 
        Apply Adaptive TCP optimizations.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER tcpfastopencookiesize 
        TCP FastOpen Cookie size. This accepts only even numbers. Odd number is trimmed down to nearest even number.  
        Default value: 8  
        Minimum value = 4  
        Maximum value = 16 
    .PARAMETER taillossprobe 
        TCP tail loss probe optimizations.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER clientiptcpoption 
        Client IP in TCP options.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER clientiptcpoptionnumber 
        ClientIP TCP Option number.  
        Minimum value = 1  
        Maximum value = 254 
    .PARAMETER PassThru 
        Return details about the created nstcpprofile item.
    .EXAMPLE
        Invoke-ADCUpdateNstcpprofile -name <string>
    .NOTES
        File Name : Invoke-ADCUpdateNstcpprofile
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nstcpprofile/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateLength(1, 127)]
        [string]$name ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$ws ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$sack ,

        [ValidateRange(0, 14)]
        [double]$wsval ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$nagle ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$ackonpush ,

        [ValidateRange(0, 9176)]
        [double]$mss ,

        [ValidateRange(1, 255)]
        [double]$maxburst ,

        [ValidateRange(1, 44)]
        [double]$initialcwnd ,

        [ValidateRange(10, 300)]
        [double]$delayedack ,

        [ValidateRange(0, 65535)]
        [double]$oooqsize ,

        [ValidateRange(0, 1460)]
        [double]$maxpktpermss ,

        [ValidateRange(1, 512)]
        [double]$pktperretx ,

        [ValidateRange(10, 64000)]
        [double]$minrto ,

        [ValidateRange(1, 100)]
        [double]$slowstartincr ,

        [ValidateRange(8190, 20971520)]
        [double]$buffersize ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$syncookie ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$kaprobeupdatelastactivity ,

        [ValidateSet('Default', 'Westwood', 'BIC', 'CUBIC', 'Nile')]
        [string]$flavor ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$dynamicreceivebuffering ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$ka ,

        [ValidateRange(1, 4095)]
        [double]$kaconnidletime ,

        [ValidateRange(1, 254)]
        [double]$kamaxprobes ,

        [ValidateRange(1, 4095)]
        [double]$kaprobeinterval ,

        [ValidateRange(8190, 20971520)]
        [double]$sendbuffsize ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$mptcp ,

        [ValidateSet('AUTOMATIC', 'CONN_ESTABLISHED', 'ON_FIRST_DATA')]
        [string]$establishclientconn ,

        [ValidateSet('AUTOMATIC', 'DISABLED')]
        [string]$tcpsegoffload ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$rstwindowattenuate ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$rstmaxack ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$spoofsyndrop ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$ecn ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$mptcpdropdataonpreestsf ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$mptcpfastopen ,

        [ValidateRange(0, 86400)]
        [double]$mptcpsessiontimeout ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$timestamp ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$dsack ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$ackaggregation ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$frto ,

        [ValidateRange(8190, 20971520)]
        [double]$maxcwnd ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$fack ,

        [ValidateSet('TRANSPARENT', 'ENDPOINT')]
        [string]$tcpmode ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$tcpfastopen ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$hystart ,

        [ValidateRange(1, 15)]
        [double]$dupackthresh ,

        [ValidateSet('DISABLED', 'FIXED', 'DYNAMIC')]
        [string]$burstratecontrol ,

        [ValidateRange(0, 10000000)]
        [double]$tcprate ,

        [ValidateRange(0, 1000000000)]
        [double]$rateqmax ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$drophalfclosedconnontimeout ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$dropestconnontimeout ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$applyadaptivetcp ,

        [ValidateRange(4, 16)]
        [double]$tcpfastopencookiesize ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$taillossprobe ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$clientiptcpoption ,

        [ValidateRange(1, 254)]
        [double]$clientiptcpoptionnumber ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCUpdateNstcpprofile: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
            }
            if ($PSBoundParameters.ContainsKey('ws')) { $Payload.Add('ws', $ws) }
            if ($PSBoundParameters.ContainsKey('sack')) { $Payload.Add('sack', $sack) }
            if ($PSBoundParameters.ContainsKey('wsval')) { $Payload.Add('wsval', $wsval) }
            if ($PSBoundParameters.ContainsKey('nagle')) { $Payload.Add('nagle', $nagle) }
            if ($PSBoundParameters.ContainsKey('ackonpush')) { $Payload.Add('ackonpush', $ackonpush) }
            if ($PSBoundParameters.ContainsKey('mss')) { $Payload.Add('mss', $mss) }
            if ($PSBoundParameters.ContainsKey('maxburst')) { $Payload.Add('maxburst', $maxburst) }
            if ($PSBoundParameters.ContainsKey('initialcwnd')) { $Payload.Add('initialcwnd', $initialcwnd) }
            if ($PSBoundParameters.ContainsKey('delayedack')) { $Payload.Add('delayedack', $delayedack) }
            if ($PSBoundParameters.ContainsKey('oooqsize')) { $Payload.Add('oooqsize', $oooqsize) }
            if ($PSBoundParameters.ContainsKey('maxpktpermss')) { $Payload.Add('maxpktpermss', $maxpktpermss) }
            if ($PSBoundParameters.ContainsKey('pktperretx')) { $Payload.Add('pktperretx', $pktperretx) }
            if ($PSBoundParameters.ContainsKey('minrto')) { $Payload.Add('minrto', $minrto) }
            if ($PSBoundParameters.ContainsKey('slowstartincr')) { $Payload.Add('slowstartincr', $slowstartincr) }
            if ($PSBoundParameters.ContainsKey('buffersize')) { $Payload.Add('buffersize', $buffersize) }
            if ($PSBoundParameters.ContainsKey('syncookie')) { $Payload.Add('syncookie', $syncookie) }
            if ($PSBoundParameters.ContainsKey('kaprobeupdatelastactivity')) { $Payload.Add('kaprobeupdatelastactivity', $kaprobeupdatelastactivity) }
            if ($PSBoundParameters.ContainsKey('flavor')) { $Payload.Add('flavor', $flavor) }
            if ($PSBoundParameters.ContainsKey('dynamicreceivebuffering')) { $Payload.Add('dynamicreceivebuffering', $dynamicreceivebuffering) }
            if ($PSBoundParameters.ContainsKey('ka')) { $Payload.Add('ka', $ka) }
            if ($PSBoundParameters.ContainsKey('kaconnidletime')) { $Payload.Add('kaconnidletime', $kaconnidletime) }
            if ($PSBoundParameters.ContainsKey('kamaxprobes')) { $Payload.Add('kamaxprobes', $kamaxprobes) }
            if ($PSBoundParameters.ContainsKey('kaprobeinterval')) { $Payload.Add('kaprobeinterval', $kaprobeinterval) }
            if ($PSBoundParameters.ContainsKey('sendbuffsize')) { $Payload.Add('sendbuffsize', $sendbuffsize) }
            if ($PSBoundParameters.ContainsKey('mptcp')) { $Payload.Add('mptcp', $mptcp) }
            if ($PSBoundParameters.ContainsKey('establishclientconn')) { $Payload.Add('establishclientconn', $establishclientconn) }
            if ($PSBoundParameters.ContainsKey('tcpsegoffload')) { $Payload.Add('tcpsegoffload', $tcpsegoffload) }
            if ($PSBoundParameters.ContainsKey('rstwindowattenuate')) { $Payload.Add('rstwindowattenuate', $rstwindowattenuate) }
            if ($PSBoundParameters.ContainsKey('rstmaxack')) { $Payload.Add('rstmaxack', $rstmaxack) }
            if ($PSBoundParameters.ContainsKey('spoofsyndrop')) { $Payload.Add('spoofsyndrop', $spoofsyndrop) }
            if ($PSBoundParameters.ContainsKey('ecn')) { $Payload.Add('ecn', $ecn) }
            if ($PSBoundParameters.ContainsKey('mptcpdropdataonpreestsf')) { $Payload.Add('mptcpdropdataonpreestsf', $mptcpdropdataonpreestsf) }
            if ($PSBoundParameters.ContainsKey('mptcpfastopen')) { $Payload.Add('mptcpfastopen', $mptcpfastopen) }
            if ($PSBoundParameters.ContainsKey('mptcpsessiontimeout')) { $Payload.Add('mptcpsessiontimeout', $mptcpsessiontimeout) }
            if ($PSBoundParameters.ContainsKey('timestamp')) { $Payload.Add('timestamp', $timestamp) }
            if ($PSBoundParameters.ContainsKey('dsack')) { $Payload.Add('dsack', $dsack) }
            if ($PSBoundParameters.ContainsKey('ackaggregation')) { $Payload.Add('ackaggregation', $ackaggregation) }
            if ($PSBoundParameters.ContainsKey('frto')) { $Payload.Add('frto', $frto) }
            if ($PSBoundParameters.ContainsKey('maxcwnd')) { $Payload.Add('maxcwnd', $maxcwnd) }
            if ($PSBoundParameters.ContainsKey('fack')) { $Payload.Add('fack', $fack) }
            if ($PSBoundParameters.ContainsKey('tcpmode')) { $Payload.Add('tcpmode', $tcpmode) }
            if ($PSBoundParameters.ContainsKey('tcpfastopen')) { $Payload.Add('tcpfastopen', $tcpfastopen) }
            if ($PSBoundParameters.ContainsKey('hystart')) { $Payload.Add('hystart', $hystart) }
            if ($PSBoundParameters.ContainsKey('dupackthresh')) { $Payload.Add('dupackthresh', $dupackthresh) }
            if ($PSBoundParameters.ContainsKey('burstratecontrol')) { $Payload.Add('burstratecontrol', $burstratecontrol) }
            if ($PSBoundParameters.ContainsKey('tcprate')) { $Payload.Add('tcprate', $tcprate) }
            if ($PSBoundParameters.ContainsKey('rateqmax')) { $Payload.Add('rateqmax', $rateqmax) }
            if ($PSBoundParameters.ContainsKey('drophalfclosedconnontimeout')) { $Payload.Add('drophalfclosedconnontimeout', $drophalfclosedconnontimeout) }
            if ($PSBoundParameters.ContainsKey('dropestconnontimeout')) { $Payload.Add('dropestconnontimeout', $dropestconnontimeout) }
            if ($PSBoundParameters.ContainsKey('applyadaptivetcp')) { $Payload.Add('applyadaptivetcp', $applyadaptivetcp) }
            if ($PSBoundParameters.ContainsKey('tcpfastopencookiesize')) { $Payload.Add('tcpfastopencookiesize', $tcpfastopencookiesize) }
            if ($PSBoundParameters.ContainsKey('taillossprobe')) { $Payload.Add('taillossprobe', $taillossprobe) }
            if ($PSBoundParameters.ContainsKey('clientiptcpoption')) { $Payload.Add('clientiptcpoption', $clientiptcpoption) }
            if ($PSBoundParameters.ContainsKey('clientiptcpoptionnumber')) { $Payload.Add('clientiptcpoptionnumber', $clientiptcpoptionnumber) }
 
            if ($PSCmdlet.ShouldProcess("nstcpprofile", "Update NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -Type nstcpprofile -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetNstcpprofile -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUpdateNstcpprofile: Finished"
    }
}

function Invoke-ADCUnsetNstcpprofile {
<#
    .SYNOPSIS
        Unset NS configuration Object
    .DESCRIPTION
        Unset NS configuration Object 
   .PARAMETER name 
       Name for a TCP profile. Must begin with a letter, number, or the underscore \(_\) character. Other characters allowed, after the first character, are the hyphen \(-\), period \(.\), hash \(\#\), space \( \), at \(@\), colon \(:\), and equal \(=\) characters. The name of a TCP profile cannot be changed after it is created.  
       CLI Users: If the name includes one or more spaces, enclose the name in double or single quotation marks \(for example, "my tcp profile" or 'my tcp profile'\). 
   .PARAMETER ws 
       Enable or disable window scaling.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER sack 
       Enable or disable Selective ACKnowledgement (SACK).  
       Possible values = ENABLED, DISABLED 
   .PARAMETER wsval 
       Factor used to calculate the new window size.  
       This argument is needed only when window scaling is enabled. 
   .PARAMETER nagle 
       Enable or disable the Nagle algorithm on TCP connections.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER ackonpush 
       Send immediate positive acknowledgement (ACK) on receipt of TCP packets with PUSH flag.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER mss 
       Maximum number of octets to allow in a TCP data segment. 
   .PARAMETER maxburst 
       Maximum number of TCP segments allowed in a burst. 
   .PARAMETER initialcwnd 
       Initial maximum upper limit on the number of TCP packets that can be outstanding on the TCP link to the server. 
   .PARAMETER delayedack 
       Timeout for TCP delayed ACK, in milliseconds. 
   .PARAMETER oooqsize 
       Maximum size of out-of-order packets queue. A value of 0 means no limit. 
   .PARAMETER maxpktpermss 
       Maximum number of TCP packets allowed per maximum segment size (MSS). 
   .PARAMETER pktperretx 
       Maximum limit on the number of packets that should be retransmitted on receiving a partial ACK. 
   .PARAMETER minrto 
       Minimum retransmission timeout, in milliseconds, specified in 10-millisecond increments (value must yield a whole number if divided by 10). 
   .PARAMETER slowstartincr 
       Multiplier that determines the rate at which slow start increases the size of the TCP transmission window after each acknowledgement of successful transmission. 
   .PARAMETER buffersize 
       TCP buffering size, in bytes. 
   .PARAMETER syncookie 
       Enable or disable the SYNCOOKIE mechanism for TCP handshake with clients. Disabling SYNCOOKIE prevents SYN attack protection on the Citrix ADC.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER kaprobeupdatelastactivity 
       Update last activity for the connection after receiving keep-alive (KA) probes.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER flavor 
       Set TCP congestion control algorithm.  
       Possible values = Default, Westwood, BIC, CUBIC, Nile 
   .PARAMETER dynamicreceivebuffering 
       Enable or disable dynamic receive buffering. When enabled, allows the receive buffer to be adjusted dynamically based on memory and network conditions.  
       Note: The buffer size argument must be set for dynamic adjustments to take place.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER ka 
       Send periodic TCP keep-alive (KA) probes to check if peer is still up.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER kamaxprobes 
       Number of keep-alive (KA) probes to be sent when not acknowledged, before assuming the peer to be down. 
   .PARAMETER kaconnidletime 
       Duration, in seconds, for the connection to be idle, before sending a keep-alive (KA) probe. 
   .PARAMETER kaprobeinterval 
       Time interval, in seconds, before the next keep-alive (KA) probe, if the peer does not respond. 
   .PARAMETER sendbuffsize 
       TCP Send Buffer Size. 
   .PARAMETER mptcp 
       Enable or disable Multipath TCP.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER establishclientconn 
       Establishing Client Client connection on First data/ Final-ACK / Automatic.  
       Possible values = AUTOMATIC, CONN_ESTABLISHED, ON_FIRST_DATA 
   .PARAMETER tcpsegoffload 
       Offload TCP segmentation to the NIC. If set to AUTOMATIC, TCP segmentation will be offloaded to the NIC, if the NIC supports it.  
       Possible values = AUTOMATIC, DISABLED 
   .PARAMETER rstwindowattenuate 
       Enable or disable RST window attenuation to protect against spoofing. When enabled, will reply with corrective ACK when a sequence number is invalid.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER rstmaxack 
       Enable or disable acceptance of RST that is out of window yet echoes highest ACK sequence number. Useful only in proxy mode.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER spoofsyndrop 
       Enable or disable drop of invalid SYN packets to protect against spoofing. When disabled, established connections will be reset when a SYN packet is received.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER ecn 
       Enable or disable TCP Explicit Congestion Notification.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER mptcpdropdataonpreestsf 
       Enable or disable silently dropping the data on Pre-Established subflow. When enabled, DSS data packets are dropped silently instead of dropping the connection when data is received on pre established subflow.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER mptcpfastopen 
       Enable or disable Multipath TCP fastopen. When enabled, DSS data packets are accepted before receiving the third ack of SYN handshake.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER mptcpsessiontimeout 
       MPTCP session timeout in seconds. If this value is not set, idle MPTCP sessions are flushed after vserver's client idle timeout. 
   .PARAMETER timestamp 
       Enable or Disable TCP Timestamp option (RFC 1323).  
       Possible values = ENABLED, DISABLED 
   .PARAMETER dsack 
       Enable or disable DSACK.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER ackaggregation 
       Enable or disable ACK Aggregation.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER frto 
       Enable or disable FRTO (Forward RTO-Recovery).  
       Possible values = ENABLED, DISABLED 
   .PARAMETER maxcwnd 
       TCP Maximum Congestion Window. 
   .PARAMETER fack 
       Enable or disable FACK (Forward ACK).  
       Possible values = ENABLED, DISABLED 
   .PARAMETER tcpmode 
       TCP Optimization modes TRANSPARENT / ENDPOINT.  
       Possible values = TRANSPARENT, ENDPOINT 
   .PARAMETER tcpfastopen 
       Enable or disable TCP Fastopen. When enabled, NS can receive or send Data in SYN or SYN-ACK packets.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER hystart 
       Enable or disable CUBIC Hystart.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER dupackthresh 
       TCP dupack threshold. 
   .PARAMETER burstratecontrol 
       TCP Burst Rate Control DISABLED/FIXED/DYNAMIC. FIXED requires a TCP rate to be set.  
       Possible values = DISABLED, FIXED, DYNAMIC 
   .PARAMETER tcprate 
       TCP connection payload send rate in Kb/s. 
   .PARAMETER rateqmax 
       Maximum connection queue size in bytes, when BurstRateControl is used. 
   .PARAMETER drophalfclosedconnontimeout 
       Silently drop tcp half closed connections on idle timeout.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER dropestconnontimeout 
       Silently drop tcp established connections on idle timeout.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER applyadaptivetcp 
       Apply Adaptive TCP optimizations.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER clientiptcpoption 
       Client IP in TCP options.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER tcpfastopencookiesize 
       TCP FastOpen Cookie size. This accepts only even numbers. Odd number is trimmed down to nearest even number. 
   .PARAMETER taillossprobe 
       TCP tail loss probe optimizations.  
       Possible values = ENABLED, DISABLED 
   .PARAMETER clientiptcpoptionnumber 
       ClientIP TCP Option number.
    .EXAMPLE
        Invoke-ADCUnsetNstcpprofile -name <string>
    .NOTES
        File Name : Invoke-ADCUnsetNstcpprofile
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nstcpprofile
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateLength(1, 127)]
        [string]$name ,

        [Boolean]$ws ,

        [Boolean]$sack ,

        [Boolean]$wsval ,

        [Boolean]$nagle ,

        [Boolean]$ackonpush ,

        [Boolean]$mss ,

        [Boolean]$maxburst ,

        [Boolean]$initialcwnd ,

        [Boolean]$delayedack ,

        [Boolean]$oooqsize ,

        [Boolean]$maxpktpermss ,

        [Boolean]$pktperretx ,

        [Boolean]$minrto ,

        [Boolean]$slowstartincr ,

        [Boolean]$buffersize ,

        [Boolean]$syncookie ,

        [Boolean]$kaprobeupdatelastactivity ,

        [Boolean]$flavor ,

        [Boolean]$dynamicreceivebuffering ,

        [Boolean]$ka ,

        [Boolean]$kamaxprobes ,

        [Boolean]$kaconnidletime ,

        [Boolean]$kaprobeinterval ,

        [Boolean]$sendbuffsize ,

        [Boolean]$mptcp ,

        [Boolean]$establishclientconn ,

        [Boolean]$tcpsegoffload ,

        [Boolean]$rstwindowattenuate ,

        [Boolean]$rstmaxack ,

        [Boolean]$spoofsyndrop ,

        [Boolean]$ecn ,

        [Boolean]$mptcpdropdataonpreestsf ,

        [Boolean]$mptcpfastopen ,

        [Boolean]$mptcpsessiontimeout ,

        [Boolean]$timestamp ,

        [Boolean]$dsack ,

        [Boolean]$ackaggregation ,

        [Boolean]$frto ,

        [Boolean]$maxcwnd ,

        [Boolean]$fack ,

        [Boolean]$tcpmode ,

        [Boolean]$tcpfastopen ,

        [Boolean]$hystart ,

        [Boolean]$dupackthresh ,

        [Boolean]$burstratecontrol ,

        [Boolean]$tcprate ,

        [Boolean]$rateqmax ,

        [Boolean]$drophalfclosedconnontimeout ,

        [Boolean]$dropestconnontimeout ,

        [Boolean]$applyadaptivetcp ,

        [Boolean]$clientiptcpoption ,

        [Boolean]$tcpfastopencookiesize ,

        [Boolean]$taillossprobe ,

        [Boolean]$clientiptcpoptionnumber 
    )
    begin {
        Write-Verbose "Invoke-ADCUnsetNstcpprofile: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
            }
            if ($PSBoundParameters.ContainsKey('ws')) { $Payload.Add('ws', $ws) }
            if ($PSBoundParameters.ContainsKey('sack')) { $Payload.Add('sack', $sack) }
            if ($PSBoundParameters.ContainsKey('wsval')) { $Payload.Add('wsval', $wsval) }
            if ($PSBoundParameters.ContainsKey('nagle')) { $Payload.Add('nagle', $nagle) }
            if ($PSBoundParameters.ContainsKey('ackonpush')) { $Payload.Add('ackonpush', $ackonpush) }
            if ($PSBoundParameters.ContainsKey('mss')) { $Payload.Add('mss', $mss) }
            if ($PSBoundParameters.ContainsKey('maxburst')) { $Payload.Add('maxburst', $maxburst) }
            if ($PSBoundParameters.ContainsKey('initialcwnd')) { $Payload.Add('initialcwnd', $initialcwnd) }
            if ($PSBoundParameters.ContainsKey('delayedack')) { $Payload.Add('delayedack', $delayedack) }
            if ($PSBoundParameters.ContainsKey('oooqsize')) { $Payload.Add('oooqsize', $oooqsize) }
            if ($PSBoundParameters.ContainsKey('maxpktpermss')) { $Payload.Add('maxpktpermss', $maxpktpermss) }
            if ($PSBoundParameters.ContainsKey('pktperretx')) { $Payload.Add('pktperretx', $pktperretx) }
            if ($PSBoundParameters.ContainsKey('minrto')) { $Payload.Add('minrto', $minrto) }
            if ($PSBoundParameters.ContainsKey('slowstartincr')) { $Payload.Add('slowstartincr', $slowstartincr) }
            if ($PSBoundParameters.ContainsKey('buffersize')) { $Payload.Add('buffersize', $buffersize) }
            if ($PSBoundParameters.ContainsKey('syncookie')) { $Payload.Add('syncookie', $syncookie) }
            if ($PSBoundParameters.ContainsKey('kaprobeupdatelastactivity')) { $Payload.Add('kaprobeupdatelastactivity', $kaprobeupdatelastactivity) }
            if ($PSBoundParameters.ContainsKey('flavor')) { $Payload.Add('flavor', $flavor) }
            if ($PSBoundParameters.ContainsKey('dynamicreceivebuffering')) { $Payload.Add('dynamicreceivebuffering', $dynamicreceivebuffering) }
            if ($PSBoundParameters.ContainsKey('ka')) { $Payload.Add('ka', $ka) }
            if ($PSBoundParameters.ContainsKey('kamaxprobes')) { $Payload.Add('kamaxprobes', $kamaxprobes) }
            if ($PSBoundParameters.ContainsKey('kaconnidletime')) { $Payload.Add('kaconnidletime', $kaconnidletime) }
            if ($PSBoundParameters.ContainsKey('kaprobeinterval')) { $Payload.Add('kaprobeinterval', $kaprobeinterval) }
            if ($PSBoundParameters.ContainsKey('sendbuffsize')) { $Payload.Add('sendbuffsize', $sendbuffsize) }
            if ($PSBoundParameters.ContainsKey('mptcp')) { $Payload.Add('mptcp', $mptcp) }
            if ($PSBoundParameters.ContainsKey('establishclientconn')) { $Payload.Add('establishclientconn', $establishclientconn) }
            if ($PSBoundParameters.ContainsKey('tcpsegoffload')) { $Payload.Add('tcpsegoffload', $tcpsegoffload) }
            if ($PSBoundParameters.ContainsKey('rstwindowattenuate')) { $Payload.Add('rstwindowattenuate', $rstwindowattenuate) }
            if ($PSBoundParameters.ContainsKey('rstmaxack')) { $Payload.Add('rstmaxack', $rstmaxack) }
            if ($PSBoundParameters.ContainsKey('spoofsyndrop')) { $Payload.Add('spoofsyndrop', $spoofsyndrop) }
            if ($PSBoundParameters.ContainsKey('ecn')) { $Payload.Add('ecn', $ecn) }
            if ($PSBoundParameters.ContainsKey('mptcpdropdataonpreestsf')) { $Payload.Add('mptcpdropdataonpreestsf', $mptcpdropdataonpreestsf) }
            if ($PSBoundParameters.ContainsKey('mptcpfastopen')) { $Payload.Add('mptcpfastopen', $mptcpfastopen) }
            if ($PSBoundParameters.ContainsKey('mptcpsessiontimeout')) { $Payload.Add('mptcpsessiontimeout', $mptcpsessiontimeout) }
            if ($PSBoundParameters.ContainsKey('timestamp')) { $Payload.Add('timestamp', $timestamp) }
            if ($PSBoundParameters.ContainsKey('dsack')) { $Payload.Add('dsack', $dsack) }
            if ($PSBoundParameters.ContainsKey('ackaggregation')) { $Payload.Add('ackaggregation', $ackaggregation) }
            if ($PSBoundParameters.ContainsKey('frto')) { $Payload.Add('frto', $frto) }
            if ($PSBoundParameters.ContainsKey('maxcwnd')) { $Payload.Add('maxcwnd', $maxcwnd) }
            if ($PSBoundParameters.ContainsKey('fack')) { $Payload.Add('fack', $fack) }
            if ($PSBoundParameters.ContainsKey('tcpmode')) { $Payload.Add('tcpmode', $tcpmode) }
            if ($PSBoundParameters.ContainsKey('tcpfastopen')) { $Payload.Add('tcpfastopen', $tcpfastopen) }
            if ($PSBoundParameters.ContainsKey('hystart')) { $Payload.Add('hystart', $hystart) }
            if ($PSBoundParameters.ContainsKey('dupackthresh')) { $Payload.Add('dupackthresh', $dupackthresh) }
            if ($PSBoundParameters.ContainsKey('burstratecontrol')) { $Payload.Add('burstratecontrol', $burstratecontrol) }
            if ($PSBoundParameters.ContainsKey('tcprate')) { $Payload.Add('tcprate', $tcprate) }
            if ($PSBoundParameters.ContainsKey('rateqmax')) { $Payload.Add('rateqmax', $rateqmax) }
            if ($PSBoundParameters.ContainsKey('drophalfclosedconnontimeout')) { $Payload.Add('drophalfclosedconnontimeout', $drophalfclosedconnontimeout) }
            if ($PSBoundParameters.ContainsKey('dropestconnontimeout')) { $Payload.Add('dropestconnontimeout', $dropestconnontimeout) }
            if ($PSBoundParameters.ContainsKey('applyadaptivetcp')) { $Payload.Add('applyadaptivetcp', $applyadaptivetcp) }
            if ($PSBoundParameters.ContainsKey('clientiptcpoption')) { $Payload.Add('clientiptcpoption', $clientiptcpoption) }
            if ($PSBoundParameters.ContainsKey('tcpfastopencookiesize')) { $Payload.Add('tcpfastopencookiesize', $tcpfastopencookiesize) }
            if ($PSBoundParameters.ContainsKey('taillossprobe')) { $Payload.Add('taillossprobe', $taillossprobe) }
            if ($PSBoundParameters.ContainsKey('clientiptcpoptionnumber')) { $Payload.Add('clientiptcpoptionnumber', $clientiptcpoptionnumber) }
            if ($PSCmdlet.ShouldProcess("$name", "Unset NS configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nstcpprofile -Action unset -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUnsetNstcpprofile: Finished"
    }
}

function Invoke-ADCGetNstcpprofile {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER name 
       Name for a TCP profile. Must begin with a letter, number, or the underscore \(_\) character. Other characters allowed, after the first character, are the hyphen \(-\), period \(.\), hash \(\#\), space \( \), at \(@\), colon \(:\), and equal \(=\) characters. The name of a TCP profile cannot be changed after it is created.  
       CLI Users: If the name includes one or more spaces, enclose the name in double or single quotation marks \(for example, "my tcp profile" or 'my tcp profile'\). 
    .PARAMETER GetAll 
        Retreive all nstcpprofile object(s)
    .PARAMETER Count
        If specified, the count of the nstcpprofile object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNstcpprofile
    .EXAMPLE 
        Invoke-ADCGetNstcpprofile -GetAll 
    .EXAMPLE 
        Invoke-ADCGetNstcpprofile -Count
    .EXAMPLE
        Invoke-ADCGetNstcpprofile -name <string>
    .EXAMPLE
        Invoke-ADCGetNstcpprofile -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNstcpprofile
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nstcpprofile/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateLength(1, 127)]
        [string]$name,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll,

        [Parameter(ParameterSetName = 'GetAll')]
        [Parameter(ParameterSetName = 'Get')]
        [Switch]$ViewSummary

    )
    begin {
        Write-Verbose "Invoke-ADCGetNstcpprofile: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all nstcpprofile objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nstcpprofile -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nstcpprofile objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nstcpprofile -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nstcpprofile objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nstcpprofile -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nstcpprofile configuration for property 'name'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nstcpprofile -Resource $name -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving nstcpprofile configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nstcpprofile -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNstcpprofile: Ended"
    }
}

function Invoke-ADCUpdateNstimeout {
<#
    .SYNOPSIS
        Update NS configuration Object
    .DESCRIPTION
        Update NS configuration Object 
    .PARAMETER zombie 
        Interval, in seconds, at which the Citrix ADC zombie cleanup process must run. This process cleans up inactive TCP connections.  
        Default value: 120  
        Minimum value = 1  
        Maximum value = 600 
    .PARAMETER client 
        Client idle timeout (in seconds). If zero, the service-type default value is taken when service is created.  
        Default value: 0  
        Minimum value = 0  
        Maximum value = 18000 
    .PARAMETER server 
        Server idle timeout (in seconds). If zero, the service-type default value is taken when service is created.  
        Default value: 0  
        Minimum value = 0  
        Maximum value = 18000 
    .PARAMETER httpclient 
        Global idle timeout, in seconds, for client connections of HTTP service type. This value is over ridden by the client timeout that is configured on individual entities.  
        Default value: 0  
        Minimum value = 0  
        Maximum value = 18000 
    .PARAMETER httpserver 
        Global idle timeout, in seconds, for server connections of HTTP service type. This value is over ridden by the server timeout that is configured on individual entities.  
        Default value: 0  
        Minimum value = 0  
        Maximum value = 18000 
    .PARAMETER tcpclient 
        Global idle timeout, in seconds, for non-HTTP client connections of TCP service type. This value is over ridden by the client timeout that is configured on individual entities.  
        Default value: 0  
        Minimum value = 0  
        Maximum value = 18000 
    .PARAMETER tcpserver 
        Global idle timeout, in seconds, for non-HTTP server connections of TCP service type. This value is over ridden by the server timeout that is configured on entities.  
        Default value: 0  
        Minimum value = 0  
        Maximum value = 18000 
    .PARAMETER anyclient 
        Global idle timeout, in seconds, for non-TCP client connections. This value is over ridden by the client timeout that is configured on individual entities.  
        Default value: 0  
        Minimum value = 0  
        Maximum value = 31536000 
    .PARAMETER anyserver 
        Global idle timeout, in seconds, for non TCP server connections. This value is over ridden by the server timeout that is configured on individual entities.  
        Default value: 0  
        Minimum value = 0  
        Maximum value = 31536000 
    .PARAMETER anytcpclient 
        Global idle timeout, in seconds, for TCP client connections. This value takes precedence over entity level timeout settings (vserver/service). This is applicable only to transport protocol TCP.  
        Default value: 0  
        Minimum value = 0  
        Maximum value = 31536000 
    .PARAMETER anytcpserver 
        Global idle timeout, in seconds, for TCP server connections. This value takes precedence over entity level timeout settings ( vserver/service). This is applicable only to transport protocol TCP.  
        Default value: 0  
        Minimum value = 0  
        Maximum value = 31536000 
    .PARAMETER halfclose 
        Idle timeout, in seconds, for connections that are in TCP half-closed state.  
        Default value: 10  
        Minimum value = 1  
        Maximum value = 600 
    .PARAMETER nontcpzombie 
        Interval at which the zombie clean-up process for non-TCP connections should run. Inactive IP NAT connections will be cleaned up.  
        Default value: 60  
        Minimum value = 1  
        Maximum value = 600 
    .PARAMETER reducedfintimeout 
        Alternative idle timeout, in seconds, for closed TCP NATPCB connections.  
        Default value: 30  
        Minimum value = 1  
        Maximum value = 300 
    .PARAMETER reducedrsttimeout 
        Timer interval, in seconds, for abruptly terminated TCP NATPCB connections.  
        Default value: 0  
        Minimum value = 0  
        Maximum value = 300 
    .PARAMETER newconnidletimeout 
        Timer interval, in seconds, for new TCP NATPCB connections on which no data was received.  
        Default value: 4  
        Minimum value = 1  
        Maximum value = 120
    .EXAMPLE
        Invoke-ADCUpdateNstimeout 
    .NOTES
        File Name : Invoke-ADCUpdateNstimeout
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nstimeout/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [ValidateRange(1, 600)]
        [double]$zombie ,

        [ValidateRange(0, 18000)]
        [double]$client ,

        [ValidateRange(0, 18000)]
        [double]$server ,

        [ValidateRange(0, 18000)]
        [double]$httpclient ,

        [ValidateRange(0, 18000)]
        [double]$httpserver ,

        [ValidateRange(0, 18000)]
        [double]$tcpclient ,

        [ValidateRange(0, 18000)]
        [double]$tcpserver ,

        [ValidateRange(0, 31536000)]
        [double]$anyclient ,

        [ValidateRange(0, 31536000)]
        [double]$anyserver ,

        [ValidateRange(0, 31536000)]
        [double]$anytcpclient ,

        [ValidateRange(0, 31536000)]
        [double]$anytcpserver ,

        [ValidateRange(1, 600)]
        [double]$halfclose ,

        [ValidateRange(1, 600)]
        [double]$nontcpzombie ,

        [ValidateRange(1, 300)]
        [double]$reducedfintimeout ,

        [ValidateRange(0, 300)]
        [double]$reducedrsttimeout ,

        [ValidateRange(1, 120)]
        [double]$newconnidletimeout 

    )
    begin {
        Write-Verbose "Invoke-ADCUpdateNstimeout: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('zombie')) { $Payload.Add('zombie', $zombie) }
            if ($PSBoundParameters.ContainsKey('client')) { $Payload.Add('client', $client) }
            if ($PSBoundParameters.ContainsKey('server')) { $Payload.Add('server', $server) }
            if ($PSBoundParameters.ContainsKey('httpclient')) { $Payload.Add('httpclient', $httpclient) }
            if ($PSBoundParameters.ContainsKey('httpserver')) { $Payload.Add('httpserver', $httpserver) }
            if ($PSBoundParameters.ContainsKey('tcpclient')) { $Payload.Add('tcpclient', $tcpclient) }
            if ($PSBoundParameters.ContainsKey('tcpserver')) { $Payload.Add('tcpserver', $tcpserver) }
            if ($PSBoundParameters.ContainsKey('anyclient')) { $Payload.Add('anyclient', $anyclient) }
            if ($PSBoundParameters.ContainsKey('anyserver')) { $Payload.Add('anyserver', $anyserver) }
            if ($PSBoundParameters.ContainsKey('anytcpclient')) { $Payload.Add('anytcpclient', $anytcpclient) }
            if ($PSBoundParameters.ContainsKey('anytcpserver')) { $Payload.Add('anytcpserver', $anytcpserver) }
            if ($PSBoundParameters.ContainsKey('halfclose')) { $Payload.Add('halfclose', $halfclose) }
            if ($PSBoundParameters.ContainsKey('nontcpzombie')) { $Payload.Add('nontcpzombie', $nontcpzombie) }
            if ($PSBoundParameters.ContainsKey('reducedfintimeout')) { $Payload.Add('reducedfintimeout', $reducedfintimeout) }
            if ($PSBoundParameters.ContainsKey('reducedrsttimeout')) { $Payload.Add('reducedrsttimeout', $reducedrsttimeout) }
            if ($PSBoundParameters.ContainsKey('newconnidletimeout')) { $Payload.Add('newconnidletimeout', $newconnidletimeout) }
 
            if ($PSCmdlet.ShouldProcess("nstimeout", "Update NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -Type nstimeout -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
            Write-Output $result

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUpdateNstimeout: Finished"
    }
}

function Invoke-ADCUnsetNstimeout {
<#
    .SYNOPSIS
        Unset NS configuration Object
    .DESCRIPTION
        Unset NS configuration Object 
   .PARAMETER zombie 
       Interval, in seconds, at which the Citrix ADC zombie cleanup process must run. This process cleans up inactive TCP connections. 
   .PARAMETER client 
       Client idle timeout (in seconds). If zero, the service-type default value is taken when service is created. 
   .PARAMETER server 
       Server idle timeout (in seconds). If zero, the service-type default value is taken when service is created. 
   .PARAMETER httpclient 
       Global idle timeout, in seconds, for client connections of HTTP service type. This value is over ridden by the client timeout that is configured on individual entities. 
   .PARAMETER httpserver 
       Global idle timeout, in seconds, for server connections of HTTP service type. This value is over ridden by the server timeout that is configured on individual entities. 
   .PARAMETER tcpclient 
       Global idle timeout, in seconds, for non-HTTP client connections of TCP service type. This value is over ridden by the client timeout that is configured on individual entities. 
   .PARAMETER tcpserver 
       Global idle timeout, in seconds, for non-HTTP server connections of TCP service type. This value is over ridden by the server timeout that is configured on entities. 
   .PARAMETER anyclient 
       Global idle timeout, in seconds, for non-TCP client connections. This value is over ridden by the client timeout that is configured on individual entities. 
   .PARAMETER anyserver 
       Global idle timeout, in seconds, for non TCP server connections. This value is over ridden by the server timeout that is configured on individual entities. 
   .PARAMETER anytcpclient 
       Global idle timeout, in seconds, for TCP client connections. This value takes precedence over entity level timeout settings (vserver/service). This is applicable only to transport protocol TCP. 
   .PARAMETER anytcpserver 
       Global idle timeout, in seconds, for TCP server connections. This value takes precedence over entity level timeout settings ( vserver/service). This is applicable only to transport protocol TCP. 
   .PARAMETER halfclose 
       Idle timeout, in seconds, for connections that are in TCP half-closed state. 
   .PARAMETER nontcpzombie 
       Interval at which the zombie clean-up process for non-TCP connections should run. Inactive IP NAT connections will be cleaned up. 
   .PARAMETER reducedfintimeout 
       Alternative idle timeout, in seconds, for closed TCP NATPCB connections. 
   .PARAMETER reducedrsttimeout 
       Timer interval, in seconds, for abruptly terminated TCP NATPCB connections. 
   .PARAMETER newconnidletimeout 
       Timer interval, in seconds, for new TCP NATPCB connections on which no data was received.
    .EXAMPLE
        Invoke-ADCUnsetNstimeout 
    .NOTES
        File Name : Invoke-ADCUnsetNstimeout
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nstimeout
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Boolean]$zombie ,

        [Boolean]$client ,

        [Boolean]$server ,

        [Boolean]$httpclient ,

        [Boolean]$httpserver ,

        [Boolean]$tcpclient ,

        [Boolean]$tcpserver ,

        [Boolean]$anyclient ,

        [Boolean]$anyserver ,

        [Boolean]$anytcpclient ,

        [Boolean]$anytcpserver ,

        [Boolean]$halfclose ,

        [Boolean]$nontcpzombie ,

        [Boolean]$reducedfintimeout ,

        [Boolean]$reducedrsttimeout ,

        [Boolean]$newconnidletimeout 
    )
    begin {
        Write-Verbose "Invoke-ADCUnsetNstimeout: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('zombie')) { $Payload.Add('zombie', $zombie) }
            if ($PSBoundParameters.ContainsKey('client')) { $Payload.Add('client', $client) }
            if ($PSBoundParameters.ContainsKey('server')) { $Payload.Add('server', $server) }
            if ($PSBoundParameters.ContainsKey('httpclient')) { $Payload.Add('httpclient', $httpclient) }
            if ($PSBoundParameters.ContainsKey('httpserver')) { $Payload.Add('httpserver', $httpserver) }
            if ($PSBoundParameters.ContainsKey('tcpclient')) { $Payload.Add('tcpclient', $tcpclient) }
            if ($PSBoundParameters.ContainsKey('tcpserver')) { $Payload.Add('tcpserver', $tcpserver) }
            if ($PSBoundParameters.ContainsKey('anyclient')) { $Payload.Add('anyclient', $anyclient) }
            if ($PSBoundParameters.ContainsKey('anyserver')) { $Payload.Add('anyserver', $anyserver) }
            if ($PSBoundParameters.ContainsKey('anytcpclient')) { $Payload.Add('anytcpclient', $anytcpclient) }
            if ($PSBoundParameters.ContainsKey('anytcpserver')) { $Payload.Add('anytcpserver', $anytcpserver) }
            if ($PSBoundParameters.ContainsKey('halfclose')) { $Payload.Add('halfclose', $halfclose) }
            if ($PSBoundParameters.ContainsKey('nontcpzombie')) { $Payload.Add('nontcpzombie', $nontcpzombie) }
            if ($PSBoundParameters.ContainsKey('reducedfintimeout')) { $Payload.Add('reducedfintimeout', $reducedfintimeout) }
            if ($PSBoundParameters.ContainsKey('reducedrsttimeout')) { $Payload.Add('reducedrsttimeout', $reducedrsttimeout) }
            if ($PSBoundParameters.ContainsKey('newconnidletimeout')) { $Payload.Add('newconnidletimeout', $newconnidletimeout) }
            if ($PSCmdlet.ShouldProcess("nstimeout", "Unset NS configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nstimeout -Action unset -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUnsetNstimeout: Finished"
    }
}

function Invoke-ADCGetNstimeout {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER GetAll 
        Retreive all nstimeout object(s)
    .PARAMETER Count
        If specified, the count of the nstimeout object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNstimeout
    .EXAMPLE 
        Invoke-ADCGetNstimeout -GetAll
    .EXAMPLE
        Invoke-ADCGetNstimeout -name <string>
    .EXAMPLE
        Invoke-ADCGetNstimeout -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNstimeout
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nstimeout/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetNstimeout: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all nstimeout objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nstimeout -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nstimeout objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nstimeout -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nstimeout objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nstimeout -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nstimeout configuration for property ''"

            } else {
                Write-Verbose "Retrieving nstimeout configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nstimeout -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNstimeout: Ended"
    }
}

function Invoke-ADCAddNstimer {
<#
    .SYNOPSIS
        Add NS configuration Object
    .DESCRIPTION
        Add NS configuration Object 
    .PARAMETER name 
        Timer name.  
        Minimum length = 1 
    .PARAMETER interval 
        The frequency at which the policies bound to this timer are invoked. The minimum value is 20 msec. The maximum value is 20940 in seconds and 349 in minutes.  
        Default value: 5  
        Minimum value = 1  
        Maximum value = 20940000 
    .PARAMETER unit 
        Timer interval unit.  
        Default value: SEC  
        Possible values = SEC, MIN 
    .PARAMETER comment 
        Comments associated with this timer. 
    .PARAMETER PassThru 
        Return details about the created nstimer item.
    .EXAMPLE
        Invoke-ADCAddNstimer -name <string> -interval <int>
    .NOTES
        File Name : Invoke-ADCAddNstimer
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nstimer/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name ,

        [Parameter(Mandatory = $true)]
        [ValidateRange(1, 20940000)]
        [int]$interval = '5' ,

        [ValidateSet('SEC', 'MIN')]
        [string]$unit = 'SEC' ,

        [string]$comment ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddNstimer: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
                interval = $interval
            }
            if ($PSBoundParameters.ContainsKey('unit')) { $Payload.Add('unit', $unit) }
            if ($PSBoundParameters.ContainsKey('comment')) { $Payload.Add('comment', $comment) }
 
            if ($PSCmdlet.ShouldProcess("nstimer", "Add NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nstimer -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetNstimer -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddNstimer: Finished"
    }
}

function Invoke-ADCDeleteNstimer {
<#
    .SYNOPSIS
        Delete NS configuration Object
    .DESCRIPTION
        Delete NS configuration Object
    .PARAMETER name 
       Timer name.  
       Minimum length = 1 
    .EXAMPLE
        Invoke-ADCDeleteNstimer -name <string>
    .NOTES
        File Name : Invoke-ADCDeleteNstimer
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nstimer/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$name 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteNstimer: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }

            if ($PSCmdlet.ShouldProcess("$name", "Delete NS configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type nstimer -Resource $name -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteNstimer: Finished"
    }
}

function Invoke-ADCUpdateNstimer {
<#
    .SYNOPSIS
        Update NS configuration Object
    .DESCRIPTION
        Update NS configuration Object 
    .PARAMETER name 
        Timer name.  
        Minimum length = 1 
    .PARAMETER interval 
        The frequency at which the policies bound to this timer are invoked. The minimum value is 20 msec. The maximum value is 20940 in seconds and 349 in minutes.  
        Default value: 5  
        Minimum value = 1  
        Maximum value = 20940000 
    .PARAMETER unit 
        Timer interval unit.  
        Default value: SEC  
        Possible values = SEC, MIN 
    .PARAMETER comment 
        Comments associated with this timer. 
    .PARAMETER PassThru 
        Return details about the created nstimer item.
    .EXAMPLE
        Invoke-ADCUpdateNstimer -name <string>
    .NOTES
        File Name : Invoke-ADCUpdateNstimer
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nstimer/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name ,

        [ValidateRange(1, 20940000)]
        [int]$interval ,

        [ValidateSet('SEC', 'MIN')]
        [string]$unit ,

        [string]$comment ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCUpdateNstimer: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
            }
            if ($PSBoundParameters.ContainsKey('interval')) { $Payload.Add('interval', $interval) }
            if ($PSBoundParameters.ContainsKey('unit')) { $Payload.Add('unit', $unit) }
            if ($PSBoundParameters.ContainsKey('comment')) { $Payload.Add('comment', $comment) }
 
            if ($PSCmdlet.ShouldProcess("nstimer", "Update NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -Type nstimer -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetNstimer -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUpdateNstimer: Finished"
    }
}

function Invoke-ADCUnsetNstimer {
<#
    .SYNOPSIS
        Unset NS configuration Object
    .DESCRIPTION
        Unset NS configuration Object 
   .PARAMETER name 
       Timer name. 
   .PARAMETER interval 
       The frequency at which the policies bound to this timer are invoked. The minimum value is 20 msec. The maximum value is 20940 in seconds and 349 in minutes. 
   .PARAMETER unit 
       Timer interval unit.  
       Possible values = SEC, MIN 
   .PARAMETER comment 
       Comments associated with this timer.
    .EXAMPLE
        Invoke-ADCUnsetNstimer -name <string>
    .NOTES
        File Name : Invoke-ADCUnsetNstimer
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nstimer
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name ,

        [Boolean]$interval ,

        [Boolean]$unit ,

        [Boolean]$comment 
    )
    begin {
        Write-Verbose "Invoke-ADCUnsetNstimer: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
            }
            if ($PSBoundParameters.ContainsKey('interval')) { $Payload.Add('interval', $interval) }
            if ($PSBoundParameters.ContainsKey('unit')) { $Payload.Add('unit', $unit) }
            if ($PSBoundParameters.ContainsKey('comment')) { $Payload.Add('comment', $comment) }
            if ($PSCmdlet.ShouldProcess("$name", "Unset NS configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nstimer -Action unset -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUnsetNstimer: Finished"
    }
}

function Invoke-ADCRenameNstimer {
<#
    .SYNOPSIS
        Rename NS configuration Object
    .DESCRIPTION
        Rename NS configuration Object 
    .PARAMETER name 
        Timer name.  
        Minimum length = 1 
    .PARAMETER newname 
        The new name of the timer.  
        Minimum length = 1 
    .PARAMETER PassThru 
        Return details about the created nstimer item.
    .EXAMPLE
        Invoke-ADCRenameNstimer -name <string> -newname <string>
    .NOTES
        File Name : Invoke-ADCRenameNstimer
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nstimer/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name ,

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$newname ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCRenameNstimer: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
                newname = $newname
            }

 
            if ($PSCmdlet.ShouldProcess("nstimer", "Rename NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nstimer -Action rename -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetNstimer -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCRenameNstimer: Finished"
    }
}

function Invoke-ADCGetNstimer {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER name 
       Timer name. 
    .PARAMETER GetAll 
        Retreive all nstimer object(s)
    .PARAMETER Count
        If specified, the count of the nstimer object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNstimer
    .EXAMPLE 
        Invoke-ADCGetNstimer -GetAll 
    .EXAMPLE 
        Invoke-ADCGetNstimer -Count
    .EXAMPLE
        Invoke-ADCGetNstimer -name <string>
    .EXAMPLE
        Invoke-ADCGetNstimer -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNstimer
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nstimer/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll,

        [Parameter(ParameterSetName = 'GetAll')]
        [Parameter(ParameterSetName = 'Get')]
        [Switch]$ViewSummary

    )
    begin {
        Write-Verbose "Invoke-ADCGetNstimer: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all nstimer objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nstimer -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nstimer objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nstimer -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nstimer objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nstimer -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nstimer configuration for property 'name'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nstimer -Resource $name -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving nstimer configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nstimer -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNstimer: Ended"
    }
}

function Invoke-ADCAddNstimerautoscalepolicybinding {
<#
    .SYNOPSIS
        Add NS configuration Object
    .DESCRIPTION
        Add NS configuration Object 
    .PARAMETER name 
        Timer name.  
        Minimum length = 1 
    .PARAMETER policyname 
        The timer policy associated with the timer. 
    .PARAMETER priority 
        Specifies the priority of the timer policy. 
    .PARAMETER gotopriorityexpression 
        Expression specifying the priority of the next policy which will get evaluated if the current policy rule evaluates to TRUE. 
    .PARAMETER vserver 
        Name of the vserver which provides the context for the rule in timer policy. When not specified it is treated as a Global Default context. 
    .PARAMETER samplesize 
        Denotes the sample size. Sample size value of 'x' means that previous '(x - 1)' policy's rule evaluation results and the current evaluation result are present with the binding. For example, sample size of 10 means that there is a state of previous 9 policy evaluation results and also the current policy evaluation result.  
        Default value: 3  
        Minimum value = 1  
        Maximum value = 32 
    .PARAMETER threshold 
        Denotes the threshold. If the rule of the policy in the binding relation evaluates 'threshold size' number of times in 'sample size' to true, then the corresponding action is taken. Its value needs to be less than or equal to the sample size value.  
        Default value: 3  
        Minimum value = 1  
        Maximum value = 32 
    .PARAMETER PassThru 
        Return details about the created nstimer_autoscalepolicy_binding item.
    .EXAMPLE
        Invoke-ADCAddNstimerautoscalepolicybinding -name <string> -policyname <string> -priority <double>
    .NOTES
        File Name : Invoke-ADCAddNstimerautoscalepolicybinding
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nstimer_autoscalepolicy_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name ,

        [Parameter(Mandatory = $true)]
        [string]$policyname ,

        [Parameter(Mandatory = $true)]
        [double]$priority ,

        [string]$gotopriorityexpression ,

        [string]$vserver ,

        [ValidateRange(1, 32)]
        [double]$samplesize = '3' ,

        [ValidateRange(1, 32)]
        [double]$threshold = '3' ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddNstimerautoscalepolicybinding: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
                policyname = $policyname
                priority = $priority
            }
            if ($PSBoundParameters.ContainsKey('gotopriorityexpression')) { $Payload.Add('gotopriorityexpression', $gotopriorityexpression) }
            if ($PSBoundParameters.ContainsKey('vserver')) { $Payload.Add('vserver', $vserver) }
            if ($PSBoundParameters.ContainsKey('samplesize')) { $Payload.Add('samplesize', $samplesize) }
            if ($PSBoundParameters.ContainsKey('threshold')) { $Payload.Add('threshold', $threshold) }
 
            if ($PSCmdlet.ShouldProcess("nstimer_autoscalepolicy_binding", "Add NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -Type nstimer_autoscalepolicy_binding -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetNstimerautoscalepolicybinding -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddNstimerautoscalepolicybinding: Finished"
    }
}

function Invoke-ADCDeleteNstimerautoscalepolicybinding {
<#
    .SYNOPSIS
        Delete NS configuration Object
    .DESCRIPTION
        Delete NS configuration Object
    .PARAMETER name 
       Timer name.  
       Minimum length = 1    .PARAMETER policyname 
       The timer policy associated with the timer.
    .EXAMPLE
        Invoke-ADCDeleteNstimerautoscalepolicybinding -name <string>
    .NOTES
        File Name : Invoke-ADCDeleteNstimerautoscalepolicybinding
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nstimer_autoscalepolicy_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$name ,

        [string]$policyname 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteNstimerautoscalepolicybinding: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }
            if ($PSBoundParameters.ContainsKey('policyname')) { $Arguments.Add('policyname', $policyname) }
            if ($PSCmdlet.ShouldProcess("$name", "Delete NS configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type nstimer_autoscalepolicy_binding -Resource $name -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteNstimerautoscalepolicybinding: Finished"
    }
}

function Invoke-ADCGetNstimerautoscalepolicybinding {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER name 
       Timer name. 
    .PARAMETER GetAll 
        Retreive all nstimer_autoscalepolicy_binding object(s)
    .PARAMETER Count
        If specified, the count of the nstimer_autoscalepolicy_binding object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNstimerautoscalepolicybinding
    .EXAMPLE 
        Invoke-ADCGetNstimerautoscalepolicybinding -GetAll 
    .EXAMPLE 
        Invoke-ADCGetNstimerautoscalepolicybinding -Count
    .EXAMPLE
        Invoke-ADCGetNstimerautoscalepolicybinding -name <string>
    .EXAMPLE
        Invoke-ADCGetNstimerautoscalepolicybinding -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNstimerautoscalepolicybinding
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nstimer_autoscalepolicy_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetNstimerautoscalepolicybinding: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ 
                    bulkbindings = 'yes'
                }
                Write-Verbose "Retrieving all nstimer_autoscalepolicy_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nstimer_autoscalepolicy_binding -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nstimer_autoscalepolicy_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nstimer_autoscalepolicy_binding -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nstimer_autoscalepolicy_binding objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nstimer_autoscalepolicy_binding -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nstimer_autoscalepolicy_binding configuration for property 'name'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nstimer_autoscalepolicy_binding -Resource $name -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving nstimer_autoscalepolicy_binding configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nstimer_autoscalepolicy_binding -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNstimerautoscalepolicybinding: Ended"
    }
}

function Invoke-ADCGetNstimerbinding {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER name 
       Timer name. 
    .PARAMETER GetAll 
        Retreive all nstimer_binding object(s)
    .PARAMETER Count
        If specified, the count of the nstimer_binding object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNstimerbinding
    .EXAMPLE 
        Invoke-ADCGetNstimerbinding -GetAll
    .EXAMPLE
        Invoke-ADCGetNstimerbinding -name <string>
    .EXAMPLE
        Invoke-ADCGetNstimerbinding -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNstimerbinding
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nstimer_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetNstimerbinding: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ 
                    bulkbindings = 'yes'
                }
                Write-Verbose "Retrieving all nstimer_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nstimer_binding -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nstimer_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nstimer_binding -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nstimer_binding objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nstimer_binding -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nstimer_binding configuration for property 'name'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nstimer_binding -Resource $name -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving nstimer_binding configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nstimer_binding -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNstimerbinding: Ended"
    }
}

function Invoke-ADCGetNstimezone {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER value 
       . 
    .PARAMETER GetAll 
        Retreive all nstimezone object(s)
    .PARAMETER Count
        If specified, the count of the nstimezone object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNstimezone
    .EXAMPLE 
        Invoke-ADCGetNstimezone -GetAll 
    .EXAMPLE 
        Invoke-ADCGetNstimezone -Count
    .EXAMPLE
        Invoke-ADCGetNstimezone -name <string>
    .EXAMPLE
        Invoke-ADCGetNstimezone -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNstimezone
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nstimezone/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [string]$value,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll,

        [Parameter(ParameterSetName = 'GetAll')]
        [Parameter(ParameterSetName = 'Get')]
        [Switch]$ViewSummary

    )
    begin {
        Write-Verbose "Invoke-ADCGetNstimezone: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all nstimezone objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nstimezone -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nstimezone objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nstimezone -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nstimezone objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nstimezone -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nstimezone configuration for property 'value'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nstimezone -Resource $value -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving nstimezone configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nstimezone -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNstimezone: Ended"
    }
}

function Invoke-ADCAddNstrafficdomain {
<#
    .SYNOPSIS
        Add NS configuration Object
    .DESCRIPTION
        Add NS configuration Object 
    .PARAMETER td 
        Integer value that uniquely identifies a traffic domain.  
        Minimum value = 1  
        Maximum value = 4094 
    .PARAMETER aliasname 
        Name of traffic domain being added.  
        Minimum length = 1  
        Maximum length = 31 
    .PARAMETER vmac 
        Associate the traffic domain with a VMAC address instead of with VLANs. The Citrix ADC then sends the VMAC address of the traffic domain in all responses to ARP queries for network entities in that domain. As a result, the ADC can segregate subsequent incoming traffic for this traffic domain on the basis of the destination MAC address, because the destination MAC address is the VMAC address of the traffic domain. After creating entities on a traffic domain, you can easily manage and monitor them by performing traffic domain level operations.  
        Default value: DISABLED  
        Possible values = ENABLED, DISABLED 
    .PARAMETER PassThru 
        Return details about the created nstrafficdomain item.
    .EXAMPLE
        Invoke-ADCAddNstrafficdomain -td <double>
    .NOTES
        File Name : Invoke-ADCAddNstrafficdomain
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nstrafficdomain/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateRange(1, 4094)]
        [double]$td ,

        [ValidateLength(1, 31)]
        [string]$aliasname ,

        [ValidateSet('ENABLED', 'DISABLED')]
        [string]$vmac = 'DISABLED' ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddNstrafficdomain: Starting"
    }
    process {
        try {
            $Payload = @{
                td = $td
            }
            if ($PSBoundParameters.ContainsKey('aliasname')) { $Payload.Add('aliasname', $aliasname) }
            if ($PSBoundParameters.ContainsKey('vmac')) { $Payload.Add('vmac', $vmac) }
 
            if ($PSCmdlet.ShouldProcess("nstrafficdomain", "Add NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nstrafficdomain -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetNstrafficdomain -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddNstrafficdomain: Finished"
    }
}

function Invoke-ADCDeleteNstrafficdomain {
<#
    .SYNOPSIS
        Delete NS configuration Object
    .DESCRIPTION
        Delete NS configuration Object
    .PARAMETER td 
       Integer value that uniquely identifies a traffic domain.  
       Minimum value = 1  
       Maximum value = 4094 
    .EXAMPLE
        Invoke-ADCDeleteNstrafficdomain -td <double>
    .NOTES
        File Name : Invoke-ADCDeleteNstrafficdomain
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nstrafficdomain/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [double]$td 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteNstrafficdomain: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }

            if ($PSCmdlet.ShouldProcess("$td", "Delete NS configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type nstrafficdomain -Resource $td -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteNstrafficdomain: Finished"
    }
}

function Invoke-ADCClearNstrafficdomain {
<#
    .SYNOPSIS
        Clear NS configuration Object
    .DESCRIPTION
        Clear NS configuration Object 
    .PARAMETER td 
        Integer value that uniquely identifies a traffic domain.
    .EXAMPLE
        Invoke-ADCClearNstrafficdomain -td <double>
    .NOTES
        File Name : Invoke-ADCClearNstrafficdomain
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nstrafficdomain/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateRange(1, 4094)]
        [double]$td 

    )
    begin {
        Write-Verbose "Invoke-ADCClearNstrafficdomain: Starting"
    }
    process {
        try {
            $Payload = @{
                td = $td
            }

            if ($PSCmdlet.ShouldProcess($Name, "Clear NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nstrafficdomain -Action clear -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $result
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCClearNstrafficdomain: Finished"
    }
}

function Invoke-ADCEnableNstrafficdomain {
<#
    .SYNOPSIS
        Enable NS configuration Object
    .DESCRIPTION
        Enable NS configuration Object 
    .PARAMETER td 
        Integer value that uniquely identifies a traffic domain.
    .EXAMPLE
        Invoke-ADCEnableNstrafficdomain -td <double>
    .NOTES
        File Name : Invoke-ADCEnableNstrafficdomain
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nstrafficdomain/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateRange(1, 4094)]
        [double]$td 

    )
    begin {
        Write-Verbose "Invoke-ADCEnableNstrafficdomain: Starting"
    }
    process {
        try {
            $Payload = @{
                td = $td
            }

            if ($PSCmdlet.ShouldProcess($Name, "Enable NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nstrafficdomain -Action enable -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $result
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCEnableNstrafficdomain: Finished"
    }
}

function Invoke-ADCDisableNstrafficdomain {
<#
    .SYNOPSIS
        Disable NS configuration Object
    .DESCRIPTION
        Disable NS configuration Object 
    .PARAMETER td 
        Integer value that uniquely identifies a traffic domain.
    .EXAMPLE
        Invoke-ADCDisableNstrafficdomain -td <double>
    .NOTES
        File Name : Invoke-ADCDisableNstrafficdomain
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nstrafficdomain/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateRange(1, 4094)]
        [double]$td 

    )
    begin {
        Write-Verbose "Invoke-ADCDisableNstrafficdomain: Starting"
    }
    process {
        try {
            $Payload = @{
                td = $td
            }

            if ($PSCmdlet.ShouldProcess($Name, "Disable NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nstrafficdomain -Action disable -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $result
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDisableNstrafficdomain: Finished"
    }
}

function Invoke-ADCGetNstrafficdomain {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER td 
       Integer value that uniquely identifies a traffic domain. 
    .PARAMETER GetAll 
        Retreive all nstrafficdomain object(s)
    .PARAMETER Count
        If specified, the count of the nstrafficdomain object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNstrafficdomain
    .EXAMPLE 
        Invoke-ADCGetNstrafficdomain -GetAll 
    .EXAMPLE 
        Invoke-ADCGetNstrafficdomain -Count
    .EXAMPLE
        Invoke-ADCGetNstrafficdomain -name <string>
    .EXAMPLE
        Invoke-ADCGetNstrafficdomain -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNstrafficdomain
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nstrafficdomain/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateRange(1, 4094)]
        [double]$td,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll,

        [Parameter(ParameterSetName = 'GetAll')]
        [Parameter(ParameterSetName = 'Get')]
        [Switch]$ViewSummary

    )
    begin {
        Write-Verbose "Invoke-ADCGetNstrafficdomain: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all nstrafficdomain objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nstrafficdomain -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nstrafficdomain objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nstrafficdomain -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nstrafficdomain objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nstrafficdomain -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nstrafficdomain configuration for property 'td'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nstrafficdomain -Resource $td -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving nstrafficdomain configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nstrafficdomain -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNstrafficdomain: Ended"
    }
}

function Invoke-ADCGetNstrafficdomainbinding {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER td 
       Integer value that uniquely identifies a traffic domain. 
    .PARAMETER GetAll 
        Retreive all nstrafficdomain_binding object(s)
    .PARAMETER Count
        If specified, the count of the nstrafficdomain_binding object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNstrafficdomainbinding
    .EXAMPLE 
        Invoke-ADCGetNstrafficdomainbinding -GetAll
    .EXAMPLE
        Invoke-ADCGetNstrafficdomainbinding -name <string>
    .EXAMPLE
        Invoke-ADCGetNstrafficdomainbinding -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNstrafficdomainbinding
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nstrafficdomain_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateRange(1, 4094)]
        [double]$td,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetNstrafficdomainbinding: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ 
                    bulkbindings = 'yes'
                }
                Write-Verbose "Retrieving all nstrafficdomain_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nstrafficdomain_binding -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nstrafficdomain_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nstrafficdomain_binding -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nstrafficdomain_binding objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nstrafficdomain_binding -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nstrafficdomain_binding configuration for property 'td'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nstrafficdomain_binding -Resource $td -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving nstrafficdomain_binding configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nstrafficdomain_binding -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNstrafficdomainbinding: Ended"
    }
}

function Invoke-ADCAddNstrafficdomainbridgegroupbinding {
<#
    .SYNOPSIS
        Add NS configuration Object
    .DESCRIPTION
        Add NS configuration Object 
    .PARAMETER td 
        Integer value that uniquely identifies a traffic domain.  
        Minimum value = 1  
        Maximum value = 4094 
    .PARAMETER bridgegroup 
        ID of the configured bridge to bind to this traffic domain. More than one bridge group can be bound to a traffic domain, but the same bridge group cannot be a part of multiple traffic domains.  
        Minimum value = 1  
        Maximum value = 1000 
    .PARAMETER PassThru 
        Return details about the created nstrafficdomain_bridgegroup_binding item.
    .EXAMPLE
        Invoke-ADCAddNstrafficdomainbridgegroupbinding -td <double>
    .NOTES
        File Name : Invoke-ADCAddNstrafficdomainbridgegroupbinding
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nstrafficdomain_bridgegroup_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateRange(1, 4094)]
        [double]$td ,

        [ValidateRange(1, 1000)]
        [double]$bridgegroup ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddNstrafficdomainbridgegroupbinding: Starting"
    }
    process {
        try {
            $Payload = @{
                td = $td
            }
            if ($PSBoundParameters.ContainsKey('bridgegroup')) { $Payload.Add('bridgegroup', $bridgegroup) }
 
            if ($PSCmdlet.ShouldProcess("nstrafficdomain_bridgegroup_binding", "Add NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -Type nstrafficdomain_bridgegroup_binding -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetNstrafficdomainbridgegroupbinding -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddNstrafficdomainbridgegroupbinding: Finished"
    }
}

function Invoke-ADCDeleteNstrafficdomainbridgegroupbinding {
<#
    .SYNOPSIS
        Delete NS configuration Object
    .DESCRIPTION
        Delete NS configuration Object
    .PARAMETER td 
       Integer value that uniquely identifies a traffic domain.  
       Minimum value = 1  
       Maximum value = 4094    .PARAMETER bridgegroup 
       ID of the configured bridge to bind to this traffic domain. More than one bridge group can be bound to a traffic domain, but the same bridge group cannot be a part of multiple traffic domains.  
       Minimum value = 1  
       Maximum value = 1000
    .EXAMPLE
        Invoke-ADCDeleteNstrafficdomainbridgegroupbinding -td <double>
    .NOTES
        File Name : Invoke-ADCDeleteNstrafficdomainbridgegroupbinding
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nstrafficdomain_bridgegroup_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [double]$td ,

        [double]$bridgegroup 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteNstrafficdomainbridgegroupbinding: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }
            if ($PSBoundParameters.ContainsKey('bridgegroup')) { $Arguments.Add('bridgegroup', $bridgegroup) }
            if ($PSCmdlet.ShouldProcess("$td", "Delete NS configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type nstrafficdomain_bridgegroup_binding -Resource $td -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteNstrafficdomainbridgegroupbinding: Finished"
    }
}

function Invoke-ADCGetNstrafficdomainbridgegroupbinding {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER td 
       Integer value that uniquely identifies a traffic domain. 
    .PARAMETER GetAll 
        Retreive all nstrafficdomain_bridgegroup_binding object(s)
    .PARAMETER Count
        If specified, the count of the nstrafficdomain_bridgegroup_binding object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNstrafficdomainbridgegroupbinding
    .EXAMPLE 
        Invoke-ADCGetNstrafficdomainbridgegroupbinding -GetAll 
    .EXAMPLE 
        Invoke-ADCGetNstrafficdomainbridgegroupbinding -Count
    .EXAMPLE
        Invoke-ADCGetNstrafficdomainbridgegroupbinding -name <string>
    .EXAMPLE
        Invoke-ADCGetNstrafficdomainbridgegroupbinding -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNstrafficdomainbridgegroupbinding
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nstrafficdomain_bridgegroup_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateRange(1, 4094)]
        [double]$td,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetNstrafficdomainbridgegroupbinding: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ 
                    bulkbindings = 'yes'
                }
                Write-Verbose "Retrieving all nstrafficdomain_bridgegroup_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nstrafficdomain_bridgegroup_binding -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nstrafficdomain_bridgegroup_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nstrafficdomain_bridgegroup_binding -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nstrafficdomain_bridgegroup_binding objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nstrafficdomain_bridgegroup_binding -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nstrafficdomain_bridgegroup_binding configuration for property 'td'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nstrafficdomain_bridgegroup_binding -Resource $td -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving nstrafficdomain_bridgegroup_binding configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nstrafficdomain_bridgegroup_binding -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNstrafficdomainbridgegroupbinding: Ended"
    }
}

function Invoke-ADCAddNstrafficdomainvlanbinding {
<#
    .SYNOPSIS
        Add NS configuration Object
    .DESCRIPTION
        Add NS configuration Object 
    .PARAMETER td 
        Integer value that uniquely identifies a traffic domain.  
        Minimum value = 1  
        Maximum value = 4094 
    .PARAMETER vlan 
        ID of the VLAN to bind to this traffic domain. More than one VLAN can be bound to a traffic domain, but the same VLAN cannot be a part of multiple traffic domains.  
        Minimum value = 1  
        Maximum value = 4094 
    .PARAMETER PassThru 
        Return details about the created nstrafficdomain_vlan_binding item.
    .EXAMPLE
        Invoke-ADCAddNstrafficdomainvlanbinding -td <double>
    .NOTES
        File Name : Invoke-ADCAddNstrafficdomainvlanbinding
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nstrafficdomain_vlan_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateRange(1, 4094)]
        [double]$td ,

        [ValidateRange(1, 4094)]
        [double]$vlan ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddNstrafficdomainvlanbinding: Starting"
    }
    process {
        try {
            $Payload = @{
                td = $td
            }
            if ($PSBoundParameters.ContainsKey('vlan')) { $Payload.Add('vlan', $vlan) }
 
            if ($PSCmdlet.ShouldProcess("nstrafficdomain_vlan_binding", "Add NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -Type nstrafficdomain_vlan_binding -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetNstrafficdomainvlanbinding -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddNstrafficdomainvlanbinding: Finished"
    }
}

function Invoke-ADCDeleteNstrafficdomainvlanbinding {
<#
    .SYNOPSIS
        Delete NS configuration Object
    .DESCRIPTION
        Delete NS configuration Object
    .PARAMETER td 
       Integer value that uniquely identifies a traffic domain.  
       Minimum value = 1  
       Maximum value = 4094    .PARAMETER vlan 
       ID of the VLAN to bind to this traffic domain. More than one VLAN can be bound to a traffic domain, but the same VLAN cannot be a part of multiple traffic domains.  
       Minimum value = 1  
       Maximum value = 4094
    .EXAMPLE
        Invoke-ADCDeleteNstrafficdomainvlanbinding -td <double>
    .NOTES
        File Name : Invoke-ADCDeleteNstrafficdomainvlanbinding
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nstrafficdomain_vlan_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [double]$td ,

        [double]$vlan 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteNstrafficdomainvlanbinding: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }
            if ($PSBoundParameters.ContainsKey('vlan')) { $Arguments.Add('vlan', $vlan) }
            if ($PSCmdlet.ShouldProcess("$td", "Delete NS configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type nstrafficdomain_vlan_binding -Resource $td -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteNstrafficdomainvlanbinding: Finished"
    }
}

function Invoke-ADCGetNstrafficdomainvlanbinding {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER td 
       Integer value that uniquely identifies a traffic domain. 
    .PARAMETER GetAll 
        Retreive all nstrafficdomain_vlan_binding object(s)
    .PARAMETER Count
        If specified, the count of the nstrafficdomain_vlan_binding object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNstrafficdomainvlanbinding
    .EXAMPLE 
        Invoke-ADCGetNstrafficdomainvlanbinding -GetAll 
    .EXAMPLE 
        Invoke-ADCGetNstrafficdomainvlanbinding -Count
    .EXAMPLE
        Invoke-ADCGetNstrafficdomainvlanbinding -name <string>
    .EXAMPLE
        Invoke-ADCGetNstrafficdomainvlanbinding -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNstrafficdomainvlanbinding
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nstrafficdomain_vlan_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateRange(1, 4094)]
        [double]$td,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetNstrafficdomainvlanbinding: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ 
                    bulkbindings = 'yes'
                }
                Write-Verbose "Retrieving all nstrafficdomain_vlan_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nstrafficdomain_vlan_binding -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nstrafficdomain_vlan_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nstrafficdomain_vlan_binding -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nstrafficdomain_vlan_binding objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nstrafficdomain_vlan_binding -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nstrafficdomain_vlan_binding configuration for property 'td'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nstrafficdomain_vlan_binding -Resource $td -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving nstrafficdomain_vlan_binding configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nstrafficdomain_vlan_binding -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNstrafficdomainvlanbinding: Ended"
    }
}

function Invoke-ADCAddNstrafficdomainvxlanbinding {
<#
    .SYNOPSIS
        Add NS configuration Object
    .DESCRIPTION
        Add NS configuration Object 
    .PARAMETER td 
        Integer value that uniquely identifies a traffic domain.  
        Minimum value = 1  
        Maximum value = 4094 
    .PARAMETER vxlan 
        ID of the VXLAN to bind to this traffic domain. More than one VXLAN can be bound to a traffic domain, but the same VXLAN cannot be a part of multiple traffic domains.  
        Minimum value = 1  
        Maximum value = 16777215 
    .PARAMETER PassThru 
        Return details about the created nstrafficdomain_vxlan_binding item.
    .EXAMPLE
        Invoke-ADCAddNstrafficdomainvxlanbinding -td <double>
    .NOTES
        File Name : Invoke-ADCAddNstrafficdomainvxlanbinding
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nstrafficdomain_vxlan_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateRange(1, 4094)]
        [double]$td ,

        [ValidateRange(1, 16777215)]
        [double]$vxlan ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddNstrafficdomainvxlanbinding: Starting"
    }
    process {
        try {
            $Payload = @{
                td = $td
            }
            if ($PSBoundParameters.ContainsKey('vxlan')) { $Payload.Add('vxlan', $vxlan) }
 
            if ($PSCmdlet.ShouldProcess("nstrafficdomain_vxlan_binding", "Add NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -Type nstrafficdomain_vxlan_binding -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetNstrafficdomainvxlanbinding -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddNstrafficdomainvxlanbinding: Finished"
    }
}

function Invoke-ADCDeleteNstrafficdomainvxlanbinding {
<#
    .SYNOPSIS
        Delete NS configuration Object
    .DESCRIPTION
        Delete NS configuration Object
    .PARAMETER td 
       Integer value that uniquely identifies a traffic domain.  
       Minimum value = 1  
       Maximum value = 4094    .PARAMETER vxlan 
       ID of the VXLAN to bind to this traffic domain. More than one VXLAN can be bound to a traffic domain, but the same VXLAN cannot be a part of multiple traffic domains.  
       Minimum value = 1  
       Maximum value = 16777215
    .EXAMPLE
        Invoke-ADCDeleteNstrafficdomainvxlanbinding -td <double>
    .NOTES
        File Name : Invoke-ADCDeleteNstrafficdomainvxlanbinding
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nstrafficdomain_vxlan_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [double]$td ,

        [double]$vxlan 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteNstrafficdomainvxlanbinding: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }
            if ($PSBoundParameters.ContainsKey('vxlan')) { $Arguments.Add('vxlan', $vxlan) }
            if ($PSCmdlet.ShouldProcess("$td", "Delete NS configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type nstrafficdomain_vxlan_binding -Resource $td -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteNstrafficdomainvxlanbinding: Finished"
    }
}

function Invoke-ADCGetNstrafficdomainvxlanbinding {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER td 
       Integer value that uniquely identifies a traffic domain. 
    .PARAMETER GetAll 
        Retreive all nstrafficdomain_vxlan_binding object(s)
    .PARAMETER Count
        If specified, the count of the nstrafficdomain_vxlan_binding object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNstrafficdomainvxlanbinding
    .EXAMPLE 
        Invoke-ADCGetNstrafficdomainvxlanbinding -GetAll 
    .EXAMPLE 
        Invoke-ADCGetNstrafficdomainvxlanbinding -Count
    .EXAMPLE
        Invoke-ADCGetNstrafficdomainvxlanbinding -name <string>
    .EXAMPLE
        Invoke-ADCGetNstrafficdomainvxlanbinding -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNstrafficdomainvxlanbinding
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nstrafficdomain_vxlan_binding/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateRange(1, 4094)]
        [double]$td,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetNstrafficdomainvxlanbinding: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ 
                    bulkbindings = 'yes'
                }
                Write-Verbose "Retrieving all nstrafficdomain_vxlan_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nstrafficdomain_vxlan_binding -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nstrafficdomain_vxlan_binding objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nstrafficdomain_vxlan_binding -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nstrafficdomain_vxlan_binding objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nstrafficdomain_vxlan_binding -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nstrafficdomain_vxlan_binding configuration for property 'td'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nstrafficdomain_vxlan_binding -Resource $td -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving nstrafficdomain_vxlan_binding configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nstrafficdomain_vxlan_binding -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNstrafficdomainvxlanbinding: Ended"
    }
}

function Invoke-ADCAddNsvariable {
<#
    .SYNOPSIS
        Add NS configuration Object
    .DESCRIPTION
        Add NS configuration Object 
    .PARAMETER name 
        Variable name. This follows the same syntax rules as other expression entity names:  
        It must begin with an alpha character (A-Z or a-z) or an underscore (_).  
        The rest of the characters must be alpha, numeric (0-9) or underscores.  
        It cannot be re or xp (reserved for regular and XPath expressions).  
        It cannot be an expression reserved word (e.g. SYS or HTTP).  
        It cannot be used for an existing expression object (HTTP callout, patset, dataset, stringmap, or named expression).  
        Minimum length = 1 
    .PARAMETER type 
        Specification of the variable type; one of the following:  
        ulong - singleton variable with an unsigned 64-bit value.  
        text(value-max-size) - singleton variable with a text string value.  
        map(text(key-max-size),ulong,max-entries) - map of text string keys to unsigned 64-bit values.  
        map(text(key-max-size),text(value-max-size),max-entries) - map of text string keys to text string values.  
        where  
        value-max-size is a positive integer that is the maximum number of bytes in a text string value.  
        key-max-size is a positive integer that is the maximum number of bytes in a text string key.  
        max-entries is a positive integer that is the maximum number of entries in a map variable.  
        For a global singleton text variable, value-max-size <= 64000.  
        For a global map with ulong values, key-max-size <= 64000.  
        For a global map with text values, key-max-size + value-max-size <= 64000.  
        max-entries is a positive integer that is the maximum number of entries in a map variable. This has a theoretical maximum of 2^64-1, but in actual use will be much smaller, considering the memory available for use by the map.  
        Example:  
        map(text(10),text(20),100) specifies a map of text string keys (max size 10 bytes) to text string values (max size 20 bytes), with 100 max entries.  
        Minimum length = 1 
    .PARAMETER scope 
        Scope of the variable:  
        global - (default) one set of values visible across all Packet Engines on a standalone Citrix ADC, an HA pair, or all nodes of a cluster  
        transaction - one value for each request-response transaction (singleton variables only; no expiration).  
        Default value: global  
        Possible values = global, transaction 
    .PARAMETER iffull 
        Action to perform if an assignment to a map exceeds its configured max-entries:  
        lru - (default) reuse the least recently used entry in the map.  
        undef - force the assignment to return an undefined (Undef) result to the policy executing the assignment.  
        Default value: lru  
        Possible values = undef, lru 
    .PARAMETER ifvaluetoobig 
        Action to perform if an value is assigned to a text variable that exceeds its configured max-size,  
        or if a key is used that exceeds its configured max-size:  
        truncate - (default) truncate the text string to the first max-size bytes and proceed.  
        undef - force the assignment or expression evaluation to return an undefined (Undef) result to the policy executing the assignment or expression.  
        Default value: truncate  
        Possible values = undef, truncate 
    .PARAMETER ifnovalue 
        Action to perform if on a variable reference in an expression if the variable is single-valued and uninitialized  
        or if the variable is a map and there is no value for the specified key:  
        init - (default) initialize the single-value variable, or create a map entry for the key and the initial value,  
        using the -init value or its default.  
        undef - force the expression evaluation to return an undefined (Undef) result to the policy executing the expression.  
        Default value: init  
        Possible values = undef, init 
    .PARAMETER init 
        Initialization value for this variable, to which a singleton variable or map entry will be set if it is referenced before an assignment action has assigned it a value. If the singleton variable or map entry already has been assigned a value, setting this parameter will have no effect on that variable value. Default: 0 for ulong, NULL for text. 
    .PARAMETER expires 
        Value expiration in seconds. If the value is not referenced within the expiration period it will be deleted. 0 (the default) means no expiration.  
        Minimum value = 0  
        Maximum value = 31622400 
    .PARAMETER comment 
        Comments associated with this variable. 
    .PARAMETER PassThru 
        Return details about the created nsvariable item.
    .EXAMPLE
        Invoke-ADCAddNsvariable -name <string> -type <string>
    .NOTES
        File Name : Invoke-ADCAddNsvariable
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsvariable/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name ,

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$type ,

        [ValidateSet('global', 'transaction')]
        [string]$scope = 'global' ,

        [ValidateSet('undef', 'lru')]
        [string]$iffull = 'lru' ,

        [ValidateSet('undef', 'truncate')]
        [string]$ifvaluetoobig = 'truncate' ,

        [ValidateSet('undef', 'init')]
        [string]$ifnovalue = 'init' ,

        [string]$init ,

        [ValidateRange(0, 31622400)]
        [double]$expires ,

        [string]$comment ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddNsvariable: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
                type = $type
            }
            if ($PSBoundParameters.ContainsKey('scope')) { $Payload.Add('scope', $scope) }
            if ($PSBoundParameters.ContainsKey('iffull')) { $Payload.Add('iffull', $iffull) }
            if ($PSBoundParameters.ContainsKey('ifvaluetoobig')) { $Payload.Add('ifvaluetoobig', $ifvaluetoobig) }
            if ($PSBoundParameters.ContainsKey('ifnovalue')) { $Payload.Add('ifnovalue', $ifnovalue) }
            if ($PSBoundParameters.ContainsKey('init')) { $Payload.Add('init', $init) }
            if ($PSBoundParameters.ContainsKey('expires')) { $Payload.Add('expires', $expires) }
            if ($PSBoundParameters.ContainsKey('comment')) { $Payload.Add('comment', $comment) }
 
            if ($PSCmdlet.ShouldProcess("nsvariable", "Add NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nsvariable -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetNsvariable -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddNsvariable: Finished"
    }
}

function Invoke-ADCUpdateNsvariable {
<#
    .SYNOPSIS
        Update NS configuration Object
    .DESCRIPTION
        Update NS configuration Object 
    .PARAMETER name 
        Variable name. This follows the same syntax rules as other expression entity names:  
        It must begin with an alpha character (A-Z or a-z) or an underscore (_).  
        The rest of the characters must be alpha, numeric (0-9) or underscores.  
        It cannot be re or xp (reserved for regular and XPath expressions).  
        It cannot be an expression reserved word (e.g. SYS or HTTP).  
        It cannot be used for an existing expression object (HTTP callout, patset, dataset, stringmap, or named expression).  
        Minimum length = 1 
    .PARAMETER type 
        Specification of the variable type; one of the following:  
        ulong - singleton variable with an unsigned 64-bit value.  
        text(value-max-size) - singleton variable with a text string value.  
        map(text(key-max-size),ulong,max-entries) - map of text string keys to unsigned 64-bit values.  
        map(text(key-max-size),text(value-max-size),max-entries) - map of text string keys to text string values.  
        where  
        value-max-size is a positive integer that is the maximum number of bytes in a text string value.  
        key-max-size is a positive integer that is the maximum number of bytes in a text string key.  
        max-entries is a positive integer that is the maximum number of entries in a map variable.  
        For a global singleton text variable, value-max-size <= 64000.  
        For a global map with ulong values, key-max-size <= 64000.  
        For a global map with text values, key-max-size + value-max-size <= 64000.  
        max-entries is a positive integer that is the maximum number of entries in a map variable. This has a theoretical maximum of 2^64-1, but in actual use will be much smaller, considering the memory available for use by the map.  
        Example:  
        map(text(10),text(20),100) specifies a map of text string keys (max size 10 bytes) to text string values (max size 20 bytes), with 100 max entries.  
        Minimum length = 1 
    .PARAMETER iffull 
        Action to perform if an assignment to a map exceeds its configured max-entries:  
        lru - (default) reuse the least recently used entry in the map.  
        undef - force the assignment to return an undefined (Undef) result to the policy executing the assignment.  
        Default value: lru  
        Possible values = undef, lru 
    .PARAMETER ifvaluetoobig 
        Action to perform if an value is assigned to a text variable that exceeds its configured max-size,  
        or if a key is used that exceeds its configured max-size:  
        truncate - (default) truncate the text string to the first max-size bytes and proceed.  
        undef - force the assignment or expression evaluation to return an undefined (Undef) result to the policy executing the assignment or expression.  
        Default value: truncate  
        Possible values = undef, truncate 
    .PARAMETER ifnovalue 
        Action to perform if on a variable reference in an expression if the variable is single-valued and uninitialized  
        or if the variable is a map and there is no value for the specified key:  
        init - (default) initialize the single-value variable, or create a map entry for the key and the initial value,  
        using the -init value or its default.  
        undef - force the expression evaluation to return an undefined (Undef) result to the policy executing the expression.  
        Default value: init  
        Possible values = undef, init 
    .PARAMETER init 
        Initialization value for this variable, to which a singleton variable or map entry will be set if it is referenced before an assignment action has assigned it a value. If the singleton variable or map entry already has been assigned a value, setting this parameter will have no effect on that variable value. Default: 0 for ulong, NULL for text. 
    .PARAMETER expires 
        Value expiration in seconds. If the value is not referenced within the expiration period it will be deleted. 0 (the default) means no expiration.  
        Minimum value = 0  
        Maximum value = 31622400 
    .PARAMETER comment 
        Comments associated with this variable. 
    .PARAMETER PassThru 
        Return details about the created nsvariable item.
    .EXAMPLE
        Invoke-ADCUpdateNsvariable -name <string>
    .NOTES
        File Name : Invoke-ADCUpdateNsvariable
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsvariable/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$type ,

        [ValidateSet('undef', 'lru')]
        [string]$iffull ,

        [ValidateSet('undef', 'truncate')]
        [string]$ifvaluetoobig ,

        [ValidateSet('undef', 'init')]
        [string]$ifnovalue ,

        [string]$init ,

        [ValidateRange(0, 31622400)]
        [double]$expires ,

        [string]$comment ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCUpdateNsvariable: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
            }
            if ($PSBoundParameters.ContainsKey('type')) { $Payload.Add('type', $type) }
            if ($PSBoundParameters.ContainsKey('iffull')) { $Payload.Add('iffull', $iffull) }
            if ($PSBoundParameters.ContainsKey('ifvaluetoobig')) { $Payload.Add('ifvaluetoobig', $ifvaluetoobig) }
            if ($PSBoundParameters.ContainsKey('ifnovalue')) { $Payload.Add('ifnovalue', $ifnovalue) }
            if ($PSBoundParameters.ContainsKey('init')) { $Payload.Add('init', $init) }
            if ($PSBoundParameters.ContainsKey('expires')) { $Payload.Add('expires', $expires) }
            if ($PSBoundParameters.ContainsKey('comment')) { $Payload.Add('comment', $comment) }
 
            if ($PSCmdlet.ShouldProcess("nsvariable", "Update NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -Type nsvariable -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetNsvariable -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUpdateNsvariable: Finished"
    }
}

function Invoke-ADCUnsetNsvariable {
<#
    .SYNOPSIS
        Unset NS configuration Object
    .DESCRIPTION
        Unset NS configuration Object 
   .PARAMETER name 
       Variable name. This follows the same syntax rules as other expression entity names:  
       It must begin with an alpha character (A-Z or a-z) or an underscore (_).  
       The rest of the characters must be alpha, numeric (0-9) or underscores.  
       It cannot be re or xp (reserved for regular and XPath expressions).  
       It cannot be an expression reserved word (e.g. SYS or HTTP).  
       It cannot be used for an existing expression object (HTTP callout, patset, dataset, stringmap, or named expression). 
   .PARAMETER iffull 
       Action to perform if an assignment to a map exceeds its configured max-entries:  
       lru - (default) reuse the least recently used entry in the map.  
       undef - force the assignment to return an undefined (Undef) result to the policy executing the assignment.  
       Possible values = undef, lru 
   .PARAMETER ifvaluetoobig 
       Action to perform if an value is assigned to a text variable that exceeds its configured max-size,  
       or if a key is used that exceeds its configured max-size:  
       truncate - (default) truncate the text string to the first max-size bytes and proceed.  
       undef - force the assignment or expression evaluation to return an undefined (Undef) result to the policy executing the assignment or expression.  
       Possible values = undef, truncate 
   .PARAMETER ifnovalue 
       Action to perform if on a variable reference in an expression if the variable is single-valued and uninitialized  
       or if the variable is a map and there is no value for the specified key:  
       init - (default) initialize the single-value variable, or create a map entry for the key and the initial value,  
       using the -init value or its default.  
       undef - force the expression evaluation to return an undefined (Undef) result to the policy executing the expression.  
       Possible values = undef, init 
   .PARAMETER init 
       Initialization value for this variable, to which a singleton variable or map entry will be set if it is referenced before an assignment action has assigned it a value. If the singleton variable or map entry already has been assigned a value, setting this parameter will have no effect on that variable value. Default: 0 for ulong, NULL for text. 
   .PARAMETER expires 
       Value expiration in seconds. If the value is not referenced within the expiration period it will be deleted. 0 (the default) means no expiration. 
   .PARAMETER comment 
       Comments associated with this variable.
    .EXAMPLE
        Invoke-ADCUnsetNsvariable -name <string>
    .NOTES
        File Name : Invoke-ADCUnsetNsvariable
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsvariable
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name ,

        [Boolean]$iffull ,

        [Boolean]$ifvaluetoobig ,

        [Boolean]$ifnovalue ,

        [Boolean]$init ,

        [Boolean]$expires ,

        [Boolean]$comment 
    )
    begin {
        Write-Verbose "Invoke-ADCUnsetNsvariable: Starting"
    }
    process {
        try {
            $Payload = @{
                name = $name
            }
            if ($PSBoundParameters.ContainsKey('iffull')) { $Payload.Add('iffull', $iffull) }
            if ($PSBoundParameters.ContainsKey('ifvaluetoobig')) { $Payload.Add('ifvaluetoobig', $ifvaluetoobig) }
            if ($PSBoundParameters.ContainsKey('ifnovalue')) { $Payload.Add('ifnovalue', $ifnovalue) }
            if ($PSBoundParameters.ContainsKey('init')) { $Payload.Add('init', $init) }
            if ($PSBoundParameters.ContainsKey('expires')) { $Payload.Add('expires', $expires) }
            if ($PSBoundParameters.ContainsKey('comment')) { $Payload.Add('comment', $comment) }
            if ($PSCmdlet.ShouldProcess("$name", "Unset NS configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nsvariable -Action unset -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUnsetNsvariable: Finished"
    }
}

function Invoke-ADCDeleteNsvariable {
<#
    .SYNOPSIS
        Delete NS configuration Object
    .DESCRIPTION
        Delete NS configuration Object
    .PARAMETER name 
       Variable name. This follows the same syntax rules as other expression entity names:  
       It must begin with an alpha character (A-Z or a-z) or an underscore (_).  
       The rest of the characters must be alpha, numeric (0-9) or underscores.  
       It cannot be re or xp (reserved for regular and XPath expressions).  
       It cannot be an expression reserved word (e.g. SYS or HTTP).  
       It cannot be used for an existing expression object (HTTP callout, patset, dataset, stringmap, or named expression).  
       Minimum length = 1 
    .EXAMPLE
        Invoke-ADCDeleteNsvariable -name <string>
    .NOTES
        File Name : Invoke-ADCDeleteNsvariable
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsvariable/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$name 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteNsvariable: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }

            if ($PSCmdlet.ShouldProcess("$name", "Delete NS configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type nsvariable -Resource $name -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteNsvariable: Finished"
    }
}

function Invoke-ADCGetNsvariable {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER name 
       Variable name. This follows the same syntax rules as other expression entity names:  
       It must begin with an alpha character (A-Z or a-z) or an underscore (_).  
       The rest of the characters must be alpha, numeric (0-9) or underscores.  
       It cannot be re or xp (reserved for regular and XPath expressions).  
       It cannot be an expression reserved word (e.g. SYS or HTTP).  
       It cannot be used for an existing expression object (HTTP callout, patset, dataset, stringmap, or named expression). 
    .PARAMETER GetAll 
        Retreive all nsvariable object(s)
    .PARAMETER Count
        If specified, the count of the nsvariable object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNsvariable
    .EXAMPLE 
        Invoke-ADCGetNsvariable -GetAll 
    .EXAMPLE 
        Invoke-ADCGetNsvariable -Count
    .EXAMPLE
        Invoke-ADCGetNsvariable -name <string>
    .EXAMPLE
        Invoke-ADCGetNsvariable -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNsvariable
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsvariable/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$name,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll,

        [Parameter(ParameterSetName = 'GetAll')]
        [Parameter(ParameterSetName = 'Get')]
        [Switch]$ViewSummary

    )
    begin {
        Write-Verbose "Invoke-ADCGetNsvariable: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all nsvariable objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsvariable -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nsvariable objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsvariable -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nsvariable objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsvariable -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nsvariable configuration for property 'name'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsvariable -Resource $name -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving nsvariable configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsvariable -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNsvariable: Ended"
    }
}

function Invoke-ADCGetNsversion {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER installedversion 
       Installed version. 
    .PARAMETER GetAll 
        Retreive all nsversion object(s)
    .PARAMETER Count
        If specified, the count of the nsversion object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNsversion
    .EXAMPLE 
        Invoke-ADCGetNsversion -GetAll
    .EXAMPLE
        Invoke-ADCGetNsversion -name <string>
    .EXAMPLE
        Invoke-ADCGetNsversion -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNsversion
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsversion/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByArgument')]
        [boolean]$installedversion,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetNsversion: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all nsversion objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsversion -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nsversion objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsversion -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nsversion objects by arguments"
                $Arguments = @{ } 
                if ($PSBoundParameters.ContainsKey('installedversion')) { $Arguments.Add('installedversion', $installedversion) }
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsversion -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nsversion configuration for property ''"

            } else {
                Write-Verbose "Retrieving nsversion configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsversion -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNsversion: Ended"
    }
}

function Invoke-ADCUpdateNsvpxparam {
<#
    .SYNOPSIS
        Update NS configuration Object
    .DESCRIPTION
        Update NS configuration Object 
    .PARAMETER masterclockcpu1 
        This setting applicable in virtual appliances, to move master clock source cpu from management cpu cpu0 to cpu1 ie PE0.  
        * There are 2 options for the behavior:  
        1. YES - Allow the Virtual Appliance to move clock source to cpu1.  
        2. NO - Virtual Appliance will use management cpu ie cpu0 for clock source default option is NO.  
        Possible values = YES, NO 
    .PARAMETER cpuyield 
        This setting applicable in virtual appliances, is to affect the cpu yield(relinquishing the cpu resources) in any hypervised environment.  
        * There are 3 options for the behavior:  
        1. YES - Allow the Virtual Appliance to yield its vCPUs periodically, if there is no data traffic.  
        2. NO - Virtual Appliance will not yield the vCPU.  
        3. DEFAULT - Restores the default behaviour, according to the license.  
        * Its behavior in different scenarios:  
        1. As this setting is node specific only, it will not be propagated to other nodes, when executed on Cluster(CLIP) and HA(Primary).  
        2. In cluster setup, use '-ownerNode' to specify ID of the cluster node.  
        3. This setting is a system wide implementation and not granular to vCPUs.  
        4. No effect on the management PE.  
        Default value: DEFAULT  
        Possible values = DEFAULT, YES, NO 
    .PARAMETER ownernode 
        ID of the cluster node for which you are setting the cpuyield. It can be configured only through the cluster IP address.  
        Default value: 255  
        Minimum value = 0  
        Maximum value = 31
    .EXAMPLE
        Invoke-ADCUpdateNsvpxparam 
    .NOTES
        File Name : Invoke-ADCUpdateNsvpxparam
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsvpxparam/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [ValidateSet('YES', 'NO')]
        [string]$masterclockcpu1 ,

        [ValidateSet('DEFAULT', 'YES', 'NO')]
        [string]$cpuyield ,

        [ValidateRange(0, 31)]
        [double]$ownernode 

    )
    begin {
        Write-Verbose "Invoke-ADCUpdateNsvpxparam: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('masterclockcpu1')) { $Payload.Add('masterclockcpu1', $masterclockcpu1) }
            if ($PSBoundParameters.ContainsKey('cpuyield')) { $Payload.Add('cpuyield', $cpuyield) }
            if ($PSBoundParameters.ContainsKey('ownernode')) { $Payload.Add('ownernode', $ownernode) }
 
            if ($PSCmdlet.ShouldProcess("nsvpxparam", "Update NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -Type nsvpxparam -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
            Write-Output $result

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUpdateNsvpxparam: Finished"
    }
}

function Invoke-ADCUnsetNsvpxparam {
<#
    .SYNOPSIS
        Unset NS configuration Object
    .DESCRIPTION
        Unset NS configuration Object 
   .PARAMETER masterclockcpu1 
       This setting applicable in virtual appliances, to move master clock source cpu from management cpu cpu0 to cpu1 ie PE0.  
       * There are 2 options for the behavior:  
       1. YES - Allow the Virtual Appliance to move clock source to cpu1.  
       2. NO - Virtual Appliance will use management cpu ie cpu0 for clock source default option is NO.  
       Possible values = YES, NO 
   .PARAMETER cpuyield 
       This setting applicable in virtual appliances, is to affect the cpu yield(relinquishing the cpu resources) in any hypervised environment.  
       * There are 3 options for the behavior:  
       1. YES - Allow the Virtual Appliance to yield its vCPUs periodically, if there is no data traffic.  
       2. NO - Virtual Appliance will not yield the vCPU.  
       3. DEFAULT - Restores the default behaviour, according to the license.  
       * Its behavior in different scenarios:  
       1. As this setting is node specific only, it will not be propagated to other nodes, when executed on Cluster(CLIP) and HA(Primary).  
       2. In cluster setup, use '-ownerNode' to specify ID of the cluster node.  
       3. This setting is a system wide implementation and not granular to vCPUs.  
       4. No effect on the management PE.  
       Possible values = DEFAULT, YES, NO 
   .PARAMETER ownernode 
       ID of the cluster node for which you are setting the cpuyield. It can be configured only through the cluster IP address.
    .EXAMPLE
        Invoke-ADCUnsetNsvpxparam 
    .NOTES
        File Name : Invoke-ADCUnsetNsvpxparam
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsvpxparam
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Boolean]$masterclockcpu1 ,

        [Boolean]$cpuyield ,

        [Boolean]$ownernode 
    )
    begin {
        Write-Verbose "Invoke-ADCUnsetNsvpxparam: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('masterclockcpu1')) { $Payload.Add('masterclockcpu1', $masterclockcpu1) }
            if ($PSBoundParameters.ContainsKey('cpuyield')) { $Payload.Add('cpuyield', $cpuyield) }
            if ($PSBoundParameters.ContainsKey('ownernode')) { $Payload.Add('ownernode', $ownernode) }
            if ($PSCmdlet.ShouldProcess("nsvpxparam", "Unset NS configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nsvpxparam -Action unset -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUnsetNsvpxparam: Finished"
    }
}

function Invoke-ADCGetNsvpxparam {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER GetAll 
        Retreive all nsvpxparam object(s)
    .PARAMETER Count
        If specified, the count of the nsvpxparam object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNsvpxparam
    .EXAMPLE 
        Invoke-ADCGetNsvpxparam -GetAll 
    .EXAMPLE 
        Invoke-ADCGetNsvpxparam -Count
    .EXAMPLE
        Invoke-ADCGetNsvpxparam -name <string>
    .EXAMPLE
        Invoke-ADCGetNsvpxparam -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNsvpxparam
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsvpxparam/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll,

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$ViewSummary

    )
    begin {
        Write-Verbose "Invoke-ADCGetNsvpxparam: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all nsvpxparam objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsvpxparam -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nsvpxparam objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsvpxparam -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nsvpxparam objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsvpxparam -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nsvpxparam configuration for property ''"

            } else {
                Write-Verbose "Retrieving nsvpxparam configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsvpxparam -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNsvpxparam: Ended"
    }
}

function Invoke-ADCUpdateNsweblogparam {
<#
    .SYNOPSIS
        Update NS configuration Object
    .DESCRIPTION
        Update NS configuration Object 
    .PARAMETER buffersizemb 
        Buffer size, in MB, allocated for log transaction data on the system. The maximum value is limited to the memory available on the system.  
        Default value: 16  
        Minimum value = 1  
        Maximum value = 4294967294LU 
    .PARAMETER customreqhdrs 
        Name(s) of HTTP request headers whose values should be exported by the Web Logging feature.  
        Minimum length = 1 
    .PARAMETER customrsphdrs 
        Name(s) of HTTP response headers whose values should be exported by the Web Logging feature.  
        Minimum length = 1
    .EXAMPLE
        Invoke-ADCUpdateNsweblogparam 
    .NOTES
        File Name : Invoke-ADCUpdateNsweblogparam
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsweblogparam/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [ValidateRange(1, 4294967294)]
        [double]$buffersizemb ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string[]]$customreqhdrs ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string[]]$customrsphdrs 

    )
    begin {
        Write-Verbose "Invoke-ADCUpdateNsweblogparam: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('buffersizemb')) { $Payload.Add('buffersizemb', $buffersizemb) }
            if ($PSBoundParameters.ContainsKey('customreqhdrs')) { $Payload.Add('customreqhdrs', $customreqhdrs) }
            if ($PSBoundParameters.ContainsKey('customrsphdrs')) { $Payload.Add('customrsphdrs', $customrsphdrs) }
 
            if ($PSCmdlet.ShouldProcess("nsweblogparam", "Update NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -Type nsweblogparam -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
            Write-Output $result

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUpdateNsweblogparam: Finished"
    }
}

function Invoke-ADCUnsetNsweblogparam {
<#
    .SYNOPSIS
        Unset NS configuration Object
    .DESCRIPTION
        Unset NS configuration Object 
   .PARAMETER buffersizemb 
       Buffer size, in MB, allocated for log transaction data on the system. The maximum value is limited to the memory available on the system. 
   .PARAMETER customreqhdrs 
       Name(s) of HTTP request headers whose values should be exported by the Web Logging feature. 
   .PARAMETER customrsphdrs 
       Name(s) of HTTP response headers whose values should be exported by the Web Logging feature.
    .EXAMPLE
        Invoke-ADCUnsetNsweblogparam 
    .NOTES
        File Name : Invoke-ADCUnsetNsweblogparam
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsweblogparam
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Boolean]$buffersizemb ,

        [Boolean]$customreqhdrs ,

        [Boolean]$customrsphdrs 
    )
    begin {
        Write-Verbose "Invoke-ADCUnsetNsweblogparam: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('buffersizemb')) { $Payload.Add('buffersizemb', $buffersizemb) }
            if ($PSBoundParameters.ContainsKey('customreqhdrs')) { $Payload.Add('customreqhdrs', $customreqhdrs) }
            if ($PSBoundParameters.ContainsKey('customrsphdrs')) { $Payload.Add('customrsphdrs', $customrsphdrs) }
            if ($PSCmdlet.ShouldProcess("nsweblogparam", "Unset NS configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nsweblogparam -Action unset -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUnsetNsweblogparam: Finished"
    }
}

function Invoke-ADCGetNsweblogparam {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER GetAll 
        Retreive all nsweblogparam object(s)
    .PARAMETER Count
        If specified, the count of the nsweblogparam object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNsweblogparam
    .EXAMPLE 
        Invoke-ADCGetNsweblogparam -GetAll
    .EXAMPLE
        Invoke-ADCGetNsweblogparam -name <string>
    .EXAMPLE
        Invoke-ADCGetNsweblogparam -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNsweblogparam
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsweblogparam/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll
    )
    begin {
        Write-Verbose "Invoke-ADCGetNsweblogparam: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all nsweblogparam objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsweblogparam -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nsweblogparam objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsweblogparam -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nsweblogparam objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsweblogparam -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nsweblogparam configuration for property ''"

            } else {
                Write-Verbose "Retrieving nsweblogparam configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsweblogparam -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNsweblogparam: Ended"
    }
}

function Invoke-ADCAddNsxmlnamespace {
<#
    .SYNOPSIS
        Add NS configuration Object
    .DESCRIPTION
        Add NS configuration Object 
    .PARAMETER prefix 
        XML prefix.  
        Minimum length = 1 
    .PARAMETER Namespace 
        Expanded namespace for which the XML prefix is provided.  
        Minimum length = 1 
    .PARAMETER description 
        Description for the prefix.  
        Minimum length = 1 
    .PARAMETER PassThru 
        Return details about the created nsxmlnamespace item.
    .EXAMPLE
        Invoke-ADCAddNsxmlnamespace -prefix <string> -Namespace <string>
    .NOTES
        File Name : Invoke-ADCAddNsxmlnamespace
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsxmlnamespace/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$prefix ,

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$Namespace ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$description ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCAddNsxmlnamespace: Starting"
    }
    process {
        try {
            $Payload = @{
                prefix = $prefix
                Namespace = $Namespace
            }
            if ($PSBoundParameters.ContainsKey('description')) { $Payload.Add('description', $description) }
 
            if ($PSCmdlet.ShouldProcess("nsxmlnamespace", "Add NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nsxmlnamespace -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 201 Created
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetNsxmlnamespace -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCAddNsxmlnamespace: Finished"
    }
}

function Invoke-ADCDeleteNsxmlnamespace {
<#
    .SYNOPSIS
        Delete NS configuration Object
    .DESCRIPTION
        Delete NS configuration Object
    .PARAMETER prefix 
       XML prefix.  
       Minimum length = 1 
    .EXAMPLE
        Invoke-ADCDeleteNsxmlnamespace -prefix <string>
    .NOTES
        File Name : Invoke-ADCDeleteNsxmlnamespace
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsxmlnamespace/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [string]$prefix 
    )
    begin {
        Write-Verbose "Invoke-ADCDeleteNsxmlnamespace: Starting"
    }
    process {
        try {
            $Arguments = @{ 
            }

            if ($PSCmdlet.ShouldProcess("$prefix", "Delete NS configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method DELETE -Type nsxmlnamespace -Resource $prefix -Arguments $Arguments
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCDeleteNsxmlnamespace: Finished"
    }
}

function Invoke-ADCUpdateNsxmlnamespace {
<#
    .SYNOPSIS
        Update NS configuration Object
    .DESCRIPTION
        Update NS configuration Object 
    .PARAMETER prefix 
        XML prefix.  
        Minimum length = 1 
    .PARAMETER Namespace 
        Expanded namespace for which the XML prefix is provided.  
        Minimum length = 1 
    .PARAMETER description 
        Description for the prefix.  
        Minimum length = 1 
    .PARAMETER PassThru 
        Return details about the created nsxmlnamespace item.
    .EXAMPLE
        Invoke-ADCUpdateNsxmlnamespace -prefix <string>
    .NOTES
        File Name : Invoke-ADCUpdateNsxmlnamespace
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsxmlnamespace/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$prefix ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$Namespace ,

        [ValidateScript({ $_.Length -gt 1 })]
        [string]$description ,

        [Switch]$PassThru 

    )
    begin {
        Write-Verbose "Invoke-ADCUpdateNsxmlnamespace: Starting"
    }
    process {
        try {
            $Payload = @{
                prefix = $prefix
            }
            if ($PSBoundParameters.ContainsKey('Namespace')) { $Payload.Add('Namespace', $Namespace) }
            if ($PSBoundParameters.ContainsKey('description')) { $Payload.Add('description', $description) }
 
            if ($PSCmdlet.ShouldProcess("nsxmlnamespace", "Update NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method PUT -Type nsxmlnamespace -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                if ($PSBoundParameters.ContainsKey('PassThru')) {
                    Write-Output (Invoke-ADCGetNsxmlnamespace -Filter $Payload)
                } else {
                    Write-Output $result
                }

            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUpdateNsxmlnamespace: Finished"
    }
}

function Invoke-ADCUnsetNsxmlnamespace {
<#
    .SYNOPSIS
        Unset NS configuration Object
    .DESCRIPTION
        Unset NS configuration Object 
   .PARAMETER prefix 
       XML prefix. 
   .PARAMETER Namespace 
       Expanded namespace for which the XML prefix is provided. 
   .PARAMETER description 
       Description for the prefix.
    .EXAMPLE
        Invoke-ADCUnsetNsxmlnamespace -prefix <string>
    .NOTES
        File Name : Invoke-ADCUnsetNsxmlnamespace
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsxmlnamespace
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$prefix ,

        [Boolean]$Namespace ,

        [Boolean]$description 
    )
    begin {
        Write-Verbose "Invoke-ADCUnsetNsxmlnamespace: Starting"
    }
    process {
        try {
            $Payload = @{
                prefix = $prefix
            }
            if ($PSBoundParameters.ContainsKey('Namespace')) { $Payload.Add('Namespace', $Namespace) }
            if ($PSBoundParameters.ContainsKey('description')) { $Payload.Add('description', $description) }
            if ($PSCmdlet.ShouldProcess("$prefix", "Unset NS configuration Object")) {
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type nsxmlnamespace -Action unset -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $response
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCUnsetNsxmlnamespace: Finished"
    }
}

function Invoke-ADCGetNsxmlnamespace {
<#
    .SYNOPSIS
        Get NS configuration object(s)
    .DESCRIPTION
        Get NS configuration object(s)
    .PARAMETER prefix 
       XML prefix. 
    .PARAMETER GetAll 
        Retreive all nsxmlnamespace object(s)
    .PARAMETER Count
        If specified, the count of the nsxmlnamespace object(s) will be returned
    .PARAMETER Filter
        Specify a filter
        -Filter @{ 'name'='<value>' }
    .PARAMETER ViewSummary
        When specified, only a summary of information is returned
    .EXAMPLE
        Invoke-ADCGetNsxmlnamespace
    .EXAMPLE 
        Invoke-ADCGetNsxmlnamespace -GetAll 
    .EXAMPLE 
        Invoke-ADCGetNsxmlnamespace -Count
    .EXAMPLE
        Invoke-ADCGetNsxmlnamespace -name <string>
    .EXAMPLE
        Invoke-ADCGetNsxmlnamespace -Filter @{ 'name'='<value>' }
    .NOTES
        File Name : Invoke-ADCGetNsxmlnamespace
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/nsxmlnamespace/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(DefaultParameterSetName = "Getall")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [Parameter(ParameterSetName = 'GetByResource')]
        [ValidateScript({ $_.Length -gt 1 })]
        [string]$prefix,

        [Parameter(ParameterSetName = 'Count', Mandatory = $true)]
        [Switch]$Count,
			
        [hashtable]$Filter = @{ },

        [Parameter(ParameterSetName = 'GetAll')]
        [Switch]$GetAll,

        [Parameter(ParameterSetName = 'GetAll')]
        [Parameter(ParameterSetName = 'Get')]
        [Switch]$ViewSummary

    )
    begin {
        Write-Verbose "Invoke-ADCGetNsxmlnamespace: Beginning"
    }
    process {
        try {
            if ( $PsCmdlet.ParameterSetName -eq 'Getall' ) {
                $Query = @{ }
                Write-Verbose "Retrieving all nsxmlnamespace objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsxmlnamespace -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'Count' ) {
                if ($PSBoundParameters.ContainsKey('Count')) { $Query = @{ 'count' = 'yes' } }
                Write-Verbose "Retrieving total count for nsxmlnamespace objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsxmlnamespace -Query $Query -Summary:$ViewSummary -Filter $Filter -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByArgument' ) {
                Write-Verbose "Retrieving nsxmlnamespace objects by arguments"
                $Arguments = @{ } 
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsxmlnamespace -Arguments $Arguments -GetWarning
            } elseif ( $PsCmdlet.ParameterSetName -eq 'GetByResource' ) {
                Write-Verbose "Retrieving nsxmlnamespace configuration for property 'prefix'"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsxmlnamespace -Resource $prefix -Summary:$ViewSummary -Filter $Filter -GetWarning
            } else {
                Write-Verbose "Retrieving nsxmlnamespace configuration objects"
                $response = Invoke-ADCNitroApi -ADCSession $ADCSession -Method GET -Type nsxmlnamespace -Summary:$ViewSummary -Query $Query -Filter $Filter -GetWarning
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            $response = $null
        }
        Write-Output $response
    }
    end {
        Write-Verbose "Invoke-ADCGetNsxmlnamespace: Ended"
    }
}

function Invoke-ADCReboot {
<#
    .SYNOPSIS
        Reboot NS configuration Object
    .DESCRIPTION
        Reboot NS configuration Object 
    .PARAMETER warm 
        Restarts the Citrix ADC software without rebooting the underlying operating system. The session terminates and you must log on to the appliance after it has restarted.  
        Note: This argument is required only for nCore appliances. Classic appliances ignore this argument.
    .EXAMPLE
        Invoke-ADCReboot 
    .NOTES
        File Name : Invoke-ADCReboot
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/reboot/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession),

        [boolean]$warm 

    )
    begin {
        Write-Verbose "Invoke-ADCReboot: Starting"
    }
    process {
        try {
            $Payload = @{

            }
            if ($PSBoundParameters.ContainsKey('warm')) { $Payload.Add('warm', $warm) }
            if ($PSCmdlet.ShouldProcess($Name, "Reboot NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type reboot -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $result
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCReboot: Finished"
    }
}

function Invoke-ADCShutdown {
<#
    .SYNOPSIS
        Shutdown NS configuration Object
    .DESCRIPTION
        Shutdown NS configuration Object 
    .EXAMPLE
        Invoke-ADCShutdown 
    .NOTES
        File Name : Invoke-ADCShutdown
        Version   : v2012.2411
        Author    : John Billekens
        Reference : https://developer-docs.citrix.com/projects/citrix-adc-nitro-api-reference/en/latest/configuration/ns/shutdown/
        Requires  : PowerShell v5.1 and up
                    ADC 11.x and up
    .LINK
        https://blog.j81.nl
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPasswordParams', '')]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseBOMForUnicodeEncodedFile', '')]
    param(
        [parameter(DontShow)]
        [hashtable]$ADCSession = (Invoke-ADCGetActiveSession) 

    )
    begin {
        Write-Verbose "Invoke-ADCShutdown: Starting"
    }
    process {
        try {
            $Payload = @{

            }

            if ($PSCmdlet.ShouldProcess($Name, "Shutdown NS configuration Object")) {
                $result = Invoke-ADCNitroApi -ADCSession $ADCSession -Method POST -Type shutdown -Payload $Payload -GetWarning
                #HTTP Status Code on Success: 200 OK
                #HTTP Status Code on Failure: 4xx <string> (for general HTTP errors) or 5xx <string> (for NetScaler-specific errors). The response payload provides details of the error
                Write-Output $result
            }
        } catch {
            Write-Verbose "ERROR: $($_.Exception.Message)"
            throw $_
        }
    }
    end {
        Write-Verbose "Invoke-ADCShutdown: Finished"
    }
}


